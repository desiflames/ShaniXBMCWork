//Frame 0
//  Action tag #0

if (appName == undefined || appName == null) 
{
    _global.currentApplication = "TVApp";
}
else 
{
    _global.currentApplication = appName;
}
var popbox_apptype = "standalone";
var mainApp = new com.jadoo.as2.JadooPlus.Application.MainApp();
System.security.allowDomain("*");
mainApp.startMainApp(_root);

//Sprite 299
//  Frame 89
//    Action tag #0

gotoAndPlay("loop");

//Sprite 325
//  Frame 30
//    Action tag #0

gotoAndPlay("loop");

//Sprite 615
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.MainApp
{
    var jadooApp = null;
    var mainPage = null;
    var mainAppMC = null;
    var parentMC = null;
    var loadingMC = null;
    var netStatusBaseMC = null;
    var applicationBaseMC = null;
    var fn = null;
    var keyListener = new Object();
    var defaultBackgroundMC = null;
    var jadooLogoX: Number = 1026;
    var jadooLogoY: Number = 35;

    function MainApp()
    {
        this.fn = {onUtilsInit: mx.utils.Delegate.create(this, this.onUtilsInit), onExitApp: mx.utils.Delegate.create(this, this.onExitApp), onRestartApp: mx.utils.Delegate.create(this, this.onRestartApp), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.stop();
        this.removeDefaultBackground();
        if (this.keyListener != null) 
        {
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.mainAppMC.loadingMC != null) 
        {
            removeMovieClip(this.mainAppMC.loadingMC);
        }
        if (this.mainPage != null) 
        {
            this.mainPage.onExitApp.removeListener(this, this.fn.onExitApp);
            this.mainPage.destroy();
            delete this.mainPage;
            this.mainPage = null;
        }
        if (this.jadooApp != null) 
        {
            this.jadooApp.onExitApp.removeListener(this, this.fn.onExitApp);
            this.jadooApp.onRestartApp.removeListener(this, this.fn.onRestartApp);
            this.jadooApp.destroy();
            delete this.jadooApp;
            this.jadooApp = null;
        }
        this.fn = null;
        removeMovieClip(this.mainAppMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeAll();
    }

    function startMainApp(parentMC)
    {
        this.parentMC = parentMC;
        var __reg3 = parentMC._url;
        var __reg4 = __reg3.lastIndexOf("/");
        com.jadoo.as2.JadooPlus.Utils.Config.jadooAppName = __reg3.substring(__reg4 + 1, __reg3.length);
        this.loadDefaultBackground();
        this.mainAppMC = parentMC.createEmptyMovieClip("mainAppMC", parentMC.getNextHighestDepth());
        this.createMsgTxtField();
        this.applicationBaseMC = parentMC.createEmptyMovieClip("applicationBaseMC", parentMC.getNextHighestDepth());
        this.netStatusBaseMC = parentMC.createEmptyMovieClip("netStatusBaseMC", parentMC.getNextHighestDepth());
        com.jadoo.as2.JadooPlus.Utils.Utils.init(this.fn.onUtilsInit);
        com.jadoo.as2.JadooPlus.Utils.CacheManager.init();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.init(this.netStatusBaseMC);
        __reg3 = null;
        __reg4 = null;
    }

    function loadDefaultBackground()
    {
        this.defaultBackgroundMC = this.parentMC.attachMovie("backgroundMC", "defaultBackgroundMC", this.parentMC.getNextHighestDepth());
        this.defaultBackgroundMC._visible = false;
    }

    function removeDefaultBackground()
    {
        if (this.defaultBackgroundMC != null) 
        {
            removeMovieClip(this.defaultBackgroundMC);
        }
    }

    function onUtilsInit(success)
    {
        if (success) 
        {
            this.removeDefaultBackground();
            this.launchApplication();
            return;
        }
        this.defaultBackgroundMC._visible = true;
        this.mainAppMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.BOXID_RETRIEVE_FAILED;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function createMsgTxtField()
    {
        this.mainAppMC.createTextField("errorTxt", this.mainAppMC.getNextHighestDepth(), 0, 360, 1280, 40);
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.size = 26;
        __reg2.align = "center";
        __reg2.bold = true;
        __reg2.color = 16555008;
        this.mainAppMC.errorTxt.setNewTextFormat(__reg2);
        __reg2 = null;
    }

    function launchApplication()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (_global.currentApplication == "Diagnostics") 
        {
            if (this.mainPage != null) 
            {
                delete this.mainPage;
                this.mainPage = null;
            }
            this.mainPage = new com.diagnostics.as2.MainPage();
            this.mainPage.create(this.applicationBaseMC);
            this.mainPage.onExitApp.addListener(this, this.fn.onExitApp);
            return;
        }
        if (this.jadooApp != null) 
        {
            delete this.jadooApp;
            this.jadooApp = null;
        }
        this.jadooApp = new com.jadoo.as2.JadooPlus.Application.JadooApp();
        this.jadooApp.startApp(this.applicationBaseMC);
        this.jadooApp.onExitApp.addListener(this, this.fn.onExitApp);
        this.jadooApp.onRestartApp.addListener(this, this.fn.onRestartApp);
    }

    function onRestartApp()
    {
        var __reg4 = this.parentMC._url;
        var __reg3 = __reg4.slice(0, __reg4.lastIndexOf("/"));
        __reg3 = __reg4.slice(0, __reg3.lastIndexOf("/")) + "/" + com.jadoo.as2.JadooPlus.Utils.Config.getJadooAppId() + "/" + com.jadoo.as2.JadooPlus.Utils.Config.getJadooAppName();
        if (_global.currentApplication == "MyJadoo") 
        {
            this.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=" + __reg3 + "&arg2=standalone&arg3=--flashvars appName=MyJadoo");
            return;
        }
        this.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=" + __reg3 + "&arg2=standalone");
    }

    function loadXML(url, onLoad)
    {
        var xml = new XML();
        xml.ignoreWhite = true;
        xml.load(url);
        xml.onLoad = function (success)
        {
            if (onLoad != null && onLoad != undefined) 
            {
                onLoad(success, xml);
            }
        }
        ;
        delete xml;
        xml = null;
    }

    function onExitApp()
    {
        this.destroy();
        _global.popbox_UI("quitAll");
        var __reg3 = new XML();
        __reg3.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=source");
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            this.onExitApp();
            return;
        }
    }

}

//Sprite 616
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.JadooApp
{
    var currBGImageIdx: Number = 0;
    var bgImageCount: Number = 0;
    var appUpdater = null;
    var fwUpdater = null;
    var parentMC = null;
    var keyListener = new Object();
    var viewType = null;
    var parentView = null;
    var loadingViewMC = null;
    var newBackgroundImage: String = "";
    var xml = null;
    var fn = null;
    var weather = null;
    var retryLoadXML: Boolean = true;
    var profileXML: Boolean = false;
    var itemStartIdx: Number = 0;
    var itemHighlightIdx: Number = 0;
    var userProfileIndex: Number = 0;
    var pageXmlIndex: Number = 0;
    var isOnPageBackEvent: Boolean = false;
    var initialBackgroundError: Boolean = false;
    var cache: Number = 1;
    var boxRegistration = null;
    var defaultBackgroundMC = null;
    var wifiMsgBox = null;
    var buttons = null;
    var onExitApp = null;
    var onRestartApp = null;
    var wasSearchEnabled = null;
    var searchString = null;
    var debugPostRetires: Number = 0;
    var deleteDebugSharedObj: Boolean = false;
    var wasPopupEnabled = null;
    var disclaimer = null;
    var currXMLUrl;
    var xmlUrl;

    function JadooApp()
    {
    }

    function startApp(parentMC)
    {
        this.parentMC = parentMC;
        _global.cacheXml = 1;
        this.fn = {onGetBgCachedFile: mx.utils.Delegate.create(this, this.onGetBgCachedFile), onLoadPageXml: mx.utils.Delegate.create(this, this.onLoadPageXml), onLoadBackgroundImage: mx.utils.Delegate.create(this, this.onLoadBackgroundImage), onBackgroundImageError: mx.utils.Delegate.create(this, this.onBackgroundImageError), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onLoadProfileXML: mx.utils.Delegate.create(this, this.onLoadProfileXML), onClearCache: mx.utils.Delegate.create(this, this.onClearCache), onUpdateSuccessfully: mx.utils.Delegate.create(this, this.onUpdateSuccessfully), onUpdateFailure: mx.utils.Delegate.create(this, this.onUpdateFailure), onNoUpdateAvailable: mx.utils.Delegate.create(this, this.onNoUpdateAvailable)};
        this.loadDefaultBackground();
        var __reg4 = parentMC.createEmptyMovieClip("viewBaseMC", parentMC.getNextHighestDepth());
        this.showLoadingClip();
        __reg4.createTextField("errorTxt", __reg4.getNextHighestDepth(), 0, 360 + parentMC.loadingViewMC._height, 1280, 40);
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.size = 34;
        __reg3.align = "center";
        __reg3.bold = false;
        __reg3.color = 16555008;
        __reg4.errorTxt.autoSize = "center";
        __reg4.errorTxt.wordWrap = true;
        __reg4.errorTxt.setNewTextFormat(__reg3);
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.init();
        com.jadoo.as2.JadooPlus.Features.Favorites.init();
        com.jadoo.as2.JadooPlus.Features.ResumeVOD.initializeResumeVODInfo();
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onOperationCompleted.addListener(this, this.onUserProfileOperationCompleted);
        this.initializeXmlSocketEvents();
        com.jadoo.as2.JadooPlus.Features.NavHistory.createHistory();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.weather = new com.jadoo.as2.JadooPlus.Features.Weather();
        this.onExitApp = new com.BigRoom.Event();
        this.onRestartApp = new com.BigRoom.Event();
    }

    function initializeXmlSocketEvents()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.init();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("SocketEvent", this, this.onSocketEvent);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("SystemEvent", this, this.onXmlSocketSystemEvent);
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SocketEvent", this, this.onSocketEvent);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SystemEvent", this, this.onXmlSocketSystemEvent);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.destroy();
        this.removeDefaultBackground();
        removeMovieClip(this.parentMC.viewBaseMC);
        this.weather.destroy();
        if (this.boxRegistration != null) 
        {
            delete this.boxRegistration;
            this.boxRegistration = null;
        }
        if (this.onExitApp != null) 
        {
            delete this.onExitApp;
            this.onExitApp = null;
        }
        if (this.onRestartApp != null) 
        {
            delete this.onRestartApp;
            this.onRestartApp = null;
        }
        if (this.appUpdater != null) 
        {
            this.appUpdater.onUpdateSuccessfully.removeListener(this, this.fn.onUpdateSuccessfully);
            this.appUpdater.onUpdateFailure.removeListener(this, this.fn.onUpdateFailure);
            this.appUpdater.onNoUpdateAvailable.removeListener(this, this.fn.onNoUpdateAvailable);
            this.appUpdater.destroy();
            delete this.appUpdater;
            this.appUpdater = null;
        }
        if (this.disclaimer != null) 
        {
            delete this.disclaimer;
            this.disclaimer = null;
        }
        delete this.weather;
        delete this.fn;
        delete this.keyListener;
        this.keyListener = null;
        this.newBackgroundImage = null;
    }

    function onSocketEvent(event)
    {
        this.onUtilsInit();
        event = null;
    }

    function onUtilsInit()
    {
        this.retryLoadXML = true;
        this.profileXML = true;
        this.currXMLUrl = com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL();
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.loadProfile(this.currXMLUrl, this.userProfileIndex, this.fn.onLoadProfileXML);
    }

    function onLoadProfileXML()
    {
        var __reg4 = arguments[0];
        var __reg5 = arguments[1];
        com.jadoo.as2.JadooPlus.Features.Debug.init();
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
        {
            if (__reg4) 
            {
                if (!com.jadoo.as2.JadooPlus.Features.Debug.isDebugInitialized()) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.init();
                }
                com.jadoo.as2.JadooPlus.Features.Debug.addListener("onPostData", this, this.onPostDebugData);
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("UserProfile_Loaded");
            }
            else if (__reg5) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("UserProfile_Timeout");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("UserProfile_Error");
            }
        }
        if (__reg4) 
        {
            var __reg3 = com.jadoo.as2.JadooPlus.Utils.Utils.getFirmwareVersion();
            var __reg6 = __reg3.lastIndexOf("-");
            __reg3 = __reg3.substr(0, __reg6);
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.firmwareVersion == __reg3) 
            {
                this.checkForAppUpgrade();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.fwUpdater = new com.jadoo.as2.JadooPlus.Application.FirmwareUpdater();
                this.fwUpdater.addListener(this, this.onNoFwUpdate);
                this.fwUpdater.checkForFirmwareUpdate(this.parentMC);
            }
            __reg6 = null;
            __reg3 = null;
        }
        else 
        {
            this.defaultBackgroundMC._visible = true;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.retryLoadXML) 
            {
                this.removeLoadingClip();
                this.retryToLoadXML();
                this.retryLoadXML = false;
            }
            else 
            {
                if (__reg5) 
                {
                    com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.USERPROFILE_XML_NOT_LOADED, "Initialize Xml", "NA", "NA");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.USERPROFILE_XML_TIMEOUT, "Initialize Xml", "NA", "NA");
                }
                this.removeLoadingClip();
                this.parentMC.viewBaseMC.errorTxt._y = 360;
                this.parentMC.viewBaseMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION;
            }
        }
        __reg4 = null;
        __reg5 = null;
    }

    function onNoFwUpdate()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.fwUpdater.removeListener(this, this.onNoFwUpdate);
        this.fwUpdater.destroy();
        delete this.fwUpdater;
        this.fwUpdater = null;
        if (arguments[0] == "Exit") 
        {
            this.onExitApp.notify();
            return;
        }
        this.checkForAppUpgrade();
    }

    function checkForAppUpgrade()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.appVersion != com.jadoo.as2.JadooPlus.Utils.Config.getAppVersion()) 
        {
            this.checkForNewAppVersion();
            return;
        }
        this.onNoUpdateAvailable();
    }

    function checkForNewAppVersion()
    {
        if (this.appUpdater != null) 
        {
            this.appUpdater.onUpdateSuccessfully.removeListener(this, this.fn.onUpdateSuccessfully);
            this.appUpdater.onUpdateFailure.removeListener(this, this.fn.onUpdateFailure);
            this.appUpdater.onNoUpdateAvailable.removeListener(this, this.fn.onNoUpdateAvailable);
            this.appUpdater.destroy();
            delete this.appUpdater;
            this.appUpdater = null;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.appUpdater = new com.jadoo.as2.JadooPlus.Application.AppUpdater();
        this.appUpdater.onUpdateSuccessfully.addListener(this, this.fn.onUpdateSuccessfully);
        this.appUpdater.onUpdateFailure.addListener(this, this.fn.onUpdateFailure);
        this.appUpdater.onNoUpdateAvailable.addListener(this, this.fn.onNoUpdateAvailable);
        this.removeLoadingClip();
        this.appUpdater.updateApps(this.parentMC);
    }

    function onUpdateSuccessfully()
    {
        var __reg6 = arguments;
        var __reg7 = __reg6[0];
        var __reg5 = this.parentMC._url;
        var __reg4 = __reg5.slice(0, __reg5.lastIndexOf("/"));
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (this.appUpdater != null) 
        {
            this.appUpdater.onUpdateSuccessfully.removeListener(this, this.fn.onUpdateSuccessfully);
            this.appUpdater.onUpdateFailure.removeListener(this, this.fn.onUpdateFailure);
            this.appUpdater.onNoUpdateAvailable.removeListener(this, this.fn.onNoUpdateAvailable);
            this.appUpdater.destroy();
            delete this.appUpdater;
            this.appUpdater = null;
        }
        __reg4 = __reg5.slice(0, __reg4.lastIndexOf("/")) + "/" + com.jadoo.as2.JadooPlus.Utils.Config.getJadooAppId() + "/" + com.jadoo.as2.JadooPlus.Utils.Config.getJadooAppName();
        if (_global.currentApplication == "MyJadoo") 
        {
            this.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=" + __reg4 + "&arg2=standalone&arg3=--flashvars appName=MyJadoo");
        }
        else 
        {
            this.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=" + __reg4 + "&arg2=standalone");
        }
        __reg6 = null;
        __reg7 = null;
        __reg5 = null;
        __reg4 = null;
    }

    function onUpdateFailure()
    {
        this.removeLoadingClip();
        this.onNoUpdateAvailable();
    }

    function onNoUpdateAvailable()
    {
        if (this.appUpdater != null) 
        {
            this.appUpdater.onUpdateSuccessfully.removeListener(this, this.fn.onUpdateSuccessfully);
            this.appUpdater.onUpdateFailure.removeListener(this, this.fn.onUpdateFailure);
            this.appUpdater.onNoUpdateAvailable.removeListener(this, this.fn.onNoUpdateAvailable);
            this.appUpdater.destroy();
            delete this.appUpdater;
            this.appUpdater = null;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.showLoadingClip();
        this.profileXML = false;
        com.jadoo.as2.JadooPlus.AdService.AdService.initialize(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getVideoAdURL(), com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getVideoAdFetchTime(), com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getPageAdURL());
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.initialize(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getErrCodeBaseURL());
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.cachePurge == 1) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearBoxCache(this.fn.onClearCache);
            return;
        }
        this.loadApp();
    }

    function onClearCache(success)
    {
        if (success) 
        {
            var __reg2 = new XML();
            __reg2.load(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.cachePurgeAckLink + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId());
        }
        this.loadApp();
    }

    function loadApp()
    {
        this.retryLoadXML = true;
        if (!com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isBoxActive()) 
        {
            this.defaultBackgroundMC._visible = true;
            this.removeLoadingClip();
            this.parentMC.viewBaseMC.errorTxt._y = 360;
            this.parentMC.viewBaseMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.boxStatusMessage();
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isRegistrationRequired()) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Registration_Required");
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isBoxRegistered()) 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Box_Registered");
                }
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.resetPassword()) 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.removePassword("reset");
                }
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.showDisclaimer) 
                {
                    this.removeLoadingClip();
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    if (this.disclaimer != null) 
                    {
                        delete this.disclaimer;
                        this.disclaimer = null;
                    }
                    this.disclaimer = new com.jadoo.as2.JadooPlus.Application.Disclaimer();
                    this.disclaimer.addListener(this, this.onDisclaimerEvent);
                    this.disclaimer.displayDisclaimer(this.parentMC);
                }
                else 
                {
                    this.currXMLUrl = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getBaseUrl();
                    if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                    {
                        com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_Home_Page");
                    }
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
                }
            }
            else 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Box_Not_Registered");
                }
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                if (this.boxRegistration != null) 
                {
                    delete this.boxRegistration;
                    this.boxRegistration = null;
                }
                this.boxRegistration = new com.jadoo.as2.JadooPlus.Application.BoxRegistration();
                this.boxRegistration.onRegistrationDone.addListener(this, this.onRegistrationDone);
                this.boxRegistration.onRegistrationCancel.addListener(this, this.onRegistrationCancel);
                this.removeLoadingClip();
                this.boxRegistration.registerBox(this.parentMC);
            }
            return;
        }
        this.currXMLUrl = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getBaseUrl();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
    }

    function onDisclaimerEvent(userAction)
    {
        this.disclaimer.removeListener(this, this.onDisclaimerEvent);
        this.disclaimer.destroy();
        delete this.disclaimer;
        this.disclaimer = null;
        if (userAction == "Accept") 
        {
            this.showLoadingClip();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_Home_Page");
            }
            this.currXMLUrl = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getBaseUrl();
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
        }
        else if (userAction == "Decline") 
        {
            this.quitApp();
        }
        userAction = null;
    }

    function loadDefaultBackground()
    {
        this.defaultBackgroundMC = this.parentMC.attachMovie("backgroundMC", "defaultBackgroundMC", this.parentMC.getNextHighestDepth());
        this.defaultBackgroundMC._visible = false;
    }

    function removeDefaultBackground()
    {
        if (this.defaultBackgroundMC != null) 
        {
            removeMovieClip(this.defaultBackgroundMC);
        }
    }

    function onRegistrationDone()
    {
        this.boxRegistration.destroy();
        delete this.boxRegistration;
        this.boxRegistration = null;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.showDisclaimer && _global.currentApplication == "MyJadoo") 
        {
            this.removeLoadingClip();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            if (this.disclaimer != null) 
            {
                delete this.disclaimer;
                this.disclaimer = null;
            }
            this.disclaimer = new com.jadoo.as2.JadooPlus.Application.Disclaimer();
            this.disclaimer.addListener(this, this.onDisclaimerEvent);
            this.disclaimer.displayDisclaimer(this.parentMC);
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.showLoadingClip();
        this.currXMLUrl = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getBaseUrl();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
    }

    function onRegistrationCancel()
    {
        this.boxRegistration.destroy();
        delete this.boxRegistration;
        this.boxRegistration = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.destroy();
        _global.popbox_UI("quitAll");
        var __reg3 = new XML();
        __reg3.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=source");
    }

    function onBackgroundImageError(targetMC, errorCode)
    {
        this.removeLoadingClip();
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.BACKGROUND_IMAGE_NOT_LOADED, "View", "NA", "NA");
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Background_Image_Error");
        }
        if (this.parentView == null) 
        {
            removeMovieClip(targetMC);
            targetMC = null;
            var __reg3 = this.parentMC.viewBaseMC.attachMovie("backgroundMC", "initialBackgroundMC", this.parentMC.viewBaseMC.getNextHighestDepth());
            this.initialBackgroundError = true;
            this.onLoadBackgroundImage();
        }
        else 
        {
            this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            this.parentView.restoreView();
        }
        targetMC = null;
        errorCode = null;
        __reg3 = null;
    }

    function onLoadBackgroundImage(targetMC)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Background_Image_Loaded");
        }
        if (!this.initialBackgroundError) 
        {
            if (this.parentMC.viewBaseMC.initialBackgroundMC != null) 
            {
                removeMovieClip(this.parentMC.viewBaseMC.initialBackgroundMC);
                this.parentMC.viewBaseMC.initialBackgroundMC = null;
            }
            ++this.bgImageCount;
            targetMC._source = this.newBackgroundImage;
        }
        this.initialBackgroundError = false;
        var __reg2 = undefined;
        if (this.isOnPageBackEvent) 
        {
            __reg2 = com.jadoo.as2.JadooPlus.Features.NavHistory.getLastPage();
            com.jadoo.as2.JadooPlus.Features.NavHistory.deleteLastPage();
        }
        else 
        {
            __reg2 = null;
        }
        this.saveHistory();
        this.viewType = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getViewType();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SystemEvent", this, this.onXmlSocketSystemEvent);
        if ((__reg0 = this.viewType) === "ferrariXML:3-TierView.xml") 
        {
            var __reg4 = new com.jadoo.as2.JadooPlus.Views.TierViews.ThreeTierView();
            __reg4.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg2, this.cache);
            this.parentView = __reg4;
            __reg4 = null;
        }
        else if (__reg0 === "ferrariXML:2-TierView.xml") 
        {
            var __reg3 = new com.jadoo.as2.JadooPlus.Views.TierViews.TwoTierView();
            __reg3.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg2, this.cache);
            this.parentView = __reg3;
            __reg3 = null;
        }
        else if (__reg0 === "ferrariXML:1-TierView.xml") 
        {
            var __reg5 = new com.jadoo.as2.JadooPlus.Views.TierViews.OneTierView();
            __reg5.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg2, this.cache);
            this.parentView = __reg5;
            __reg5 = null;
        }
        this.keyListener.onKeyDown = null;
        this.parentView.addListener("onEnterItem", this, this.onEnterItem);
        this.parentView.addListener("onAppRestart", this, this.onAppRestart);
        this.parentView.addListener("onPageBack", this, this.onPageBack);
        this.removeLoadingClip();
        this.isOnPageBackEvent = false;
        targetMC = null;
        __reg2 = null;
    }

    function loadBackgroundImage()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_Background_Image");
        }
        var __reg2 = this.parentMC.viewBaseMC.createEmptyMovieClip("backgroundMC" + this.bgImageCount, this.parentMC.viewBaseMC.getNextHighestDepth());
        if (this.parentMC.viewBaseMC.logoMC != undefined) 
        {
            this.parentMC.viewBaseMC.logoMC.swapDepths(__reg2);
        }
        if (this.parentMC.viewBaseMC.weatherMC != undefined && this.parentMC.viewBaseMC.weatherMC.getDepth() < __reg2.getDepth()) 
        {
            this.parentMC.viewBaseMC.weatherMC.swapDepths(__reg2);
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.newBackgroundImage, this.fn.onGetBgCachedFile, "IMG_BG");
        __reg2 = null;
    }

    function onGetBgCachedFile(filePath)
    {
        var __reg3 = new MovieClipLoader();
        var __reg2 = new Object();
        __reg2.onLoadInit = this.fn.onLoadBackgroundImage;
        __reg2.onLoadError = this.fn.onBackgroundImageError;
        __reg3.addListener(__reg2);
        __reg3.loadClip(filePath, this.parentMC.viewBaseMC["backgroundMC" + this.bgImageCount]);
        false;
        false;
        __reg3 = null;
        __reg2 = null;
    }

    function onLoadPageXml()
    {
        var __reg4 = arguments[0];
        var __reg5 = arguments[1];
        var __reg6 = arguments[2];
        this.xmlUrl = this.currXMLUrl;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            if (__reg4) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("PageXML_Loaded");
            }
            else if (__reg5) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("PageXML_Timeout");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("PageXML_Error");
            }
        }
        if (__reg6 == 204) 
        {
            this.removeLoadingClip();
            if (this.parentView == null) 
            {
                this.parentMC.viewBaseMC.errorTxt._y = 360;
                this.parentMC.viewBaseMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
            }
            else 
            {
                this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
                this.parentView.restoreView();
                _global.cacheXml = this.parentView.cacheXml();
            }
        }
        else if (__reg4) 
        {
            if (this.wasPopupEnabled || this.isOnPageBackEvent) 
            {
                this.removeDefaultBackground();
                this.newBackgroundImage = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getBackgroundImage();
                this.displayBGImage();
            }
            else if ((__reg0 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getCategoryStatus()) === "hidden") 
            {
                this.parentView.displayMessage("");
                this.parentView.restoreView("hidden");
            }
            else if (__reg0 === "geofiltered") 
            {
                this.parentView.displayMessage("");
                this.parentView.restoreView("geofiltered");
            }
            else if (__reg0 === "popup") 
            {
                var __reg7 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getPopupData();
                this.parentView.displayMessage("");
                this.parentView.restoreView("popup", __reg7);
            }
            else if (__reg0 === "active") 
            {
                this.removeDefaultBackground();
                this.newBackgroundImage = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getBackgroundImage();
                this.displayBGImage();
            }
        }
        else if (this.retryLoadXML) 
        {
            this.removeLoadingClip();
            this.retryToLoadXML();
            this.retryLoadXML = false;
        }
        else 
        {
            if (__reg5) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.PAGE_XML_TIMEOUT, "Page Xml", "NA", "NA");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.PAGE_XML_NOT_LOADED, "Page Xml", "NA", "NA");
            }
            this.removeLoadingClip();
            if (this.parentView == null) 
            {
                this.parentMC.viewBaseMC.errorTxt._y = 360;
                this.parentMC.viewBaseMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION;
            }
            else 
            {
                this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
                this.parentView.restoreView();
                this.parentView.onItemError();
                _global.cacheXml = this.parentView.cacheXml();
            }
        }
        __reg5 = null;
        __reg4 = null;
        __reg6 = null;
    }

    function retryToLoadXML()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Retrying");
        }
        if (this.parentView == null) 
        {
            this.defaultBackgroundMC._visible = true;
            this.parentMC.viewBaseMC.errorTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER_RETRYING;
        }
        else 
        {
            this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER_RETRYING);
        }
        if (this.profileXML) 
        {
            ++this.userProfileIndex;
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.loadProfile(this.currXMLUrl, this.userProfileIndex, this.fn.onLoadProfileXML);
            this.profileXML = false;
            return;
        }
        ++this.pageXmlIndex;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
    }

    function displayBGImage()
    {
        var __reg2 = undefined;
        var __reg3 = undefined;
        __reg2 = 0;
        while (__reg2 < this.bgImageCount) 
        {
            if (this.newBackgroundImage == this.parentMC.viewBaseMC["backgroundMC" + __reg2]._source) 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SystemEvent", this, this.onXmlSocketSystemEvent);
                this.parentMC.viewBaseMC["backgroundMC" + this.currBGImageIdx]._visible = false;
                this.parentMC.viewBaseMC["backgroundMC" + __reg2]._visible = true;
                if (this.isOnPageBackEvent) 
                {
                    __reg3 = com.jadoo.as2.JadooPlus.Features.NavHistory.getLastPage();
                    com.jadoo.as2.JadooPlus.Features.NavHistory.deleteLastPage();
                }
                else 
                {
                    __reg3 = null;
                }
                this.saveHistory();
                this.viewType = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getViewType();
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                if ((__reg0 = this.viewType) === "ferrariXML:3-TierView.xml") 
                {
                    var __reg5 = new com.jadoo.as2.JadooPlus.Views.TierViews.ThreeTierView();
                    __reg5.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg3, this.cache);
                    this.parentView = __reg5;
                    __reg5 = null;
                }
                else if (__reg0 === "ferrariXML:2-TierView.xml") 
                {
                    var __reg4 = new com.jadoo.as2.JadooPlus.Views.TierViews.TwoTierView();
                    __reg4.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg3, this.cache);
                    this.parentView = __reg4;
                    __reg4 = null;
                }
                else if (__reg0 === "ferrariXML:1-TierView.xml") 
                {
                    var __reg6 = new com.jadoo.as2.JadooPlus.Views.TierViews.OneTierView();
                    __reg6.create(this.parentMC, this.parentMC.viewBaseMC, this.xmlUrl, __reg3, this.cache);
                    this.parentView = __reg6;
                    __reg6 = null;
                }
                this.parentView.addListener("onEnterItem", this, this.onEnterItem);
                this.parentView.addListener("onAppRestart", this, this.onAppRestart);
                this.parentView.addListener("onPageBack", this, this.onPageBack);
                this.removeLoadingClip();
                this.isOnPageBackEvent = false;
                break;
            }
            ++__reg2;
        }
        this.currBGImageIdx = __reg2;
        if (__reg2 == this.bgImageCount) 
        {
            this.loadBackgroundImage();
        }
        __reg3 = null;
    }

    function onAppRestart()
    {
        this.onRestartApp.notify();
    }

    function onXmlSocketSystemEvent(eventStr)
    {
        if (this.wifiMsgBox != null) 
        {
            this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.wifiMsgBox.destroy();
            delete this.wifiMsgBox;
            this.wifiMsgBox = null;
        }
        if ((__reg0 = eventStr) === "System.WirelessUsbInserted") 
        {
            var __reg2 = this.parentMC.createEmptyMovieClip("wifiMsgBoxBaseMC", this.parentMC.getNextHighestDepth());
            var __reg3 = com.jadoo.as2.JadooPlus.Utils.Messages.WIRELESS_USB_NETWORK_ADAPTER_DETECTED;
            this.wifiMsgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
            this.wifiMsgBox.addListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.buttons = new Array("Yes", "No");
            this.wifiMsgBox.create(__reg2, "Wireless Setup", __reg3, true, this.buttons);
            __reg2 = null;
            __reg3 = null;
        }
        else 
        {
            __reg0 === "System.WirelessUsbRemoved";
        }
        eventStr = null;
    }

    function onWifiMsgBoxBtnPress(btnPressed)
    {
        this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
        this.wifiMsgBox.destroy();
        delete this.wifiMsgBox;
        this.wifiMsgBox = null;
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
        if (btnPressed == "Yes") 
        {
            var __reg3 = new XML();
            __reg3.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + com.jadoo.as2.JadooPlus.Utils.Config.WIFI_SETUP_PATH);
        }
        btnPressed = null;
    }

    function saveHistory()
    {
        if (this.parentView != null) 
        {
            if (this.isOnPageBackEvent == false) 
            {
                var __reg2 = new Object();
                __reg2.viewType = this.viewType;
                __reg2.pageTitle = this.parentView.getPageTitle();
                __reg2.pageUrl = this.parentView.getPageUrl();
                __reg2.cacheXml = this.parentView.cacheXml();
                __reg2.wasSearchEnabled = this.wasSearchEnabled;
                __reg2.searchString = this.searchString;
                if ((__reg0 = this.viewType) === "ferrariXML:3-TierView.xml") 
                {
                    __reg2.tier1ItemStartIdx = this.parentView.getTier1ItemsStartIdx();
                    __reg2.tier1ItemHighlightIdx = this.parentView.getTier1CurrentItemIdx();
                    __reg2.tier2ItemStartIdx = this.parentView.getTier2ItemsStartIdx();
                    __reg2.tier2ItemHighlightIdx = this.parentView.getTier2CurrentItemIdx();
                    __reg2.tier3ItemStartIdx = this.parentView.getTier3ItemsStartIdx();
                    __reg2.tier3ItemHighlightIdx = this.parentView.getTier3CurrentItemIdx();
                }
                else if (__reg0 === "ferrariXML:2-TierView.xml") 
                {
                    __reg2.tier1ItemStartIdx = this.parentView.getTier1ItemsStartIdx();
                    __reg2.tier1ItemHighlightIdx = this.parentView.getTier1CurrentItemIdx();
                    __reg2.tier2ItemStartIdx = this.parentView.getTier2ItemsStartIdx();
                    __reg2.tier2ItemHighlightIdx = this.parentView.getTier2CurrentItemIdx();
                }
                else if (__reg0 === "ferrariXML:1-TierView.xml") 
                {
                    __reg2.itemStartIdx = this.parentView.getItemStartIdx();
                    __reg2.itemHighlightIdx = this.parentView.getCurrentItemIdx();
                }
                com.jadoo.as2.JadooPlus.Features.NavHistory.addPage(__reg2);
                false;
                __reg2 = null;
            }
            else 
            {
                this.isOnPageBackEvent = false;
            }
            this.parentView.removeListener("onEnterItem", this, this.onEnterItem);
            this.parentView.removeListener("onAppRestart", this, this.onAppRestart);
            this.parentView.removeListener("onPageBack", this, this.onPageBack);
            this.parentView.destroy();
            delete this.parentView;
            this.parentView = null;
        }
    }

    function onEnterItem(itemUrl, cache, wasSearchEnabled, searchString, wasPopupEnabled)
    {
        if (cache == undefined || cache == null) 
        {
            _global.cacheXml = 1;
        }
        else 
        {
            _global.cacheXml = cache;
        }
        this.wasSearchEnabled = wasSearchEnabled;
        this.searchString = searchString;
        this.wasPopupEnabled = wasPopupEnabled;
        this.pageXmlIndex = 0;
        if (this.parentView != null) 
        {
            this.parentView.hideView();
        }
        this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        this.retryLoadXML = true;
        this.currXMLUrl = itemUrl;
        this.itemStartIdx = 0;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
        itemUrl = null;
        cache = null;
        wasSearchEnabled = null;
        searchString = null;
        wasPopupEnabled = null;
    }

    function onPageBack()
    {
        var __reg3 = com.jadoo.as2.JadooPlus.Features.NavHistory.getLastPage();
        var __reg4 = null;
        _global.cacheXml = __reg3.cacheXml;
        if (__reg3 == null) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
            {
                this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.POSTING_DEBUG_INFO);
                com.jadoo.as2.JadooPlus.Features.Debug.postDataToServer(this.deleteDebugSharedObj);
            }
            else 
            {
                this.quitApp();
            }
        }
        else 
        {
            this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
            this.retryLoadXML = true;
            if (this.parentView != null) 
            {
                this.parentView.hideView();
            }
            this.currXMLUrl = __reg3.pageUrl;
            this.pageXmlIndex = 0;
            this.itemStartIdx = 0;
            this.isOnPageBackEvent = true;
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.loadPageXML(this.currXMLUrl, this.itemStartIdx, this.pageXmlIndex, this.fn.onLoadPageXml);
        }
        __reg3 = null;
        __reg4 = null;
    }

    function onPostDebugData()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && arguments[0] == "success") 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.removeListener("onPostData", this, this.onPostDebugData);
            com.jadoo.as2.JadooPlus.Features.Debug.destroy();
            this.quitApp();
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && arguments[0] == "failure" && this.debugPostRetires < 1) 
        {
            this.parentView.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.POSTING_DEBUG_INFO);
            com.jadoo.as2.JadooPlus.Features.Debug.postDataToServer(this.deleteDebugSharedObj);
            ++this.debugPostRetires;
            return;
        }
        this.quitApp();
    }

    function quitApp()
    {
        _global.popbox_UI("quitAll");
        var __reg2 = new XML();
        __reg2.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=load_phf&arg1=source");
    }

    function showLoadingClip()
    {
        if (this.loadingViewMC == null) 
        {
            this.loadingViewMC = this.parentMC.attachMovie("loadingView", "loadingViewMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360});
        }
    }

    function removeLoadingClip()
    {
        if (this.loadingViewMC != null) 
        {
            removeMovieClip(this.loadingViewMC);
            this.loadingViewMC = null;
        }
    }

    function loadXML(url, onLoad)
    {
        var xml = new XML();
        xml.ignoreWhite = true;
        xml.load(url);
        xml.onLoad = function (success)
        {
            if (onLoad != null && onLoad != undefined) 
            {
                onLoad(success, xml);
            }
        }
        ;
        delete xml;
        xml = null;
    }

    function onUserProfileOperationCompleted(event)
    {
        if (event == "onWeatherDataLoaded") 
        {
            if (_global.currentApplication != "MyJadoo") 
            {
                this.weather.init(arguments[1], arguments[2]);
            }
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            this.parentMC.viewBaseMC.errorTxt.htmlText = "";
            if (com.jadoo.as2.JadooPlus.Features.NavHistory.isEmpty == false) 
            {
                this.onPageBack();
            }
            else 
            {
                this.onExitApp.notify();
            }
            return;
        }
    }

}

//Sprite 617
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.AppUpdater
{
    var appId: String = "";
    var appVerId: String = "";
    var localAppVerId: String = "";
    var jadooAppVerId: String = "";
    var diagnosticAppVerId: String = "";
    var firmwareVer: String = "";
    var sdkVer: String = "";
    var sessionId: String = "";
    var newJadooAppPath: String = "";
    var newAppVerId = null;
    var newJadooAppVerId = null;
    var newDiagnosticAppVerId = null;
    var currentAppToUpdate = null;
    var progBarXPos: Number = 300;
    var progBarYPos: Number = 364;
    var currentProgress: Number = 0;
    var responseBaseX: Number = 126;
    var responseBaseY: Number = 250;
    var btnOffset: Number = 20;
    var responseMCWidth: Number = 1028;
    var responseMCHeight: Number = 200;
    var currBtnIdx: Number = 0;
    var keyListener = null;
    var userResponseBaseMC = null;
    var btnTextFormat = null;
    var appUpdateBaseMC = null;
    var barMaskMC = null;
    var barMC = null;
    var okBtnMC = null;
    var noBtnMC = null;
    var percentTxtField = null;
    var statusTxtField = null;
    var fn = null;
    var parentMC = null;
    static var xml = null;
    var onUpdateSuccessfully = null;
    var onUpdateFailure = null;
    var onNoUpdateAvailable = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var errorText = null;

    function AppUpdater()
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onGetFirmwareVersion: mx.utils.Delegate.create(this, this.onGetFirmwareVersion), onGetSDKVersion: mx.utils.Delegate.create(this, this.onGetSDKVersion), onGetSessionID: mx.utils.Delegate.create(this, this.onGetSessionID), onUpdateApp: mx.utils.Delegate.create(this, this.onUpdateApp), onGetInstallProgress: mx.utils.Delegate.create(this, this.onGetInstallProgress), onGetAppLocalVersion: mx.utils.Delegate.create(this, this.onGetAppLocalVersion), onCheckAppsUpdate: mx.utils.Delegate.create(this, this.onCheckAppsUpdate), onGetAppDetail: mx.utils.Delegate.create(this, this.onGetAppDetail), getInstallProgress: mx.utils.Delegate.create(this, this.getInstallProgress), onInstallationDone: mx.utils.Delegate.create(this, this.onInstallationDone)};
        this.onUpdateSuccessfully = new com.BigRoom.Event();
        this.onUpdateFailure = new com.BigRoom.Event();
        this.onNoUpdateAvailable = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function destroy()
    {
        removeMovieClip(this.appUpdateBaseMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.onUpdateSuccessfully != null) 
        {
            delete this.onUpdateSuccessfully;
            this.onUpdateSuccessfully = null;
        }
        if (this.onUpdateFailure != null) 
        {
            delete this.onUpdateFailure;
            this.onUpdateFailure = null;
        }
        if (this.onNoUpdateAvailable != null) 
        {
            delete this.onNoUpdateAvailable;
            this.onNoUpdateAvailable = null;
        }
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        this.fn = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function updateApps(parentMC)
    {
        this.parentMC = parentMC;
        this.appUpdateBaseMC = parentMC.createEmptyMovieClip("appUpdateBaseMC", parentMC.getNextHighestDepth());
        this.loadBackground();
        this.currentAppToUpdate = com.jadoo.as2.JadooPlus.Utils.Config.getJadooAppId();
        this.displayLoadingMC();
        this.getLocalVersionIds(this.currentAppToUpdate);
    }

    function getLocalVersionIds(appId)
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=get_app_details&arg1=" + com.jadoo.as2.JadooPlus.Utils.Config.DATABASE_PATH + "&arg2=" + appId, this.fn.onGetAppLocalVersion);
    }

    function onGetAppLocalVersion(success, xmlUrl)
    {
        if (success) 
        {
            this.localAppVerId = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/versionID").firstChild.nodeValue;
            if (this.localAppVerId == null) 
            {
                this.removeLoadingMC();
                this.onUpdateFailure.notify();
            }
            else 
            {
                this.getFirmwareVersion();
            }
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function getFirmwareVersion()
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_firmware_version", this.fn.onGetFirmwareVersion);
    }

    function onGetFirmwareVersion(success, xmlUrl)
    {
        if (success) 
        {
            this.firmwareVer = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/firmwareVersion").firstChild.nodeValue;
            if (this.firmwareVer == null) 
            {
                this.removeLoadingMC();
                this.onUpdateFailure.notify();
            }
            else 
            {
                this.getSDKVersion();
            }
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function getSDKVersion()
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=get_sdk_version", this.fn.onGetSDKVersion);
    }

    function onGetSDKVersion(success, xmlUrl)
    {
        if (success) 
        {
            this.sdkVer = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/version").firstChild.nodeValue;
            if (this.sdkVer == null) 
            {
                this.removeLoadingMC();
                this.onUpdateFailure.notify();
            }
            else 
            {
                this.getSessionIdFromServer();
            }
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function getSessionIdFromServer()
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.POPBOX_SERVER_PATH + "/c/client/sessId?mac=" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "&fwVer=" + this.firmwareVer + "&sdkVer=" + this.sdkVer, this.fn.onGetSessionID);
    }

    function onGetSessionID(success, xmlUrl)
    {
        if (success) 
        {
            this.sessionId = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/sid").firstChild.nodeValue;
            if (this.sessionId == null) 
            {
                this.removeLoadingMC();
                this.onUpdateFailure.notify();
            }
            else 
            {
                this.checkAppsUpdate();
            }
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function checkAppsUpdate()
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.POPBOX_SERVER_PATH + "/c/client/findUpdates;jsessionid=" + this.sessionId + "?mac=" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "&fwVer=" + this.firmwareVer + "&sdkVer=" + this.sdkVer + "&appVerIds=" + this.localAppVerId, this.fn.onCheckAppsUpdate);
    }

    function onCheckAppsUpdate(success, xmlUrl)
    {
        if (success) 
        {
            this.newAppVerId = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/list/app").attributes.newAppVerId;
            if (this.newAppVerId && this.newAppVerId != null && this.newAppVerId != undefined) 
            {
                this.removeLoadingMC();
                this.getUserResponse();
            }
            else 
            {
                this.removeLoadingMC();
                this.onNoUpdateAvailable.notify();
            }
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function getAppsUpdate()
    {
        this.getAppsDetail();
    }

    function getAppsDetail()
    {
        if (this.newAppVerId && this.newAppVerId != null && this.newAppVerId != undefined) 
        {
            this.getAppDetail(this.currentAppToUpdate, this.newAppVerId);
            return;
        }
        this.removeLoadingMC();
        this.onNoUpdateAvailable.notify();
    }

    function getAppDetail(appId, newAppVerId)
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.POPBOX_SERVER_PATH + "/c/client/appDetails;jsessionid=" + this.sessionId + "?mac=" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "&fwVer=" + this.firmwareVer + "&sdkVer=" + this.sdkVer + "&appId=" + appId + "&appVerId=" + newAppVerId, this.fn.onGetAppDetail);
    }

    function onGetAppDetail(success, xmlUrl)
    {
        if (success) 
        {
            var __reg3 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response");
            var __reg2 = {appId: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/appId").firstChild.nodeValue, appVerId: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/appVerId").firstChild.nodeValue, tnExt: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/tnExt").firstChild.nodeValue, cateCodecs: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/cateCodes").firstChild.nodeValue, cate: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/cate").firstChild.nodeValue, appName: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/name").firstChild.nodeValue, version: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/ver").firstChild.nodeValue, minSdkVersion: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/minSdkVer").firstChild.nodeValue, authorName: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/authorName").firstChild.nodeValue, desc: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/desc").firstChild.nodeValue, appPath: mx.xpath.XPathAPI.selectSingleNode(__reg3, "response/appEntry").firstChild.nodeValue};
            this.newJadooAppPath = __reg2.appPath;
            var __reg4 = com.jadoo.as2.JadooPlus.Utils.Config.POPBOX_SERVER_PATH + "/c/client/download;jsessionid=" + this.sessionId + "?mac=" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "&fwVer=" + this.firmwareVer + "&sdkVer=" + this.sdkVer + "&appVerId=" + __reg2.appVerId;
            com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=update_app&arg1=" + escape(com.jadoo.as2.JadooPlus.Utils.Config.DATABASE_PATH) + "&arg2=" + escape(__reg4) + "&arg3=" + escape("|" + __reg2.cateCodecs + "|") + "&arg4=" + escape("|" + __reg2.cate + "|") + "&arg5=" + __reg2.appId + "&arg6=" + __reg2.appVerId + "&arg7=" + escape(__reg2.version) + "&arg8=" + escape(__reg2.appName) + "&arg9=" + escape(__reg2.desc) + "&arg10=" + escape(__reg2.authorName) + "&arg11=" + escape(__reg2.appPath) + "&arg12=&arg13=" + escape(__reg2.tnExt), this.fn.onUpdateApp);
            this.removeLoadingMC();
            this.displayUpdateProgress();
            __reg2 = null;
            __reg4 = null;
            __reg3 = null;
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function onUpdateApp(success, xmlUrl)
    {
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/returnValue").firstChild.nodeValue;
            if (__reg2 == 0) 
            {
                this.getInstallProgress();
            }
            else 
            {
                this.removeLoadingMC();
                this.onUpdateFailure.notify();
            }
            __reg2 = null;
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function getInstallProgress()
    {
        com.jadoo.as2.JadooPlus.Application.AppUpdater.loadXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=get_app_status", this.fn.onGetInstallProgress);
    }

    function onGetInstallProgress(success, xmlUrl)
    {
        if (success) 
        {
            var __reg3 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/status").firstChild.nodeValue;
            var __reg4 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.firstChild, "theDavidBox/response/progress").firstChild.nodeValue;
            if (__reg3 == 0 || __reg3 == 1) 
            {
                this.moveProgressBar(this.currentProgress, 100, "Installing");
            }
            else if (__reg3 == 2) 
            {
                this.moveProgressBar(Math.round(__reg4 * 70 / 100), 70, "Initializing");
                _global.setTimeout(this.fn.getInstallProgress, 1);
            }
            else if (__reg3 == 3) 
            {
                this.moveProgressBar(Math.round(__reg4 * 70 / 100), 70, "Downloading");
                _global.setTimeout(this.fn.getInstallProgress, 1);
            }
            else if (__reg3 == 4) 
            {
                this.moveProgressBar(70, 72, "Extracting");
                _global.setTimeout(this.fn.getInstallProgress, 1);
            }
            else if (__reg3 == 5) 
            {
                this.moveProgressBar(72, 74, "Removing");
                _global.setTimeout(this.fn.getInstallProgress, 1);
            }
            else if (__reg3 == 6) 
            {
                this.moveProgressBar(74, 99, "Installing");
                _global.setTimeout(this.fn.getInstallProgress, 1);
            }
            else if (__reg3 == 11) 
            {
                this.onUpdateFailure.notify();
            }
            else if (__reg3 == 7 || __reg3 == 8 || __reg3 == 9 || __reg3 == 10 || __reg3 == 12 || __reg3 == 13 || __reg3 == 14 || __reg3 == 15) 
            {
                this.onUpdateFailure.notify();
            }
            else 
            {
                this.onUpdateFailure.notify();
            }
            __reg3 = null;
            __reg4 = null;
            return;
        }
        this.removeLoadingMC();
        this.onUpdateFailure.notify();
    }

    function loadBackground()
    {
        var __reg2 = this.appUpdateBaseMC.attachMovie("backgroundMC", "backgroundMC", this.appUpdateBaseMC.getNextHighestDepth(), {_x: 0, _y: 0});
        this.appUpdateBaseMC._visible = false;
        __reg2 = null;
    }

    function displayUpdateProgress()
    {
        this.appUpdateBaseMC._visible = true;
        this.attachProgressBar();
    }

    function attachProgressBar()
    {
        var __reg3 = this.appUpdateBaseMC.createEmptyMovieClip("progressBarBaseMC", this.appUpdateBaseMC.getNextHighestDepth());
        __reg3._x = this.progBarXPos;
        __reg3._y = this.progBarYPos;
        var __reg4 = __reg3.attachMovie("progressBarGlowMC", "progressBarGlowMC", __reg3.getNextHighestDepth());
        this.barMC = __reg4.attachMovie("progressBar", "barMC", __reg4.getNextHighestDepth());
        this.barMC._x = (__reg4._width - this.barMC._width) / 2;
        this.barMC._y = (__reg4._height - this.barMC._height) / 2;
        this.barMaskMC = __reg4.attachMovie("maskMC", "barMaskMC", __reg4.getNextHighestDepth(), {_width: 0, _height: this.barMC._height + 5});
        this.barMaskMC._x = (__reg4._width - this.barMC._width) / 2;
        this.barMaskMC._y = (__reg4._height - this.barMC._height) / 2;
        this.barMC.setMask(this.barMaskMC);
        this.statusTxtField = __reg3.createTextField("statusTxtField", __reg3.getNextHighestDepth(), this.barMC._x, -10, 100, 40);
        this.statusTxtField.autoSize = true;
        this.percentTxtField = __reg3.createTextField("percentTxtField", __reg3.getNextHighestDepth(), this.barMC._x, -10, 100, 40);
        this.percentTxtField.autoSize = true;
        var __reg5 = this.appUpdateBaseMC.createTextField("titleTxtField", this.appUpdateBaseMC.getNextHighestDepth(), 0, 0, 100, 40);
        __reg5.autoSize = true;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.size = 28;
        __reg2.align = "center";
        __reg2.bold = false;
        __reg2.color = 16777215;
        this.percentTxtField.setNewTextFormat(__reg2);
        this.statusTxtField.setNewTextFormat(__reg2);
        __reg2.size = 38;
        __reg5.setNewTextFormat(__reg2);
        __reg5.htmlText = "Application Update";
        __reg5._x = (this.appUpdateBaseMC._width - __reg5.textWidth) / 2;
        __reg5._y = 250;
        __reg3 = null;
        __reg4 = null;
        __reg2 = null;
        __reg5 = null;
    }

    function moveProgressBar(min, max, statusTxt)
    {
        if (this.currentProgress < min) 
        {
            this.currentProgress = min;
        }
        else if (this.currentProgress >= min && this.currentProgress < max) 
        {
            ++this.currentProgress;
        }
        this.statusTxtField.htmlText = statusTxt;
        this.percentTxtField.htmlText = this.currentProgress.toString() + " %";
        this.percentTxtField._x = this.barMC._x + this.barMC._width - this.percentTxtField.textWidth;
        if (max == 100) 
        {
            this.barMaskMC._width = this.barMC._width + 5;
            this.onProgressComplete();
            return;
        }
        this.barMaskMC._width = this.currentProgress * (this.barMC._width / 100);
    }

    function onProgressComplete()
    {
        this.statusTxtField.htmlText = "Application updated successfully";
        this.percentTxtField.htmlText = "100 %";
        this.percentTxtField._x = this.barMC._x + this.barMC._width - this.percentTxtField.textWidth;
        _global.setTimeout(this.fn.onInstallationDone, 2000);
    }

    function onInstallationDone()
    {
        this.onUpdateSuccessfully.notify(this.newJadooAppPath);
    }

    static function loadXML(url, onLoad)
    {
        if (com.jadoo.as2.JadooPlus.Application.AppUpdater.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Application.AppUpdater.xml;
            com.jadoo.as2.JadooPlus.Application.AppUpdater.xml = null;
        }
        com.jadoo.as2.JadooPlus.Application.AppUpdater.xml = new XML();
        com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.load(url);
        com.jadoo.as2.JadooPlus.Application.AppUpdater.xml.onLoad = function (success)
        {
            if (onLoad != null && onLoad != undefined) 
            {
                onLoad(success, com.jadoo.as2.JadooPlus.Application.AppUpdater.xml);
            }
        }
        ;
    }

    function getUserResponse()
    {
        this.appUpdateBaseMC._visible = true;
        this.userResponseBaseMC = this.appUpdateBaseMC.createEmptyMovieClip("userResponseBaseMC", this.appUpdateBaseMC.getNextHighestDepth());
        this.userResponseBaseMC._x = this.responseBaseX;
        this.userResponseBaseMC._y = this.responseBaseY;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.setMessageTxt();
        this.displayButtons();
    }

    function setMessageTxt()
    {
        var __reg3 = this.userResponseBaseMC.createTextField("messageText", this.userResponseBaseMC.getNextHighestDepth(), 0, 0, this.responseMCWidth, 60);
        __reg3.autoSize = true;
        __reg3.wordWrap = true;
        var __reg2 = new TextFormat();
        __reg2.color = 16777215;
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 34;
        __reg2.bold = true;
        __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.APPLICATION_UPDATE_AVAILABLE;
        __reg3.setTextFormat(0, 94, __reg2);
        __reg2.color = 16711680;
        __reg3.setTextFormat(94, 154, __reg2);
        __reg2.color = 16777215;
        __reg3.setTextFormat(154, 211, __reg2);
        __reg3._x = (this.responseMCWidth - __reg3._width) / 2;
        __reg3._y = 50;
        __reg3 = null;
        __reg2 = null;
    }

    function displayButtons()
    {
        var __reg3 = this.userResponseBaseMC.createEmptyMovieClip("btnBaseMC", this.userResponseBaseMC.getNextHighestDepth());
        this.okBtnMC = __reg3.createEmptyMovieClip("okBtnMC", __reg3.getNextHighestDepth());
        this.createButton(this.okBtnMC, "OK", 0, this.responseMCHeight - 60, true);
        this.okBtnMC._x = (this.responseMCWidth - this.okBtnMC._width) / 2;
        this.okBtnMC._y = this.userResponseBaseMC.messageText._height + 15;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 28;
        __reg2.bold = true;
        __reg2.color = 16750898;
        this.errorText = this.userResponseBaseMC.createTextField("errorText", this.userResponseBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.errorText.autoSize = true;
        this.errorText.setNewTextFormat(__reg2);
        this.errorText.htmlText = "";
        this.errorText._x = this.okBtnMC._x;
        this.errorText._y = this.userResponseBaseMC.messageText._height + this.userResponseBaseMC.messageText._y + 20;
        false;
        __reg2 = null;
        __reg3 = null;
    }

    function setErrorText(errorMessage)
    {
        this.errorText.htmlText = errorMessage;
        this.errorText._x = (this.responseMCWidth - this.errorText._width) / 2;
        errorMessage = null;
    }

    function createButton(buttonMC, btnTitle, xPos, yPos, enable)
    {
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        this.btnTextFormat = new TextFormat();
        var __reg2 = buttonMC.attachMovie("infoBtnEnb", "btnMC", buttonMC.getNextHighestDepth());
        this.btnTextFormat.font = "Arial";
        this.btnTextFormat.align = "center";
        this.btnTextFormat.size = 24;
        this.btnTextFormat.bold = true;
        if (enable) 
        {
            buttonMC._alpha = 100;
        }
        else 
        {
            buttonMC._alpha = 25;
        }
        __reg2._x = xPos;
        __reg2._y = yPos;
        var __reg3 = buttonMC.createTextField("btnText", buttonMC.getNextHighestDepth(), __reg2._x, __reg2._y, __reg2._width, __reg2._height);
        __reg3.autoSize = true;
        this.btnTextFormat.color = 16777215;
        __reg3.setNewTextFormat(this.btnTextFormat);
        __reg3.htmlText = btnTitle;
        __reg3._x = __reg2._x + (__reg2._width - __reg3._width) / 2;
        __reg3._y = __reg2._y + (__reg2._height - __reg3._height) / 2;
        __reg2 = null;
        __reg3 = null;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 13) 
        {
            if (this.netStatus == "Up") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                removeMovieClip(this.userResponseBaseMC);
                this.displayLoadingMC();
                this.getAppsUpdate();
            }
            else 
            {
                this.setErrorText(this.netErrorStr);
            }
            return;
        }
    }

    function displayLoadingMC()
    {
        var __reg2 = this.parentMC.attachMovie("loadingView", "loadingMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360});
        __reg2 = null;
    }

    function removeLoadingMC()
    {
        if (this.parentMC.loadingMC != null) 
        {
            removeMovieClip(this.parentMC.loadingMC);
        }
    }

}

//Sprite 618
//  InitClip
dynamic class com.BigRoom.Event
{
    var _listeners;

    function Event()
    {
        this._listeners = new Array();
    }

    function addListener(listener, method)
    {
        this.removeListener(listener, method);
        this._listeners.unshift({listener: listener, method: method});
    }

    function removeListener(listener, method)
    {
        var __reg2 = this._listeners.length;
        for (;;) 
        {
            if (!(__reg2--)) 
            {
                return;
            }
            var __reg3 = this._listeners[__reg2];
            if (__reg3.listener == listener && __reg3.method == method) 
            {
                this._listeners.splice(__reg2, 1);
                return undefined;
            }
        }
    }

    function notify()
    {
        var __reg5 = arguments;
        var __reg4 = this._listeners.length;
        for (;;) 
        {
            if (!(__reg4--)) 
            {
                return;
            }
            var __reg3 = this._listeners[__reg4];
            __reg3.method.apply(__reg3.listener, __reg5);
        }
    }

    function hasListeners()
    {
        return this._listeners.length > 0;
    }

}

//Sprite 619
//  InitClip
dynamic class mx.utils.Delegate extends Object
{
    var func;

    function Delegate(f)
    {
        super();
        this.func = f;
    }

    static function create(obj, func)
    {
        var __reg2 = function ()
        {
            var __reg2 = arguments.callee.target;
            var __reg3 = arguments.callee.func;
            return __reg3.apply(__reg2, arguments);
        }
        ;
        __reg2.target = obj;
        __reg2.func = func;
        return __reg2;
    }

    function createDelegate(obj)
    {
        return mx.utils.Delegate.create(obj, this.func);
    }

}

//Sprite 620
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.Messages
{
    static var BOXID_RETRIEVE_FAILED: String = "Unable to retrieve Box ID. Please try again";
    static var NEW_FIRMWARE_VERSION_AVAILABLE: String = "Firmware Upgrade is available. Please press the \'Enter\' button on your remote to continue. Please DO NOT TURN OFF YOUR BOX OR DISCONNECT FROM INTERNET until the upgrade is complete. It will take 15 to 30 minutess to download and install the new firmware. On slow internet connections it will take even more time to complete the upgrade process.";
    static var APPLICATION_UPDATE_AVAILABLE: String = "Application Upgrade is available. Please press the \'Enter\' button on your remote to continue. Please DO NOT TURN OFF YOUR BOX OR DISCONNECT FROM INTERNET until the upgrade is complete.";
    static var UNABLE_TO_CONNECT_TO_SERVER: String = "Unable to connect to the server. Please try again";
    static var UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION: String = "Unable to connect to the server. Please check your Internet connection and try again";
    static var UNABLE_TO_RETRIEVE_INFO_FROM_SERVER: String = "Unable to retrieve information from the server, Please try again";
    static var UNABLE_TO_RETRIEVE_INFO_FROM_SERVER_CHECK_CONNECTION: String = "Unable to retrieve information from the server, Please check your Internet connection and try again";
    static var UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION: String = "Unable to retrieve data from the server. Please check your Internet connection and try again";
    static var CONNECTING_TO_SERVER_RETRYING: String = "Connecting to server ... retrying";
    static var CONNECTING_TO_SERVER: String = "Connecting to the server ... Please wait";
    static var UNABLE_TO_FETCH_EPG_FROM_SERVER: String = "Unable to fetch EPG from server. Please try again";
    static var UNABLE_TO_CONNECT_TO_INTERNET_CHECK_SETTINGS: String = "Unable to connect to Internet. Please check your network settings";
    static var INTERNET_CONNECTION_IS_BACK_ONLINE: String = "Internet connection is back online";
    static var WIRELESS_USB_NETWORK_ADAPTER_DETECTED: String = "Wireless USB Network Adapter detected. Do you want to start the setup wizard ?";
    static var NETWORK_LINK_DOWN: String = "Network link down. Network cable unplugged or wireless link down";
    static var RETRIEVING: String = "Retrieving...";
    static var CONTENT_NOT_AVAILABLE: String = "Content not available";
    static var NO_CONTENT_TO_SHOW: String = "No content to show";
    static var NO_CONTENT_TO_SHOW_ON_PAGE: String = "No content to show on this page";
    static var NO_PROGRAMS_TO_SHOW: String = "No Programs to Show";
    static var UNABLE_TO_LOAD_CHANNEL_LIST: String = "Unable to load channel list, please try again";
    static var STREAM_TEMPORARILY_NOT_AVAILABLE: String = "Stream is temporarily not available. Please try again";
    static var STREAM_NOT_FOUND: String = "Stream not found";
    static var UNABLE_TO_INITIALIZE_PLAYER: String = "Unable to initialize player";
    static var UNABLE_TO_PLAY: String = "Unable to play";
    static var UNABLE_TO_PLAY_VIDEO_NOT_FOUND: String = "Unable to play the video. Video not found";
    static var UNABLE_TO_PLAY_VIDEO_FILE_STRUCTURE_INVALID: String = "Unable to play the video. File structure invalid";
    static var UNABLE_TO_PLAY_VIDEO_NO_SUPPORTED_TRACK: String = "Unable to play the video. No supported track found";
    static var UNABLE_TO_PLAY_VIDEO_CANNOT_LOAD_PLAYER: String = "Unable to play the video. Can not load player";
    static var UNABLE_TO_PLAY_VIDEO_PLAYBACK_NOT_SUPPORTED: String = "Unable to play the video. Video playback is not supported";
    static var UNABLE_TO_PLAY_REQUESTED_CONTENT: String = "Unable to play the requested content";
    static var UNABLE_TO_PLAY_UNKNOWN_ERROR: String = "Unable to play the file due to ERROR_UNKNOWN.";
    static var UNABLE_TO_PLAY_INVALID_FILE: String = "Unable to play the file due to INVALID_FILE.";
    static var UNABLE_TO_PLAY_OPEN_FILE_ERROR: String = "Unable to play the file due to OPEN_FILE_ERROR.";
    static var UNABLE_TO_PLAY_READ_FILE_ERROR: String = "Unable to play the file due to READ_FILE_ERROR.";
    static var UNABLE_TO_PLAY_CONNECTION_ERROR: String = "Unable to play due to CONNECTION_ERROR.";
    static var UNABLE_TO_PLAY_DETECTION_ERROR: String = "Unable to play the file due to DETECTION_ERROR.";
    static var UNABLE_TO_PLAY_DISC_ERROR: String = "Unable to play the file due to DISC_ERROR.";
    static var UNABLE_TO_PLAY_DISC_REGION_ERROR: String = "Unable to play the file due to DISC_REGION_ERROR.";
    static var UNABLE_TO_PLAY_SYSTEM_ERROR: String = "Unable to play the file due to SYSTEM_ERROR.";
    static var UNABLE_TO_PLAY_NETWORK_ERROR: String = "Unable to play the file due to NETWORK_ERROR.";
    static var UNABLE_TO_PLAY_FORMAT_NOT_SUPPORTED: String = "Unable to play the file due to FORMAT_NOT_SUPPORTED.";
    static var UNABLE_TO_UNSUBSCRIBE_FROM_GROUP: String = "Unable to unsubscribe from the group ";
    static var SUCCESSFULLY_UNSUBSCRIBED_FROM_GROUP: String = "You have successfully unsubscribed from the group.";
    static var UNABLE_TO_SUBSCRIBE_TO_GROUP: String = "Unable to subscribe to the group ";
    static var SUCCESSFULLY_SUBSCRIBED_TO_GROUP: String = "You have successfully subscribed to the group.";
    static var UNABLE_TO_UNSUBSCRIBE_FROM_CHANNEL: String = "Unable to unsubscribe from the channel.";
    static var SUCCESSFULLY_UNSUBSCRIBED_FROM_CHANNEL: String = "You have successfully unsubscribed from the channel.";
    static var UNABLE_TO_SUBSCRIBE_TO_CHANNEL: String = "Unable to subscribe to the channel.";
    static var SUCCESSFULLY_SUBSCRIBED_TO_CHANNEL: String = "You have successfully subscribed to the channel.";
    static var PRIVATE_GROUP_REQUEST_SENT: String = "This is a private group, your request is sent to the owner for approval";
    static var ABOVE_FIELDS_REQUIRED: String = "Above field(s) are required";
    static var PASSWORD_ENTERED_IS_INCORRECT: String = "Password you entered is incorrect";
    static var ENTER_VALID_PASSWORD: String = "Please enter valid password";
    static var OLD_PASSWORD_ENTERED_IS_INCORRECT: String = "Old password you entered is incorrect";
    static var ENTER_VALID_INFORMATION: String = "Please enter valid information in the highlighted fields";
    static var BOX_REGISTERED_SUCCESSFULLY: String = "Box registered successfully";
    static var PASSWORD_SHOULD_BE_SAME: String = "Password should be same in both the fields";
    static var LENGTH_5_TO_12_CHARACTERS: String = "Length must be between 5 to 12 characters";
    static var INVALID_EMAIL_ADDRESS: String = "Invalid email address";
    static var ENTER_VALID_EMAIL_ADDRESS: String = "Please enter a valid email address";
    static var NUMBERS_ARE_NOT_ALLOWED: String = "Numbers are not allowed";
    static var MINIMUM_ALLOWED_CHARACTERS_2: String = "Minimum allowed characters are 2";
    static var MAXIMUM_ALLOWED_CHARACTERS: String = "Maximum allowed characters are ";
    static var PROGRAME_LISTING_NOT_AVAILABLE: String = "Program listing is not available for this channel";
    static var UNABLE_TO_FETCH_PROGRAME_LISTING_FROM_SERVER_CHECK_CONNECTION: String = "Unable to fetch the program listing from the Server. Please check your Internet connection and try again";
    static var APP_RESTART: String = "Application needs to restart. Press OK button to continue.";
    static var REMOVE_FROM_FAVORITES: String = "Do you want to remove this item from favorites ?";
    static var ADD_TO_FAVORITES: String = "Do you want to add this item to favorites ?";
    static var ALREADY_EXISTS_IN_FAVORITES: String = "Already exists in favorites. Do you want to remove it from favorites ?";
    static var ITEM_REMOVED_FROM_FAVORITES: String = "Item successfully removed from favorites.";
    static var ITEM_ADDED_TO_FAVORITES: String = "Item successfully added to favorites.";
    static var ADD_TO_FAVORITES_FAILED: String = "Add to favorites failed. Please delete some favorite items and try again.";
    static var POSTING_DEBUG_INFO: String = "Sending debug information to server ... Please wait";
    static var UNABLE_TO_PLAY_VIDEO_INVALID_VIDEO_ID: String = "Unable to play the video. Video ID invalid.";
    static var RESUME_MOVIE: String = "Play from Beginning or resume from the last point ?";

    function Messages()
    {
    }

}

//Sprite 621
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.NetStatus
{
    static var xml = null;
    static var onStatusUpdate = null;
    static var updateTimerId: Number = -1;
    static var linkError = com.jadoo.as2.JadooPlus.Utils.Messages.NETWORK_LINK_DOWN;
    static var connectionError = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_INTERNET_CHECK_SETTINGS;
    static var msgBox = null;
    static var buttons = null;
    static var netStatus: String = "Up";
    static var netErrorStr = null;
    static var viewMC = null;

    function NetStatus()
    {
    }

    static function init(viewMC)
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.viewMC = viewMC;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.statusUpdate();
    }

    static function stop()
    {
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId != -1) 
        {
            clearInterval(com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId);
            com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId = -1;
        }
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.NetStatus.xml;
            com.jadoo.as2.JadooPlus.Utils.NetStatus.xml = null;
        }
        removeMovieClip(com.jadoo.as2.JadooPlus.Utils.NetStatus.viewMC);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.viewMC = null;
        delete com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate = null;
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox != null) 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.removeListener("onButtonPress", com.jadoo.as2.JadooPlus.Utils.NetStatus, com.jadoo.as2.JadooPlus.Utils.NetStatus.onMsgBoxBtnPress);
            com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.destroy();
            delete com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox;
            com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox = null;
        }
    }

    static function addListener(eventName, obj, listener)
    {
        if (eventName == "onStatusUpdate") 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate.addListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function removeListener(eventName, obj, listener)
    {
        if (eventName == "onStatusUpdate") 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate.removeListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function statusUpdate()
    {
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId != -1) 
        {
            clearInterval(com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId);
            com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId = -1;
        }
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.NetStatus.xml;
            com.jadoo.as2.JadooPlus.Utils.NetStatus.xml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.NetStatus.xml = new XML();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.xml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.xml.onLoad = com.jadoo.as2.JadooPlus.Utils.NetStatus.onLinkStatus;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.xml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_linkup_status");
    }

    static function onLinkStatus()
    {
        var __reg1 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.NetStatus.xml.firstChild, "/theDavidBox/response/linkup").firstChild.nodeValue;
        if (__reg1 == "on") 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onNetStatusUpdate("Up");
            if (com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId == -1) 
            {
                com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId = setInterval(com.jadoo.as2.JadooPlus.Utils.NetStatus.statusUpdate, com.jadoo.as2.JadooPlus.Utils.Config.netStatusUpdateTime);
            }
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onNetStatusUpdate("Down", com.jadoo.as2.JadooPlus.Utils.NetStatus.linkError);
            if (com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId == -1) 
            {
                com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId = setInterval(com.jadoo.as2.JadooPlus.Utils.NetStatus.statusUpdate, com.jadoo.as2.JadooPlus.Utils.Config.netStatusUpdateTime);
            }
        }
        __reg1 = null;
    }

    static function onConnectionStatus()
    {
        var __reg1 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.NetStatus.xml.firstChild, "/theDavidBox/response/connection").firstChild.nodeValue;
        if (__reg1 == "on") 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onNetStatusUpdate("Up");
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.onNetStatusUpdate("Down", com.jadoo.as2.JadooPlus.Utils.NetStatus.connectionError);
        }
        if (com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId == -1) 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.updateTimerId = setInterval(com.jadoo.as2.JadooPlus.Utils.NetStatus.statusUpdate, com.jadoo.as2.JadooPlus.Utils.Config.netStatusUpdateTime);
        }
        __reg1 = null;
    }

    static function onNetStatusUpdate(netStatus, netErrorStr)
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.onStatusUpdate.notify(netStatus, netErrorStr);
        if ((netStatus != com.jadoo.as2.JadooPlus.Utils.NetStatus.netStatus || netErrorStr != com.jadoo.as2.JadooPlus.Utils.NetStatus.netErrorStr) && _global.currentApplication != "Diagnostics") 
        {
            if (com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox != null) 
            {
                com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.removeListener("onButtonPress", com.jadoo.as2.JadooPlus.Utils.NetStatus, com.jadoo.as2.JadooPlus.Utils.NetStatus.onMsgBoxBtnPress);
                com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.destroy();
                delete com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox;
                com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox = null;
            }
            var __reg3 = com.jadoo.as2.JadooPlus.Utils.NetStatus.viewMC.createEmptyMovieClip("msgBoxBaseMC", com.jadoo.as2.JadooPlus.Utils.NetStatus.viewMC.getNextHighestDepth());
            com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
            com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.addListener("onButtonPress", com.jadoo.as2.JadooPlus.Utils.NetStatus, com.jadoo.as2.JadooPlus.Utils.NetStatus.onMsgBoxBtnPress);
            com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons = new Array("OK");
            if (netStatus == "Down") 
            {
                com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.create(__reg3, "Connection Status", netErrorStr, true, com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.create(__reg3, "Connection Status", com.jadoo.as2.JadooPlus.Utils.Messages.INTERNET_CONNECTION_IS_BACK_ONLINE, true, com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons);
            }
            __reg3 = null;
        }
        com.jadoo.as2.JadooPlus.Utils.NetStatus.netStatus = netStatus;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    static function onMsgBoxBtnPress(button)
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.removeListener("onButtonPress", com.jadoo.as2.JadooPlus.Utils.NetStatus, com.jadoo.as2.JadooPlus.Utils.NetStatus.onMsgBoxBtnPress);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox.destroy();
        delete com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.msgBox = null;
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons.length) 
        {
            com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons[__reg1] = null;
            ++__reg1;
        }
        delete com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.buttons = null;
    }

}

//Sprite 622
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.MessageBox
{
    var buttons = null;
    var btnIdx: Number = 0;
    var onButtonPress = null;
    var messageBoxBaseMC = null;
    var messageBaseMC = null;
    var messageMaskMC = null;
    var keyListener = null;
    var textFormat = null;
    var blocking: Boolean = true;
    var lineHeight: Number = 32;

    function MessageBox()
    {
        this.onButtonPress = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
    }

    function create()
    {
        this.messageBoxBaseMC = arguments[0];
        var __reg7 = arguments[1];
        var __reg6 = arguments[2];
        this.blocking = arguments[3];
        this.buttons = arguments[4];
        var __reg5 = this.messageBoxBaseMC.attachMovie("msgBoxBg", "msgBoxBgMC", this.messageBoxBaseMC.getNextHighestDepth());
        this.messageBoxBaseMC._x = (1280 - __reg5._width) / 2;
        this.messageBoxBaseMC._y = (720 - __reg5._height) / 2;
        this.setTxtFormat("Arial", "left", 34, false, 0);
        var __reg4 = this.messageBoxBaseMC.createTextField("titleText", this.messageBoxBaseMC.getNextHighestDepth(), 15, 0, 0, 0);
        __reg4.autoSize = true;
        __reg4.setNewTextFormat(this.textFormat);
        __reg4.htmlText = __reg7;
        __reg4._y = (50 - __reg4._height) / 2;
        this.messageBaseMC = this.messageBoxBaseMC.createEmptyMovieClip("messageBaseMC", this.messageBoxBaseMC.getNextHighestDepth());
        this.messageBaseMC._y = 60;
        this.messageMaskMC = this.messageBaseMC.createEmptyMovieClip("messageMaskMC", this.messageBaseMC.getNextHighestDepth());
        var __reg8 = this.messageMaskMC.attachMovie("maskMC", "maskMC", this.messageMaskMC.getNextHighestDepth());
        this.messageMaskMC._height = 106;
        this.messageMaskMC._width = __reg5._width;
        this.setTxtFormat("Arial", "left", 28, false, 9145227);
        var __reg3 = this.messageBaseMC.createTextField("msgText", this.messageBaseMC.getNextHighestDepth(), 10, 0, 0, 0);
        __reg3.autoSize = true;
        __reg3._width = __reg5._width - 20;
        __reg3.wordWrap = true;
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.htmlText = __reg6;
        if (__reg3._height > this.messageMaskMC._height) 
        {
            __reg3._width = __reg3._width - 50;
            this.displayArrows();
        }
        this.messageBaseMC.setMask(this.messageMaskMC);
        this.createButtons();
        if (this.blocking == false) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addBlockingKeyListener(this.keyListener);
        }
        __reg4 = null;
        __reg3 = null;
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
        __reg8 = null;
    }

    function displayArrows()
    {
        var __reg2 = this.messageBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.messageBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        var __reg3 = this.messageBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.messageBaseMC.getNextHighestDepth());
        __reg2._x = this.messageMaskMC._width - __reg2._width - 15;
        __reg2._y = 5;
        __reg3._x = __reg2._x;
        __reg3._y = this.messageMaskMC._height - __reg3._height - 5;
        __reg2 = null;
        __reg3 = null;
    }

    function destroy()
    {
        removeMovieClip(this.messageBaseMC);
        removeMovieClip(this.messageMaskMC);
        removeMovieClip(this.messageBoxBaseMC);
        if (this.blocking == false) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeBlockingKeyListener(this.keyListener);
        }
        delete this.keyListener;
        this.keyListener = null;
        delete this.buttons;
        this.buttons = null;
        delete this.onButtonPress;
        this.onButtonPress = null;
        this.messageBoxBaseMC = null;
        this.messageMaskMC = null;
        this.messageBaseMC = null;
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onButtonPress") 
        {
            this.onButtonPress.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onButtonPress") 
        {
            this.onButtonPress.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function setMessage(message)
    {
        this.messageBaseMC.msgText.htmlText = message;
        message = null;
    }

    function createButtons()
    {
        var __reg8 = 50;
        var __reg5 = 0;
        while (__reg5 < this.buttons.length) 
        {
            var __reg2 = this.messageBoxBaseMC.createEmptyMovieClip("btnBaseMC" + __reg5, this.messageBoxBaseMC.getNextHighestDepth());
            var __reg6 = __reg2.attachMovie("infoBtnDis", "btnBgMC", __reg2.getNextHighestDepth());
            __reg2._x = (this.messageBoxBaseMC.msgBoxBgMC._width - __reg6._width * this.buttons.length - __reg8 * (this.buttons.length - 1)) / 2;
            __reg2._x = __reg2._x + __reg5 * (__reg8 + __reg2._width);
            __reg2._y = this.messageBoxBaseMC.msgBoxBgMC._height - __reg2._height - 10;
            var __reg7 = __reg2.attachMovie("infoBtnEnb", "btnHighlightMC", __reg2.getNextHighestDepth());
            __reg7._visible = false;
            this.setTxtFormat("Arial", "center", 30, false, 0);
            var __reg4 = __reg2.createTextField("btnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
            __reg4.autoSize = true;
            __reg4.setNewTextFormat(this.textFormat);
            __reg4.htmlText = this.buttons[__reg5];
            __reg4._x = (__reg6._width - __reg4._width) / 2;
            __reg4._y = (__reg6._height - __reg4._height) / 2;
            this.setTxtFormat("Arial", "center", 30, false, 3092271);
            var __reg3 = __reg2.createTextField("btnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
            __reg3.autoSize = true;
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.htmlText = this.buttons[__reg5];
            __reg3._x = (__reg6._width - __reg3._width) / 2;
            __reg3._y = (__reg6._height - __reg3._height) / 2;
            __reg4 = null;
            __reg3 = null;
            __reg7 = null;
            __reg2 = null;
            __reg6 = null;
            ++__reg5;
        }
        this.btnHighlight(this.btnIdx);
    }

    function btnHighlight(btnIdx)
    {
        this.btnIdx = btnIdx;
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnHighlightMC._visible = true;
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnTextEnb._visible = true;
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnTextDis._visible = false;
    }

    function btnUnHighlight(btnIdx)
    {
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnHighlightMC._visible = false;
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnTextDis._visible = true;
        this.messageBoxBaseMC["btnBaseMC" + btnIdx].btnTextEnb._visible = false;
    }

    function setArrows()
    {
        if (this.messageBaseMC.msgText._y + 15 < this.messageMaskMC._y) 
        {
            this.messageBaseMC.upArrowMC._visible = true;
        }
        else 
        {
            this.messageBaseMC.upArrowMC._visible = false;
        }
        if (this.messageBaseMC.msgText._y + this.messageBaseMC.msgText._height > this.messageMaskMC._height - 5) 
        {
            this.messageBaseMC.downArrowMC._visible = true;
            return;
        }
        this.messageBaseMC.downArrowMC._visible = false;
    }

    function scrollUp()
    {
        if (this.messageBaseMC.msgText._y + 15 < this.messageMaskMC._y) 
        {
            this.messageBaseMC.msgText._y = this.messageBaseMC.msgText._y + this.lineHeight;
        }
    }

    function scrollDown()
    {
        if (this.messageBaseMC.msgText._y + this.messageBaseMC.msgText._height > this.messageMaskMC._height - 5) 
        {
            this.messageBaseMC.msgText._y = this.messageBaseMC.msgText._y - this.lineHeight;
        }
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 38) 
        {
            this.scrollUp();
            this.setArrows();
            return;
        }
        else if (__reg0 === 40) 
        {
            this.scrollDown();
            this.setArrows();
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.btnIdx > 0) 
            {
                this.btnUnHighlight(this.btnIdx);
                this.btnHighlight(this.btnIdx - 1);
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.btnIdx < this.buttons.length - 1) 
            {
                this.btnUnHighlight(this.btnIdx);
                this.btnHighlight(this.btnIdx + 1);
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        this.onButtonPress.notify(this.buttons[this.btnIdx]);
        return;
    }

}

//Sprite 623
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.KeyManager
{
    static var keyListeners = null;
    static var blockingKeyListeners = null;

    function KeyManager()
    {
    }

    static function addKeyListener(listener)
    {
        var __reg1 = null;
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners == null) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners = new Array();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners = new Array();
        }
        __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length) 
        {
            if (com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[__reg1] == listener) 
            {
                __reg1 = null;
                listener = null;
                return undefined;
            }
            ++__reg1;
        }
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length == 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length] = listener;
            Key.addListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length - 1]);
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length] = listener;
        }
        __reg1 = null;
        listener = null;
    }

    static function addBlockingKeyListener(listener)
    {
        var __reg1 = undefined;
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners == null) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners = new Array();
        }
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length == 0) 
        {
            __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length) 
            {
                Key.removeListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[__reg1]);
                ++__reg1;
            }
        }
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length != 0) 
        {
            Key.removeListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length - 1]);
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length] = listener;
        Key.addListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length - 1]);
        __reg1 = null;
        listener = null;
    }

    static function removeKeyListener(listener)
    {
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length) 
        {
            if (com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[__reg1] == listener) 
            {
                Key.removeListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[__reg1]);
                com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.splice(__reg1, 1);
                break;
            }
            ++__reg1;
        }
        __reg1 = null;
        listener = null;
    }

    static function removeBlockingKeyListener(listener)
    {
        var __reg1 = null;
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length != 0) 
        {
            __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length) 
            {
                if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[__reg1] == listener) 
                {
                    Key.removeListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[__reg1]);
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.splice(__reg1, 1);
                    if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length != 0) 
                    {
                        Key.addListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners[com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length - 1]);
                    }
                    break;
                }
                ++__reg1;
            }
        }
        if (com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners.length == 0) 
        {
            __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners.length) 
            {
                Key.addListener(com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners[__reg1]);
                ++__reg1;
            }
        }
        __reg1 = null;
        listener = null;
    }

    static function removeAll()
    {
        delete com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.keyListeners = null;
        delete com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.blockingKeyListeners = null;
    }

}

//Sprite 624
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.Config
{
    static var localHostIP: String = "127.0.0.1";
    static var localHostAddress: String = "http://127.0.0.1:8008";
    static var jadooAppId = null;
    static var jadooAppName = null;
    static var POPBOX_SERVER_PATH: String = "https://developer.popbox.com";
    static var DATABASE_PATH: String = "/opt/syb/usr/media.db";
    static var WIFI_SETUP_PATH: String = "/system?arg0=load_phf&arg1=setup_wizard&arg2=standalone&arg3=%2D%2Dflashvars%20jumpToWifi%3Dyes";
    static var ferrariInitializeUrl: String = "https://ferrarilb.jemtv.com/index.php/xml/initialize/";
    static var myJadooInitializeUrl: String = "https://fmjlb.jadootv.com/index.php/xml/initialize";
    static var RESERVED_DISK_PATH: String = "/opt/sybhttpd/localhost.drives/.reserved";
    static var CACHE_FOLDER: String = "box.cache";
    static var BG_IMG_CACHE_FOLDER: String = "bgImg.cache";
    static var XML_CACHE_FOLDER: String = "xml.cache";
    static var IMG_CACHE_FOLDER: String = "img.cache";
    static var BYPASS_CACHE: Boolean = false;
    static var CACHE_TIMEOUT_DURATION: Number = 86400000;
    static var CACHE_TIMEOUT_CHECK_DURATION: Number = 300000;
    static var appVersion: String = "2.5.0.0";
    static var myJadooAppVersion: String = "1.0.5.0";
    static var userProfileXmlTimeOutDuration: Number = 30000;
    static var pageXmlTimeOutDuration: Number = 15000;
    static var itemXmlTimeOutDuration: Number = 15000;
    static var diagnosticsXmlTimeOutDuration: Number = 15000;
    static var playbackXmlTimeOutDuration: Number = 15000;
    static var netConnectionUrl: String = "www.google.com";
    static var netStatusUpdateTime: Number = 5000;
    static var playerLoadTimeOut: Number = 60000;
    static var playerBufferingTimeOut: Number = 60000;
    static var liveChannelKeepAliveTime: Number = 14400000;
    static var keepAliveMsgDuration: Number = 15000;
    static var isHomePage: Boolean = false;
    static var downloadYoutubePlayer: Boolean = true;
    static var YOUTUBE_DEVELOPER_KEY: String = "AIzaSyD1CiiyTMh1f9CT73g67lPJ_zd5cQQk0-c";
    static var something: String = "526c51ay";

    function Config()
    {
    }

    static function getInitializeURL()
    {
        if (_global.currentApplication == "MyJadoo") 
        {
            return com.jadoo.as2.JadooPlus.Utils.Config.myJadooInitializeUrl;
        }
        return com.jadoo.as2.JadooPlus.Utils.Config.ferrariInitializeUrl;
    }

    static function getAppVersion()
    {
        if (_global.currentApplication == "MyJadoo") 
        {
            return com.jadoo.as2.JadooPlus.Utils.Config.myJadooAppVersion;
        }
        return com.jadoo.as2.JadooPlus.Utils.Config.appVersion;
    }

    static function getFirmwareUpgradeCheckUrl()
    {
        return "http://ferrarilb.jemtv.com/index.php/firmware_upgrade/xml/" + com.jadoo.as2.JadooPlus.Utils.Utils.getFirmwareVersion() + "/" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
    }

    static function getJadooAppId()
    {
        return com.jadoo.as2.JadooPlus.Utils.Config.jadooAppId;
    }

    static function getJadooAppName()
    {
        return com.jadoo.as2.JadooPlus.Utils.Config.jadooAppName;
    }

}

//Sprite 625
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.Utils
{
    static var boardId: String = "";
    static var boxId: String = "";
    static var firmwareVersion = null;
    static var macXml = null;
    static var fwVersionXml = null;
    static var months = Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

    function Utils()
    {
    }

    static function init(onInit)
    {
        if (com.jadoo.as2.JadooPlus.Utils.Utils.macXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.Utils.macXml;
            com.jadoo.as2.JadooPlus.Utils.Utils.macXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.Utils.macXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.Utils.macXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.Utils.macXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_mac_address");
        com.jadoo.as2.JadooPlus.Utils.Utils.macXml.onLoad = function (success)
        {
            com.jadoo.as2.JadooPlus.Utils.Utils.boardId = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.Utils.macXml.firstChild, "/theDavidBox/response/macAddress").firstChild.nodeValue;
            var __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Utils.Utils.boardId.length) 
            {
                if (com.jadoo.as2.JadooPlus.Utils.Utils.boardId.charAt(__reg1) != ":") 
                {
                    com.jadoo.as2.JadooPlus.Utils.Utils.boxId = com.jadoo.as2.JadooPlus.Utils.Utils.boxId + com.jadoo.as2.JadooPlus.Utils.Utils.boardId.charAt(__reg1);
                }
                ++__reg1;
            }
            if (com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml != null) 
            {
                delete com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml;
                com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml = null;
            }
            com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml = new XML();
            com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml.ignoreWhite = true;
            com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_firmware_version");
            com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml.onLoad = function (success)
            {
                com.jadoo.as2.JadooPlus.Utils.Utils.firmwareVersion = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.Utils.fwVersionXml.firstChild, "/theDavidBox/response/firmwareVersion").firstChild.nodeValue;
                if (onInit != null) 
                {
                    onInit(success);
                }
                success = null;
            }
            ;
            success = null;
        }
        ;
    }

    static function getBoxId()
    {
        return com.jadoo.as2.JadooPlus.Utils.Utils.boxId;
    }

    static function getBoardId()
    {
        return com.jadoo.as2.JadooPlus.Utils.Utils.boardId;
    }

    static function getFirmwareVersion()
    {
        return com.jadoo.as2.JadooPlus.Utils.Utils.firmwareVersion;
    }

    static function secondsToTimeStr(secondsTime)
    {
        var __reg2 = int(secondsTime / 3600);
        var __reg3 = int(secondsTime / 60) - __reg2 * 60;
        var __reg4 = secondsTime - (__reg2 * 60 + __reg3) * 60;
        var __reg1 = "";
        if (__reg2 < 10) 
        {
            __reg1 = __reg1 + "0";
        }
        __reg1 = __reg1 + (__reg2.toString() + ":");
        if (__reg3 < 10) 
        {
            __reg1 = __reg1 + "0";
        }
        __reg1 = __reg1 + (__reg3.toString() + ":");
        if (__reg4 < 10) 
        {
            __reg1 = __reg1 + "0";
        }
        __reg1 = __reg1 + __reg4.toString();
        return __reg1;
    }

    static function timeStrToSeconds(timeStr)
    {
        var __reg1 = timeStr.split(":");
        return Number(__reg1[0]) * 3600 + Number(__reg1[1]) * 60 + Number(__reg1[2]);
    }

    static function hoursFromSeconds(seconds)
    {
        return int(seconds / 3600);
    }

    static function getModulusMinutes(seconds)
    {
        return int(seconds / 60) - int(seconds / 3600) * 60;
    }

    static function getModulusSeconds(seconds)
    {
        var __reg1 = int(seconds / 3600);
        var __reg4 = int(seconds / 60) - __reg1 * 60;
        var __reg3 = seconds - (__reg1 * 60 + __reg4) * 60;
        return __reg3;
    }

    static function numericalDateToStringDate(date)
    {
        var __reg4 = int(date / 10000);
        var __reg3 = int(date % 10000 / 100);
        var __reg1 = int(date % 100);
        return "" + com.jadoo.as2.JadooPlus.Utils.Utils.months[__reg3 - 1] + " " + __reg1 + ", " + __reg4;
    }

    static function randRange(min, max)
    {
        var __reg1 = Math.floor(Math.random() * (max - min + 1)) + min;
        return __reg1;
    }

}

//Sprite 626
//  InitClip
dynamic class mx.xpath.XPathAPI
{

    function XPathAPI()
    {
    }

    static function getEvalString(node, path)
    {
        var __reg7 = "";
        var __reg4 = null;
        var __reg9 = mx.xpath.XPathAPI.getPathSet(path);
        var __reg3 = __reg9[0].nodeName;
        var __reg8 = undefined;
        var __reg2 = node;
        var __reg5 = false;
        if (__reg3 != undefined && (__reg3 == "*" || node.nodeName == __reg3)) 
        {
            var __reg6 = 1;
            while (__reg6 < __reg9.length) 
            {
                __reg3 = __reg9[__reg6].nodeName;
                __reg8 = __reg3.indexOf("@");
                if (__reg8 >= 0) 
                {
                    __reg3 = __reg3.substring(__reg8 + 1);
                    __reg5 = __reg2.attributes[__reg3] != undefined;
                    __reg7 = __reg7 + (".attributes." + __reg3);
                }
                else 
                {
                    __reg5 = false;
                    var __reg1 = 0;
                    while (__reg1 < __reg2.childNodes.length) 
                    {
                        __reg4 = __reg2.childNodes[__reg1];
                        if (__reg4.nodeName == __reg3) 
                        {
                            __reg7 = __reg7 + (".childNodes." + __reg1);
                            __reg1 = __reg2.childNodes.length;
                            __reg2 = __reg4;
                            __reg5 = true;
                        }
                        ++__reg1;
                    }
                }
                if (!__reg5) 
                {
                    return "";
                }
                ++__reg6;
            }
            if (__reg5) 
            {
                if (__reg8 == -1) 
                {
                    __reg7 = __reg7 + ".firstChild.nodeValue";
                }
            }
            else 
            {
                __reg7 = "";
            }
        }
        else 
        {
            __reg7 = "";
        }
        return __reg7;
    }

    static function selectNodeList(node, path)
    {
        var __reg2 = new Array(node);
        var __reg5 = mx.xpath.XPathAPI.getPathSet(path);
        var __reg4 = __reg5[0];
        var __reg6 = __reg4.__get__nodeName();
        var __reg1 = null;
        if (__reg6 != undefined && (__reg6 == "*" || node.nodeName == __reg6)) 
        {
            if (__reg4.__get__filter().length > 0) 
            {
                __reg1 = new mx.xpath.FilterStack(__reg4.__get__filter());
                __reg2 = mx.xpath.XPathAPI.filterNodes(__reg2, __reg1);
            }
            if (__reg2.length > 0) 
            {
                var __reg3 = 1;
                while (__reg3 < __reg5.length) 
                {
                    __reg4 = __reg5[__reg3];
                    __reg2 = mx.xpath.XPathAPI.getAllChildNodesByName(__reg2, __reg4.__get__nodeName());
                    if (__reg4.__get__filter().length > 0) 
                    {
                        __reg1 = new mx.xpath.FilterStack(__reg4.__get__filter());
                    }
                    else 
                    {
                        __reg1 = null;
                    }
                    if (__reg1 != null && __reg1.__get__exprs().length > 0) 
                    {
                        __reg2 = mx.xpath.XPathAPI.filterNodes(__reg2, __reg1);
                    }
                    ++__reg3;
                }
            }
        }
        else 
        {
            __reg2 = new Array();
        }
        return __reg2;
    }

    static function selectSingleNode(node, path)
    {
        var __reg1 = mx.xpath.XPathAPI.selectNodeList(node, path);
        if (__reg1.length > 0) 
        {
            return __reg1[0];
        }
        return null;
    }

    static function setNodeValue(node, path, newValue)
    {
        var __reg1 = new Array(node);
        var __reg9 = mx.xpath.XPathAPI.getPathSet(path);
        var __reg7 = __reg9[__reg9.length - 1].nodeName;
        if (__reg7.charAt(0) == "@") 
        {
            __reg7 = __reg7.substring(1, __reg7.length);
            __reg9.pop();
        }
        else 
        {
            __reg7 = null;
        }
        var __reg5 = __reg9[0];
        var __reg11 = __reg5.__get__nodeName();
        var __reg3 = null;
        if (__reg11 != undefined && (__reg11 == "*" || node.nodeName == __reg11)) 
        {
            if (__reg5.__get__filter().length > 0) 
            {
                __reg3 = new mx.xpath.FilterStack(__reg5.__get__filter());
                __reg1 = mx.xpath.XPathAPI.filterNodes(__reg1, __reg3);
            }
            if (__reg1.length > 0) 
            {
                var __reg2 = 1;
                while (__reg2 < __reg9.length) 
                {
                    __reg5 = __reg9[__reg2];
                    __reg1 = mx.xpath.XPathAPI.getAllChildNodesByName(__reg1, __reg5.__get__nodeName());
                    if (__reg5.__get__filter().length > 0) 
                    {
                        __reg3 = new mx.xpath.FilterStack(__reg5.__get__filter());
                    }
                    else 
                    {
                        __reg3 = null;
                    }
                    if (__reg3 != null && __reg3.__get__exprs().length > 0) 
                    {
                        __reg1 = mx.xpath.XPathAPI.filterNodes(__reg1, __reg3);
                    }
                    ++__reg2;
                }
            }
        }
        else 
        {
            __reg1 = new Array();
        }
        var __reg4 = null;
        var __reg6 = null;
        var __reg10 = new XML();
        __reg2 = 0;
        while (__reg2 < __reg1.length) 
        {
            if (__reg7 == null) 
            {
                __reg4 = __reg1[__reg2];
                if (__reg4.firstChild == null || __reg4.firstChild.nodeType != 3) 
                {
                    __reg6 = __reg10.createTextNode(newValue);
                    __reg4.appendChild(__reg6);
                }
                else 
                {
                    __reg6 = __reg4.firstChild;
                    __reg6.nodeValue = newValue;
                }
            }
            else 
            {
                __reg1[__reg2].attributes[__reg7] = newValue;
            }
            ++__reg2;
        }
        return __reg1.length;
    }

    static function copyStack(toStk, fromStk)
    {
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= fromStk.length) 
            {
                return;
            }
            toStk.splice(__reg1, 0, fromStk[__reg1]);
            ++__reg1;
        }
    }

    static function evalExpr(expr, node)
    {
        var __reg2 = true;
        if (expr.__get__attr()) 
        {
            __reg2 = expr.__get__value() == null ? node.attributes[expr.__get__name()] != null : node.attributes[expr.__get__name()] == expr.__get__value();
        }
        else 
        {
            var __reg3 = mx.xpath.XPathAPI.getChildNodeByName(node, expr.__get__name());
            if (__reg3 == null) 
            {
                __reg2 = false;
            }
            else 
            {
                __reg2 = expr.__get__value() == null ? true : __reg3.firstChild.nodeValue == expr.__get__value();
            }
        }
        return __reg2;
    }

    static function filterNodes(nodeList, stack)
    {
        var __reg13 = new Array();
        var __reg2 = undefined;
        var __reg3 = undefined;
        var __reg9 = undefined;
        var __reg6 = undefined;
        var __reg10 = undefined;
        var __reg1 = true;
        var __reg4 = undefined;
        var __reg5 = undefined;
        var __reg8 = 0;
        while (__reg8 < nodeList.length) 
        {
            __reg5 = true;
            __reg2 = new Array();
            __reg3 = new Array();
            mx.xpath.XPathAPI.copyStack(__reg2, stack.__get__exprs());
            mx.xpath.XPathAPI.copyStack(__reg3, stack.__get__ops());
            __reg4 = nodeList[__reg8];
            while (__reg2.length > 0 && __reg5) 
            {
                if (typeof __reg2[__reg2.length - 1] == "object") 
                {
                    __reg9 = mx.xpath.FilterExpr(__reg2.pop());
                    __reg1 = mx.xpath.XPathAPI.evalExpr(__reg9, __reg4);
                }
                else 
                {
                    __reg10 = Boolean(__reg2.pop());
                    __reg1 = __reg10;
                }
                if (__reg3.length > 0) 
                {
                    var __reg7 = __reg2.pop();
                    __reg6 = __reg7;
                    if ((__reg0 = __reg3[__reg3.length - 1]) === "and") 
                    {
                        __reg1 = __reg1 && mx.xpath.XPathAPI.evalExpr(__reg6, __reg4);
                        __reg5 = __reg1;
                    }
                    else if (__reg0 === "or") 
                    {
                        __reg1 = __reg1 || mx.xpath.XPathAPI.evalExpr(__reg6, __reg4);
                        __reg5 = !__reg1;
                    }
                    __reg3.pop();
                    __reg2.push(__reg1);
                }
            }
            if (__reg1) 
            {
                __reg13.push(__reg4);
            }
            ++__reg8;
        }
        return __reg13;
    }

    static function getAllChildNodesByName(nodeList, name)
    {
        var __reg5 = new Array();
        var __reg2 = undefined;
        var __reg3 = 0;
        while (__reg3 < nodeList.length) 
        {
            __reg2 = nodeList[__reg3].childNodes;
            if (__reg2 != null) 
            {
                var __reg1 = 0;
                while (__reg1 < __reg2.length) 
                {
                    if (name == "*" || __reg2[__reg1].nodeName == name) 
                    {
                        __reg5.push(__reg2[__reg1]);
                    }
                    ++__reg1;
                }
            }
            ++__reg3;
        }
        return __reg5;
    }

    static function getChildNodeByName(node, nodeName)
    {
        var __reg2 = undefined;
        var __reg3 = node.childNodes;
        var __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg2 = __reg3[__reg1];
            if (__reg2.nodeName == nodeName) 
            {
                return __reg2;
            }
            ++__reg1;
        }
        return null;
    }

    static function getKeyValues(node, keySpec)
    {
        var __reg5 = "";
        var __reg3 = new mx.utils.StringTokenParser(keySpec);
        var __reg2 = __reg3.nextToken();
        var __reg1 = undefined;
        var __reg6 = undefined;
        while (__reg2 != mx.utils.StringTokenParser.tkEOF) 
        {
            __reg1 = __reg3.token;
            __reg5 = __reg5 + (" " + __reg1);
            if (__reg2 == mx.utils.StringTokenParser.tkSymbol) 
            {
                if (__reg1 == "@") 
                {
                    __reg2 = __reg3.nextToken();
                    __reg1 = __reg3.token;
                    if (__reg2 == mx.utils.StringTokenParser.tkSymbol) 
                    {
                        __reg5 = __reg5 + (__reg1 + "=\'" + node.attributes[__reg1] + "\'");
                    }
                }
                else if (__reg1 == "/") 
                {
                    __reg2 = __reg3.nextToken();
                    if (__reg2 == mx.utils.StringTokenParser.tkSymbol) 
                    {
                        __reg1 = __reg3.token;
                        node = mx.xpath.XPathAPI.getChildNodeByName(node, __reg1);
                        if (node != null) 
                        {
                            __reg5 = __reg5 + __reg1;
                        }
                    }
                }
                else if (__reg1 != "and" && __reg1 != "or" && __reg1 != "[" && __reg1 != "]") 
                {
                    __reg6 = mx.xpath.XPathAPI.getChildNodeByName(node, __reg1);
                    if (__reg6 != null) 
                    {
                        __reg5 = __reg5 + ("=\'" + __reg6.firstChild.nodeValue + "\'");
                    }
                }
            }
            if (node == null) 
            {
                trace("Invalid keySpec specified. \'" + keySpec + "\' Error.");
                return "ERR";
            }
            __reg2 = __reg3.nextToken();
        }
        return __reg5.slice(1);
    }

    static function getPath(node, keySpecs)
    {
        var __reg2 = "";
        var __reg5 = keySpecs[node.nodeName];
        if (__reg5 == undefined) 
        {
            var __reg8 = "";
            var __reg10 = undefined;
            for (__reg10 in node.attributes) 
            {
                __reg8 = __reg8 + ("@" + __reg10 + "=\'" + node.attributes[__reg10] + "\' and ");
            }
            var __reg7 = "";
            var __reg1 = undefined;
            var __reg6 = undefined;
            var __reg4 = 0;
            while (__reg4 < node.childNodes.length) 
            {
                __reg1 = node.childNodes[__reg4];
                __reg6 = __reg1.firstChild.nodeValue;
                if (__reg6 != undefined) 
                {
                    __reg7 = __reg7 + (__reg1.nodeName + "=\'" + __reg6 + "\' and ");
                }
                ++__reg4;
            }
            if (__reg8.length > 0) 
            {
                if (__reg7.length > 0) 
                {
                    __reg2 = "/" + node.nodeName + "[" + __reg8 + __reg7.substring(0, __reg7.length - 4) + "]";
                }
                else 
                {
                    __reg2 = "/" + node.nodeName + "[" + __reg8.substring(0, __reg8.length - 4) + "]";
                }
            }
            else 
            {
                __reg2 = "/" + node.nodeName + "[" + __reg7.substring(0, __reg7.length - 4) + "]";
            }
        }
        else 
        {
            __reg2 = __reg2 + ("/" + node.nodeName + mx.xpath.XPathAPI.getKeyValues(node, __reg5));
        }
        __reg1 = node.parentNode;
        while (__reg1.parentNode != null) 
        {
            __reg5 = keySpecs[__reg1.nodeName];
            if (__reg5 == undefined) 
            {
                __reg2 = "/" + __reg1.nodeName + __reg2;
            }
            else 
            {
                __reg2 = "/" + __reg1.nodeName + mx.xpath.XPathAPI.getKeyValues(__reg1, __reg5) + __reg2;
            }
            __reg1 = __reg1.parentNode;
        }
        return __reg2;
    }

    static function getPathSet(path)
    {
        var __reg6 = new Array();
        var __reg4 = undefined;
        var __reg1 = undefined;
        var __reg2 = undefined;
        var __reg5 = undefined;
        while (path.length > 0) 
        {
            __reg4 = path.lastIndexOf("/");
            __reg1 = path.substring(__reg4 + 1);
            __reg2 = __reg1.indexOf("[", 0);
            __reg5 = __reg2 < 0 ? "" : __reg1.substring(__reg2 + 1, __reg1.length - 1);
            __reg1 = __reg2 < 0 ? __reg1 : __reg1.substring(0, __reg2);
            __reg6.splice(0, 0, new mx.xpath.NodePathInfo(__reg1, __reg5));
            path = path.substring(0, __reg4);
        }
        return __reg6;
    }

}

//Sprite 627
//  InitClip
dynamic class mx.xpath.NodePathInfo
{
    var __nodeName = null;
    var __filter = null;

    function NodePathInfo(nodeName, filter)
    {
        this.__nodeName = nodeName;
        this.__filter = filter;
    }

    function get nodeName()
    {
        return this.__nodeName;
    }

    function get filter()
    {
        return this.__filter;
    }

}

//Sprite 628
//  InitClip
dynamic class mx.xpath.FilterStack
{
    var __expr;
    var __ops;

    function FilterStack(filterVal)
    {
        this.__expr = new Array();
        this.__ops = new Array();
        var __reg2 = new mx.utils.StringTokenParser(filterVal);
        var __reg5 = __reg2.nextToken();
        var __reg4 = undefined;
        var __reg3 = __reg2.__get__token();
        for (;;) 
        {
            if (__reg5 == mx.utils.StringTokenParser.tkEOF) 
            {
                return;
            }
            if (__reg3 == "@") 
            {
                __reg5 = __reg2.nextToken();
                __reg3 = __reg2.token;
                __reg4 = new mx.xpath.FilterExpr(true, __reg3, null);
                this.__expr.splice(0, 0, __reg4);
                if (__reg2.nextToken() == mx.utils.StringTokenParser.tkSymbol) 
                {
                    if (__reg2.__get__token() == "=") 
                    {
                        __reg5 = __reg2.nextToken();
                        __reg4.__set__value(__reg2.token);
                    }
                }
            }
            else if (__reg3 == "and" || __reg3 == "or") 
            {
                this.__ops.splice(0, 0, __reg3);
            }
            else if (__reg3 != ")" && __reg3 != "(") 
            {
                __reg4 = new mx.xpath.FilterExpr(false, __reg3, null);
                this.__expr.splice(0, 0, __reg4);
                if (__reg2.nextToken() == mx.utils.StringTokenParser.tkSymbol) 
                {
                    if (__reg2.__get__token() == "=") 
                    {
                        __reg5 = __reg2.nextToken();
                        __reg4.__set__value(__reg2.token);
                    }
                }
            }
            __reg5 = __reg2.nextToken();
            __reg3 = __reg2.token;
        }
    }

    function get exprs()
    {
        return this.__expr;
    }

    function get ops()
    {
        return this.__ops;
    }

}

//Sprite 629
//  InitClip
dynamic class mx.utils.StringTokenParser
{
    static var tkEOF: Number = -1;
    static var tkSymbol: Number = 0;
    static var tkString: Number = 1;
    static var tkInteger: Number = 2;
    static var tkFloat: Number = 3;
    var _index: Number = 0;
    var _token: String = "";
    var _skipChars;
    var _source;

    function StringTokenParser(source, skipChars)
    {
        this._source = source;
        this._skipChars = skipChars == undefined ? null : skipChars;
    }

    function get token()
    {
        return this._token;
    }

    function getPos()
    {
        return this._index;
    }

    function nextToken()
    {
        var __reg4 = undefined;
        var __reg2 = undefined;
        var __reg3 = this._source.length;
        this.skipBlanks();
        if (this._index >= __reg3) 
        {
            return mx.utils.StringTokenParser.tkEOF;
        }
        __reg2 = this._source.charCodeAt(this._index);
        if ((__reg2 >= 65 && __reg2 <= 90) || (__reg2 >= 97 && __reg2 <= 122) || __reg2 >= 192 && __reg2 <= Infinity || __reg2 == 95) 
        {
            __reg4 = this._index;
            ++this._index;
            __reg2 = this._source.charCodeAt(this._index);
            while (((__reg2 >= 65 && __reg2 <= 90) || (__reg2 >= 97 && __reg2 <= 122) || __reg2 >= 48 && __reg2 <= 57 || __reg2 >= 192 && __reg2 <= Infinity || __reg2 == 95) && this._index < __reg3) 
            {
                ++this._index;
                __reg2 = this._source.charCodeAt(this._index);
            }
            this._token = this._source.substring(__reg4, this._index);
            return mx.utils.StringTokenParser.tkSymbol;
        }
        if (__reg2 == 34 || __reg2 == 39) 
        {
            ++this._index;
            __reg4 = this._index;
            __reg2 = this._source.charCodeAt(__reg4);
            while (__reg2 != 34 && __reg2 != 39 && this._index < __reg3) 
            {
                ++this._index;
                __reg2 = this._source.charCodeAt(this._index);
            }
            this._token = this._source.substring(__reg4, this._index);
            ++this._index;
            return mx.utils.StringTokenParser.tkString;
        }
        if (__reg2 == 45 || (__reg2 >= 48 && __reg2 <= 57)) 
        {
            var __reg5 = mx.utils.StringTokenParser.tkInteger;
            __reg4 = this._index;
            ++this._index;
            __reg2 = this._source.charCodeAt(this._index);
            while (__reg2 >= 48 && __reg2 <= 57 && this._index < __reg3) 
            {
                ++this._index;
                __reg2 = this._source.charCodeAt(this._index);
            }
            if (this._index < __reg3) 
            {
                if ((__reg2 >= 48 && __reg2 <= 57) || __reg2 == 46 || __reg2 == 43 || __reg2 == 45 || __reg2 == 101 || __reg2 == 69) 
                {
                    __reg5 = mx.utils.StringTokenParser.tkFloat;
                }
                while (((__reg2 >= 48 && __reg2 <= 57) || __reg2 == 46 || __reg2 == 43 || __reg2 == 45 || __reg2 == 101 || __reg2 == 69) && this._index < __reg3) 
                {
                    ++this._index;
                    __reg2 = this._source.charCodeAt(this._index);
                }
            }
            this._token = this._source.substring(__reg4, this._index);
            return __reg5;
        }
        this._token = this._source.charAt(this._index);
        ++this._index;
        return mx.utils.StringTokenParser.tkSymbol;
    }

    function skipBlanks()
    {
        if (this._index < this._source.length) 
        {
            var __reg2 = this._source.charAt(this._index);
            for (;;) 
            {
                if (!(__reg2 == " " || (this._skipChars != null && this.skipChar(__reg2)))) 
                {
                    return;
                }
                ++this._index;
                __reg2 = this._source.charAt(this._index);
            }
        }
    }

    function skipChar(ch)
    {
        var __reg2 = 0;
        while (__reg2 < this._skipChars.length) 
        {
            if (ch == this._skipChars[__reg2]) 
            {
                return true;
            }
            ++__reg2;
        }
        return false;
    }

}

//Sprite 630
//  InitClip
dynamic class mx.xpath.FilterExpr
{
    var __attr: Boolean = false;
    var __value = null;
    var __name = null;

    function FilterExpr(attrInit, nameInit, valueInit)
    {
        this.__attr = attrInit;
        this.__name = nameInit;
        this.__value = valueInit;
    }

    function get attr()
    {
        return this.__attr;
    }

    function set attr(newVal)
    {
        this.__attr = newVal;
    }

    function get name()
    {
        return this.__name;
    }

    function set name(newVal)
    {
        this.__name = newVal;
    }

    function get value()
    {
        return this.__value;
    }

    function set value(newVal)
    {
        this.__value = newVal;
    }

}

//Sprite 631
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.FirmwareUpdater
{
    var parentMC = null;
    var updateInfoBaseMC = null;
    var updateTxtMC = null;
    var updateTxtMaskMC = null;
    var onNoUpgrade = null;
    var fwUpgradeXml = null;
    var msgBox = null;
    var keyListener = null;
    var buttons = null;
    var netStatus: String = "Up";
    var msgText = null;

    function FirmwareUpdater()
    {
        this.onNoUpgrade = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.keyListener.onKeyDown = null;
        delete this.keyListener;
        this.keyListener = null;
        if (this.updateInfoBaseMC != null) 
        {
            removeMovieClip(this.updateInfoBaseMC);
        }
        delete this.onNoUpgrade;
        this.onNoUpgrade = null;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.fwUpgradeXml != null) 
        {
            delete this.fwUpgradeXml;
            this.fwUpgradeXml = null;
        }
        if (this.buttons != null) 
        {
            delete this.buttons;
            this.buttons = null;
        }
        this.updateTxtMC = null;
        this.updateTxtMaskMC = null;
        this.updateInfoBaseMC = null;
        this.parentMC = null;
    }

    function addListener(obj, method)
    {
        this.onNoUpgrade.addListener(obj, method);
        obj = null;
        method = null;
    }

    function removeListener(obj, method)
    {
        this.onNoUpgrade.removeListener(obj, method);
        obj = null;
        method = null;
    }

    function onNetStatusUpdate(netStatus)
    {
        this.netStatus = netStatus;
        netStatus = null;
    }

    function checkForFirmwareUpdate(parentMC)
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.parentMC = parentMC;
        if (this.fwUpgradeXml != null) 
        {
            delete this.fwUpgradeXml;
            this.fwUpgradeXml = null;
        }
        this.fwUpgradeXml = new XML();
        this.fwUpgradeXml.ignoreWhite = true;
        this.fwUpgradeXml.onLoad = mx.utils.Delegate.create(this, this.onLoadFirmwareUpgradeXml);
        this.fwUpgradeXml.load(com.jadoo.as2.JadooPlus.Utils.Config.getFirmwareUpgradeCheckUrl());
        parentMC = null;
    }

    function onLoadFirmwareUpgradeXml(success)
    {
        if (success) 
        {
            var __reg2 = Number(mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/updateAvailable").firstChild.nodeValue);
            if (__reg2 == 1) 
            {
                if (this.msgBox != null) 
                {
                    this.msgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
                    this.msgBox.destroy;
                    delete this.msgBox;
                    this.msgBox = null;
                }
                var __reg3 = this.parentMC.createEmptyMovieClip("fwUpgradeMsgBoxMC", this.parentMC.getNextHighestDepth());
                var __reg4 = com.jadoo.as2.JadooPlus.Utils.Messages.NEW_FIRMWARE_VERSION_AVAILABLE;
                this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
                this.msgBox.addListener("onButtonPress", this, this.onMsgBoxBtnPress);
                this.buttons = new Array("OK");
                this.msgBox.create(__reg3, "Firmware Upgrade", __reg4, true, this.buttons);
                __reg3 = null;
                __reg4 = null;
            }
            else 
            {
                this.onNoUpgrade.notify();
            }
            __reg2 = null;
            return;
        }
        this.onNoUpgrade.notify();
    }

    function onMsgBoxBtnPress(btnPressed)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
        this.displayUpdateInfo();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        btnPressed = null;
    }

    function displayUpdateInfo()
    {
        this.updateInfoBaseMC = this.parentMC.createEmptyMovieClip("updateInfoBaseMC", this.parentMC.getNextHighestDepth());
        var __reg15 = this.updateInfoBaseMC.attachMovie("backgroundMC", "updateInfoBgMC", this.updateInfoBaseMC.getNextHighestDepth());
        var __reg2 = new TextFormat();
        __reg2.align = "left";
        __reg2.font = "Arial";
        __reg2.bold = false;
        __reg2.size = 40;
        __reg2.color = 16777215;
        var __reg13 = this.updateInfoBaseMC.createTextField("titleTxt", this.updateInfoBaseMC.getNextHighestDepth(), 100, 40, 0, 0);
        __reg13.autoSize = true;
        __reg13.setNewTextFormat(__reg2);
        __reg13.htmlText = "Firmware Update";
        __reg2.size = 30;
        var __reg9 = this.updateInfoBaseMC.createTextField("versionTxt", this.updateInfoBaseMC.getNextHighestDepth(), 150, 120, 0, 0);
        __reg9.autoSize = true;
        __reg9.setNewTextFormat(__reg2);
        __reg9.htmlText = "Version:\t" + mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/latestRelease").firstChild.nodeValue;
        var __reg7 = this.updateInfoBaseMC.createTextField("relDateTxt", this.updateInfoBaseMC.getNextHighestDepth(), 150, __reg9._y + __reg9._height, 0, 0);
        __reg7.autoSize = true;
        __reg7.setNewTextFormat(__reg2);
        __reg7.htmlText = "Release Date:\t" + mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/releaseDate").firstChild.nodeValue;
        var __reg3 = this.updateInfoBaseMC.attachMovie("maskMC", "updateTxtBgMC", this.updateInfoBaseMC.getNextHighestDepth());
        __reg3._x = __reg7._x;
        __reg3._y = __reg7._y + __reg7._height + 10;
        __reg3._width = 980;
        __reg3._height = 375;
        __reg2.size = 24;
        var __reg14 = this.updateInfoBaseMC.createTextField("copyrightTxt", this.updateInfoBaseMC.getNextHighestDepth(), __reg3._x, __reg3._y + __reg3._height + 10, 0, 0);
        __reg14.autoSize = true;
        __reg14.setNewTextFormat(__reg2);
        __reg14.htmlText = mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/copyright").firstChild.nodeValue;
        __reg2.size = 30;
        var __reg11 = this.updateInfoBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.updateInfoBaseMC.getNextHighestDepth());
        __reg11._x = __reg3._x + __reg3._width - __reg11._width - 10;
        __reg11._y = __reg3._y + 10;
        __reg11._visible = false;
        var __reg12 = this.updateInfoBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.updateInfoBaseMC.getNextHighestDepth());
        __reg12._x = __reg11._x;
        __reg12._y = __reg3._y + __reg3._height - __reg12._height - 10;
        __reg12._visible = false;
        var __reg5 = this.updateInfoBaseMC.createEmptyMovieClip("updateTxtBaseMC", this.updateInfoBaseMC.getNextHighestDepth());
        __reg5._x = __reg3._x;
        __reg5._y = __reg3._y;
        this.updateTxtMC = __reg5.createEmptyMovieClip("updateTxtMC", __reg5.getNextHighestDepth());
        this.updateTxtMaskMC = __reg5.attachMovie("maskMC", "updateTxtMaskMC", __reg5.getNextHighestDepth());
        this.updateTxtMaskMC._width = __reg3._width - 30;
        this.updateTxtMaskMC._height = __reg3._height;
        __reg5.setMask(this.updateTxtMaskMC);
        __reg2.color = 8750469;
        var __reg10 = this.updateTxtMC.createTextField("changesTitleTxt", this.updateTxtMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg10.autoSize = true;
        __reg10.setNewTextFormat(__reg2);
        __reg10.htmlText = "Changes: ";
        __reg2.color = 16777215;
        var __reg4 = this.updateTxtMC.createTextField("changesTxt", this.updateTxtMC.getNextHighestDepth(), 0, __reg10._y + __reg10._height, this.updateTxtMaskMC._width - 10, 0);
        __reg4.wordWrap = true;
        __reg4.autoSize = true;
        __reg4.setNewTextFormat(__reg2);
        __reg4.multiline = true;
        __reg4.html = true;
        __reg4.htmlText = mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/changes").firstChild.nodeValue;
        __reg4._height = __reg4.textHeight;
        __reg2.color = 8750469;
        var __reg8 = this.updateTxtMC.createTextField("disclaimerTitleTxt", this.updateTxtMC.getNextHighestDepth(), 0, __reg4._y + __reg4._height + 10, 0, 0);
        __reg8.autoSize = true;
        __reg8.setNewTextFormat(__reg2);
        __reg8.htmlText = "Disclaimer: ";
        __reg2.color = 16777215;
        var __reg6 = this.updateTxtMC.createTextField("disclaimerTxt", this.updateTxtMC.getNextHighestDepth(), 0, __reg8._y + __reg8._height, this.updateTxtMaskMC._width - 10, 0);
        __reg6.wordWrap = true;
        __reg6.autoSize = true;
        __reg6.setNewTextFormat(__reg2);
        __reg6.htmlText = mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/disclaimer/resource/text").firstChild.nodeValue;
        __reg6._height = __reg6.textHeight;
        this.displayButtons();
        this.createMsgField();
        this.adjustArrows();
        __reg6 = null;
        __reg8 = null;
        __reg4 = null;
        __reg10 = null;
        __reg5 = null;
        __reg11 = null;
        __reg12 = null;
        __reg3 = null;
        __reg7 = null;
        __reg9 = null;
        __reg13 = null;
        __reg2 = null;
        __reg15 = null;
    }

    function displayButtons()
    {
        var __reg4 = new TextFormat();
        __reg4.align = "center";
        __reg4.font = "Arial";
        __reg4.bold = false;
        __reg4.size = 28;
        __reg4.color = 0;
        var __reg2 = this.updateInfoBaseMC.createEmptyMovieClip("agreeBtnBaseMC", this.updateInfoBaseMC.getNextHighestDepth());
        var __reg5 = __reg2.attachMovie("infoBtnDis", "agreeBtnDisableMC", __reg2.getNextHighestDepth());
        __reg2._x = this.updateInfoBaseMC.updateTxtBgMC._x + this.updateInfoBaseMC.updateTxtBgMC._width - __reg2._width;
        __reg2._y = this.updateInfoBaseMC.updateTxtBgMC._y + this.updateInfoBaseMC.updateTxtBgMC._height + 55;
        var __reg6 = __reg2.attachMovie("infoBtnEnb", "agreeBtnEnableMC", __reg2.getNextHighestDepth());
        var __reg3 = __reg2.createTextField("agreeBtnTxt", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(__reg4);
        __reg3.htmlText = "Agree";
        __reg3._x = (__reg5._width - __reg3._width) / 2;
        __reg3._y = (__reg5._height - __reg3._height) / 2;
        __reg3 = null;
        __reg6 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function createMsgField()
    {
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        var __reg2 = new TextFormat();
        __reg2.align = "left";
        __reg2.font = "Arial";
        __reg2.bold = false;
        __reg2.size = 28;
        __reg2.color = 15441692;
        var __reg3 = this.updateInfoBaseMC.createEmptyMovieClip("msgBaseMC", this.updateInfoBaseMC.getNextHighestDepth());
        this.msgText.createTextField(__reg3, 0, 0, 300, 40, "false");
        this.msgText.setTextFormat(__reg2);
        this.msgText.setY(this.updateInfoBaseMC.agreeBtnBaseMC._y);
        this.msgText.setX(this.updateInfoBaseMC.updateTxtBgMC._x);
        this.msgText.setWidth(this.updateInfoBaseMC.updateTxtBgMC._width - this.updateInfoBaseMC.agreeBtnBaseMC.agreeBtnDisableMC._width - 15);
    }

    function moveTextUp()
    {
        if (this.updateTxtMC._y < this.updateTxtMaskMC._y) 
        {
            this.updateTxtMC._y = this.updateTxtMC._y + 40;
            if (this.updateTxtMC._y > this.updateTxtMaskMC._y) 
            {
                this.updateTxtMC._y = this.updateTxtMaskMC._y;
            }
            this.adjustArrows();
        }
    }

    function moveTextDown()
    {
        if (this.updateTxtMC._y + this.updateTxtMC._height > this.updateTxtMaskMC._y + this.updateTxtMaskMC._height) 
        {
            this.updateTxtMC._y = this.updateTxtMC._y - 40;
            if (this.updateTxtMC._y + this.updateTxtMC._height < this.updateTxtMaskMC._y + this.updateTxtMaskMC._height) 
            {
                this.updateTxtMC._y = this.updateTxtMaskMC._y + this.updateTxtMaskMC._height - this.updateTxtMC._height;
            }
            this.adjustArrows();
        }
    }

    function adjustArrows()
    {
        if (this.updateTxtMC._y >= this.updateTxtMaskMC._y) 
        {
            this.updateInfoBaseMC.upArrowMC._visible = false;
        }
        else 
        {
            this.updateInfoBaseMC.upArrowMC._visible = true;
        }
        if (int(this.updateTxtMC._y + this.updateTxtMC._height) <= int(this.updateTxtMaskMC._y + this.updateTxtMaskMC._height)) 
        {
            this.updateInfoBaseMC.downArrowMC._visible = false;
            return;
        }
        this.updateInfoBaseMC.downArrowMC._visible = true;
    }

    function onKeyDown()
    {
        this.msgText.setHtmlText("");
        if ((__reg0 = Key.getCode()) === 38) 
        {
            this.moveTextUp();
            return;
        }
        else if (__reg0 === 40) 
        {
            this.moveTextDown();
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                var __reg2 = new XML();
                __reg2.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=update_firmware&arg1=" + mx.xpath.XPathAPI.selectSingleNode(this.fwUpgradeXml.firstChild, "/updateXML/url").firstChild.nodeValue);
            }
            else 
            {
                this.msgText.setHtmlText(com.jadoo.as2.JadooPlus.Utils.Messages.NETWORK_LINK_DOWN);
                this.msgText.enable(false, 2000);
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.onNoUpgrade.notify("Exit");
        return;
    }

}

//Sprite 632
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.TextField.TweenTextField
{
    static var baseIdx: Number = 0;
    var mustTween: Boolean = false;
    var textFieldPosX = null;
    var textFieldPosY = null;
    var tweenStartTimerId: Number = -1;
    var textNameBaseMC = null;
    var textMaskMC = null;
    var txtField = null;
    var autoSize = null;

    function TweenTextField()
    {
    }

    function getHeight()
    {
        return this.textMaskMC._height;
    }

    function getWidth()
    {
        return this.textMaskMC._width;
    }

    function getX()
    {
        return this.textNameBaseMC._x;
    }

    function getY()
    {
        return this.textNameBaseMC._y;
    }

    function getTextWidth()
    {
        return this.txtField.textWidth;
    }

    function getTextHeight()
    {
        return this.txtField.textHeight;
    }

    function getTextFormat()
    {
        return this.txtField.getTextFormat();
    }

    function getHtmlText()
    {
        return this.txtField.htmlText;
    }

    function getPassword()
    {
        return this.txtField.password;
    }

    function getTextLength()
    {
        return this.txtField.length;
    }

    function createTextField(itemBaseMC, x, y, width, height, autosize)
    {
        this.autoSize = autosize;
        this.textNameBaseMC = itemBaseMC.createEmptyMovieClip("itemNameBaseMC" + com.jadoo.as2.JadooPlus.TextField.TweenTextField.baseIdx++, itemBaseMC.getNextHighestDepth());
        this.textNameBaseMC._x = x;
        this.textNameBaseMC._y = y;
        this.txtField = this.textNameBaseMC.createTextField("textfield", this.textNameBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.txtField.autoSize = true;
        this.textMaskMC = this.textNameBaseMC.attachMovie("infoBtnDis", "itemNameMaskMC", this.textNameBaseMC.getNextHighestDepth());
        this.textMaskMC._width = width;
        this.textMaskMC._height = height;
        this.textNameBaseMC.setMask(this.textMaskMC);
        itemBaseMC = null;
        x = null;
        y = null;
        width = null;
        height = null;
        autosize = null;
    }

    function setX(textFieldX)
    {
        this.textNameBaseMC._x = textFieldX;
    }

    function setY(textFieldY)
    {
        this.textNameBaseMC._y = textFieldY;
    }

    function setWidth(textFieldWidth)
    {
        this.textMaskMC._width = textFieldWidth;
        this.setAlignment();
    }

    function setHeight(textFieldHeight)
    {
        this.textMaskMC._height = textFieldHeight;
        this.txtField._y = (this.textMaskMC._height - this.txtField.textHeight) / 2;
    }

    function setTextFormat(txtFormat)
    {
        this.txtField.setNewTextFormat(txtFormat);
        if (this.autoSize == "true") 
        {
            this.setHeight(this.txtField._height);
            this.setWidth(this.txtField._width);
        }
        else 
        {
            this.setAlignment();
        }
        this.txtField._y = (this.textMaskMC._height - this.txtField.textHeight) / 2;
        txtFormat = null;
    }

    function setHtmlText(htmlText)
    {
        this.txtField.htmlText = htmlText;
        this.txtField._y = (this.textMaskMC._height - this.txtField.textHeight) / 2;
        if (this.autoSize == "true") 
        {
            this.setHeight(this.txtField._height);
            this.setWidth(this.txtField._width);
        }
        else 
        {
            this.setAlignment();
        }
        htmlText = null;
    }

    function setWordWrap(boolean)
    {
        this.txtField.wordWrap = boolean;
    }

    function setPassword(boolean)
    {
        this.txtField.password = boolean;
    }

    function setVisibility(boolean)
    {
        this.txtField._visible = boolean;
    }

    function removeTextField()
    {
        if (this.tweenStartTimerId != -1) 
        {
            clearInterval(this.tweenStartTimerId);
            this.tweenStartTimerId = -1;
        }
        com.caurina.transitions.Tweener.removeTweens(this.txtField);
        this.txtField.removeTextField();
        this.txtField = null;
        this.textNameBaseMC.removeMovieClip();
    }

    function setAlignment()
    {
        if (this.txtField._width < this.textMaskMC._width) 
        {
            if (this.txtField.getNewTextFormat().align == "center") 
            {
                this.txtField._x = (this.textMaskMC._width - this.txtField._width) / 2;
            }
            else if (this.txtField.getNewTextFormat().align == "right") 
            {
                this.txtField._x = this.textMaskMC._width - this.txtField._width;
            }
            else 
            {
                this.txtField._x = 0;
            }
            return;
        }
        this.txtField._x = 0;
    }

    function tweenText(startTweenX)
    {
        if (this.txtField.textWidth > this.textMaskMC._width || this.mustTween == true) 
        {
            this.txtField._x = startTweenX;
            com.caurina.transitions.Tweener.addTween(this.txtField, {_x: 0 - this.txtField._width, time: (this.txtField._width + this.txtField._x) / 15 * 0.2, transition: "linear", onComplete: this.tweenText, onCompleteScope: this, onCompleteParams: [this.textMaskMC._width]});
        }
    }

    function enable(mustTween, timeInMilliSeconds)
    {
        this.mustTween = mustTween;
        if (com.caurina.transitions.Tweener.isTweening(this.txtField) == false && this.tweenStartTimerId == -1) 
        {
            this.textFieldPosX = this.txtField._x;
            this.textFieldPosY = this.txtField._y;
            if (this.txtField.textWidth > this.textMaskMC._width || mustTween == true) 
            {
                this.tweenStartTimerId = setInterval(this, "setTweenText", timeInMilliSeconds);
            }
        }
    }

    function disable()
    {
        if (this.tweenStartTimerId != -1) 
        {
            clearInterval(this.tweenStartTimerId);
            this.tweenStartTimerId = -1;
        }
        if (com.caurina.transitions.Tweener.isTweening(this.txtField)) 
        {
            com.caurina.transitions.Tweener.removeTweens(this.txtField);
        }
        this.txtField._x = this.textFieldPosX;
        this.txtField._y = this.textFieldPosY;
    }

    function setTweenText()
    {
        clearInterval(this.tweenStartTimerId);
        this.tweenStartTimerId = -1;
        if (com.caurina.transitions.Tweener.isTweening(this.txtField) == false) 
        {
            this.tweenText(this.textFieldPosX);
        }
    }

}

//Sprite 633
//  InitClip
dynamic class com.caurina.transitions.Tweener
{
    static var _engineExists: Boolean = false;
    static var _inited: Boolean = false;
    static var _timeScale: Number = 1;
    static var autoOverwrite: Boolean = true;

    function Tweener()
    {
        trace("Tweener is an static class and should not be instantiated.");
    }

    static function addTween(p_scopes, p_parameters)
    {
        if (p_scopes == undefined) 
        {
            return false;
        }
        var __reg3 = undefined;
        var __reg7 = undefined;
        var __reg2 = undefined;
        var __reg11 = undefined;
        if (p_scopes instanceof Array) 
        {
            __reg11 = p_scopes.concat();
        }
        else 
        {
            __reg11 = [p_scopes];
        }
        var __reg5 = com.caurina.transitions.TweenListObj.makePropertiesChain(p_parameters);
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        if (!com.caurina.transitions.Tweener._engineExists || _root[com.caurina.transitions.Tweener.getControllerName()] == undefined) 
        {
            com.caurina.transitions.Tweener.startEngine();
        }
        var __reg19 = isNaN(__reg5.time) ? 0 : __reg5.time;
        var __reg12 = isNaN(__reg5.delay) ? 0 : __reg5.delay;
        var __reg4 = new Object();
        var __reg24 = {overwrite: true, time: true, delay: true, useFrames: true, skipUpdates: true, transition: true, transitionParams: true, onStart: true, onUpdate: true, onComplete: true, onOverwrite: true, onError: true, rounded: true, onStartParams: true, onUpdateParams: true, onCompleteParams: true, onOverwriteParams: true, onStartScope: true, onUpdateScope: true, onCompleteScope: true, onOverwriteScope: true, onErrorScope: true};
        var __reg13 = new Object();
        for (__reg2 in __reg5) 
        {
            if (!__reg24[__reg2]) 
            {
                if (com.caurina.transitions.Tweener._specialPropertySplitterList[__reg2] == undefined) 
                {
                    if (com.caurina.transitions.Tweener._specialPropertyModifierList[__reg2] == undefined) 
                    {
                        __reg4[__reg2] = {valueStart: undefined, valueComplete: __reg5[__reg2]};
                    }
                    else 
                    {
                        var __reg10 = com.caurina.transitions.Tweener._specialPropertyModifierList[__reg2].modifyValues(__reg5[__reg2]);
                        __reg3 = 0;
                        while (__reg3 < __reg10.length) 
                        {
                            __reg13[__reg10[__reg3].name] = {modifierParameters: __reg10[__reg3].parameters, modifierFunction: com.caurina.transitions.Tweener._specialPropertyModifierList[__reg2].getValue};
                            ++__reg3;
                        }
                    }
                }
                else 
                {
                    var __reg8 = com.caurina.transitions.Tweener._specialPropertySplitterList[__reg2].splitValues(__reg5[__reg2], com.caurina.transitions.Tweener._specialPropertySplitterList[__reg2].parameters);
                    __reg3 = 0;
                    while (__reg3 < __reg8.length) 
                    {
                        if (com.caurina.transitions.Tweener._specialPropertySplitterList[__reg8[__reg3].name] == undefined) 
                        {
                            __reg4[__reg8[__reg3].name] = {valueStart: undefined, valueComplete: __reg8[__reg3].value, arrayIndex: __reg8[__reg3].arrayIndex, isSpecialProperty: false};
                        }
                        else 
                        {
                            var __reg9 = com.caurina.transitions.Tweener._specialPropertySplitterList[__reg8[__reg3].name].splitValues(__reg8[__reg3].value, com.caurina.transitions.Tweener._specialPropertySplitterList[__reg8[__reg3].name].parameters);
                            __reg7 = 0;
                            while (__reg7 < __reg9.length) 
                            {
                                __reg4[__reg9[__reg7].name] = {valueStart: undefined, valueComplete: __reg9[__reg7].value, arrayIndex: __reg9[__reg7].arrayIndex, isSpecialProperty: false};
                                ++__reg7;
                            }
                        }
                        ++__reg3;
                    }
                }
            }
        }
        for (__reg2 in __reg4) 
        {
            if (com.caurina.transitions.Tweener._specialPropertyList[__reg2] == undefined) 
            {
                if (__reg11[0][__reg2] == undefined) 
                {
                    com.caurina.transitions.Tweener.printError("The property \'" + __reg2 + "\' doesn\'t seem to be a normal object property of " + __reg11[0].toString() + " or a registered special property.");
                }
            }
            else 
            {
                __reg4[__reg2].isSpecialProperty = true;
            }
        }
        for (__reg2 in __reg13) 
        {
            if (__reg4[__reg2] != undefined) 
            {
                __reg4[__reg2].modifierParameters = __reg13[__reg2].modifierParameters;
                __reg4[__reg2].modifierFunction = __reg13[__reg2].modifierFunction;
            }
        }
        var __reg21 = undefined;
        if (typeof __reg5.transition == "string") 
        {
            var __reg26 = __reg5.transition.toLowerCase();
            __reg21 = com.caurina.transitions.Tweener._transitionList[__reg26];
        }
        else 
        {
            __reg21 = __reg5.transition;
        }
        if (__reg21 == undefined) 
        {
            __reg21 = com.caurina.transitions.Tweener._transitionList.easeoutexpo;
        }
        var __reg14 = undefined;
        var __reg6 = undefined;
        var __reg20 = undefined;
        __reg3 = 0;
        while (__reg3 < __reg11.length) 
        {
            __reg14 = new Object();
            for (__reg2 in __reg4) 
            {
                __reg14[__reg2] = new com.caurina.transitions.PropertyInfoObj(__reg4[__reg2].valueStart, __reg4[__reg2].valueComplete, __reg4[__reg2].valueComplete, __reg4[__reg2].arrayIndex, {}, __reg4[__reg2].isSpecialProperty, __reg4[__reg2].modifierFunction, __reg4[__reg2].modifierParameters);
            }
            if (__reg5.useFrames == true) 
            {
                __reg6 = new com.caurina.transitions.TweenListObj(__reg11[__reg3], com.caurina.transitions.Tweener._currentTimeFrame + __reg12 / com.caurina.transitions.Tweener._timeScale, com.caurina.transitions.Tweener._currentTimeFrame + (__reg12 + __reg19) / com.caurina.transitions.Tweener._timeScale, true, __reg21, __reg5.transitionParams);
            }
            else 
            {
                __reg6 = new com.caurina.transitions.TweenListObj(__reg11[__reg3], com.caurina.transitions.Tweener._currentTime + __reg12 * 1000 / com.caurina.transitions.Tweener._timeScale, com.caurina.transitions.Tweener._currentTime + (__reg12 * 1000 + __reg19 * 1000) / com.caurina.transitions.Tweener._timeScale, false, __reg21, __reg5.transitionParams);
            }
            __reg6.properties = __reg14;
            __reg6.onStart = __reg5.onStart;
            __reg6.onUpdate = __reg5.onUpdate;
            __reg6.onComplete = __reg5.onComplete;
            __reg6.onOverwrite = __reg5.onOverwrite;
            __reg6.onError = __reg5.onError;
            __reg6.onStartParams = __reg5.onStartParams;
            __reg6.onUpdateParams = __reg5.onUpdateParams;
            __reg6.onCompleteParams = __reg5.onCompleteParams;
            __reg6.onOverwriteParams = __reg5.onOverwriteParams;
            __reg6.onStartScope = __reg5.onStartScope;
            __reg6.onUpdateScope = __reg5.onUpdateScope;
            __reg6.onCompleteScope = __reg5.onCompleteScope;
            __reg6.onOverwriteScope = __reg5.onOverwriteScope;
            __reg6.onErrorScope = __reg5.onErrorScope;
            __reg6.rounded = __reg5.rounded;
            __reg6.skipUpdates = __reg5.skipUpdates;
            if (__reg5.overwrite == undefined ? com.caurina.transitions.Tweener.autoOverwrite : __reg5.overwrite) 
            {
                com.caurina.transitions.Tweener.removeTweensByTime(__reg6.scope, __reg6.properties, __reg6.timeStart, __reg6.timeComplete);
            }
            com.caurina.transitions.Tweener._tweenList.push(__reg6);
            if (__reg19 == 0 && __reg12 == 0) 
            {
                __reg20 = com.caurina.transitions.Tweener._tweenList.length - 1;
                com.caurina.transitions.Tweener.updateTweenByIndex(__reg20);
                com.caurina.transitions.Tweener.removeTweenByIndex(__reg20);
            }
            ++__reg3;
        }
        return true;
    }

    static function addCaller(p_scopes, p_parameters)
    {
        if (p_scopes == undefined) 
        {
            return false;
        }
        var __reg5 = undefined;
        var __reg6 = undefined;
        if (p_scopes instanceof Array) 
        {
            __reg6 = p_scopes.concat();
        }
        else 
        {
            __reg6 = [p_scopes];
        }
        var __reg3 = p_parameters;
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        if (!com.caurina.transitions.Tweener._engineExists || _root[com.caurina.transitions.Tweener.getControllerName()] == undefined) 
        {
            com.caurina.transitions.Tweener.startEngine();
        }
        var __reg7 = isNaN(__reg3.time) ? 0 : __reg3.time;
        var __reg4 = isNaN(__reg3.delay) ? 0 : __reg3.delay;
        var __reg9 = undefined;
        if (typeof __reg3.transition == "string") 
        {
            var __reg11 = __reg3.transition.toLowerCase();
            __reg9 = com.caurina.transitions.Tweener._transitionList[__reg11];
        }
        else 
        {
            __reg9 = __reg3.transition;
        }
        if (__reg9 == undefined) 
        {
            __reg9 = com.caurina.transitions.Tweener._transitionList.easeoutexpo;
        }
        var __reg2 = undefined;
        var __reg8 = undefined;
        __reg5 = 0;
        while (__reg5 < __reg6.length) 
        {
            if (__reg3.useFrames == true) 
            {
                __reg2 = new com.caurina.transitions.TweenListObj(__reg6[__reg5], com.caurina.transitions.Tweener._currentTimeFrame + __reg4 / com.caurina.transitions.Tweener._timeScale, com.caurina.transitions.Tweener._currentTimeFrame + (__reg4 + __reg7) / com.caurina.transitions.Tweener._timeScale, true, __reg9, __reg3.transitionParams);
            }
            else 
            {
                __reg2 = new com.caurina.transitions.TweenListObj(__reg6[__reg5], com.caurina.transitions.Tweener._currentTime + __reg4 * 1000 / com.caurina.transitions.Tweener._timeScale, com.caurina.transitions.Tweener._currentTime + (__reg4 * 1000 + __reg7 * 1000) / com.caurina.transitions.Tweener._timeScale, false, __reg9, __reg3.transitionParams);
            }
            __reg2.properties = undefined;
            __reg2.onStart = __reg3.onStart;
            __reg2.onUpdate = __reg3.onUpdate;
            __reg2.onComplete = __reg3.onComplete;
            __reg2.onOverwrite = __reg3.onOverwrite;
            __reg2.onStartParams = __reg3.onStartParams;
            __reg2.onUpdateParams = __reg3.onUpdateParams;
            __reg2.onCompleteParams = __reg3.onCompleteParams;
            __reg2.onOverwriteParams = __reg3.onOverwriteParams;
            __reg2.onStartScope = __reg3.onStartScope;
            __reg2.onUpdateScope = __reg3.onUpdateScope;
            __reg2.onCompleteScope = __reg3.onCompleteScope;
            __reg2.onOverwriteScope = __reg3.onOverwriteScope;
            __reg2.onErrorScope = __reg3.onErrorScope;
            __reg2.isCaller = true;
            __reg2.count = __reg3.count;
            __reg2.waitFrames = __reg3.waitFrames;
            com.caurina.transitions.Tweener._tweenList.push(__reg2);
            if (__reg7 == 0 && __reg4 == 0) 
            {
                __reg8 = com.caurina.transitions.Tweener._tweenList.length - 1;
                com.caurina.transitions.Tweener.updateTweenByIndex(__reg8);
                com.caurina.transitions.Tweener.removeTweenByIndex(__reg8);
            }
            ++__reg5;
        }
        return true;
    }

    static function removeTweensByTime(p_scope, p_properties, p_timeStart, p_timeComplete)
    {
        var __reg5 = false;
        var __reg4 = undefined;
        var __reg1 = undefined;
        var __reg7 = com.caurina.transitions.Tweener._tweenList.length;
        var __reg2 = undefined;
        __reg1 = 0;
        while (__reg1 < __reg7) 
        {
            if (p_scope == com.caurina.transitions.Tweener._tweenList[__reg1].scope) 
            {
                if (p_timeComplete > com.caurina.transitions.Tweener._tweenList[__reg1].timeStart && p_timeStart < com.caurina.transitions.Tweener._tweenList[__reg1].timeComplete) 
                {
                    __reg4 = false;
                    for (__reg2 in com.caurina.transitions.Tweener._tweenList[__reg1].properties) 
                    {
                        if (p_properties[__reg2] != undefined) 
                        {
                            if (com.caurina.transitions.Tweener._tweenList[__reg1].onOverwrite != undefined) 
                            {
                                var __reg3 = com.caurina.transitions.Tweener._tweenList[__reg1].onOverwriteScope == undefined ? com.caurina.transitions.Tweener._tweenList[__reg1].scope : com.caurina.transitions.Tweener._tweenList[__reg1].onOverwriteScope;
                                com.caurina.transitions.Tweener._tweenList[__reg1].onOverwrite.apply(__reg3, com.caurina.transitions.Tweener._tweenList[__reg1].onOverwriteParams);
                            }
                            com.caurina.transitions.Tweener._tweenList[__reg1].properties[__reg2] = undefined;
                            delete com.caurina.transitions.Tweener._tweenList[__reg1].properties[__reg2];
                            __reg4 = true;
                            __reg5 = true;
                        }
                    }
                    if (__reg4) 
                    {
                        if (com.caurina.transitions.AuxFunctions.getObjectLength(com.caurina.transitions.Tweener._tweenList[__reg1].properties) == 0) 
                        {
                            com.caurina.transitions.Tweener.removeTweenByIndex(__reg1);
                        }
                    }
                }
            }
            ++__reg1;
        }
        return __reg5;
    }

    static function removeTweens(p_scope)
    {
        var __reg5 = new Array();
        var __reg3 = undefined;
        __reg3 = 1;
        while (__reg3 < arguments.length) 
        {
            if (typeof arguments[__reg3] == "string" && !com.caurina.transitions.AuxFunctions.isInArray(arguments[__reg3], __reg5)) 
            {
                if (com.caurina.transitions.Tweener._specialPropertySplitterList[arguments[__reg3]]) 
                {
                    var __reg6 = com.caurina.transitions.Tweener._specialPropertySplitterList[arguments[__reg3]];
                    var __reg4 = __reg6.splitValues(p_scope, null);
                    var __reg2 = 0;
                    while (__reg2 < __reg4.length) 
                    {
                        __reg5.push(__reg4[__reg2].name);
                        ++__reg2;
                    }
                }
                else 
                {
                    __reg5.push(arguments[__reg3]);
                }
            }
            ++__reg3;
        }
        return com.caurina.transitions.Tweener.affectTweens(com.caurina.transitions.Tweener.removeTweenByIndex, p_scope, __reg5);
    }

    static function removeAllTweens()
    {
        var __reg2 = false;
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            com.caurina.transitions.Tweener.removeTweenByIndex(__reg1);
            __reg2 = true;
            ++__reg1;
        }
        return __reg2;
    }

    static function pauseTweens(p_scope)
    {
        var __reg3 = new Array();
        var __reg2 = undefined;
        __reg2 = 1;
        while (__reg2 < arguments.length) 
        {
            if (typeof arguments[__reg2] == "string" && !com.caurina.transitions.AuxFunctions.isInArray(arguments[__reg2], __reg3)) 
            {
                __reg3.push(arguments[__reg2]);
            }
            ++__reg2;
        }
        return com.caurina.transitions.Tweener.affectTweens(com.caurina.transitions.Tweener.pauseTweenByIndex, p_scope, __reg3);
    }

    static function pauseAllTweens()
    {
        var __reg2 = false;
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            com.caurina.transitions.Tweener.pauseTweenByIndex(__reg1);
            __reg2 = true;
            ++__reg1;
        }
        return __reg2;
    }

    static function resumeTweens(p_scope)
    {
        var __reg3 = new Array();
        var __reg2 = undefined;
        __reg2 = 1;
        while (__reg2 < arguments.length) 
        {
            if (typeof arguments[__reg2] == "string" && !com.caurina.transitions.AuxFunctions.isInArray(arguments[__reg2], __reg3)) 
            {
                __reg3.push(arguments[__reg2]);
            }
            ++__reg2;
        }
        return com.caurina.transitions.Tweener.affectTweens(com.caurina.transitions.Tweener.resumeTweenByIndex, p_scope, __reg3);
    }

    static function resumeAllTweens()
    {
        var __reg2 = false;
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            com.caurina.transitions.Tweener.resumeTweenByIndex(__reg1);
            __reg2 = true;
            ++__reg1;
        }
        return __reg2;
    }

    static function affectTweens(p_affectFunction, p_scope, p_properties)
    {
        var __reg5 = false;
        var __reg2 = undefined;
        if (!com.caurina.transitions.Tweener._tweenList) 
        {
            return false;
        }
        __reg2 = 0;
        while (__reg2 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            if (com.caurina.transitions.Tweener._tweenList[__reg2].scope == p_scope) 
            {
                if (p_properties.length == 0) 
                {
                    p_affectFunction(__reg2);
                    __reg5 = true;
                }
                else 
                {
                    var __reg4 = new Array();
                    var __reg1 = undefined;
                    __reg1 = 0;
                    while (__reg1 < p_properties.length) 
                    {
                        if (com.caurina.transitions.Tweener._tweenList[__reg2].properties[p_properties[__reg1]] != undefined) 
                        {
                            __reg4.push(p_properties[__reg1]);
                        }
                        ++__reg1;
                    }
                    if (__reg4.length > 0) 
                    {
                        var __reg7 = com.caurina.transitions.AuxFunctions.getObjectLength(com.caurina.transitions.Tweener._tweenList[__reg2].properties);
                        if (__reg7 == __reg4.length) 
                        {
                            p_affectFunction(__reg2);
                            __reg5 = true;
                        }
                        else 
                        {
                            var __reg8 = com.caurina.transitions.Tweener.splitTweens(__reg2, __reg4);
                            p_affectFunction(__reg8);
                            __reg5 = true;
                        }
                    }
                }
            }
            ++__reg2;
        }
        return __reg5;
    }

    static function splitTweens(p_tween, p_properties)
    {
        var __reg6 = com.caurina.transitions.Tweener._tweenList[p_tween];
        var __reg5 = __reg6.clone(false);
        var __reg1 = undefined;
        var __reg2 = undefined;
        __reg1 = 0;
        while (__reg1 < p_properties.length) 
        {
            __reg2 = p_properties[__reg1];
            if (__reg6.properties[__reg2] != undefined) 
            {
                __reg6.properties[__reg2] = undefined;
                delete __reg6.properties[__reg2];
            }
            ++__reg1;
        }
        var __reg4 = undefined;
        for (__reg2 in __reg5.properties) 
        {
            __reg4 = false;
            __reg1 = 0;
            while (__reg1 < p_properties.length) 
            {
                if (p_properties[__reg1] == __reg2) 
                {
                    __reg4 = true;
                    break;
                }
                ++__reg1;
            }
            if (!__reg4) 
            {
                __reg5.properties[__reg2] = undefined;
                delete __reg5.properties[__reg2];
            }
        }
        com.caurina.transitions.Tweener._tweenList.push(__reg5);
        return com.caurina.transitions.Tweener._tweenList.length - 1;
    }

    static function updateTweens()
    {
        if (com.caurina.transitions.Tweener._tweenList.length == 0) 
        {
            return false;
        }
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            if (!com.caurina.transitions.Tweener._tweenList[__reg1].isPaused) 
            {
                if (!com.caurina.transitions.Tweener.updateTweenByIndex(__reg1)) 
                {
                    com.caurina.transitions.Tweener.removeTweenByIndex(__reg1);
                }
                if (com.caurina.transitions.Tweener._tweenList[__reg1] == null) 
                {
                    com.caurina.transitions.Tweener.removeTweenByIndex(__reg1, true);
                    --__reg1;
                }
            }
            ++__reg1;
        }
        return true;
    }

    static function removeTweenByIndex(p_tween, p_finalRemoval)
    {
        com.caurina.transitions.Tweener._tweenList[p_tween] = null;
        if (p_finalRemoval) 
        {
            com.caurina.transitions.Tweener._tweenList.splice(p_tween, 1);
        }
        return true;
    }

    static function pauseTweenByIndex(p_tween)
    {
        var __reg1 = com.caurina.transitions.Tweener._tweenList[p_tween];
        if (__reg1 == null || __reg1.isPaused) 
        {
            return false;
        }
        __reg1.timePaused = com.caurina.transitions.Tweener.getCurrentTweeningTime(__reg1);
        __reg1.isPaused = true;
        return true;
    }

    static function resumeTweenByIndex(p_tween)
    {
        var __reg1 = com.caurina.transitions.Tweener._tweenList[p_tween];
        if (__reg1 == null || !__reg1.isPaused) 
        {
            return false;
        }
        var __reg2 = com.caurina.transitions.Tweener.getCurrentTweeningTime(__reg1);
        __reg1.timeStart = __reg1.timeStart + (__reg2 - __reg1.timePaused);
        __reg1.timeComplete = __reg1.timeComplete + (__reg2 - __reg1.timePaused);
        __reg1.timePaused = undefined;
        __reg1.isPaused = false;
        return true;
    }

    static function updateTweenByIndex(i)
    {
        var __reg1 = com.caurina.transitions.Tweener._tweenList[i];
        if (__reg1 == null || !__reg1.scope) 
        {
            return false;
        }
        var __reg13 = false;
        var __reg14 = undefined;
        var __reg3 = undefined;
        var __reg7 = undefined;
        var __reg10 = undefined;
        var __reg9 = undefined;
        var __reg6 = undefined;
        var __reg2 = undefined;
        var __reg12 = undefined;
        var __reg5 = undefined;
        var __reg8 = com.caurina.transitions.Tweener.getCurrentTweeningTime(__reg1);
        var __reg4 = undefined;
        if (__reg8 >= __reg1.timeStart) 
        {
            __reg5 = __reg1.scope;
            if (__reg1.isCaller) 
            {
                do 
                {
                    __reg7 = (__reg1.timeComplete - __reg1.timeStart) / __reg1.count * (__reg1.timesCalled + 1);
                    __reg10 = __reg1.timeStart;
                    __reg9 = __reg1.timeComplete - __reg1.timeStart;
                    __reg6 = __reg1.timeComplete - __reg1.timeStart;
                    __reg3 = __reg1.transition(__reg7, __reg10, __reg9, __reg6, __reg1.transitionParams);
                    if (__reg8 >= __reg3) 
                    {
                        if (__reg1.onUpdate != undefined) 
                        {
                            __reg12 = __reg1.onUpdateScope == undefined ? __reg5 : __reg1.onUpdateScope;
                            __reg1.onUpdate.apply(__reg12, __reg1.onUpdateParams);
                        }
                        ++__reg1.timesCalled;
                        if (__reg1.timesCalled >= __reg1.count) 
                        {
                            __reg13 = true;
                            break;
                        }
                        if (__reg1.waitFrames) 
                        {
                            break;
                        }
                    }
                }
                while (__reg8 >= __reg3);
            }
            else 
            {
                __reg14 = __reg1.skipUpdates < 1 || __reg1.skipUpdates == undefined || __reg1.updatesSkipped >= __reg1.skipUpdates;
                if (__reg8 >= __reg1.timeComplete) 
                {
                    __reg13 = true;
                    __reg14 = true;
                }
                if (!__reg1.hasStarted) 
                {
                    if (__reg1.onStart != undefined) 
                    {
                        __reg12 = __reg1.onStartScope == undefined ? __reg5 : __reg1.onStartScope;
                        __reg1.onStart.apply(__reg12, __reg1.onStartParams);
                    }
                    var __reg11 = undefined;
                    for (__reg2 in __reg1.properties) 
                    {
                        if (__reg1.properties[__reg2].isSpecialProperty) 
                        {
                            if (com.caurina.transitions.Tweener._specialPropertyList[__reg2].preProcess != undefined) 
                            {
                                __reg1.properties[__reg2].valueComplete = com.caurina.transitions.Tweener._specialPropertyList[__reg2].preProcess(__reg5, com.caurina.transitions.Tweener._specialPropertyList[__reg2].parameters, __reg1.properties[__reg2].originalValueComplete, __reg1.properties[__reg2].extra);
                            }
                            __reg11 = com.caurina.transitions.Tweener._specialPropertyList[__reg2].getValue(__reg5, com.caurina.transitions.Tweener._specialPropertyList[__reg2].parameters, __reg1.properties[__reg2].extra);
                        }
                        else 
                        {
                            __reg11 = __reg5[__reg2];
                        }
                        __reg1.properties[__reg2].valueStart = isNaN(__reg11) ? __reg1.properties[__reg2].valueComplete : __reg11;
                    }
                    __reg14 = true;
                    __reg1.hasStarted = true;
                }
                if (__reg14) 
                {
                    for (__reg2 in __reg1.properties) 
                    {
                        __reg4 = __reg1.properties[__reg2];
                        if (__reg13) 
                        {
                            __reg3 = __reg4.valueComplete;
                        }
                        else if (__reg4.hasModifier) 
                        {
                            __reg7 = __reg8 - __reg1.timeStart;
                            __reg6 = __reg1.timeComplete - __reg1.timeStart;
                            __reg3 = __reg1.transition(__reg7, 0, 1, __reg6, __reg1.transitionParams);
                            __reg3 = __reg4.modifierFunction(__reg4.valueStart, __reg4.valueComplete, __reg3, __reg4.modifierParameters);
                        }
                        else 
                        {
                            __reg7 = __reg8 - __reg1.timeStart;
                            __reg10 = __reg4.valueStart;
                            __reg9 = __reg4.valueComplete - __reg4.valueStart;
                            __reg6 = __reg1.timeComplete - __reg1.timeStart;
                            __reg3 = __reg1.transition(__reg7, __reg10, __reg9, __reg6, __reg1.transitionParams);
                        }
                        if (__reg1.rounded) 
                        {
                            __reg3 = Math.round(__reg3);
                        }
                        if (__reg4.isSpecialProperty) 
                        {
                            com.caurina.transitions.Tweener._specialPropertyList[__reg2].setValue(__reg5, __reg3, com.caurina.transitions.Tweener._specialPropertyList[__reg2].parameters, __reg1.properties[__reg2].extra);
                        }
                        else 
                        {
                            __reg5[__reg2] = __reg3;
                        }
                    }
                    __reg1.updatesSkipped = 0;
                    if (__reg1.onUpdate != undefined) 
                    {
                        __reg12 = __reg1.onUpdateScope == undefined ? __reg5 : __reg1.onUpdateScope;
                        __reg1.onUpdate.apply(__reg12, __reg1.onUpdateParams);
                    }
                }
                else 
                {
                    ++__reg1.updatesSkipped;
                }
            }
            if (__reg13 && __reg1.onComplete != undefined) 
            {
                __reg12 = __reg1.onCompleteScope == undefined ? __reg5 : __reg1.onCompleteScope;
                __reg1.onComplete.apply(__reg12, __reg1.onCompleteParams);
            }
            return !__reg13;
        }
        return true;
    }

    static function init()
    {
        com.caurina.transitions.Tweener._inited = true;
        com.caurina.transitions.Tweener._transitionList = new Object();
        com.caurina.transitions.Equations.init();
        com.caurina.transitions.Tweener._specialPropertyList = new Object();
        com.caurina.transitions.Tweener._specialPropertyModifierList = new Object();
        com.caurina.transitions.Tweener._specialPropertySplitterList = new Object();
    }

    static function registerTransition(p_name, p_function)
    {
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        com.caurina.transitions.Tweener._transitionList[p_name] = p_function;
    }

    static function registerSpecialProperty(p_name, p_getFunction, p_setFunction, p_parameters, p_preProcessFunction)
    {
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        var __reg1 = new com.caurina.transitions.SpecialProperty(p_getFunction, p_setFunction, p_parameters, p_preProcessFunction);
        com.caurina.transitions.Tweener._specialPropertyList[p_name] = __reg1;
    }

    static function registerSpecialPropertyModifier(p_name, p_modifyFunction, p_getFunction)
    {
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        var __reg1 = new com.caurina.transitions.SpecialPropertyModifier(p_modifyFunction, p_getFunction);
        com.caurina.transitions.Tweener._specialPropertyModifierList[p_name] = __reg1;
    }

    static function registerSpecialPropertySplitter(p_name, p_splitFunction, p_parameters)
    {
        if (!com.caurina.transitions.Tweener._inited) 
        {
            com.caurina.transitions.Tweener.init();
        }
        var __reg1 = new com.caurina.transitions.SpecialPropertySplitter(p_splitFunction, p_parameters);
        com.caurina.transitions.Tweener._specialPropertySplitterList[p_name] = __reg1;
    }

    static function startEngine()
    {
        com.caurina.transitions.Tweener._engineExists = true;
        com.caurina.transitions.Tweener._tweenList = new Array();
        var __reg2 = Math.floor(Math.random() * 999999);
        var __reg3 = _root.createEmptyMovieClip(com.caurina.transitions.Tweener.getControllerName(), 31338 + __reg2);
        __reg3.onEnterFrame = function ()
        {
            com.caurina.transitions.Tweener.onEnterFrame();
        }
        ;
        com.caurina.transitions.Tweener._currentTimeFrame = 0;
        com.caurina.transitions.Tweener.updateTime();
    }

    static function stopEngine()
    {
        com.caurina.transitions.Tweener._engineExists = false;
        com.caurina.transitions.Tweener._tweenList = null;
        com.caurina.transitions.Tweener._currentTime = 0;
        com.caurina.transitions.Tweener._currentTimeFrame = 0;
        delete _root[com.caurina.transitions.Tweener.getControllerName()].onEnterFrame;
        _root[com.caurina.transitions.Tweener.getControllerName()].removeMovieClip();
    }

    static function updateTime()
    {
        com.caurina.transitions.Tweener._currentTime = getTimer();
    }

    static function updateFrame()
    {
        ++com.caurina.transitions.Tweener._currentTimeFrame;
    }

    static function onEnterFrame()
    {
        com.caurina.transitions.Tweener.updateTime();
        com.caurina.transitions.Tweener.updateFrame();
        var __reg1 = false;
        __reg1 = com.caurina.transitions.Tweener.updateTweens();
        if (__reg1) 
        {
            return;
        }
        com.caurina.transitions.Tweener.stopEngine();
    }

    static function setTimeScale(p_time)
    {
        var __reg1 = undefined;
        var __reg2 = undefined;
        if (isNaN(p_time)) 
        {
            p_time = 1;
        }
        if (p_time < 1e-005) 
        {
            p_time = 1e-005;
        }
        if (p_time != com.caurina.transitions.Tweener._timeScale) 
        {
            __reg1 = 0;
            while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
            {
                __reg2 = com.caurina.transitions.Tweener.getCurrentTweeningTime(com.caurina.transitions.Tweener._tweenList[__reg1]);
                com.caurina.transitions.Tweener._tweenList[__reg1].timeStart = __reg2 - (__reg2 - com.caurina.transitions.Tweener._tweenList[__reg1].timeStart) * com.caurina.transitions.Tweener._timeScale / p_time;
                com.caurina.transitions.Tweener._tweenList[__reg1].timeComplete = __reg2 - (__reg2 - com.caurina.transitions.Tweener._tweenList[__reg1].timeComplete) * com.caurina.transitions.Tweener._timeScale / p_time;
                if (com.caurina.transitions.Tweener._tweenList[__reg1].timePaused != undefined) 
                {
                    com.caurina.transitions.Tweener._tweenList[__reg1].timePaused = __reg2 - (__reg2 - com.caurina.transitions.Tweener._tweenList[__reg1].timePaused) * com.caurina.transitions.Tweener._timeScale / p_time;
                }
                ++__reg1;
            }
            com.caurina.transitions.Tweener._timeScale = p_time;
        }
    }

    static function isTweening(p_scope)
    {
        var __reg1 = undefined;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            if (com.caurina.transitions.Tweener._tweenList[__reg1].scope == p_scope) 
            {
                return true;
            }
            ++__reg1;
        }
        return false;
    }

    static function getTweens(p_scope)
    {
        var __reg1 = undefined;
        var __reg2 = undefined;
        var __reg3 = new Array();
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            if (com.caurina.transitions.Tweener._tweenList[__reg1].scope == p_scope) 
            {
                for (__reg2 in com.caurina.transitions.Tweener._tweenList[__reg1].properties) 
                {
                    __reg3.push(__reg2);
                }
            }
            ++__reg1;
        }
        return __reg3;
    }

    static function getTweenCount(p_scope)
    {
        var __reg1 = undefined;
        var __reg2 = 0;
        __reg1 = 0;
        while (__reg1 < com.caurina.transitions.Tweener._tweenList.length) 
        {
            if (com.caurina.transitions.Tweener._tweenList[__reg1].scope == p_scope) 
            {
                __reg2 = __reg2 + com.caurina.transitions.AuxFunctions.getObjectLength(com.caurina.transitions.Tweener._tweenList[__reg1].properties);
            }
            ++__reg1;
        }
        return __reg2;
    }

    static function handleError(pTweening, pError, pCallBackName)
    {
        if (pTweening.onError != undefined && typeof (pTweening.onError == "function")) 
        {
            var __reg3 = pTweening.onErrorScope == undefined ? pTweening.scope : pTweening.onErrorScope;
            pTweening.onError.apply(__reg3, [pTweening.scope, pError]);
            return;
        }
        if (pTweening.onError == undefined) 
        {
            com.caurina.transitions.Tweener.printError(pTweening.scope.toString() + " raised an error while executing the \'" + pCallBackName.toString() + "\'handler. \n" + pError);
        }
    }

    static function getCurrentTweeningTime(p_tweening)
    {
        return p_tweening.useFrames ? com.caurina.transitions.Tweener._currentTimeFrame : com.caurina.transitions.Tweener._currentTime;
    }

    static function getVersion()
    {
        return "AS2 1.33.74";
    }

    static function getControllerName()
    {
        return "__tweener_controller__" + com.caurina.transitions.Tweener.getVersion();
    }

    static function printError(p_message)
    {
        trace("## [Tweener] Error: " + p_message);
    }

}

//Sprite 634
//  InitClip
dynamic class com.caurina.transitions.TweenListObj
{
    var count;
    var hasStarted;
    var isCaller;
    var isPaused;
    var onComplete;
    var onCompleteParams;
    var onCompleteScope;
    var onError;
    var onErrorScope;
    var onOverwrite;
    var onOverwriteParams;
    var onOverwriteScope;
    var onStart;
    var onStartParams;
    var onStartScope;
    var onUpdate;
    var onUpdateParams;
    var onUpdateScope;
    var properties;
    var rounded;
    var scope;
    var skipUpdates;
    var timeComplete;
    var timePaused;
    var timeStart;
    var timesCalled;
    var transition;
    var transitionParams;
    var updatesSkipped;
    var useFrames;
    var waitFrames;

    function TweenListObj(p_scope, p_timeStart, p_timeComplete, p_useFrames, p_transition, p_transitionParams)
    {
        this.scope = p_scope;
        this.timeStart = p_timeStart;
        this.timeComplete = p_timeComplete;
        this.useFrames = p_useFrames;
        this.transition = p_transition;
        this.transitionParams = p_transitionParams;
        this.properties = new Object();
        this.isPaused = false;
        this.timePaused = undefined;
        this.isCaller = false;
        this.updatesSkipped = 0;
        this.timesCalled = 0;
        this.skipUpdates = 0;
        this.hasStarted = false;
    }

    function clone(omitEvents)
    {
        var __reg2 = new com.caurina.transitions.TweenListObj(this.scope, this.timeStart, this.timeComplete, this.useFrames, this.transition, this.transitionParams);
        __reg2.properties = new Object();
        for (var __reg3 in this.properties) 
        {
            __reg2.properties[__reg3] = this.properties[__reg3].clone();
        }
        __reg2.skipUpdates = this.skipUpdates;
        __reg2.updatesSkipped = this.updatesSkipped;
        if (!omitEvents) 
        {
            __reg2.onStart = this.onStart;
            __reg2.onUpdate = this.onUpdate;
            __reg2.onComplete = this.onComplete;
            __reg2.onOverwrite = this.onOverwrite;
            __reg2.onError = this.onError;
            __reg2.onStartParams = this.onStartParams;
            __reg2.onUpdateParams = this.onUpdateParams;
            __reg2.onCompleteParams = this.onCompleteParams;
            __reg2.onOverwriteParams = this.onOverwriteParams;
            __reg2.onStartScope = this.onStartScope;
            __reg2.onUpdateScope = this.onUpdateScope;
            __reg2.onCompleteScope = this.onCompleteScope;
            __reg2.onOverwriteScope = this.onOverwriteScope;
            __reg2.onErrorScope = this.onErrorScope;
        }
        __reg2.rounded = this.rounded;
        __reg2.isPaused = this.isPaused;
        __reg2.timePaused = this.timePaused;
        __reg2.isCaller = this.isCaller;
        __reg2.count = this.count;
        __reg2.timesCalled = this.timesCalled;
        __reg2.waitFrames = this.waitFrames;
        __reg2.hasStarted = this.hasStarted;
        return __reg2;
    }

    function toString()
    {
        var __reg2 = "\n[TweenListObj ";
        __reg2 = __reg2 + ("scope:" + String(this.scope));
        __reg2 = __reg2 + ", properties:";
        var __reg3 = true;
        for (var __reg4 in this.properties) 
        {
            if (!__reg3) 
            {
                __reg2 = __reg2 + ",";
            }
            __reg2 = __reg2 + ("[name:" + this.properties[__reg4].name);
            __reg2 = __reg2 + (",valueStart:" + this.properties[__reg4].valueStart);
            __reg2 = __reg2 + (",valueComplete:" + this.properties[__reg4].valueComplete);
            __reg2 = __reg2 + "]";
            __reg3 = false;
        }
        __reg2 = __reg2 + (", timeStart:" + String(this.timeStart));
        __reg2 = __reg2 + (", timeComplete:" + String(this.timeComplete));
        __reg2 = __reg2 + (", useFrames:" + String(this.useFrames));
        __reg2 = __reg2 + (", transition:" + String(this.transition));
        __reg2 = __reg2 + (", transitionParams:" + String(this.transitionParams));
        if (this.skipUpdates) 
        {
            __reg2 = __reg2 + (", skipUpdates:" + String(this.skipUpdates));
        }
        if (this.updatesSkipped) 
        {
            __reg2 = __reg2 + (", updatesSkipped:" + String(this.updatesSkipped));
        }
        if (this.onStart) 
        {
            __reg2 = __reg2 + (", onStart:" + String(this.onStart));
        }
        if (this.onUpdate) 
        {
            __reg2 = __reg2 + (", onUpdate:" + String(this.onUpdate));
        }
        if (this.onComplete) 
        {
            __reg2 = __reg2 + (", onComplete:" + String(this.onComplete));
        }
        if (this.onOverwrite) 
        {
            __reg2 = __reg2 + (", onOverwrite:" + String(this.onOverwrite));
        }
        if (this.onError) 
        {
            __reg2 = __reg2 + (", onError:" + String(this.onError));
        }
        if (this.onStartParams) 
        {
            __reg2 = __reg2 + (", onStartParams:" + String(this.onStartParams));
        }
        if (this.onUpdateParams) 
        {
            __reg2 = __reg2 + (", onUpdateParams:" + String(this.onUpdateParams));
        }
        if (this.onCompleteParams) 
        {
            __reg2 = __reg2 + (", onCompleteParams:" + String(this.onCompleteParams));
        }
        if (this.onOverwriteParams) 
        {
            __reg2 = __reg2 + (", onOverwriteParams:" + String(this.onOverwriteParams));
        }
        if (this.onStartScope) 
        {
            __reg2 = __reg2 + (", onStartScope:" + String(this.onStartScope));
        }
        if (this.onUpdateScope) 
        {
            __reg2 = __reg2 + (", onUpdateScope:" + String(this.onUpdateScope));
        }
        if (this.onCompleteScope) 
        {
            __reg2 = __reg2 + (", onCompleteScope:" + String(this.onCompleteScope));
        }
        if (this.onOverwriteScope) 
        {
            __reg2 = __reg2 + (", onOverwriteScope:" + String(this.onOverwriteScope));
        }
        if (this.onErrorScope) 
        {
            __reg2 = __reg2 + (", onErrorScope:" + String(this.onErrorScope));
        }
        if (this.rounded) 
        {
            __reg2 = __reg2 + (", rounded:" + String(this.rounded));
        }
        if (this.isPaused) 
        {
            __reg2 = __reg2 + (", isPaused:" + String(this.isPaused));
        }
        if (this.timePaused) 
        {
            __reg2 = __reg2 + (", timePaused:" + String(this.timePaused));
        }
        if (this.isCaller) 
        {
            __reg2 = __reg2 + (", isCaller:" + String(this.isCaller));
        }
        if (this.count) 
        {
            __reg2 = __reg2 + (", count:" + String(this.count));
        }
        if (this.timesCalled) 
        {
            __reg2 = __reg2 + (", timesCalled:" + String(this.timesCalled));
        }
        if (this.waitFrames) 
        {
            __reg2 = __reg2 + (", waitFrames:" + String(this.waitFrames));
        }
        if (this.hasStarted) 
        {
            __reg2 = __reg2 + (", hasStarted:" + String(this.hasStarted));
        }
        __reg2 = __reg2 + "]\n";
        return __reg2;
    }

    static function makePropertiesChain(p_obj)
    {
        var __reg6 = p_obj.base;
        if (__reg6) 
        {
            var __reg5 = {};
            var __reg2 = undefined;
            if (__reg6 instanceof Array) 
            {
                __reg2 = [];
                var __reg3 = 0;
                while (__reg3 < __reg6.length) 
                {
                    __reg2.push(__reg6[__reg3]);
                    ++__reg3;
                }
            }
            else 
            {
                __reg2 = [__reg6];
            }
            __reg2.push(p_obj);
            var __reg4 = undefined;
            var __reg7 = __reg2.length;
            var __reg1 = 0;
            while (__reg1 < __reg7) 
            {
                if (__reg2[__reg1].base) 
                {
                    __reg4 = com.caurina.transitions.AuxFunctions.concatObjects(com.caurina.transitions.TweenListObj.makePropertiesChain(__reg2[__reg1].base), __reg2[__reg1]);
                }
                else 
                {
                    __reg4 = __reg2[__reg1];
                }
                __reg5 = com.caurina.transitions.AuxFunctions.concatObjects(__reg5, __reg4);
                ++__reg1;
            }
            if (__reg5.base) 
            {
                delete __reg5.base;
            }
            return __reg5;
        }
        return p_obj;
    }

}

//Sprite 635
//  InitClip
dynamic class com.caurina.transitions.AuxFunctions
{

    function AuxFunctions()
    {
    }

    static function numberToR(p_num)
    {
        return (p_num & 16711680) >> 16;
    }

    static function numberToG(p_num)
    {
        return (p_num & 65280) >> 8;
    }

    static function numberToB(p_num)
    {
        return p_num & 255;
    }

    static function isInArray(p_string, p_array)
    {
        var __reg2 = p_array.length;
        var __reg1 = 0;
        while (__reg1 < __reg2) 
        {
            if (p_array[__reg1] == p_string) 
            {
                return true;
            }
            ++__reg1;
        }
        return false;
    }

    static function getObjectLength(p_object)
    {
        var __reg1 = 0;
        for (var __reg2 in p_object) 
        {
            ++__reg1;
        }
        return __reg1;
    }

    static function concatObjects()
    {
        var __reg4 = {};
        var __reg2 = undefined;
        var __reg3 = 0;
        while (__reg3 < arguments.length) 
        {
            __reg2 = arguments[__reg3];
            for (var __reg5 in __reg2) 
            {
                if (__reg2[__reg5] == null) 
                {
                    delete __reg4[__reg5];
                }
                else 
                {
                    __reg4[__reg5] = __reg2[__reg5];
                }
            }
            ++__reg3;
        }
        return __reg4;
    }

}

//Sprite 636
//  InitClip
dynamic class com.caurina.transitions.PropertyInfoObj
{
    var arrayIndex;
    var extra;
    var hasModifier;
    var isSpecialProperty;
    var modifierFunction;
    var modifierParameters;
    var originalValueComplete;
    var valueComplete;
    var valueStart;

    function PropertyInfoObj(p_valueStart, p_valueComplete, p_originalValueComplete, p_arrayIndex, p_extra, p_isSpecialProperty, p_modifierFunction, p_modifierParameters)
    {
        this.valueStart = p_valueStart;
        this.valueComplete = p_valueComplete;
        this.originalValueComplete = p_originalValueComplete;
        this.arrayIndex = p_arrayIndex;
        this.extra = p_extra;
        this.isSpecialProperty = p_isSpecialProperty;
        this.hasModifier = p_modifierFunction != undefined;
        this.modifierFunction = p_modifierFunction;
        this.modifierParameters = p_modifierParameters;
    }

    function clone()
    {
        var __reg2 = new com.caurina.transitions.PropertyInfoObj(this.valueStart, this.valueComplete, this.originalValueComplete, this.arrayIndex, this.extra, this.isSpecialProperty, this.modifierFunction, this.modifierParameters);
        return __reg2;
    }

    function toString()
    {
        var __reg2 = "\n[PropertyInfoObj ";
        __reg2 = __reg2 + ("valueStart:" + String(this.valueStart));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("valueComplete:" + String(this.valueComplete));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("originalValueComplete:" + String(this.originalValueComplete));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("arrayIndex:" + String(this.arrayIndex));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("extra:" + String(this.extra));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("isSpecialProperty:" + String(this.isSpecialProperty));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("hasModifier:" + String(this.hasModifier));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("modifierFunction:" + String(this.modifierFunction));
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("modifierParameters:" + String(this.modifierParameters));
        __reg2 = __reg2 + "]\n";
        return __reg2;
    }

}

//Sprite 637
//  InitClip
dynamic class com.caurina.transitions.SpecialPropertySplitter
{
    var parameters;

    function SpecialPropertySplitter(p_splitFunction, p_parameters)
    {
        this.splitValues = p_splitFunction;
        this.parameters = p_parameters;
    }

    function splitValues(p_value, p_parameters)
    {
        return [];
    }

    function toString()
    {
        var __reg2 = "";
        __reg2 = __reg2 + "[SpecialPropertySplitter ";
        __reg2 = __reg2 + ("splitValues:" + this.splitValues.toString());
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("parameters:" + this.parameters.toString());
        __reg2 = __reg2 + "]";
        return __reg2;
    }

}

//Sprite 638
//  InitClip
dynamic class com.caurina.transitions.Equations
{

    function Equations()
    {
        trace("Equations is a static class and should not be instantiated.");
    }

    static function init()
    {
        com.caurina.transitions.Tweener.registerTransition("easenone", com.caurina.transitions.Equations.easeNone);
        com.caurina.transitions.Tweener.registerTransition("linear", com.caurina.transitions.Equations.easeNone);
        com.caurina.transitions.Tweener.registerTransition("easeinquad", com.caurina.transitions.Equations.easeInQuad);
        com.caurina.transitions.Tweener.registerTransition("easeoutquad", com.caurina.transitions.Equations.easeOutQuad);
        com.caurina.transitions.Tweener.registerTransition("easeinoutquad", com.caurina.transitions.Equations.easeInOutQuad);
        com.caurina.transitions.Tweener.registerTransition("easeoutinquad", com.caurina.transitions.Equations.easeOutInQuad);
        com.caurina.transitions.Tweener.registerTransition("easeincubic", com.caurina.transitions.Equations.easeInCubic);
        com.caurina.transitions.Tweener.registerTransition("easeoutcubic", com.caurina.transitions.Equations.easeOutCubic);
        com.caurina.transitions.Tweener.registerTransition("easeinoutcubic", com.caurina.transitions.Equations.easeInOutCubic);
        com.caurina.transitions.Tweener.registerTransition("easeoutincubic", com.caurina.transitions.Equations.easeOutInCubic);
        com.caurina.transitions.Tweener.registerTransition("easeinquart", com.caurina.transitions.Equations.easeInQuart);
        com.caurina.transitions.Tweener.registerTransition("easeoutquart", com.caurina.transitions.Equations.easeOutQuart);
        com.caurina.transitions.Tweener.registerTransition("easeinoutquart", com.caurina.transitions.Equations.easeInOutQuart);
        com.caurina.transitions.Tweener.registerTransition("easeoutinquart", com.caurina.transitions.Equations.easeOutInQuart);
        com.caurina.transitions.Tweener.registerTransition("easeinquint", com.caurina.transitions.Equations.easeInQuint);
        com.caurina.transitions.Tweener.registerTransition("easeoutquint", com.caurina.transitions.Equations.easeOutQuint);
        com.caurina.transitions.Tweener.registerTransition("easeinoutquint", com.caurina.transitions.Equations.easeInOutQuint);
        com.caurina.transitions.Tweener.registerTransition("easeoutinquint", com.caurina.transitions.Equations.easeOutInQuint);
        com.caurina.transitions.Tweener.registerTransition("easeinsine", com.caurina.transitions.Equations.easeInSine);
        com.caurina.transitions.Tweener.registerTransition("easeoutsine", com.caurina.transitions.Equations.easeOutSine);
        com.caurina.transitions.Tweener.registerTransition("easeinoutsine", com.caurina.transitions.Equations.easeInOutSine);
        com.caurina.transitions.Tweener.registerTransition("easeoutinsine", com.caurina.transitions.Equations.easeOutInSine);
        com.caurina.transitions.Tweener.registerTransition("easeincirc", com.caurina.transitions.Equations.easeInCirc);
        com.caurina.transitions.Tweener.registerTransition("easeoutcirc", com.caurina.transitions.Equations.easeOutCirc);
        com.caurina.transitions.Tweener.registerTransition("easeinoutcirc", com.caurina.transitions.Equations.easeInOutCirc);
        com.caurina.transitions.Tweener.registerTransition("easeoutincirc", com.caurina.transitions.Equations.easeOutInCirc);
        com.caurina.transitions.Tweener.registerTransition("easeinexpo", com.caurina.transitions.Equations.easeInExpo);
        com.caurina.transitions.Tweener.registerTransition("easeoutexpo", com.caurina.transitions.Equations.easeOutExpo);
        com.caurina.transitions.Tweener.registerTransition("easeinoutexpo", com.caurina.transitions.Equations.easeInOutExpo);
        com.caurina.transitions.Tweener.registerTransition("easeoutinexpo", com.caurina.transitions.Equations.easeOutInExpo);
        com.caurina.transitions.Tweener.registerTransition("easeinelastic", com.caurina.transitions.Equations.easeInElastic);
        com.caurina.transitions.Tweener.registerTransition("easeoutelastic", com.caurina.transitions.Equations.easeOutElastic);
        com.caurina.transitions.Tweener.registerTransition("easeinoutelastic", com.caurina.transitions.Equations.easeInOutElastic);
        com.caurina.transitions.Tweener.registerTransition("easeoutinelastic", com.caurina.transitions.Equations.easeOutInElastic);
        com.caurina.transitions.Tweener.registerTransition("easeinback", com.caurina.transitions.Equations.easeInBack);
        com.caurina.transitions.Tweener.registerTransition("easeoutback", com.caurina.transitions.Equations.easeOutBack);
        com.caurina.transitions.Tweener.registerTransition("easeinoutback", com.caurina.transitions.Equations.easeInOutBack);
        com.caurina.transitions.Tweener.registerTransition("easeoutinback", com.caurina.transitions.Equations.easeOutInBack);
        com.caurina.transitions.Tweener.registerTransition("easeinbounce", com.caurina.transitions.Equations.easeInBounce);
        com.caurina.transitions.Tweener.registerTransition("easeoutbounce", com.caurina.transitions.Equations.easeOutBounce);
        com.caurina.transitions.Tweener.registerTransition("easeinoutbounce", com.caurina.transitions.Equations.easeInOutBounce);
        com.caurina.transitions.Tweener.registerTransition("easeoutinbounce", com.caurina.transitions.Equations.easeOutInBounce);
    }

    static function easeNone(t, b, c, d, p_params)
    {
        return c * t / d + b;
    }

    static function easeInQuad(t, b, c, d, p_params)
    {
        return c * (t = t / d) * t + b;
    }

    static function easeOutQuad(t, b, c, d, p_params)
    {
        return (0 - c) * (t = t / d) * (t - 2) + b;
    }

    static function easeInOutQuad(t, b, c, d, p_params)
    {
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * t * t + b;
        }
        return (0 - c) / 2 * (--t * (t - 2) - 1) + b;
    }

    static function easeOutInQuad(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutQuad(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInQuad(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInCubic(t, b, c, d, p_params)
    {
        return c * (t = t / d) * t * t + b;
    }

    static function easeOutCubic(t, b, c, d, p_params)
    {
        return c * ((t = t / d - 1) * t * t + 1) + b;
    }

    static function easeInOutCubic(t, b, c, d, p_params)
    {
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * t * t * t + b;
        }
        return c / 2 * ((t = t - 2) * t * t + 2) + b;
    }

    static function easeOutInCubic(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutCubic(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInCubic(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInQuart(t, b, c, d, p_params)
    {
        return c * (t = t / d) * t * t * t + b;
    }

    static function easeOutQuart(t, b, c, d, p_params)
    {
        return (0 - c) * ((t = t / d - 1) * t * t * t - 1) + b;
    }

    static function easeInOutQuart(t, b, c, d, p_params)
    {
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * t * t * t * t + b;
        }
        return (0 - c) / 2 * ((t = t - 2) * t * t * t - 2) + b;
    }

    static function easeOutInQuart(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutQuart(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInQuart(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInQuint(t, b, c, d, p_params)
    {
        return c * (t = t / d) * t * t * t * t + b;
    }

    static function easeOutQuint(t, b, c, d, p_params)
    {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    }

    static function easeInOutQuint(t, b, c, d, p_params)
    {
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * t * t * t * t * t + b;
        }
        return c / 2 * ((t = t - 2) * t * t * t * t + 2) + b;
    }

    static function easeOutInQuint(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutQuint(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInQuint(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInSine(t, b, c, d, p_params)
    {
        return (0 - c) * Math.cos(t / d * 1.57079632679) + c + b;
    }

    static function easeOutSine(t, b, c, d, p_params)
    {
        return c * Math.sin(t / d * 1.57079632679) + b;
    }

    static function easeInOutSine(t, b, c, d, p_params)
    {
        return (0 - c) / 2 * (Math.cos(3.14159265359 * t / d) - 1) + b;
    }

    static function easeOutInSine(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutSine(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInSine(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInExpo(t, b, c, d, p_params)
    {
        return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b - c * 0.001;
    }

    static function easeOutExpo(t, b, c, d, p_params)
    {
        return t == d ? b + c : c * 1.001 * (0 - Math.pow(2, -10 * t / d) + 1) + b;
    }

    static function easeInOutExpo(t, b, c, d, p_params)
    {
        if (t == 0) 
        {
            return b;
        }
        if (t == d) 
        {
            return b + c;
        }
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b - c * 0.0005;
        }
        return c / 2 * 1.0005 * (0 - Math.pow(2, -10 * --t) + 2) + b;
    }

    static function easeOutInExpo(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutExpo(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInExpo(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInCirc(t, b, c, d, p_params)
    {
        return (0 - c) * (Math.sqrt(1 - (t = t / d) * t) - 1) + b;
    }

    static function easeOutCirc(t, b, c, d, p_params)
    {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    }

    static function easeInOutCirc(t, b, c, d, p_params)
    {
        if ((t = t / (d / 2)) < 1) 
        {
            return (0 - c) / 2 * (Math.sqrt(1 - t * t) - 1) + b;
        }
        return c / 2 * (Math.sqrt(1 - (t = t - 2) * t) + 1) + b;
    }

    static function easeOutInCirc(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutCirc(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInCirc(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInElastic(t, b, c, d, p_params)
    {
        if (t == 0) 
        {
            return b;
        }
        if ((t = t / d) == 1) 
        {
            return b + c;
        }
        var __reg2 = p_params.period == undefined ? d * 0.3 : p_params.period;
        var __reg5 = undefined;
        var __reg1 = p_params.amplitude;
        if (!__reg1 || __reg1 < Math.abs(c)) 
        {
            __reg1 = c;
            __reg5 = __reg2 / 4;
        }
        else 
        {
            __reg5 = __reg2 / 6.28318530718 * Math.asin(c / __reg1);
        }
        return 0 - __reg1 * Math.pow(2, 10 * (t = t - 1)) * Math.sin((t * d - __reg5) * 6.28318530718 / __reg2) + b;
    }

    static function easeOutElastic(t, b, c, d, p_params)
    {
        if (t == 0) 
        {
            return b;
        }
        if ((t = t / d) == 1) 
        {
            return b + c;
        }
        var __reg3 = p_params.period == undefined ? d * 0.3 : p_params.period;
        var __reg5 = undefined;
        var __reg1 = p_params.amplitude;
        if (!__reg1 || __reg1 < Math.abs(c)) 
        {
            __reg1 = c;
            __reg5 = __reg3 / 4;
        }
        else 
        {
            __reg5 = __reg3 / 6.28318530718 * Math.asin(c / __reg1);
        }
        return __reg1 * Math.pow(2, -10 * t) * Math.sin((t * d - __reg5) * 6.28318530718 / __reg3) + c + b;
    }

    static function easeInOutElastic(t, b, c, d, p_params)
    {
        if (t == 0) 
        {
            return b;
        }
        if ((t = t / (d / 2)) == 2) 
        {
            return b + c;
        }
        var __reg3 = p_params.period == undefined ? d * 0.45 : p_params.period;
        var __reg5 = undefined;
        var __reg1 = p_params.amplitude;
        if (!__reg1 || __reg1 < Math.abs(c)) 
        {
            __reg1 = c;
            __reg5 = __reg3 / 4;
        }
        else 
        {
            __reg5 = __reg3 / 6.28318530718 * Math.asin(c / __reg1);
        }
        if (t < 1) 
        {
            return -0.5 * (__reg1 * Math.pow(2, 10 * (t = t - 1)) * Math.sin((t * d - __reg5) * 6.28318530718 / __reg3)) + b;
        }
        return __reg1 * Math.pow(2, -10 * (t = t - 1)) * Math.sin((t * d - __reg5) * 6.28318530718 / __reg3) * 0.5 + c + b;
    }

    static function easeOutInElastic(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutElastic(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInElastic(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInBack(t, b, c, d, p_params)
    {
        var __reg1 = p_params.overshoot == undefined ? 1.70158 : p_params.overshoot;
        return c * (t = t / d) * t * ((__reg1 + 1) * t - __reg1) + b;
    }

    static function easeOutBack(t, b, c, d, p_params)
    {
        var __reg2 = p_params.overshoot == undefined ? 1.70158 : p_params.overshoot;
        return c * ((t = t / d - 1) * t * ((__reg2 + 1) * t + __reg2) + 1) + b;
    }

    static function easeInOutBack(t, b, c, d, p_params)
    {
        var __reg2 = p_params.overshoot == undefined ? 1.70158 : p_params.overshoot;
        if ((t = t / (d / 2)) < 1) 
        {
            return c / 2 * (t * t * (((__reg2 = __reg2 * 1.525) + 1) * t - __reg2)) + b;
        }
        return c / 2 * ((t = t - 2) * t * (((__reg2 = __reg2 * 1.525) + 1) * t + __reg2) + 2) + b;
    }

    static function easeOutInBack(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutBack(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInBack(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

    static function easeInBounce(t, b, c, d, p_params)
    {
        return c - com.caurina.transitions.Equations.easeOutBounce(d - t, 0, c, d) + b;
    }

    static function easeOutBounce(t, b, c, d, p_params)
    {
        if ((t = t / d) < 0.363636363636) 
        {
            return c * (7.5625 * t * t) + b;
        }
        if (t < 0.727272727273) 
        {
            return c * (7.5625 * (t = t - 0.545454545455) * t + 0.75) + b;
        }
        if (t < 0.909090909091) 
        {
            return c * (7.5625 * (t = t - 0.818181818182) * t + 0.9375) + b;
        }
        return c * (7.5625 * (t = t - 0.954545454545) * t + 0.984375) + b;
    }

    static function easeInOutBounce(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeInBounce(t * 2, 0, c, d) * 0.5 + b;
        }
        return com.caurina.transitions.Equations.easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    }

    static function easeOutInBounce(t, b, c, d, p_params)
    {
        if (t < d / 2) 
        {
            return com.caurina.transitions.Equations.easeOutBounce(t * 2, b, c / 2, d, p_params);
        }
        return com.caurina.transitions.Equations.easeInBounce(t * 2 - d, b + c / 2, c / 2, d, p_params);
    }

}

//Sprite 639
//  InitClip
dynamic class com.caurina.transitions.SpecialProperty
{
    var getValue;
    var parameters;
    var preProcess;
    var setValue;

    function SpecialProperty(p_getFunction, p_setFunction, p_parameters, p_preProcessFunction)
    {
        this.getValue = p_getFunction;
        this.setValue = p_setFunction;
        this.parameters = p_parameters;
        this.preProcess = p_preProcessFunction;
    }

    function toString()
    {
        var __reg2 = "";
        __reg2 = __reg2 + "[SpecialProperty ";
        __reg2 = __reg2 + ("getValue:" + this.getValue.toString());
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("setValue:" + this.setValue.toString());
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("parameters:" + this.parameters.toString());
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("preProcess:" + this.preProcess.toString());
        __reg2 = __reg2 + "]";
        return __reg2;
    }

}

//Sprite 640
//  InitClip
dynamic class com.caurina.transitions.SpecialPropertyModifier
{
    var getValue;
    var modifyValues;

    function SpecialPropertyModifier(p_modifyFunction, p_getFunction)
    {
        this.modifyValues = p_modifyFunction;
        this.getValue = p_getFunction;
    }

    function toString()
    {
        var __reg2 = "";
        __reg2 = __reg2 + "[SpecialPropertyModifier ";
        __reg2 = __reg2 + ("modifyValues:" + this.modifyValues.toString());
        __reg2 = __reg2 + ", ";
        __reg2 = __reg2 + ("getValue:" + this.getValue.toString());
        __reg2 = __reg2 + "]";
        return __reg2;
    }

}

//Sprite 641
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierViews.ParentView
{
    var pageUrl = null;
    var pageTitle = null;
    var mainPage = null;
    var parentMC = null;
    var viewBaseMC = null;
    var loadingSignMC = null;
    var viewMC = null;
    var pageAds = null;
    var textFormat = null;
    var logoImgLoader = null;
    var logoImgLoaderListener = null;
    var cache: Number = 1;
    var timeTimerId: Number = -1;
    var buttonSpacingX: Number = 5;
    var buttonSpacingY: Number = 10;
    var tier = null;
    var onEnterItem = null;
    var onPageBack = null;
    var onAppRestart = null;
    var connectionStatusXml = null;
    var weatherImg = null;
    var weatherImgLoader = null;
    var weatherImgLoaderListener = null;
    var keyListener = null;
    var weatherMC = null;
    var messagebaseMC = null;
    var timeBaseMC = null;
    var logoMC = null;
    var msgText = null;
    var colorBtnX: Number = 0;
    var colorBtnY: Number = 0;
    var wifiMsgBox = null;
    var buttons = null;
    var timerId = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var searchButtonText = null;

    function ParentView()
    {
        this.onEnterItem = new com.BigRoom.Event();
        this.onAppRestart = new com.BigRoom.Event();
        this.onPageBack = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.logoImgLoader = new MovieClipLoader();
        this.logoImgLoaderListener = new Object();
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.weatherImgLoader = new MovieClipLoader();
        this.weatherImgLoaderListener = new Object();
        this.weatherImgLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadWeatherImg);
        this.weatherImgLoader.addListener(this.weatherImgLoaderListener);
    }

    function getPageId()
    {
        return this.mainPage.pageId;
    }

    function getNumPages()
    {
        return 1;
    }

    function getItemDetails()
    {
        return null;
    }

    function onItemError()
    {
    }

    function itemHighlight(itemIdx)
    {
    }

    function itemUnHighlight(itemIdx)
    {
    }

    function getCurrentItemName()
    {
        return null;
    }

    function getCurrentItemLink()
    {
        return null;
    }

    function getCurrentItemType()
    {
        return null;
    }

    function getCurrentItemId()
    {
        return null;
    }

    function getCurrentItemIdx()
    {
        return -1;
    }

    function getCurrentItemResponseLink()
    {
        return null;
    }

    function getItemProtectedStatus()
    {
        return null;
    }

    function getItemStartIdx()
    {
        return -1;
    }

    function restoreView()
    {
    }

    function hideView()
    {
    }

    function getPageUrl()
    {
        return this.pageUrl;
    }

    function getPageTitle()
    {
        return this.pageTitle;
    }

    function getTier1ItemsStartIdx()
    {
    }

    function getTier1CurrentItemIdx()
    {
    }

    function getTier2ItemsStartIdx()
    {
    }

    function getTier2CurrentItemIdx()
    {
    }

    function getTier3ItemsStartIdx()
    {
    }

    function getTier3CurrentItemIdx()
    {
    }

    function cacheXml()
    {
        return this.cache;
    }

    function onPageBackCallback()
    {
    }

    function addListener(eventName, obj, listener)
    {
        if (eventName == "onEnterItem") 
        {
            this.onEnterItem.addListener(obj, listener);
            return;
        }
        if (eventName == "onPageBack") 
        {
            this.onPageBack.addListener(obj, listener);
            return;
        }
        if (eventName == "onAppRestart") 
        {
            this.onAppRestart.addListener(obj, listener);
        }
    }

    function removeListener(eventName, obj, listener)
    {
        if (eventName == "onEnterItem") 
        {
            this.onEnterItem.removeListener(obj, listener);
            return;
        }
        if (eventName == "onPageBack") 
        {
            this.onPageBack.removeListener(obj, listener);
            return;
        }
        if (eventName == "onAppRestart") 
        {
            this.onAppRestart.removeListener(obj, listener);
        }
    }

    function destroy()
    {
        this.removeLoadingClip();
        removeMovieClip(this.parentMC.vodPlayerMC);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SystemEvent", this, this.onXmlSocketSystemEvent);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Features.Weather.removeListener("onWeatherUpdate", this, this.onWeatherUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        removeMovieClip(this.viewMC);
        if (this.pageAds != null) 
        {
            this.pageAds.stopAds();
            this.pageAds.destroy();
            delete this.pageAds;
            this.pageAds = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.weatherImgLoader != null) 
        {
            delete this.weatherImgLoader;
            this.weatherImgLoader = null;
        }
        if (this.weatherImgLoaderListener != null) 
        {
            delete this.weatherImgLoaderListener;
            this.weatherImgLoaderListener = null;
        }
        this.mainPage = null;
        delete this.onEnterItem;
        delete this.onAppRestart;
        delete this.onPageBack;
        delete this.logoImgLoader;
        delete this.logoImgLoaderListener;
        this.weatherImg = null;
        this.logoImgLoader = null;
        this.logoImgLoaderListener = null;
        this.onEnterItem = null;
        this.onAppRestart = null;
        this.onPageBack = null;
        this.weatherMC = null;
        this.timeBaseMC = null;
        this.pageUrl = null;
        this.pageTitle = null;
        this.parentMC = null;
        this.viewBaseMC = null;
        this.viewMC = null;
        this.tier = null;
    }

    function create(parentMC, viewBaseMC, pageUrl, mainPage, cache)
    {
        this.pageUrl = pageUrl;
        this.viewBaseMC = viewBaseMC;
        this.parentMC = parentMC;
        this.mainPage = mainPage;
        this.cache = cache;
        this.viewMC = viewBaseMC.createEmptyMovieClip("viewMC", viewBaseMC.getNextHighestDepth());
        if (_global.currentApplication != "MyJadoo" && mainPage.showWeather) 
        {
            this.createWeatherArea();
            this.displayTime();
        }
        this.displayPageTitle();
        this.displayLogo();
        parentMC.createEmptyMovieClip("vodPlayerMC", parentMC.getNextHighestDepth());
        if (mainPage.ticker != null) 
        {
            mainPage.ticker.create(this.viewMC);
        }
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("SystemEvent", this, this.onXmlSocketSystemEvent);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        parentMC = null;
        viewBaseMC = null;
        pageUrl = null;
        mainPage = null;
        cache = null;
    }

    function displayMessage(messageToDisplay)
    {
        if (messageToDisplay == "onKeyDown" && this.msgText.getHtmlText() == com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING) 
        {
            return undefined;
        }
        if (messageToDisplay == "onKeyDown") 
        {
            messageToDisplay = "";
        }
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.msgText.createTextField(this.viewMC, this.mainPage.msgAreaX, this.mainPage.msgAreaY, this.mainPage.msgAreaWidth, this.mainPage.msgAreaHeight, "false");
        this.msgText.setTextFormat(this.mainPage.msgTxtFormat);
        this.msgText.setHtmlText(messageToDisplay);
        this.msgText.enable(false, 500);
    }

    function displayPageTitle()
    {
        var __reg2 = this.viewMC.createTextField("pageTitleText", this.viewMC.getNextHighestDepth(), this.mainPage.pageTitleX, this.mainPage.pageTitleY, this.mainPage.pageTitleWidth, this.mainPage.pageTitleHeight);
        __reg2.setNewTextFormat(this.mainPage.pageTitleTxtFormat);
        __reg2.htmlText = this.mainPage.pageTitle;
        __reg2 = null;
    }

    function displayLogo()
    {
        if (this.viewBaseMC.logoMC != undefined) 
        {
            this.logoMC = this.viewBaseMC.logoMC;
            if (this.logoMC._source == com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getLogoURL()) 
            {
                this.logoMC._x = this.mainPage.topRightLogoX;
                this.logoMC._y = this.mainPage.topRightLogoY;
            }
            else 
            {
                removeMovieClip(this.logoMC);
                this.logoMC = this.viewBaseMC.createEmptyMovieClip("logoMC", this.viewBaseMC.getNextHighestDepth());
                this.logoImgLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadLogoImg);
                this.logoImgLoader.addListener(this.logoImgLoaderListener);
                this.logoImgLoader.loadClip(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getLogoURL(), this.logoMC);
            }
            return;
        }
        this.logoMC = this.viewBaseMC.createEmptyMovieClip("logoMC", this.viewBaseMC.getNextHighestDepth());
        this.logoImgLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadLogoImg);
        this.logoImgLoader.addListener(this.logoImgLoaderListener);
        this.logoImgLoader.loadClip(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getLogoURL(), this.logoMC);
    }

    function onLoadLogoImg(targetMC)
    {
        targetMC._x = this.mainPage.topRightLogoX;
        targetMC._y = this.mainPage.topRightLogoY;
        targetMC._source = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getLogoURL();
    }

    function createWeatherArea()
    {
        if (this.viewBaseMC.weatherMC == undefined) 
        {
            this.weatherMC = this.viewBaseMC.createEmptyMovieClip("weatherMC", this.viewBaseMC.getNextHighestDepth());
            this.weatherMC._x = this.mainPage.weatherAreaX;
            this.weatherMC._y = this.mainPage.weatherAreaY;
            this.weatherMC.createTextField("conditionTxt", this.weatherMC.getNextHighestDepth(), 0, 0, 0, 0);
            this.setTxtFormat("Arial", "left", 24, false, 16777215);
            this.weatherMC.conditionTxt.setNewTextFormat(this.textFormat);
            this.weatherMC.conditionTxt.wordWrap = true;
            this.weatherMC.conditionTxt.autoSize = true;
            this.weatherMC.conditionTxt._visible = false;
            this.weatherMC.createTextField("temperatureTxt", this.weatherMC.getNextHighestDepth(), 0, 0, 0, 0);
            this.setTxtFormat("Arial", "left", 30, false, 16777215);
            this.weatherMC.temperatureTxt.setNewTextFormat(this.textFormat);
            this.weatherMC.temperatureTxt.autoSize = true;
            this.weatherMC.temperatureTxt._visible = false;
        }
        else 
        {
            this.weatherMC = this.viewBaseMC.weatherMC;
            this.weatherMC._x = this.mainPage.weatherAreaX;
            this.weatherMC._y = this.mainPage.weatherAreaY;
        }
        com.jadoo.as2.JadooPlus.Features.Weather.addListener("onWeatherUpdate", this, this.onWeatherUpdate);
    }

    function onWeatherUpdate(condition, temperature, image)
    {
        this.weatherImg = image;
        this.weatherMC.conditionTxt.htmlText = condition;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getTempScale() == "celsius") 
        {
            this.weatherMC.temperatureTxt.htmlText = String(int((temperature - 32) * 5 / 9)) + "° C";
        }
        else 
        {
            this.weatherMC.temperatureTxt.htmlText = temperature + "° F";
        }
        if (this.weatherMC.imageMC == undefined) 
        {
            this.weatherMC.createEmptyMovieClip("imageMC", this.weatherMC.getNextHighestDepth());
            this.weatherImgLoader.loadClip(image, this.weatherMC.imageMC);
        }
        else if (this.weatherMC.imageMC._source == image) 
        {
            this.onLoadWeatherImg(this.weatherMC.imageMC);
        }
        else 
        {
            removeMovieClip(this.weatherMC.imageMC);
            this.weatherMC.createEmptyMovieClip("imageMC", this.weatherMC.getNextHighestDepth());
            this.weatherImgLoader.loadClip(image, this.weatherMC.imageMC);
        }
        condition = null;
        temperature = null;
        image = null;
    }

    function onLoadWeatherImg(targetMC)
    {
        targetMC._source = this.weatherImg;
        var __reg3 = this.mainPage.weatherAreaHeight / targetMC._height;
        targetMC._height = targetMC._height * __reg3;
        targetMC._width = targetMC._width * __reg3;
        this.weatherMC.temperatureTxt._x = 8;
        this.weatherMC.temperatureTxt._visible = true;
        targetMC._x = this.weatherMC.temperatureTxt._x + this.weatherMC.temperatureTxt._width + 5;
        this.weatherMC.conditionTxt._visible = true;
        this.weatherMC.conditionTxt._x = targetMC._x + targetMC._width + 10;
        this.weatherMC.conditionTxt._width = this.mainPage.weatherAreaWidth - targetMC._width - 10;
        var __reg4 = (this.mainPage.weatherAreaHeight - this.weatherMC.temperatureTxt._height) / 2;
        this.weatherMC.temperatureTxt._y = __reg4;
        var __reg5 = (this.mainPage.weatherAreaHeight - this.weatherMC.conditionTxt._height) / 2;
        this.weatherMC.conditionTxt._y = __reg5;
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function displayTime()
    {
        if (this.viewBaseMC.timeBaseMC != undefined) 
        {
            removeMovieClip(this.viewBaseMC.timeBaseMC);
        }
        this.timeBaseMC = this.viewBaseMC.createEmptyMovieClip("timeBaseMC", this.viewBaseMC.getNextHighestDepth());
        this.timeBaseMC._x = this.mainPage.timeAreaX;
        this.timeBaseMC._y = this.mainPage.timeAreaY;
        var __reg2 = this.timeBaseMC.attachMovie("timeClock", "timeClockMC", this.timeBaseMC.getNextHighestDepth());
        var __reg5 = this.mainPage.timeAreaHeight / __reg2._height;
        __reg2._x = 8;
        __reg2._width = __reg2._width * __reg5;
        __reg2._height = __reg2._height * __reg5;
        var __reg4 = this.timeBaseMC.createTextField("timeText", this.timeBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.setTxtFormat("Arial", "left", 29, false, 16777215);
        __reg4.setNewTextFormat(this.textFormat);
        __reg4._x = __reg2._x + __reg2._width + 10;
        __reg4.autoSize = true;
        var __reg3 = this.timeBaseMC.createTextField("dayText", this.timeBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.setTxtFormat("Arial", "left", 30, false, 16777215);
        __reg3.setNewTextFormat(this.textFormat);
        __reg3._x = __reg2._x + __reg2._width + 10;
        __reg3.autoSize = true;
        this.onUpdateTime();
        this.timeTimerId = setInterval(this, "onUpdateTime", 30000);
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function onUpdateTime()
    {
        var __reg3 = new Date();
        var __reg4 = __reg3.getHours();
        var __reg7 = __reg3.getMinutes();
        var __reg6 = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
        var __reg5 = "AM";
        var __reg2 = "";
        if (__reg4 > 11) 
        {
            __reg4 = __reg4 - 12;
            __reg5 = "PM";
        }
        if (__reg4 < 10) 
        {
            __reg2 = __reg2 + "0";
        }
        __reg2 = __reg2 + (__reg4.toString() + ":");
        if (__reg7 < 10) 
        {
            __reg2 = __reg2 + "0";
        }
        __reg2 = __reg2 + (__reg7.toString() + " " + __reg5);
        this.timeBaseMC.timeText.htmlText = __reg2;
        this.timeBaseMC.dayText.htmlText = __reg6[__reg3.getDay()];
        var __reg8 = (this.mainPage.timeAreaHeight - this.timeBaseMC.timeText._height - this.timeBaseMC.dayText._height) / 2;
        this.timeBaseMC.timeText._y = __reg8;
        this.timeBaseMC.dayText._y = this.timeBaseMC.timeText._y + this.timeBaseMC.timeText._height;
        false;
        false;
        __reg3 = null;
        __reg6 = null;
        __reg5 = null;
        __reg2 = null;
    }

    function showAdsOnPage(parentMC)
    {
        if (this.pageAds != null) 
        {
            this.pageAds.stopAds();
            this.pageAds.destroy();
            delete this.pageAds;
            this.pageAds = null;
        }
        this.pageAds = new com.jadoo.as2.JadooPlus.AdService.PageAds();
        this.pageAds.showAds(parentMC, this.mainPage.pageId, this.mainPage.adsX, this.mainPage.adsY, this.mainPage.adsWidth, this.mainPage.adsHeight, this.mainPage.nextAdFetchTime);
    }

    function removeAds()
    {
        if (this.pageAds != null) 
        {
            this.pageAds.stopAds();
            this.pageAds.destroy();
            delete this.pageAds;
            this.pageAds = null;
        }
    }

    function enableView()
    {
        if (this.mainPage.isAdView == true) 
        {
            this.showAdsOnPage(this.parentMC);
        }
        if (this.mainPage.ticker != null) 
        {
            this.mainPage.ticker.start();
        }
    }

    function disableView()
    {
        if (this.mainPage.isAdView == true) 
        {
            this.removeAds();
        }
        if (this.mainPage.ticker != null) 
        {
            this.mainPage.ticker.stop();
        }
    }

    function onXmlSocketSystemEvent(eventStr)
    {
        if (this.wifiMsgBox != null) 
        {
            this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.wifiMsgBox.destroy();
            delete this.wifiMsgBox;
            this.wifiMsgBox = null;
        }
        if ((__reg0 = eventStr) === "System.WirelessUsbInserted") 
        {
            var __reg2 = this.parentMC.createEmptyMovieClip("wifiMsgBoxBaseMC", this.parentMC.getNextHighestDepth());
            var __reg3 = com.jadoo.as2.JadooPlus.Utils.Messages.WIRELESS_USB_NETWORK_ADAPTER_DETECTED;
            this.wifiMsgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
            this.wifiMsgBox.addListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.buttons = new Array("Yes", "No");
            this.wifiMsgBox.create(__reg2, "Wireless Setup", __reg3, true, this.buttons);
            __reg2 = null;
            __reg3 = null;
        }
        else 
        {
            __reg0 === "System.WirelessUsbRemoved";
        }
        eventStr = null;
    }

    function onWifiMsgBoxBtnPress(btnPressed)
    {
        this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
        this.wifiMsgBox.destroy();
        delete this.wifiMsgBox;
        this.wifiMsgBox = null;
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
        if (btnPressed == "Yes") 
        {
            var __reg3 = new XML();
            __reg3.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + com.jadoo.as2.JadooPlus.Utils.Config.WIFI_SETUP_PATH);
        }
        btnPressed = null;
    }

    function enableSystemEventsListener()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("SystemEvent", this, this.onXmlSocketSystemEvent);
    }

    function disableSystemEventsListener()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("SystemEvent", this, this.onXmlSocketSystemEvent);
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function updateColorBtnCoordinates()
    {
        if (this.colorBtnX == 0 || this.colorBtnY == 0) 
        {
            var __reg5 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getViewType();
            if (__reg5 == "ferrariXML:1-TierView.xml") 
            {
                var __reg3 = com.jadoo.as2.JadooPlus.Views.Page.SingleTierPage(this.mainPage);
                this.colorBtnX = __reg3.tier1.areaStartX + __reg3.tier1.areaWidth;
                this.colorBtnY = __reg3.tier1.areaStartY + __reg3.tier1.areaHeight;
                __reg3 = null;
            }
            else if (__reg5 == "ferrariXML:2-TierView.xml") 
            {
                var __reg2 = com.jadoo.as2.JadooPlus.Views.Page.TwoTierPage(this.mainPage);
                this.colorBtnX = __reg2.tier2.areaStartX + __reg2.tier2.areaWidth;
                this.colorBtnY = __reg2.tier2.areaStartY + __reg2.tier2.areaHeight;
                __reg2 = null;
            }
            else if (__reg5 == "ferrariXML:3-TierView.xml") 
            {
                var __reg4 = com.jadoo.as2.JadooPlus.Views.Page.ThreeTierPage(this.mainPage);
                this.colorBtnX = __reg4.tier3.areaStartX + __reg4.tier3.areaWidth;
                this.colorBtnY = __reg4.tier3.areaStartY + __reg4.tier3.areaHeight;
                __reg4 = null;
            }
            __reg5 = null;
            return;
        }
        this.colorBtnX = this.colorBtnX - this.buttonSpacingX;
    }

    function createSearchColorBtn()
    {
        if (this.mainPage.pageTitle != "Search Results" && this.mainPage.pageTitle != "Favorites") 
        {
            if (this.searchButtonText == null) 
            {
                this.updateColorBtnCoordinates();
                this.searchButtonText = this.viewMC.createTextField("blueButtonText", this.viewMC.getNextHighestDepth(), this.colorBtnX, this.colorBtnY + this.buttonSpacingY, 0, 0);
                this.searchButtonText.autoSize = "right";
                this.setTxtFormat("Arial", "center", 24, false, 16777215);
                this.searchButtonText.setNewTextFormat(this.textFormat);
                this.searchButtonText.htmlText = "Search";
                var __reg2 = this.viewMC.attachMovie("blueButton", "blueButtonMC", this.viewMC.getNextHighestDepth());
                __reg2._x = this.searchButtonText._x - __reg2._width - this.buttonSpacingX;
                __reg2._y = this.searchButtonText._y;
                this.searchButtonText._y = this.searchButtonText._y - Math.abs((__reg2._height - this.searchButtonText._height) / 2);
                this.colorBtnX = __reg2._x;
                __reg2 = null;
            }
        }
    }

    function colorButtonEvent()
    {
        var __reg7 = arguments[0];
        var __reg6 = arguments[1];
        var __reg4 = arguments[2];
        if ((__reg0 = __reg7) === "draw") 
        {
            this.updateColorBtnCoordinates();
            if ((__reg0 = __reg6) === "Red") 
            {
                var __reg3 = this.viewMC.createTextField("redButtonText", this.viewMC.getNextHighestDepth(), this.colorBtnX, this.colorBtnY + this.buttonSpacingY, 0, 0);
                __reg3.autoSize = "right";
                this.setTxtFormat("Arial", "center", 24, false, 16777215);
                __reg3.setNewTextFormat(this.textFormat);
                __reg3.htmlText = __reg4;
                var __reg5 = this.viewMC.attachMovie("redButton", "redButtonMC", this.viewMC.getNextHighestDepth());
                __reg5._x = __reg3._x - __reg5._width - this.buttonSpacingX;
                __reg5._y = __reg3._y;
                __reg3._y = __reg3._y - Math.abs((__reg5._height - __reg3._height) / 2);
            }
            else if (__reg0 === "Green") 
            {
                __reg3 = this.viewMC.createTextField("greenButtonText", this.viewMC.getNextHighestDepth(), this.colorBtnX, this.colorBtnY + this.buttonSpacingY, 0, 0);
                __reg3.autoSize = "right";
                this.setTxtFormat("Arial", "center", 24, false, 16777215);
                __reg3.setNewTextFormat(this.textFormat);
                __reg3.htmlText = __reg4;
                __reg5 = this.viewMC.attachMovie("greenButton", "greenButtonMC", this.viewMC.getNextHighestDepth());
                __reg5._x = __reg3._x - __reg5._width - this.buttonSpacingX;
                __reg5._y = __reg3._y;
                __reg3._y = __reg3._y - Math.abs((__reg5._height - __reg3._height) / 2);
            }
            else if (__reg0 === "Yellow") 
            {
                if (this.viewMC.yellowButtonMC == null && this.viewMC.yellowButtonMC == undefined) 
                {
                    __reg3 = this.viewMC.createTextField("yellowButtonText", this.viewMC.getNextHighestDepth(), this.colorBtnX, this.colorBtnY + this.buttonSpacingY, 0, 0);
                    __reg3.autoSize = "right";
                    this.setTxtFormat("Arial", "center", 24, false, 16777215);
                    __reg3.setNewTextFormat(this.textFormat);
                    __reg3.htmlText = __reg4;
                    __reg5 = this.viewMC.attachMovie("yellowButton", "yellowButtonMC", this.viewMC.getNextHighestDepth());
                    __reg5._x = __reg3._x - __reg5._width - this.buttonSpacingX;
                    __reg5._y = __reg3._y;
                    __reg3._y = __reg3._y - Math.abs((__reg5._height - __reg3._height) / 2);
                }
            }
            this.colorBtnX = __reg5._x;
            __reg5 = null;
            __reg3 = null;
        }
        else if (__reg0 === "disable") 
        {
            if ((__reg0 = __reg6) === "Red") 
            {
                this.viewMC.redButtonMC._visible = false;
                this.viewMC.redButtonText._visible = false;
            }
            else if (__reg0 === "Green") 
            {
                this.viewMC.greenButtonMC._visible = false;
                this.viewMC.greenButtonText._visible = false;
            }
            else if (__reg0 === "Yellow") 
            {
                this.viewMC.yellowButtonMC._visible = false;
                this.viewMC.yellowButtonText._visible = false;
            }
        }
        else if (__reg0 === "enable") 
        {
            if ((__reg0 = __reg6) === "Red") 
            {
                this.viewMC.redButtonMC._visible = true;
                this.viewMC.redButtonText._visible = true;
            }
            else if (__reg0 === "Green") 
            {
                this.viewMC.greenButtonMC._visible = true;
                this.viewMC.greenButtonText._visible = true;
            }
            else if (__reg0 === "Yellow") 
            {
                this.viewMC.yellowButtonMC._visible = true;
                this.viewMC.yellowButtonText._visible = true;
            }
        }
        else if (__reg0 === "updateText") 
        {
            if ((__reg0 = __reg6) === "Red") 
            {
                this.viewMC.redButtonText.htmlText = __reg4;
                this.viewMC.redButtonMC._x = this.viewMC.redButtonText._x - this.viewMC.redButtonMC._width - this.buttonSpacingX;
            }
            else if (__reg0 === "Green") 
            {
                this.viewMC.greenButtonText.htmlText = __reg4;
                this.viewMC.greenButtonMC._x = this.viewMC.greenButtonText._x - this.viewMC.greenButtonMC._width - this.buttonSpacingX;
            }
            else if (__reg0 === "Yellow") 
            {
                this.viewMC.yellowButtonText.htmlText = __reg4;
                this.viewMC.yellowButtonMC._x = this.viewMC.yellowButtonText._x - this.viewMC.yellowButtonMC._width - this.buttonSpacingX;
            }
        }
        __reg7 = null;
        __reg6 = null;
        __reg4 = null;
    }

    function showLoadingClip()
    {
        if (this.loadingSignMC == null) 
        {
            this.loadingSignMC = this.parentMC.attachMovie("loadingView", "loadingViewMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360});
        }
    }

    function removeLoadingClip()
    {
        if (this.loadingSignMC != null) 
        {
            removeMovieClip(this.loadingSignMC);
            this.loadingSignMC = null;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            if (this.netStatus == "Up") 
            {
                this.onPageBackCallback();
            }
            else 
            {
                this.displayMessage(this.netErrorStr);
            }
            return;
        }
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

}

//Sprite 642
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Page.ParentPage
{
    var pageId = null;
    var pageTitle = null;
    var pageTitleX = null;
    var pageTitleY = null;
    var pageTitleWidth = null;
    var pageTitleHeight = null;
    var pageTitleTxtFormat = null;
    var backImgUrl = null;
    var isAdView: Boolean = false;
    var adsTitle = null;
    var adsXMLLink = null;
    var adsX = null;
    var adsY = null;
    var adsWidth = null;
    var adsHeight = null;
    var nextAdFetchTime = null;
    var selectorUrl = null;
    var videoAdsXMLLink = null;
    var firstAdFetchTime = null;
    var topRightLogoUrl = null;
    var topRightLogoX = null;
    var topRightLogoY = null;
    var topRightLogoWidth = null;
    var topRightLogoHeight = null;
    var msgAreaX = null;
    var msgAreaY = null;
    var msgAreaWidth = null;
    var msgAreaHeight = null;
    var msgTxtFormat = null;
    var showWeather: Boolean = false;
    var weatherAreaX = null;
    var weatherAreaY = null;
    var weatherAreaWidth = null;
    var weatherAreaHeight = null;
    var weatherUnit = null;
    var listingIdxRightX = null;
    var listingIdxY = null;
    var listIdxTxtFormat = null;
    var showInfo: Boolean = false;
    var infoTitleTxtFormat = null;
    var infoTxtFormat = null;
    var timeAreaX = null;
    var timeAreaY = null;
    var timeAreaWidth = null;
    var timeAreaHeight = null;
    var ticker = null;
    var searchHelpLink = null;
    var searchResultsLink = null;
    var playContinuous: String = "no";
    var contentType = null;
    var vodResponseLink = null;

    function ParentPage()
    {
    }

    function destroy()
    {
        if (this.ticker != null) 
        {
            this.ticker.destroy();
            delete this.ticker;
            this.ticker = null;
        }
        if (this.pageTitleTxtFormat != null) 
        {
            delete this.pageTitleTxtFormat;
            this.pageTitleTxtFormat = null;
        }
        if (this.msgTxtFormat != null) 
        {
            delete this.msgTxtFormat;
            this.msgTxtFormat = null;
        }
        if (this.infoTitleTxtFormat != null) 
        {
            delete this.infoTitleTxtFormat;
            this.infoTitleTxtFormat = null;
        }
        if (this.infoTxtFormat != null) 
        {
            delete this.infoTxtFormat;
            this.infoTxtFormat = null;
        }
        this.searchHelpLink = null;
        this.searchResultsLink = null;
    }

}

//Sprite 643
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.Ticker
{
    var url = null;
    var yPos: Number = 0;
    var refreshTime: Number = 0;
    var backgroundColor: Number = 0;
    var alpha: Number = 100;
    var textFormat = null;
    var parentMC = null;
    var tickerBaseMC = null;
    var tickerXml = null;
    var fn = null;
    var tickerText = null;
    var tickerTextField = null;
    var updateTimerId: Number = -1;
    var xmlInvoker = null;

    function Ticker()
    {
        this.fn = {onLoadTickerXml: mx.utils.Delegate.create(this, this.onLoadTickerXml)};
    }

    function create(parentMC)
    {
        this.parentMC = parentMC;
        this.tickerBaseMC = parentMC.createEmptyMovieClip("tickerBaseMC", parentMC.getNextHighestDepth());
        this.tickerBaseMC._y = this.yPos;
        this.tickerBaseMC._visible = false;
        var __reg2 = this.tickerBaseMC.createEmptyMovieClip("tickerBgMC", this.tickerBaseMC.getNextHighestDepth());
        __reg2.beginFill(this.backgroundColor, this.alpha);
        __reg2.moveTo(0, 0);
        __reg2.lineTo(1280, 0);
        __reg2.lineTo(1280, this.textFormat.size + 10);
        __reg2.lineTo(0, this.textFormat.size + 10);
        __reg2.lineTo(0, 0);
        __reg2.endFill();
        if (this.url.charAt(this.url.length - 1) != "/") 
        {
            this.url = this.url + "/";
        }
        this.url = this.url + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        if (this.tickerTextField == null) 
        {
            this.tickerTextField = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            this.tickerTextField.createTextField(this.tickerBaseMC, 0, 0, 1250, this.textFormat.size + 10, "false");
            this.tickerTextField.setTextFormat(this.textFormat);
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadTickerXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadTickerXml);
        this.updateTicker();
        parentMC = null;
        __reg2 = null;
    }

    function updateTicker()
    {
        clearInterval(this.updateTimerId);
        this.updateTimerId = -1;
        this.xmlInvoker.loadXML(this.url, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, true, false);
    }

    function onLoadTickerXml()
    {
        var __reg7 = arguments[0];
        var __reg8 = arguments[1];
        if (__reg7) 
        {
            this.tickerXml = this.xmlInvoker.getXmlObject();
            var __reg5 = mx.xpath.XPathAPI.selectNodeList(this.tickerXml.firstChild, "/xml/tickers/ticker");
            var __reg6 = __reg5.length;
            var __reg4 = null;
            this.tickerText = "";
            var __reg3 = 0;
            while (__reg3 < __reg6) 
            {
                __reg4 = __reg5[__reg3];
                this.tickerText = this.tickerText + "- ";
                this.tickerText = this.tickerText + __reg4.firstChild.nodeValue;
                this.tickerText = this.tickerText + "    ";
                ++__reg3;
            }
            if (__reg6 > 0) 
            {
                this.tickerTextField.setHtmlText(this.tickerText);
                this.tickerBaseMC._visible = true;
                this.tickerTextField.enable(false, 1000);
            }
            else 
            {
                this.tickerTextField.disable();
                this.tickerBaseMC._visible = false;
            }
            __reg5 = null;
            __reg4 = null;
            this.tickerXml = null;
        }
        __reg7 = null;
        __reg8 = null;
    }

    function start()
    {
        this.updateTicker();
    }

    function stop()
    {
        clearInterval(this.updateTimerId);
        this.updateTimerId = -1;
        this.tickerTextField.disable();
        this.tickerBaseMC._visible = false;
    }

    function destroy()
    {
        stop();
        removeMovieClip(this.tickerBaseMC);
        if (this.tickerTextField != null) 
        {
            this.tickerTextField.removeTextField();
            delete this.tickerTextField;
            this.tickerTextField = null;
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.xmlResponse.removeListener(this, this.onLoadTickerXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.tickerXml != null) 
        {
            delete this.tickerXml;
            this.tickerXml = null;
        }
        delete this.textFormat;
        this.textFormat = null;
        this.tickerBaseMC = null;
        this.parentMC = null;
        this.tickerText = null;
        this.fn = null;
        this.url = null;
    }

}

//Sprite 644
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml
{
    var xmlTimeOutId: Number = -1;
    var xmlResponse = null;
    var xmlHttpStatus = null;
    var objectIndex = null;
    var xmlObj = null;
    var timeOutDuration = null;
    var headerBoardId: Boolean = false;
    var xmlLoadVars = null;
    var fn;
    var timeOut;

    function JadooXml()
    {
        this.xmlResponse = new com.BigRoom.Event();
        this.xmlObj = new Array();
        this.fn = {onXmlLoad: mx.utils.Delegate.create(this, this.onXmlLoad), onHTTPStatus: mx.utils.Delegate.create(this, this.onHTTPStatus), onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function loadPlaylistXML(url, index, timeOutDuration, cache)
    {
        this.deleteXMLObject(this.objectIndex);
        this.objectIndex = index;
        this.timeOutDuration = timeOutDuration;
        this.loadUrl(url, index, timeOutDuration, cache);
        url = null;
        index = null;
        timeOutDuration = null;
        cache = null;
    }

    function loadXML(url, index, timeOutDuration, cache, isBoxIdToAppend, headerBoardId)
    {
        this.deleteXMLObject(this.objectIndex);
        this.objectIndex = index;
        this.timeOutDuration = timeOutDuration;
        this.headerBoardId = headerBoardId;
        if (isBoxIdToAppend) 
        {
            url = this.appendBoxId(url);
        }
        this.loadUrl(url, index, timeOutDuration, cache);
        url = null;
        index = null;
        timeOutDuration = null;
        cache = null;
        isBoxIdToAppend = null;
        headerBoardId = null;
    }

    function appendBoxId(url)
    {
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        url = url + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        return url;
    }

    function loadUrl(url, index, timeOutDuration, cache)
    {
        if (this.xmlObj[this.objectIndex] != null) 
        {
            delete this.xmlObj[this.objectIndex];
            this.xmlObj[this.objectIndex] = null;
        }
        this.xmlObj[this.objectIndex] = new XML();
        this.xmlObj[this.objectIndex].ignoreWhite = true;
        this.xmlObj[this.objectIndex].onLoad = this.fn.onXmlLoad;
        this.xmlObj[this.objectIndex].onHTTPStatus = this.fn.onHTTPStatus;
        this.xmlHttpStatus = null;
        if (cache == true && _global.currentApplication != "MyJadoo" && _global.cacheXml == 1) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(url, this.fn.onGetCachedFile, "XML");
            return;
        }
        if (cache == true && com.jadoo.as2.JadooPlus.Utils.Config.isHomePage == true && _global.currentApplication == "MyJadoo" && _global.cacheXml == 1) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(url, this.fn.onGetCachedFile, "XML");
            return;
        }
        if (this.headerBoardId) 
        {
            if (this.xmlLoadVars != null) 
            {
                delete this.xmlLoadVars;
                this.xmlLoadVars = null;
            }
            this.xmlLoadVars = new LoadVars();
            this.xmlLoadVars.addRequestHeader("X-Ver-ID", com.jadoo.as2.JadooPlus.Utils.Utils.getBoardId());
            this.xmlLoadVars.sendAndLoad(url, this.xmlObj[this.objectIndex]);
        }
        else 
        {
            this.xmlObj[this.objectIndex].load(url);
        }
        this.xmlTimeOutId = setInterval(this, "xmlTimeOut", timeOutDuration);
    }

    function onGetCachedFile(filePath)
    {
        if (this.headerBoardId) 
        {
            if (this.xmlLoadVars != null) 
            {
                delete this.xmlLoadVars;
                this.xmlLoadVars = null;
            }
            this.xmlLoadVars = new LoadVars();
            this.xmlLoadVars.addRequestHeader("X-Ver-ID", com.jadoo.as2.JadooPlus.Utils.Utils.getBoardId());
            this.xmlLoadVars.sendAndLoad(filePath, this.xmlObj[this.objectIndex]);
        }
        else 
        {
            this.xmlObj[this.objectIndex].load(filePath);
        }
        this.xmlTimeOutId = setInterval(this, "xmlTimeOut", this.timeOutDuration);
    }

    function onXmlLoad(success)
    {
        this.clearXmlTimeOutInverval();
        this.timeOut = false;
        if (success == false) 
        {
            this.deleteXMLObject(this.objectIndex);
        }
        this.xmlResponse.notify(success, this.timeOut, this.xmlHttpStatus);
    }

    function onHTTPStatus(httpStatus)
    {
        this.xmlHttpStatus = httpStatus;
    }

    function clearXmlTimeOutInverval()
    {
        clearInterval(this.xmlTimeOutId);
        this.xmlTimeOutId = -1;
    }

    function xmlTimeOut()
    {
        this.clearXmlTimeOutInverval();
        this.deleteXMLObject(this.objectIndex);
        this.timeOut = true;
        this.xmlResponse.notify(false, this.timeOut, this.xmlHttpStatus);
    }

    function deleteXMLObject(objIndex)
    {
        if (objIndex < this.xmlObj.length) 
        {
            if (this.xmlObj[objIndex] != null) 
            {
                this.xmlObj[objIndex].onData = null;
                this.xmlObj[objIndex].onLoad = null;
                delete this.xmlObj[objIndex];
                this.xmlObj[objIndex] = null;
            }
        }
    }

    function getXmlObject()
    {
        return this.xmlObj[this.objectIndex];
    }

    function destroy()
    {
        var __reg2 = 0;
        while (__reg2 <= this.xmlObj.length) 
        {
            if (this.xmlObj[__reg2] != null) 
            {
                this.xmlObj[__reg2].onData = null;
                this.xmlObj[__reg2].onLoad = null;
                delete this.xmlObj[__reg2];
                this.xmlObj[__reg2] = null;
            }
            ++__reg2;
        }
        this.objectIndex = null;
        if (this.xmlObj != null) 
        {
            delete this.xmlObj;
            this.xmlObj = null;
        }
        if (this.xmlResponse != null) 
        {
            delete this.xmlResponse;
            this.xmlResponse = null;
        }
        if (this.xmlTimeOutId != -1) 
        {
            clearInterval(this.xmlTimeOutId);
            this.xmlTimeOutId = -1;
        }
        if (this.xmlLoadVars != null) 
        {
            delete this.xmlLoadVars;
            this.xmlLoadVars = null;
        }
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onXmlResponse") 
        {
            this.xmlResponse.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onXmlResponse") 
        {
            this.xmlResponse.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

}

//Sprite 645
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.CacheManager
{
    static var downloadQueue = null;
    static var downloadXml = null;
    static var deleteTempFileXml = null;
    static var renameFileXml = null;
    static var fileInfoXml = null;
    static var cacheFolderCheckXml = null;
    static var fileCacheFolderCheckXml = null;
    static var createCacheFolderXml = null;
    static var tempFilename: String = "temp";
    static var cacheTimeoutTimerId: Number = -1;
    static var cacheClearTimeSO = null;
    static var lastCacheClearTime = null;
    static var cacheClearInProgress: Boolean = false;
    static var cacheFolderPath = null;
    static var xmlCacheFolderPath = null;
    static var imgCacheFolderPath = null;
    static var bgImgCacheFolderPath = null;
    static var downloadInProgress: Boolean = false;
    static var selectCacheFolderXml = null;
    static var deleteCacheFolderXml = null;
    static var onClearCache = null;
    static var clearCacheAftr24Hrs: Boolean = false;
    static var maxLiveChannelImgs: Number = 350;
    static var maxVodImages: Number = 500;
    static var liveChannelImgCounter: Number = 0;
    static var vodImgCounter: Number = 0;
    static var downloadedImgType: String = "";

    function CacheManager()
    {
    }

    static function init()
    {
        SharedObject.addListener("CacheClearTime", com.jadoo.as2.JadooPlus.Utils.CacheManager.onGetCacheClearTime);
        SharedObject.getLocal("CacheClearTime");
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath = com.jadoo.as2.JadooPlus.Utils.Config.RESERVED_DISK_PATH + "/" + com.jadoo.as2.JadooPlus.Utils.Config.CACHE_FOLDER;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.Config.BG_IMG_CACHE_FOLDER;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.Config.XML_CACHE_FOLDER;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.Config.IMG_CACHE_FOLDER;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue = new Array();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheTimeoutTimerId = setInterval(com.jadoo.as2.JadooPlus.Utils.CacheManager.checkCacheTimeout, com.jadoo.as2.JadooPlus.Utils.Config.CACHE_TIMEOUT_CHECK_DURATION);
    }

    static function onGetCacheClearTime(clearTimeSO)
    {
        var __reg1 = new Date();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO = clearTimeSO;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.lastCacheClearTime;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.liveChannelImgCounter;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter = com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.vodImgCounter;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter == null || com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter == undefined) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter = 0;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter == null || com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter == undefined) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter = 0;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime == null || com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime == undefined) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime = __reg1.getTime();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.lastCacheClearTime = com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.flush();
        }
        false;
        __reg1 = null;
        clearTimeSO = null;
    }

    static function getCachedFile(url, onGetCachedFile, type)
    {
        if (com.jadoo.as2.JadooPlus.Utils.Config.BYPASS_CACHE || com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearInProgress) 
        {
            onGetCachedFile(url);
            return;
        }
        var cachedFile = null;
        if (type == "XML") 
        {
            cachedFile = com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(url);
        }
        else if (type == "IMG_LIVE" || type == "IMG_VOD") 
        {
            cachedFile = com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(url);
        }
        else 
        {
            cachedFile = com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(url);
        }
        var xml = new XML();
        xml.ignoreWhite = true;
        xml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=get_user_storage_file_info&arg1=" + cachedFile);
        xml.onLoad = function (success)
        {
            if (success) 
            {
                var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(xml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
                if (__reg1 == 0) 
                {
                    onGetCachedFile(cachedFile);
                }
                else 
                {
                    onGetCachedFile(url);
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.queueFile(url, type);
                }
            }
            else 
            {
                onGetCachedFile(url);
            }
            success = null;
            onGetCachedFile = null;
            xml = null;
            url = null;
            type = null;
            cachedFile = null;
        }
        ;
    }

    static function queueFile(url, type)
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.push({url: url, type: type});
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length == 1) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
        url = null;
    }

    static function downloadFile()
    {
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress) 
        {
            return undefined;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = true;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onCacheFolderCheck;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=get_user_storage_file_info&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath);
    }

    static function onCacheFolderCheck(success)
    {
        if (success) 
        {
            var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderCheckXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg1 == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.checkFileCacheFolder();
            }
            else 
            {
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml != null) 
                {
                    delete com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml;
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml = null;
                }
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml = new XML();
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.ignoreWhite = true;
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onCreateCacheFolder;
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=create_user_storage_directory&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath);
            }
            __reg1 = null;
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
    }

    static function onCreateCacheFolder(success)
    {
        if (success) 
        {
            var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg1 == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.checkFileCacheFolder();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
                }
            }
            __reg1 = null;
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
    }

    static function checkFileCacheFolder()
    {
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onFileCacheFolderCheck;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "XML") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=get_user_storage_file_info&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_LIVE" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_VOD") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=get_user_storage_file_info&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_BG" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "SELECTOR") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=get_user_storage_file_info&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath);
        }
    }

    static function onFileCacheFolderCheck(success)
    {
        if (success) 
        {
            var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.fileCacheFolderCheckXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg1 == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFile();
            }
            else 
            {
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml != null) 
                {
                    delete com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml;
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml = null;
                }
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml = new XML();
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.ignoreWhite = true;
                com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onCreateFileCacheFolder;
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "XML") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=create_user_storage_directory&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath);
                }
                else if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_LIVE" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_VOD") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=create_user_storage_directory&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath);
                }
                else if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_BG" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "SELECTOR") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=create_user_storage_directory&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath);
                }
            }
            __reg1 = null;
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
    }

    static function onCreateFileCacheFolder(success)
    {
        if (success) 
        {
            var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.createCacheFolderXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg1 == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFile();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
                }
            }
            __reg1 = null;
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
    }

    static function deleteTempFile()
    {
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onDeleteTempFile;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "XML") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=delete_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_LIVE" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_VOD") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=delete_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_BG" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "SELECTOR") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteTempFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=delete_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
        }
    }

    static function onDeleteTempFile(success)
    {
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml != null) 
        {
            delete (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml);
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onDownloadFile;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "XML") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=download_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].url + "&arg3=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_BG" || com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "SELECTOR") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=download_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].url + "&arg3=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
            return;
        }
        if ((com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_LIVE" && com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter >= com.jadoo.as2.JadooPlus.Utils.CacheManager.maxLiveChannelImgs) || (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].type == "IMG_VOD" && com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter >= com.jadoo.as2.JadooPlus.Utils.CacheManager.maxVodImages)) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
            if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
            }
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=download_user_storage_file&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue[0].url + "&arg3=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.tempFilename);
    }

    static function onDownloadFile(success)
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.shift();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadedImgType = __reg1.type;
        if (success) 
        {
            var __reg3 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadXml.firstChild, "/theDavidBox/response/path").firstChild.nodeValue;
            if (__reg3 == 0) 
            {
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml != null) 
                {
                    delete (com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml);
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml = null;
                }
                com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml = new XML();
                com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.ignoreWhite = true;
                com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onRenameFile;
                if (__reg1.type == "XML") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=rename_user_storage_file&arg1=" + __reg2 + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(__reg1.url));
                }
                else if (__reg1.type == "IMG_LIVE" || __reg1.type == "IMG_VOD") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=rename_user_storage_file&arg1=" + __reg2 + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(__reg1.url));
                }
                else if (__reg1.type == "IMG_BG" || __reg1.type == "SELECTOR") 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=rename_user_storage_file&arg1=" + __reg2 + "&arg2=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.bgImgCacheFolderPath + "/" + com.jadoo.as2.JadooPlus.Utils.CacheManager.convertUrl(__reg1.url));
                }
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
                {
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
                }
            }
            __reg3 = null;
            __reg2 = null;
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
            if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
            }
        }
        __reg1 = null;
    }

    static function onRenameFile(success)
    {
        if (success) 
        {
            var __reg1 = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Utils.CacheManager.renameFileXml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg1 == 0) 
            {
                if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadedImgType == "IMG_LIVE") 
                {
                    ++com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter;
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.liveChannelImgCounter = com.jadoo.as2.JadooPlus.Utils.CacheManager.liveChannelImgCounter;
                }
                else if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadedImgType == "IMG_VOD") 
                {
                    ++com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter;
                    com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.vodImgCounter = com.jadoo.as2.JadooPlus.Utils.CacheManager.vodImgCounter;
                }
                com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.flush();
            }
            __reg1 = 0;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length != 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadFile();
        }
    }

    static function convertUrl(url)
    {
        var __reg3 = "";
        var __reg2 = 0;
        while (__reg2 < url.length) 
        {
            var __reg1 = url.charAt(__reg2);
            if (0 != (__reg1 == "/") | 0 != (__reg1 == "\\")) 
            {
                __reg3 = __reg3 + "_";
            }
            else 
            {
                __reg3 = __reg3 + __reg1;
            }
            ++__reg2;
        }
        url = null;
        return __reg3;
    }

    static function checkCacheTimeout()
    {
        var __reg1 = new Date();
        var __reg2 = __reg1.getTime();
        if (__reg2 - com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime >= com.jadoo.as2.JadooPlus.Utils.Config.CACHE_TIMEOUT_DURATION) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearCacheAftr24Hrs = true;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearCacheFolder(com.jadoo.as2.JadooPlus.Utils.CacheManager.xmlCacheFolderPath);
        }
        false;
        __reg1 = null;
        __reg2 = null;
    }

    static function clearBoxCache(onClearCache)
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache = onClearCache;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearInProgress = true;
        while (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.pop();
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onSelectCacheFolder;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=select_user_storage_file_to_list&arg1=" + com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheFolderPath + "&arg2=select");
        onClearCache = null;
    }

    static function clearCacheFolder(folderPath)
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache = com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearInProgress = true;
        while (com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.length) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.downloadQueue.pop();
        }
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml = new XML();
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onSelectCacheFolder;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.selectCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=select_user_storage_file_to_list&arg1=" + folderPath + "&arg2=select");
        com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache = null;
    }

    static function onSelectCacheFolder(success)
    {
        if (success) 
        {
            if (com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml != null) 
            {
                delete com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml;
                com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml = null;
            }
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml = new XML();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml.ignoreWhite = true;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml.onLoad = com.jadoo.as2.JadooPlus.Utils.CacheManager.onDeleteCacheFolder;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.deleteCacheFolderXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/file_operation?arg0=delete_user_storage_file_from_list");
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache != null || com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache != undefined) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache(false);
        }
    }

    static function onDeleteCacheFolder(success)
    {
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.clearCacheAftr24Hrs) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearCacheFolder(com.jadoo.as2.JadooPlus.Utils.CacheManager.imgCacheFolderPath);
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearCacheAftr24Hrs = false;
            return;
        }
        if (success) 
        {
            var __reg1 = new Date();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.lastCacheClearTime = com.jadoo.as2.JadooPlus.Utils.CacheManager.lastCacheClearTime = __reg1.getTime();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.liveChannelImgCounter = 0;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.data.vodImgCounter = 0;
            com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearTimeSO.flush();
            false;
            __reg1 = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.cacheClearInProgress = false;
        if (com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache != null || com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache != undefined) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.onClearCache(success);
        }
    }

}

//Sprite 646
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.UserInfo.UserProfile
{
    static var baseUrl = null;
    static var appVersion = null;
    static var firmwareVersion = null;
    static var countryCode = null;
    static var regionName = null;
    static var weatherIconsUrl = null;
    static var boxRegistered = null;
    static var registrationRequired = null;
    static var boxStatus = null;
    static var statusMessage = null;
    static var registrationURL = null;
    static var logoURL = null;
    static var cachePurge: Number = 0;
    static var cachePurgeAckLink = null;
    static var videoAdURL = null;
    static var firstVideoAdFetchTime = null;
    static var pageAdURL = null;
    static var errCodeBaseURL = null;
    static var mjChannelSubscriptionURL = null;
    static var mjGroupSubscriptionURL = null;
    static var xml = null;
    static var userCity = null;
    static var tempScale = null;
    static var programGuideURL = null;
    static var passwordParam = null;
    static var setPasswordStatusXML = null;
    static var profileXML = null;
    static var onOperationCompleted = new com.BigRoom.Event();
    static var timeOutId: Number = -1;
    static var xmlInvoker = null;
    static var onLoadXml = null;
    static var isDebugMode = null;
    static var debugLevel = null;
    static var debugServerLink = null;
    static var liveItemsLink = null;
    static var epgBaseUrl = null;
    static var showDisclaimer: Boolean = false;
    static var disclaimerAckLink = null;
    static var disclaimerText = null;
    static var langSettingsRequired = null;
    static var langSettingsUrl = null;
    static var isFavoriteEnabled: Boolean = true;
    static var appRestartResetUrl = null;
    static var jpChannelPlayUrl = null;
    static var jpVodPlayUrl = null;
    static var mjChannelPlayUrl = null;
    static var mjVodPlayUrl = null;
    static var something: String = "t3s2nO2n";

    function UserProfile()
    {
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onLoadXml = null;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.UserInfo.UserProfile, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onXmlResponse);
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker;
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker = null;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.setPasswordStatusXML) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.setPasswordStatusXML;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.passwordParam) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.passwordParam;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onOperationCompleted) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onOperationCompleted;
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.setPasswordStatusXML = null;
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.passwordParam = null;
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onOperationCompleted = null;
    }

    static function loadProfile(url, index, onLoad)
    {
        if (index == 0) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker != null) 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.UserInfo.UserProfile, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onXmlResponse);
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.destroy();
                delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker;
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker = null;
            }
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        }
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.loadXML(url + com.jadoo.as2.JadooPlus.Utils.Utils.getFirmwareVersion() + "/" + com.jadoo.as2.JadooPlus.Utils.Config.getAppVersion(), index, com.jadoo.as2.JadooPlus.Utils.Config.userProfileXmlTimeOutDuration, false, true, false);
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.addListener("onXmlResponse", com.jadoo.as2.JadooPlus.UserInfo.UserProfile, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onXmlResponse);
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onLoadXml = onLoad;
        url = null;
        onLoad = null;
    }

    static function onXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg3 = arguments[1];
        if (__reg2) 
        {
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.profileXML = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xmlInvoker.getXmlObject();
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseProfileXml();
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.loadUserCity();
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onLoadXml(__reg2, __reg3);
        __reg2 = null;
        __reg3 = null;
    }

    static function loadUserTempScale()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml;
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml = null;
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml = new XML();
        var __reg1 = com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=get_database&arg1=/opt/syb/usr/media.db&arg2=setupWidgetsSetting&arg3=temperatureScale";
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.onLoad = mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.UserInfo.UserProfile, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onLoadTempScaleXml);
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.load(__reg1);
        __reg1 = null;
    }

    static function onLoadTempScaleXml(success)
    {
        if (success) 
        {
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.tempScale = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.firstChild, "/theDavidBox/response/value").firstChild.nodeValue;
        }
        success = null;
    }

    static function loadUserCity()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml;
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml = null;
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml = new XML();
        var __reg1 = com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/deployment?arg0=get_database&arg1=/opt/syb/usr/media.db&arg2=setupWidgetsSetting&arg3=yourLocation";
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.onLoad = mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.UserInfo.UserProfile, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onLoadCityXml);
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.load(__reg1);
        __reg1 = null;
    }

    static function onLoadCityXml(success)
    {
        if (success) 
        {
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.userCity = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.xml.firstChild, "/theDavidBox/response/value").firstChild.nodeValue;
            com.jadoo.as2.JadooPlus.UserInfo.UserProfile.onOperationCompleted.notify("onWeatherDataLoaded", com.jadoo.as2.JadooPlus.UserInfo.UserProfile.userCity, com.jadoo.as2.JadooPlus.UserInfo.UserProfile.weatherIconsUrl);
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.loadUserTempScale();
        success = null;
    }

    static function parseProfileXml()
    {
        var __reg3 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.profileXML.firstChild, "/xml/box_data/data").childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "registeration") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseRegistrationTag(__reg1);
            }
            else if (__reg1.nodeName == "advertisement") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseAdvertismentTag(__reg1);
            }
            else if (__reg1.nodeName == "baseurl") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.baseUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "countryCode") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "regionName") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.regionName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "weather_icons_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.weatherIconsUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "password_reset") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.resetUserPassword = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "password_reset_ack") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.resetPaswrdAckUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "logerrors") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.errCodeBaseURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "program_guide") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.programGuideURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "perge_cache") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.cachePurge = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "perge_cache_ack") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.cachePurgeAckLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "client_version") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.appVersion = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "firmware_version") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.firmwareVersion = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "app_id") 
            {
                com.jadoo.as2.JadooPlus.Utils.Config.jadooAppId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "subscribe_channel") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelSubscriptionURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "subscribe_group") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjGroupSubscriptionURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "debug") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseDebugModeTag(__reg1);
            }
            else if (__reg1.nodeName == "channel_list") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.liveItemsLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "epg") 
            {
                if (__reg1.childNodes[0].nodeName == "url") 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl = __reg1.childNodes[0].firstChild.nodeValue;
                }
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl.charAt(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl.length - 1) != "/") 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + "/";
                }
            }
            else if (__reg1.nodeName == "disclaimer") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseDisclaimerTag(__reg1);
            }
            else if (__reg1.nodeName == "language_settings") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.parseLanguageSettingsTag(__reg1);
            }
            else if (__reg1.nodeName == "enable_favorites") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isFavoriteEnabled = Boolean(Number(__reg1.firstChild.nodeValue));
            }
            else if (__reg1.nodeName == "unset_mj_restart_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.appRestartResetUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "jp_channel_play_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpChannelPlayUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "jp_vod_play_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "mj_channel_play_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelPlayUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "mj_channel_play_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        __reg1 = null;
    }

    static function parseLanguageSettingsTag(xmlChildNode)
    {
        var __reg3 = xmlChildNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "status") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.langSettingsRequired = !Boolean(Number(__reg1.firstChild.nodeValue));
            }
            else if (__reg1.nodeName == "set_lang_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.langSettingsUrl = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        __reg1 = null;
        xmlChildNode = null;
    }

    static function parseDisclaimerTag(xmlChildNode)
    {
        var __reg3 = xmlChildNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "response_link") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.disclaimerAckLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "message") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.disclaimerText = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.showDisclaimer = true;
        __reg2 = null;
        __reg3 = null;
        __reg1 = null;
        xmlChildNode = null;
    }

    static function parseDebugModeTag(xmlChildNode)
    {
        var __reg3 = xmlChildNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "enabled") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode = Boolean(Number(__reg1.firstChild.nodeValue));
            }
            else if (__reg1.nodeName == "server") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugServerLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "level") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        __reg1 = null;
        xmlChildNode = null;
    }

    static function parseRegistrationTag(xmlChildNode)
    {
        var __reg3 = xmlChildNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "box_status") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.boxStatus = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "box_message") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.statusMessage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "required") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.registrationRequired = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "box_registered") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.boxRegistered = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.registrationURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "jadoo_logo") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.logoURL = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        __reg1 = null;
        xmlChildNode = null;
    }

    static function parseAdvertismentTag(xmlChildNode)
    {
        var __reg6 = xmlChildNode.childNodes;
        var __reg4 = null;
        var __reg5 = 0;
        while (__reg5 < __reg6.length) 
        {
            __reg4 = __reg6[__reg5];
            if (__reg4.nodeName == "page_ad_url") 
            {
                com.jadoo.as2.JadooPlus.UserInfo.UserProfile.pageAdURL = __reg4.firstChild.nodeValue;
            }
            else if (__reg4.nodeName == "video") 
            {
                var __reg3 = __reg4.childNodes;
                var __reg1 = null;
                var __reg2 = 0;
                while (__reg2 < __reg3.length) 
                {
                    __reg1 = __reg3[__reg2];
                    if (__reg1.nodeName == "ad_url") 
                    {
                        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.videoAdURL = __reg1.firstChild.nodeValue;
                    }
                    else if (__reg1.nodeName == "first_ad_fetch_time") 
                    {
                        com.jadoo.as2.JadooPlus.UserInfo.UserProfile.firstVideoAdFetchTime = Number(__reg1.firstChild.nodeValue);
                    }
                    ++__reg2;
                }
                __reg2 = null;
                __reg3 = null;
                __reg1 = null;
            }
            ++__reg5;
        }
        __reg5 = null;
        __reg6 = null;
        __reg4 = null;
        xmlChildNode = null;
    }

    static function getDebugServerURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugServerLink;
    }

    static function getProgramGuideURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.programGuideURL;
    }

    static function getErrCodeBaseURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.errCodeBaseURL;
    }

    static function getVideoAdURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.videoAdURL;
    }

    static function getVideoAdFetchTime()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.firstVideoAdFetchTime;
    }

    static function getPageAdURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.pageAdURL;
    }

    static function isBoxRegistered()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.boxRegistered == "yes") 
        {
            return true;
        }
        return false;
    }

    static function isRegistrationRequired()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.registrationRequired == "yes") 
        {
            return true;
        }
        return false;
    }

    static function isBoxActive()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.boxStatus == "active") 
        {
            return true;
        }
        return false;
    }

    static function boxStatusMessage()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.statusMessage;
    }

    static function getRegistrationURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.registrationURL;
    }

    static function getLogoURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.logoURL;
    }

    static function getMJChannelSubscritpionURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelSubscriptionURL;
    }

    static function getMJGroupSubscritpionURL()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjGroupSubscriptionURL;
    }

    static function resetPassword()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.resetUserPassword == "1") 
        {
            return true;
        }
        return false;
    }

    static function getTempScale()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.tempScale;
    }

    static function getBaseUrl()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.UserProfile.baseUrl;
    }

}

//Sprite 647
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.AdService.PageAds
{
    var pageAdBaseMC = null;
    var titleTxt = null;
    var titleTxtFormat = null;
    var adsLoader = null;
    var adsLoadListener = null;
    var fn = null;
    var adBaseMC = null;
    var adWidth = null;
    var adHeight = null;
    var pageAdURL = null;
    var pageAdDuration = null;
    var adVisible: Boolean = false;
    var pageAdChannelItem = null;
    var pageAdContentItem = null;
    var pageAdCategoryItem = null;
    var itemType = null;
    var adTimerId;

    function PageAds()
    {
        this.titleTxtFormat = new TextFormat();
        this.titleTxtFormat.font = "Arial";
        this.titleTxtFormat.align = "center";
        this.titleTxtFormat.size = 20;
        this.titleTxtFormat.bold = false;
        this.titleTxtFormat.color = 16777215;
        this.fn = {onAdsLoadInit: mx.utils.Delegate.create(this, this.onAdsLoadInit), onAdsLoadError: mx.utils.Delegate.create(this, this.onAdsLoadError), onAdTweenComplete: mx.utils.Delegate.create(this, this.onAdTweenComplete), onTweenAdToOrigAlpha: mx.utils.Delegate.create(this, this.onTweenAdToOrigAlpha), onPageAdAvailable: mx.utils.Delegate.create(this, this.onPageAdAvailable)};
    }

    function destroy()
    {
        clearInterval(this.adTimerId);
        this.adVisible = false;
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.titleTxt != null) 
        {
            this.titleTxt.removeTextField();
        }
        this.fn = null;
        removeMovieClip(this.pageAdBaseMC);
        if (this.pageAdChannelItem != null) 
        {
            delete this.pageAdChannelItem;
            this.pageAdChannelItem = null;
        }
        if (this.pageAdContentItem != null) 
        {
            delete this.pageAdContentItem;
            this.pageAdContentItem = null;
        }
        if (this.pageAdCategoryItem != null) 
        {
            delete this.pageAdCategoryItem;
            this.pageAdCategoryItem = null;
        }
    }

    function stopAds()
    {
        if (this.adBaseMC.isTweening()) 
        {
            this.adBaseMC.stopTween("_alpha");
        }
        if (this.adBaseMC != null) 
        {
            removeMovieClip(this.adBaseMC);
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.removeListener(this, this.fn.onPageAdAvailable);
        com.jadoo.as2.JadooPlus.AdService.AdService.stopService();
        if (this.adsLoader != null) 
        {
            this.adsLoader.removeListener(this.adsLoadListener);
            delete this.adsLoader;
            this.adsLoader = null;
            if (this.adsLoadListener != null) 
            {
                delete this.adsLoadListener;
                this.adsLoadListener = null;
            }
        }
    }

    function showAds(parentMC, pageId, adXPos, adYPos, adWidth, adHeight, nextAdFetchTime)
    {
        this.adWidth = adWidth;
        this.adHeight = adHeight;
        this.pageAdBaseMC = parentMC.createEmptyMovieClip("pageAdBaseMC", parentMC.getNextHighestDepth());
        this.pageAdBaseMC._x = adXPos;
        this.pageAdBaseMC._y = adYPos;
        com.jadoo.as2.JadooPlus.AdService.AdService.startService(pageId, null, "pageAd");
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.addListener(this, this.fn.onPageAdAvailable);
        com.jadoo.as2.JadooPlus.AdService.AdService.getPageAds(nextAdFetchTime);
        parentMC = null;
        pageId = null;
        adXPos = null;
        adYPos = null;
        adWidth = null;
        adHeight = null;
        nextAdFetchTime = null;
    }

    function initializeLoader()
    {
        if (this.adsLoader != null) 
        {
            this.adsLoader.removeListener(this.adsLoadListener);
            delete this.adsLoader;
            this.adsLoader = null;
            if (this.adsLoadListener != null) 
            {
                delete this.adsLoadListener;
                this.adsLoadListener = null;
            }
        }
        this.adsLoadListener = new Object();
        this.adsLoader = new MovieClipLoader();
        this.adsLoadListener.onLoadInit = this.fn.onAdsLoadInit;
        this.adsLoadListener.onLoadError = this.fn.onAdsLoadError;
        this.adsLoader.addListener(this.adsLoadListener);
    }

    function setTitle()
    {
        this.titleTxt = this.pageAdBaseMC.createTextField("titleTxt", this.pageAdBaseMC.getNextHighestDepth(), 0, this.adHeight, this.adWidth, 50);
        this.titleTxt.setNewTextFormat(this.titleTxtFormat);
        this.titleTxt.htmlText = "Ads";
    }

    function onPageAdAvailable()
    {
        var __reg3 = arguments;
        this.pageAdURL = __reg3[0];
        this.pageAdDuration = __reg3[1];
        this.itemType = __reg3[2];
        if (this.itemType == "liveWMV" || this.itemType == "liveRTMP" || this.itemType == "livePlaylist") 
        {
            this.pageAdChannelItem = __reg3[3];
        }
        else if (this.itemType == "flv" || this.itemType == "wmv" || this.itemType == "youtube" || this.itemType == "vodPlaylist") 
        {
            this.pageAdContentItem = __reg3[3];
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            this.pageAdCategoryItem = __reg3[3];
        }
        this.loadPageAd(this.pageAdURL);
    }

    function loadPageAd(pageAdURL)
    {
        this.loadAd(pageAdURL);
    }

    function loadAd(pageAdURL)
    {
        if (this.adBaseMC != null) 
        {
            removeMovieClip(this.adBaseMC);
        }
        this.adBaseMC = this.pageAdBaseMC.createEmptyMovieClip("adBaseMC", this.pageAdBaseMC.getNextHighestDepth());
        var __reg2 = this.adBaseMC.createEmptyMovieClip("adMCTEST", this.adBaseMC.getNextHighestDepth());
        this.adBaseMC._alpha = 0;
        this.initializeLoader();
        this.adsLoader.loadClip(pageAdURL, this.adBaseMC.adMCTEST);
        __reg2 = null;
    }

    function onAdsLoadInit(target_mc)
    {
        target_mc._x = 0;
        target_mc._y = 0;
        target_mc._width = this.adWidth;
        target_mc._height = this.adHeight;
        this.adVisible = true;
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdLoadComplete();
        this.tweenAd();
    }

    function onAdsLoadError(target_mc, errorCode, httpStatus)
    {
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdLoadError();
    }

    function tweenAd()
    {
        com.caurina.transitions.Tweener.addTween(this.adBaseMC, {_alpha: 100, time: 1, onComplete: this.fn.onAdTweenComplete});
    }

    function onAdTweenComplete()
    {
        com.caurina.transitions.Tweener.removeTweens(this.adBaseMC);
        this.adTimerId = setInterval(this, "tweenAdToOrigAlpha", this.pageAdDuration);
    }

    function tweenAdToOrigAlpha()
    {
        clearInterval(this.adTimerId);
        com.caurina.transitions.Tweener.addTween(this.adBaseMC, {_alpha: 0, time: 1, onComplete: this.fn.onTweenAdToOrigAlpha});
    }

    function onTweenAdToOrigAlpha()
    {
        com.caurina.transitions.Tweener.removeTweens(this.adBaseMC);
        this.onAdDurationComplete();
    }

    function onAdDurationComplete()
    {
        this.adVisible = false;
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdDurationComplete();
        removeMovieClip(this.adBaseMC);
        this.adBaseMC = null;
    }

    function getPageAdItem()
    {
        if (this.itemType == "liveWMV" || this.itemType == "liveRTMP" || this.itemType == "livePlaylist") 
        {
            return this.pageAdChannelItem;
        }
        if (this.itemType == "flv" || this.itemType == "wmv" || this.itemType == "youtube" || this.itemType == "vodPlaylist") 
        {
            return this.pageAdContentItem;
        }
        if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            return this.pageAdCategoryItem;
        }
    }

}

//Sprite 648
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var itemName = null;
    var itemLink = null;
    var itemImage = null;
    var itemType = null;
    var streamLink = null;
    var responseLink = null;
    var categoryId = null;
    var channelList = null;
    var itemId = null;
    var groupId = null;
    var itemProgramGuideLink = null;
    var contentType = null;
    var appRestart: Boolean = false;
    var itemProtected = null;
    var restrictLink = null;
    var itemInfo = null;
    var ofpEnabled: Boolean = false;
    var ofpPingDelay: Number = -1;
    var ofpDuration: Number = -1;
    var ofpPingLink = null;
    var isItemPopUp: Boolean = false;
    var popUpType = null;
    var popUpMsg = null;
    var popUpButtons = null;
    var subscriptionStatus = null;
    var onLoadXml = null;
    static var playItemXml = null;
    var xmlInvoker = null;
    var isActive = null;
    var isLinkEncoded: String = "FX00";
    var geoFilterAllowed: Boolean = true;
    var itemPath = null;
    var groupSubStatus: Number = 0;
    var channelSubStatus: Number = 0;
    var restartXML = null;
    var existsInOwnerGrp: Number = 0;
    var appType = null;

    function ParentItem()
    {
    }

    function destroy()
    {
        this.itemName = null;
        this.itemLink = null;
        this.itemImage = null;
        this.itemType = null;
        this.streamLink = null;
        this.responseLink = null;
        this.itemProtected = null;
        this.restrictLink = null;
        this.channelList = null;
        this.itemProgramGuideLink = null;
        com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml = null;
        this.popUpType = null;
        this.popUpMsg = null;
        if (this.popUpButtons != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.popUpButtons.length) 
            {
                this.popUpButtons[__reg2] = null;
                ++__reg2;
            }
            delete this.popUpButtons;
            this.popUpButtons = null;
        }
        if (this.itemInfo != null) 
        {
            this.itemInfo.destroy();
            delete this.itemInfo;
            this.itemInfo = null;
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onloadPlayItemXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.onLoadXml = null;
    }

    function deletePopupButton(btnText)
    {
        if (this.popUpButtons != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.popUpButtons.length) 
            {
                this.popUpButtons[__reg2] = null;
                ++__reg2;
            }
            delete this.popUpButtons;
            this.popUpButtons = null;
        }
    }

    function addPopupButton(btnText)
    {
        if (this.popUpButtons == null) 
        {
            this.popUpButtons = new Array();
        }
        this.popUpButtons.push(btnText);
    }

    function loadPlayItemXML(onLoad)
    {
        var __reg2 = this.itemLink;
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onloadPlayItemXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (__reg2.charAt(__reg2.length - 1) != "/") 
        {
            __reg2 = __reg2 + "/";
        }
        __reg2 = __reg2 + (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.regionName);
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.onloadPlayItemXmlResponse);
        this.xmlInvoker.loadXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.playbackXmlTimeOutDuration, false, true, false);
        this.onLoadXml = onLoad;
        onLoad = null;
        __reg2 = null;
    }

    function onloadPlayItemXmlResponse()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml = this.xmlInvoker.getXmlObject();
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            if (__reg3) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Indirect_Link_XML_Loaded_" + com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml.toString());
            }
            else if (__reg4) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Indirect_Link_XML_Timeout");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Indirect_Link_XML_Error");
            }
        }
        this.onLoadPlayItemXML(__reg3, __reg4);
        __reg3 = null;
        __reg4 = null;
    }

    function onLoadPlayItemXML()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            this.parsePlayItemXML();
        }
        if (this.onLoadXml != null) 
        {
            this.onLoadXml(__reg3, __reg4);
        }
        __reg3 = null;
        __reg4 = null;
    }

    function parsePlayItemXML()
    {
        this.appRestart = Boolean(Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml.firstChild, "/xml/restart_app").firstChild.nodeValue));
        this.isActive = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml.firstChild, "/xml/status").firstChild.nodeValue);
        if (this.isActive != -1) 
        {
            var __reg7 = mx.xpath.XPathAPI.selectNodeList(com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem.playItemXml.firstChild, "/xml/items/item");
            var __reg6 = 0;
            while (__reg6 < __reg7.length) 
            {
                var __reg5 = __reg7[__reg6].childNodes;
                var __reg3 = null;
                var __reg4 = 0;
                while (__reg4 < __reg5.length) 
                {
                    __reg3 = __reg5[__reg4];
                    if (__reg3.nodeName == "type") 
                    {
                        if (__reg3.firstChild.nodeValue != null && __reg3.firstChild.nodeValue != undefined) 
                        {
                            this.itemType = __reg3.firstChild.nodeValue;
                        }
                    }
                    else if (__reg3.nodeName == "link") 
                    {
                        this.streamLink = __reg3.firstChild.nodeValue;
                    }
                    else if (__reg3.nodeName == "e_l") 
                    {
                        this.isLinkEncoded = __reg3.firstChild.nodeValue;
                    }
                    else if (__reg3.nodeName == "status") 
                    {
                        this.isActive = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "geofilter_allowed") 
                    {
                        this.geoFilterAllowed = Boolean(Number(__reg3.firstChild.nodeValue));
                    }
                    else if (__reg3.nodeName == "overt_fingerprinting") 
                    {
                        this.parseOFPTag(__reg3);
                    }
                    else if (__reg3.nodeName == "popup") 
                    {
                        this.parsePopupTag(__reg3);
                    }
                    else if (__reg3.nodeName == "load_as2_ytplayer") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer = Boolean(Number(__reg3.firstChild.nodeValue));
                    }
                    else if (__reg3.nodeName == "sub_status") 
                    {
                        this.channelSubStatus = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "group_sub_status") 
                    {
                        this.groupSubStatus = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "exists_in_owner_group") 
                    {
                        this.existsInOwnerGrp = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "player_loading_time") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.Config.playerLoadTimeOut = Number(__reg3.firstChild.nodeValue) * 1000;
                    }
                    else if (__reg3.nodeName == "buffering_timeout") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.Config.playerBufferingTimeOut = Number(__reg3.firstChild.nodeValue) * 1000;
                    }
                    ++__reg4;
                }
                __reg3 = null;
                __reg5 = null;
                __reg4 = null;
                ++__reg6;
            }
            if (this.isLinkEncoded == "FX01") 
            {
                com.jadoo.as2.JadooPlus.Decryption.Decryption.decryptIndirectLink(this.streamLink);
                this.streamLink = com.jadoo.as2.JadooPlus.Decryption.Decryption.decryptedLink;
            }
            if (this.appRestart && _global.currentApplication != "MyJadoo" && this.groupId != null && this.groupId != undefined) 
            {
                this.disableAppRestart();
            }
            __reg7 = null;
            __reg6 = null;
        }
    }

    function disableAppRestart()
    {
        if (this.restartXML != null) 
        {
            delete this.restartXML;
            this.restartXML = null;
        }
        this.restartXML = new XML();
        this.restartXML.load(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.appRestartResetUrl + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId());
        delete this.restartXML;
        this.restartXML = null;
    }

    function parseOFPTag(ofpNode)
    {
        if (ofpNode != null && ofpNode != undefined) 
        {
            this.ofpEnabled = Boolean(Number(mx.xpath.XPathAPI.selectSingleNode(ofpNode, "/overt_fingerprinting/enabled").firstChild.nodeValue));
            this.ofpPingDelay = Number(mx.xpath.XPathAPI.selectSingleNode(ofpNode, "/overt_fingerprinting/delay").firstChild.nodeValue);
            this.ofpDuration = Number(mx.xpath.XPathAPI.selectSingleNode(ofpNode, "/overt_fingerprinting/duration").firstChild.nodeValue);
            this.ofpPingLink = mx.xpath.XPathAPI.selectSingleNode(ofpNode, "/overt_fingerprinting/set").firstChild.nodeValue;
        }
        else 
        {
            this.ofpEnabled = false;
            this.ofpPingDelay = -1;
            this.ofpDuration = -1;
            this.ofpPingLink = null;
        }
        ofpNode = null;
    }

    function parsePopupTag(popupNode)
    {
        if (popupNode != null && popupNode != undefined) 
        {
            this.deletePopupButton();
            this.isItemPopUp = true;
            this.popUpType = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/type").firstChild.nodeValue;
            this.popUpMsg = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/message").firstChild.nodeValue;
            var __reg5 = mx.xpath.XPathAPI.selectNodeList(popupNode, "/popup/buttons/button");
            var __reg4 = null;
            var __reg2 = 0;
            while (__reg2 < __reg5.length) 
            {
                __reg4 = __reg5[__reg2];
                var __reg3 = mx.xpath.XPathAPI.selectSingleNode(__reg4, "/button/text").firstChild.nodeValue;
                this.addPopupButton(__reg3);
                __reg3 = null;
                ++__reg2;
            }
            __reg5 = null;
            __reg4 = null;
        }
        popupNode = null;
    }

}

//Sprite 649
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.ItemInfo
{
    var imageUrl = null;
    var genre = null;
    var producer = null;
    var director = null;
    var cast = null;
    var shortInfo1Title = null;
    var shortInfo1 = null;
    var shortInfo2Title = null;
    var shortInfo2 = null;
    var shortInfo3Title = null;
    var shortInfo3 = null;
    var shortInfo4Title = null;
    var shortInfo4 = null;
    var longInfoTitle = null;
    var longInfo = null;
    var itemInfoEvent = null;
    var keyListener = new Object();
    var fn = null;
    var itemInfoBaseMC = null;
    var infoMC = null;
    var infoMaskMC = null;
    var parentMC = null;
    var posterWidth: Number = 275;
    var posterHeight: Number = 408;
    var watchBtnX: Number = 0;
    var watchBtnY: Number = 0;
    var resumeBtnX: Number = 0;
    var resumeBtnY: Number = 0;
    var maxButtons: Number = 3;
    var backBtnX: Number = 0;
    var backBtnY: Number = 0;
    var infoPaneWidth: Number = 750;
    var infoPaneHeight = com.jadoo.as2.JadooPlus.Views.TierItems.ItemInfo.prototype.posterHeight;
    var btnHlIdx: Number = 0;
    var infoTitleTextFormat = null;
    var infoTextFormat = null;
    var resumeAvailable: Boolean = false;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var playlistType = null;
    var playlistIds = null;
    var songsListMC = null;
    var songsBtnX: Number = 0;
    var songsBtnY: Number = 0;
    var songsList = null;
    var descriptionText = null;

    function ItemInfo()
    {
        this.itemInfoEvent = new com.BigRoom.Event();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onLoadPosterImg: mx.utils.Delegate.create(this, this.onLoadPosterImg)};
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        removeMovieClip(this.parentMC.itemInfoBaseMC);
        this.songsList.destroy();
        delete this.songsList;
        this.songsList = null;
        delete this.keyListener;
        this.keyListener = null;
        delete this.infoTitleTextFormat;
        this.infoTitleTextFormat = null;
        delete this.infoTextFormat;
        this.infoTextFormat = null;
        delete this.itemInfoEvent;
        this.itemInfoEvent = null;
        this.netStatus = null;
        this.netErrorStr = null;
        this.parentMC = null;
        this.itemInfoBaseMC = null;
        this.infoMC = null;
        this.infoMaskMC = null;
        this.fn = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function displayInfo(parentMC, itemTitle, infoTitleTextFormat, infoTextFormat, resumeAvailable)
    {
        this.parentMC = parentMC;
        this.infoTitleTextFormat = infoTitleTextFormat;
        this.infoTextFormat = infoTextFormat;
        this.resumeAvailable = resumeAvailable;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        var __reg2 = 0;
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "left";
        __reg3.bold = true;
        __reg3.size = 40;
        __reg3.color = 16622592;
        this.itemInfoBaseMC = parentMC.createEmptyMovieClip("itemInfoBaseMC", parentMC.getNextHighestDepth());
        var __reg5 = this.itemInfoBaseMC.attachMovie("maskMC", "itemInfoBgMC", this.itemInfoBaseMC.getNextHighestDepth());
        __reg5._width = 1380;
        __reg5._height = 820;
        var __reg4 = this.itemInfoBaseMC.createTextField("titleText", this.itemInfoBaseMC.getNextHighestDepth(), 100, 40, 1000, 50);
        __reg4.setNewTextFormat(__reg3);
        __reg4.htmlText = itemTitle;
        this.displayPoster(__reg4._x, __reg4._y + __reg4._height + 20);
        this.infoMC = this.itemInfoBaseMC.createEmptyMovieClip("infoMC", this.itemInfoBaseMC.getNextHighestDepth());
        this.infoMC._x = __reg4._x + this.posterWidth + 30;
        this.infoMC._y = __reg4._y + __reg4._height + 20;
        this.infoMaskMC = this.itemInfoBaseMC.attachMovie("infoPaneMask", "infoMaskMC", this.itemInfoBaseMC.getNextHighestDepth());
        this.infoMaskMC._x = this.infoMC._x;
        this.infoMaskMC._y = this.infoMC._y;
        this.infoMaskMC._width = this.infoPaneWidth;
        this.infoMaskMC._height = this.infoPaneHeight;
        this.infoMC.setMask(this.infoMaskMC);
        this.displayButtons();
        this.descriptionText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.descriptionText.createTextField(this.itemInfoBaseMC, this.infoMC._x, this.infoMC._y + this.infoPaneHeight, 653, 50, "false");
        __reg3.size = 25;
        __reg3.color = 16555008;
        this.descriptionText.setTextFormat(__reg3);
        if (this.cast != null && this.cast != undefined) 
        {
            this.displayInfoTitle("Cast", __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.cast, __reg2);
        }
        if (this.genre != null && this.genre != undefined) 
        {
            this.displayInfoTitle("Genre", __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.genre, __reg2);
        }
        if (this.producer != null && this.producer != undefined) 
        {
            this.displayInfoTitle("Producer", __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.producer, __reg2);
        }
        if (this.director != null && this.director != undefined) 
        {
            this.displayInfoTitle("Director", __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.director, __reg2);
        }
        if (this.shortInfo1 != null && this.shortInfo1 != undefined) 
        {
            this.displayInfoTitle(this.shortInfo1Title, __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.shortInfo1, __reg2);
        }
        if (this.shortInfo2 != null && this.shortInfo2 != undefined) 
        {
            this.displayInfoTitle(this.shortInfo2Title, __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.shortInfo2, __reg2);
        }
        if (this.shortInfo3 != null && this.shortInfo3 != undefined) 
        {
            this.displayInfoTitle(this.shortInfo3Title, __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.shortInfo3, __reg2);
        }
        if (this.shortInfo4 != null && this.shortInfo4 != undefined) 
        {
            this.displayInfoTitle(this.shortInfo4Title, __reg2);
            __reg2 = __reg2 + 25;
            __reg2 = __reg2 + this.displayInfoText(this.shortInfo4, __reg2);
        }
        if (this.longInfoTitle != null && this.longInfoTitle != undefined) 
        {
            this.displayLongInfo(__reg2);
        }
        this.displayArrows();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        __reg4 = null;
        __reg5 = null;
        __reg4 = null;
        resumeAvailable = null;
        false;
        __reg3 = null;
    }

    function removeInfo()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        removeMovieClip(this.itemInfoBaseMC);
        this.btnHlIdx = 0;
    }

    function displayLongInfo(startY)
    {
        var __reg3 = this.infoMC.createTextField("longInfoTitleText", this.infoMC.getNextHighestDepth(), 0, startY, this.infoPaneWidth, 27);
        __reg3.setNewTextFormat(this.infoTitleTextFormat);
        __reg3.htmlText = this.longInfoTitle;
        var __reg2 = this.infoMC.createTextField("longInfoText", this.infoMC.getNextHighestDepth(), 0, startY + 25, this.infoPaneWidth, 350);
        __reg2.setNewTextFormat(this.infoTextFormat);
        __reg2.wordWrap = true;
        __reg2.htmlText = this.longInfo;
        __reg3 = null;
        __reg2 = null;
    }

    function displayInfoTitle(infoTitle, startY)
    {
        var __reg2 = this.infoMC.createTextField(infoTitle + "Text", this.infoMC.getNextHighestDepth(), 0, startY, this.infoPaneWidth, 27);
        __reg2.setNewTextFormat(this.infoTitleTextFormat);
        __reg2.htmlText = infoTitle;
        __reg2 = null;
        infoTitle = null;
    }

    function displayInfoText(infoText, startY)
    {
        var __reg2 = this.infoMC.createTextField(infoText + "Text", this.infoMC.getNextHighestDepth(), 0, startY, this.infoPaneWidth, 54);
        __reg2.setNewTextFormat(this.infoTextFormat);
        __reg2.wordWrap = true;
        __reg2.htmlText = infoText;
        __reg2._height = __reg2.textHeight + 15;
        return __reg2._height;
    }

    function displayPoster(startX, startY)
    {
        this.itemInfoBaseMC.attachMovie("loading", "loadingMC", this.itemInfoBaseMC.getNextHighestDepth());
        this.itemInfoBaseMC.loadingMC._x = startX + this.posterWidth / 2;
        this.itemInfoBaseMC.loadingMC._y = startY + this.posterHeight / 2;
        var __reg4 = new Object();
        var __reg3 = new MovieClipLoader();
        __reg4.onLoadInit = this.fn.onLoadPosterImg;
        __reg3.addListener(__reg4);
        var __reg2 = this.itemInfoBaseMC.createEmptyMovieClip("posterMC", this.itemInfoBaseMC.getNextHighestDepth());
        __reg2._x = startX;
        __reg2._y = startY;
        __reg3.loadClip(this.imageUrl, __reg2);
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function onLoadPosterImg(targetMC)
    {
        removeMovieClip(this.itemInfoBaseMC.loadingMC);
        targetMC._width = this.posterWidth;
        targetMC._height = this.posterHeight;
        targetMC = null;
    }

    function displayButtons()
    {
        var __reg3 = 30;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 24;
        __reg2.bold = true;
        if (this.resumeAvailable) 
        {
            var __reg4 = this.itemInfoBaseMC.attachMovie("infoBtnDis", "resumeBtnMC", this.itemInfoBaseMC.getNextHighestDepth());
        }
        var __reg8 = this.itemInfoBaseMC.attachMovie("infoBtnDis", "songsBtnMC", this.itemInfoBaseMC.getNextHighestDepth());
        var __reg7 = this.itemInfoBaseMC.attachMovie("infoBtnDis", "watchBtnMC", this.itemInfoBaseMC.getNextHighestDepth());
        var __reg5 = this.itemInfoBaseMC.attachMovie("infoBtnDis", "backBtnMC", this.itemInfoBaseMC.getNextHighestDepth());
        var __reg9 = this.itemInfoBaseMC.attachMovie("infoBtnEnb", "btnHlMC", this.itemInfoBaseMC.getNextHighestDepth());
        var __reg6 = 250;
        if (this.resumeAvailable) 
        {
            this.resumeBtnX = this.itemInfoBaseMC.posterMC._x + __reg6 + 50 - __reg4._width;
            this.resumeBtnY = this.itemInfoBaseMC.posterMC._y + this.posterHeight + 65;
            this.watchBtnX = this.resumeBtnX + __reg6;
            this.watchBtnY = this.resumeBtnY;
            this.backBtnX = this.watchBtnX + __reg6;
            this.backBtnY = this.watchBtnY;
            this.songsBtnX = this.backBtnX + __reg6;
            this.songsBtnY = this.backBtnY;
            __reg4._x = __reg9._x = this.resumeBtnX;
            __reg4._y = __reg9._y = this.resumeBtnY;
            this.maxButtons = 4;
            var __reg11 = this.itemInfoBaseMC.createTextField("resumeBtnText", this.itemInfoBaseMC.getNextHighestDepth(), __reg4._x, __reg4._y + (__reg4._height - __reg3) / 2, __reg4._width, __reg3);
            __reg2.color = 0;
            __reg11.setNewTextFormat(__reg2);
            __reg11.htmlText = "Resume";
        }
        else 
        {
            this.watchBtnX = this.itemInfoBaseMC.posterMC._x + __reg6 + 50;
            this.watchBtnY = this.itemInfoBaseMC.posterMC._y + this.posterHeight + 65;
            this.backBtnX = this.watchBtnX + __reg6;
            this.backBtnY = this.watchBtnY;
            this.songsBtnX = this.backBtnX + __reg6;
            this.songsBtnY = this.backBtnY;
            __reg9._x = this.watchBtnX;
            __reg9._y = this.watchBtnY;
        }
        __reg7._x = this.watchBtnX;
        __reg7._y = this.watchBtnY;
        __reg5._x = this.backBtnX;
        __reg5._y = this.backBtnY;
        __reg8._x = this.songsBtnX;
        __reg8._y = this.songsBtnY;
        var __reg12 = this.itemInfoBaseMC.createTextField("watchBtnText", this.itemInfoBaseMC.getNextHighestDepth(), __reg7._x, __reg7._y + (__reg7._height - __reg3) / 2, __reg7._width, __reg3);
        __reg2.color = 3092271;
        __reg12.setNewTextFormat(__reg2);
        __reg12.htmlText = "Watch";
        var __reg10 = this.itemInfoBaseMC.createTextField("backBtnText", this.itemInfoBaseMC.getNextHighestDepth(), __reg5._x, __reg5._y + (__reg5._height - __reg3) / 2, __reg5._width, __reg3);
        __reg2.color = 3092271;
        __reg10.setNewTextFormat(__reg2);
        __reg10.htmlText = "Back";
        var __reg13 = this.itemInfoBaseMC.createTextField("songsBtnText", this.itemInfoBaseMC.getNextHighestDepth(), __reg8._x, __reg8._y + (__reg8._height - __reg3) / 2, __reg8._width, __reg3);
        __reg2.color = 3092271;
        __reg13.setNewTextFormat(__reg2);
        __reg13.htmlText = "Songs";
        this.btnHighlight();
        __reg2 = null;
        __reg7 = null;
        __reg5 = null;
        __reg9 = null;
        __reg12 = null;
        __reg10 = null;
        __reg4 = null;
        __reg11 = null;
    }

    function displayArrows()
    {
        var __reg3 = this.itemInfoBaseMC.attachMovie("upArrowEnb", "upArrowEnbMC", this.itemInfoBaseMC.getNextHighestDepth());
        var __reg2 = this.itemInfoBaseMC.attachMovie("downArrowEnb", "downArrowEnbMC", this.itemInfoBaseMC.getNextHighestDepth());
        __reg3._x = this.infoMC._x + this.infoMC._width + 10;
        __reg3._y = this.infoMC._y;
        __reg2._x = __reg3._x;
        __reg2._y = this.infoMC._y + this.infoPaneHeight - __reg2._height;
        __reg3._visible = false;
        if (this.infoMC._y + this.infoMC._height <= this.infoMaskMC._y + this.infoMaskMC._height) 
        {
            __reg2._visible = false;
        }
        __reg3 = null;
        __reg2 = null;
    }

    function btnHighlight()
    {
        var __reg2 = new TextFormat();
        if (this.btnHlIdx == 0) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.resumeBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.resumeBtnY;
                __reg2.color = 0;
                this.itemInfoBaseMC.resumeBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.watchBtnText.setTextFormat(__reg2);
            }
            else 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.watchBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.watchBtnY;
                __reg2.color = 0;
                this.itemInfoBaseMC.watchBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
            }
        }
        if (this.btnHlIdx == 1) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.watchBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.watchBtnY;
                __reg2.color = 0;
                this.itemInfoBaseMC.watchBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.resumeBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
            }
            else 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.backBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.backBtnY;
                __reg2.color = 3092271;
                this.itemInfoBaseMC.watchBtnText.setTextFormat(__reg2);
                __reg2.color = 0;
                this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.songsBtnText.setTextFormat(__reg2);
            }
        }
        if (this.btnHlIdx == 2) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.backBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.backBtnY;
                __reg2.color = 3092271;
                this.itemInfoBaseMC.watchBtnText.setTextFormat(__reg2);
                __reg2.color = 0;
                this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
                __reg2.color = 3092271;
                this.itemInfoBaseMC.songsBtnText.setTextFormat(__reg2);
            }
            else 
            {
                this.itemInfoBaseMC.btnHlMC._x = this.songsBtnX;
                this.itemInfoBaseMC.btnHlMC._y = this.songsBtnY;
                __reg2.color = 3092271;
                this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
                __reg2.color = 0;
                this.itemInfoBaseMC.songsBtnText.setTextFormat(__reg2);
            }
        }
        if (this.btnHlIdx == 3) 
        {
            this.itemInfoBaseMC.btnHlMC._x = this.songsBtnX;
            this.itemInfoBaseMC.btnHlMC._y = this.songsBtnY;
            __reg2.color = 3092271;
            this.itemInfoBaseMC.backBtnText.setTextFormat(__reg2);
            __reg2.color = 0;
            this.itemInfoBaseMC.songsBtnText.setTextFormat(__reg2);
        }
        __reg2 = null;
    }

    function adjustArrows()
    {
        if (this.infoMC._y >= this.infoMaskMC._y) 
        {
            this.itemInfoBaseMC.upArrowEnbMC._visible = false;
        }
        else 
        {
            this.itemInfoBaseMC.upArrowEnbMC._visible = true;
        }
        if (this.infoMC._y + this.infoMC._height <= this.infoMaskMC._y + this.infoMaskMC._height) 
        {
            this.itemInfoBaseMC.downArrowEnbMC._visible = false;
            return;
        }
        this.itemInfoBaseMC.downArrowEnbMC._visible = true;
    }

    function moveInfoPaneUp()
    {
        if (this.infoMC._y < this.infoMaskMC._y) 
        {
            this.infoMC._y = this.infoMC._y + 25;
            if (this.infoMC._y > this.infoMaskMC._y) 
            {
                this.infoMC._y = this.infoMaskMC._y;
            }
        }
    }

    function moveInfoPaneDown()
    {
        if (this.infoMC._y + this.infoMC._height > this.infoMaskMC._y + this.infoMaskMC._height) 
        {
            this.infoMC._y = this.infoMC._y - 25;
            if (this.infoMC._y + this.infoMC._height < this.infoMaskMC._y + this.infoMaskMC._height) 
            {
                this.infoMC._y = this.infoMaskMC._y + this.infoMaskMC._height - this.infoMC._height;
            }
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            removeMovieClip(this.parentMC.itemInfoBaseMC);
            this.itemInfoEvent.notify("exit");
            return;
        }
        else if (__reg0 === 37) 
        {
            this.displayMessage("");
            if (this.btnHlIdx > 0) 
            {
                --this.btnHlIdx;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 39) 
        {
            this.displayMessage("");
            if (this.btnHlIdx < this.maxButtons - 1) 
            {
                ++this.btnHlIdx;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 38) 
        {
            this.displayMessage("");
            if (this.itemInfoBaseMC.songsBtnText.text == "Songs") 
            {
                this.moveInfoPaneUp();
                this.adjustArrows();
            }
            else if (this.songsList.totalItems > 0) 
            {
                if (this.netStatus == "Up") 
                {
                    this.songsList.startScrolling();
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.itemInfoBaseMC.songsBtnText.textColor = 3092271;
                    this.itemInfoBaseMC.watchBtnText.textColor = 3092271;
                    this.itemInfoBaseMC.backBtnText.textColor = 3092271;
                    this.itemInfoBaseMC.btnHlMC._visible = false;
                }
                else 
                {
                    this.displayMessage(this.netErrorStr);
                }
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            this.displayMessage("");
            if (this.itemInfoBaseMC.songsBtnText.text == "Songs") 
            {
                this.moveInfoPaneDown();
                this.adjustArrows();
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        this.onEnterKey();
        return;
    }

    function onEnterKey()
    {
        if (this.btnHlIdx == 3) 
        {
            this.onSongBtnPressed();
        }
        if (this.btnHlIdx == 2) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoEvent.notify("exit");
            }
            else 
            {
                this.onSongBtnPressed();
            }
            return;
        }
        if (this.btnHlIdx == 1) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoEvent.notify("watchMovie", false);
            }
            else 
            {
                this.itemInfoEvent.notify("exit");
            }
            return;
        }
        if (this.btnHlIdx == 0) 
        {
            if (this.resumeAvailable) 
            {
                this.itemInfoEvent.notify("watchMovie", true);
                return;
            }
            this.itemInfoEvent.notify("watchMovie", false);
        }
    }

    function onSongBtnPressed()
    {
        if (this.netStatus == "Up") 
        {
            if (this.itemInfoBaseMC.songsBtnText.text == "Songs") 
            {
                if (this.songsListMC != null) 
                {
                    this.songsListMC.removeMovieClip();
                    this.songsListMC = null;
                }
                this.songsListMC = this.itemInfoBaseMC.createEmptyMovieClip("songsListMC", this.itemInfoBaseMC.getNextHighestDepth());
                this.songsListMC._x = this.infoMaskMC._x;
                this.songsListMC._y = this.infoMaskMC._y;
                this.itemInfoBaseMC.songsBtnText.text = "Details";
                this.itemInfoBaseMC.songsBtnText.textColor = 3092271;
                this.itemInfoBaseMC.upArrowEnbMC._visible = false;
                this.itemInfoBaseMC.downArrowEnbMC._visible = false;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.itemInfoBaseMC.btnHlMC._visible = false;
                this.infoMC._visible = false;
                this.songsList = new com.jadoo.as2.JadooPlus.Features.MovieSongsList();
                this.songsList.create(this.playlistIds, this.playlistType, this.songsListMC, this.itemInfoBaseMC);
                this.songsList.addListener(this, this.onMovieSongsEvent);
                this.songsList.showSongs();
            }
            else 
            {
                this.itemInfoBaseMC.songsBtnText.text = "Songs";
                this.itemInfoBaseMC.songsBtnText.textColor = 0;
                this.songsList.destroy();
                this.infoMC._visible = true;
                this.itemInfoBaseMC.upArrowEnbMC._visible = true;
                this.itemInfoBaseMC.downArrowEnbMC._visible = true;
                this.adjustArrows();
            }
            return;
        }
        this.displayMessage(this.netErrorStr);
    }

    function onMovieSongsEvent()
    {
        var __reg3 = arguments[0];
        if (__reg3 == "startSongPlayback") 
        {
            this.itemInfoEvent.notify("playSong", arguments[1]);
        }
        else if (__reg3 == "songsListScrollEnd") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemInfoBaseMC.btnHlMC._visible = true;
            this.btnHighlight();
        }
        else if (__reg3 == "displayMessage") 
        {
            this.displayMessage(arguments[1]);
        }
        else if (__reg3 == "exit") 
        {
            this.songsList.removeListener(this, this.onMovieSongsEvent);
            this.itemInfoEvent.notify("exit");
        }
        __reg3 = null;
        arguments = null;
    }

    function addListener(obj, listener)
    {
        this.itemInfoEvent.addListener(obj, listener);
        obj = null;
        listener = null;
    }

    function removeListener(obj, listener)
    {
        this.itemInfoEvent.removeListener(obj, listener);
        obj = null;
        listener = null;
    }

    function displayMessage(errorMsg)
    {
        this.descriptionText.disable();
        this.descriptionText.setHtmlText(errorMsg);
        if (errorMsg != "Retrieving...") 
        {
            this.descriptionText.enable(false, 1000);
        }
        errorMsg = null;
    }

}

//Sprite 650
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.MovieSongsList
{
    var movieSongsEvent = null;
    var pageTitle: String = "songsList";
    var parentMC = null;
    var keyListener = new Object();
    var fn = null;
    var infoPaneWidth: Number = 750;
    var infoPaneHeight: Number = 400;
    var cardWidth: Number = 653;
    var cardHeight: Number = 68;
    var playlistId = null;
    var playlistType = null;
    var songsListMC = null;
    var songsListBaseMC = null;
    var totalItemsXml = null;
    var playlistIds = null;
    var validPlaylistIds = null;
    var playlistNumber: Number = 0;
    var totalItemsArray = null;
    var totalItems: Number = 0;
    var itemPool = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var maxItems: Number = 5;
    var currentItemIdx: Number = 0;
    var previousItemIdx: Number = -1;
    var topItemIdx: Number = 0;
    var bottomItemIdx: Number = 0;
    var tierItems = null;
    var initialItems: Boolean = true;
    var textFormat = null;
    var itemsStartIdx: Number = 0;
    var verticalOffset: Number = 17;

    function MovieSongsList()
    {
        this.movieSongsEvent = new com.BigRoom.Event();
        this.bottomItemIdx = this.topItemIdx + this.maxItems - 1;
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onLoadTotalItemsXml: mx.utils.Delegate.create(this, this.onLoadTotalItemsXml), onGetPoolItems: mx.utils.Delegate.create(this, this.onGetPoolItems)};
        this.validPlaylistIds = new Array();
        this.totalItemsArray = new Array();
        this.tierItems = new Array();
        this.initialItems = true;
        this.playlistIds = new Array();
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.keyListener = null;
        this.songsListMC.removeMovieClip();
        this.songsListMC = null;
        this.itemPool.destroy();
        delete this.itemPool;
        this.itemPool = null;
        delete this.keyListener;
        this.keyListener = null;
        delete this.movieSongsEvent;
        this.movieSongsEvent = null;
        delete this.validPlaylistIds;
        this.validPlaylistIds = null;
        delete this.totalItemsArray;
        this.totalItemsArray = null;
        delete this.tierItems;
        this.tierItems = null;
        delete this.playlistIds;
        this.playlistIds = null;
        delete this.totalItemsXml;
        this.totalItemsXml = null;
        if (this.itemPool != null) 
        {
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        this.songsListBaseMC = null;
        this.parentMC = null;
        this.fn = null;
    }

    function create(playListIds, playlistType, songsListMC, parentMC)
    {
        this.playlistIds = playListIds;
        this.playlistId = this.playlistIds[0];
        this.playlistType = playlistType;
        this.songsListMC = songsListMC;
        this.parentMC = parentMC;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function onMovieSongsPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.movieSongsEvent.notify("displayMessage", __reg5);
            }
            else 
            {
                this.movieSongsEvent.notify("displayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.currentItemIdx > this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                --this.previousItemIdx;
            }
            else if (this.currentItemIdx < this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                ++this.previousItemIdx;
            }
        }
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
        arguments = null;
    }

    function showSongs()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.showLoadingClip();
        this.loadTotItems();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function loadTotItems()
    {
        var __reg2 = null;
        this.totalItemsXml = new XML();
        if (this.playlistType == "dailymotionplaylist") 
        {
            __reg2 = "https://api.dailymotion.com/playlist/" + this.playlistId + "?fields=videos_total";
        }
        else if (this.playlistType == "youtubeplaylist") 
        {
            __reg2 = "https://www.googleapis.com/youtube/v3/playlistItems?part=id&playlistId=" + this.playlistId + "&maxResults=0&key=" + com.jadoo.as2.JadooPlus.Utils.Config.YOUTUBE_DEVELOPER_KEY;
        }
        this.totalItemsXml.onLoad = this.fn.onLoadTotalItemsXml;
        this.totalItemsXml.ignoreWhite = true;
        this.totalItemsXml.load(__reg2);
        __reg2 = null;
    }

    function onLoadTotalItemsXml(success)
    {
        if (success) 
        {
            if (this.playlistType == "youtubeplaylist") 
            {
                __reg6 = this.totalItemsXml.toString();
                __reg6 = unescape(__reg6);
                __reg6 = this.replaceString(__reg6, "&quot;", "\"");
                __reg3 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg6);
                var __reg4 = null;
                for (__reg7 in __reg3) 
                {
                    if (__reg7 == "pageInfo") 
                    {
                        var __reg2 = __reg3[__reg7];
                        for (var __reg5 in __reg2) 
                        {
                            if (__reg5 == "totalResults") 
                            {
                                __reg4 = __reg2[__reg5];
                            }
                        }
                    }
                }
                var __reg8 = 0;
                if (__reg4 != null && __reg4 != undefined && __reg4 != "0") 
                {
                    __reg8 = Number(__reg4);
                    this.totalItemsArray.push(__reg8);
                    this.validPlaylistIds.push(this.playlistId);
                    this.totalItems = this.totalItems + __reg8;
                }
                ++this.playlistNumber;
                __reg8 = null;
                __reg4 = null;
                __reg6 = null;
                __reg3 = null;
                __reg7 = null;
            }
            else if (this.playlistType == "dailymotionplaylist") 
            {
                var __reg6 = this.totalItemsXml.toString();
                __reg6 = unescape(__reg6);
                __reg6 = this.replaceString(__reg6, "&quot;", "\"");
                var __reg3 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg6);
                for (var __reg7 in __reg3) 
                {
                    if (__reg7 == "videos_total") 
                    {
                        this.totalItems = this.totalItems + Number(__reg3[__reg7]);
                        this.totalItemsArray.push(Number(__reg3[__reg7]));
                        this.validPlaylistIds.push(this.playlistId);
                    }
                }
                ++this.playlistNumber;
                __reg6 = null;
                __reg3 = null;
                __reg7 = null;
            }
            if (this.playlistNumber <= this.playlistIds.length - 1 && this.playlistIds.length > 1) 
            {
                this.playlistId = this.playlistIds[this.playlistNumber];
                this.loadTotItems();
                return undefined;
            }
        }
        this.proceedDrawing();
        success = null;
    }

    function proceedDrawing()
    {
        if (this.totalItems == 0 || this.totalItems == undefined || this.totalItems == NaN) 
        {
            this.removeLoadingClip();
            var __reg3 = this.songsListMC.createTextField("errorText", this.songsListMC.getNextHighestDepth(), 0, 0, this.infoPaneWidth, this.infoPaneHeight);
            this.setTxtFormat("center", 30, false, 16777215);
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.text = "No Content Available";
            this.movieSongsEvent.notify("songsListScrollEnd");
            __reg3 = null;
            return;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onMovieSongsPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.playlistIds.length > 1 && this.playlistType == "youtubeplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.YoutubeMutiplePlaylistItemsPool();
        }
        else if (this.playlistIds.length > 1 && this.playlistType == "dailymotionplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.DailymotionMutiplePlaylistItemsPool();
        }
        else 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
        }
        this.itemPool.addListener("onPoolEvent", this, this.onMovieSongsPoolEvent);
        this.itemPool.initialize(null, this.currentItemIdx, this.maxItems, this.totalItems, com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTierItems, false, false, this.validPlaylistIds, this.playlistType, this.totalItemsArray);
        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, 0, this.maxItems, this.fn.onGetPoolItems);
        this.songsListBaseMC = this.songsListMC.createEmptyMovieClip("songsListBaseMC", this.songsListMC.getNextHighestDepth());
        var __reg4 = this.songsListMC.attachMovie("cardItemSelector", "selectorMC", this.songsListMC.getNextHighestDepth());
        var __reg2 = this.songsListMC.createTextField("itemListingText", this.songsListMC.getNextHighestDepth(), 0, 0, 120, 60);
        this.displayArrows();
        __reg2._x = this.cardWidth + 5;
        __reg2._y = this.cardHeight * 6;
        __reg2._visible = false;
        this.setTxtFormat("left", 20, false, 16777215);
        __reg2.setNewTextFormat(this.textFormat);
        __reg2.text = this.currentItemIdx + 1 + " / " + this.totalItems.toString();
        __reg4._visible = false;
        __reg4._x = 0;
        __reg4 = null;
        __reg2 = null;
        delete this.textFormat;
        this.textFormat = null;
    }

    function onGetPoolItems()
    {
        var __reg3 = arguments[0];
        var __reg4 = this.songsListMC.songsListBaseMC;
        if (this.initialItems) 
        {
            this.tierItems = __reg3;
            this.topItemIdx = 0;
            this.bottomItemIdx = 0 + (this.maxItems - 1);
        }
        else if (this.currentItemIdx > this.previousItemIdx) 
        {
            ++this.topItemIdx;
            ++this.bottomItemIdx;
            this.tierItems.shift();
            this.tierItems.push(__reg3[0]);
        }
        else if (this.currentItemIdx < this.previousItemIdx) 
        {
            --this.topItemIdx;
            --this.bottomItemIdx;
            this.tierItems.pop();
            this.tierItems.unshift(__reg3[0]);
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.initialItems = false;
        }
        __reg3 = null;
        __reg4 = null;
        arguments = null;
    }

    function displayItems()
    {
        this.removeLoadingClip();
        if (this.initialItems) 
        {
            var __reg2 = 0;
            while (__reg2 < this.tierItems.length) 
            {
                this.drawTierItem(__reg2, this.currentItemIdx + __reg2);
                ++__reg2;
            }
            this.highlightItem(0);
        }
        else if (this.currentItemIdx > this.previousItemIdx) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            removeMovieClip(this.songsListBaseMC["id_" + (this.topItemIdx - 1)]);
            this.drawTierItem(this.maxItems - 1, this.currentItemIdx);
            this.songsListBaseMC._y = this.songsListBaseMC._y - (this.cardHeight + this.verticalOffset);
            this.highlightItem(this.maxItems - 1);
        }
        else if (this.currentItemIdx < this.previousItemIdx) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            removeMovieClip(this.songsListBaseMC["id_" + (this.bottomItemIdx + 1)]);
            this.drawTierItem(0, this.currentItemIdx);
            this.songsListBaseMC._y = this.songsListBaseMC._y + (this.cardHeight + this.verticalOffset);
            this.highlightItem(0);
        }
        this.songsListMC.itemListingText.text = this.currentItemIdx + 1 + " / " + this.totalItems;
        this.adjustArrows();
        this.startScrolling();
    }

    function drawTierItem(itemIndex, yIndex)
    {
        var __reg2 = this.songsListBaseMC.createEmptyMovieClip("id_" + yIndex, this.songsListBaseMC.getNextHighestDepth());
        __reg2._y = yIndex * (this.cardHeight + this.verticalOffset);
        __reg2._x = 0;
        this.tierItems[itemIndex].createCardItem(__reg2, this.cardWidth, this.cardHeight, this.pageTitle);
        __reg2 = null;
        itemIndex = null;
        yIndex = null;
    }

    function displayArrows()
    {
        var __reg3 = this.songsListMC.attachMovie("upArrowEnb", "upArrowEnbMC", this.songsListMC.getNextHighestDepth());
        var __reg2 = this.songsListMC.attachMovie("downArrowEnb", "downArrowEnbMC", this.songsListMC.getNextHighestDepth());
        __reg3._x = this.cardWidth + 10;
        __reg3._y = 0;
        __reg2._x = __reg3._x;
        __reg2._y = this.infoPaneHeight - __reg2._height;
        __reg3._visible = false;
        __reg2._visible = false;
        __reg3 = null;
        __reg2 = null;
    }

    function adjustArrows()
    {
        if (this.totalItems > this.maxItems) 
        {
            if (this.topItemIdx > 0) 
            {
                this.songsListMC.upArrowEnbMC._visible = true;
            }
            else 
            {
                this.songsListMC.upArrowEnbMC._visible = false;
            }
            if (this.bottomItemIdx < this.totalItems - 1) 
            {
                this.songsListMC.downArrowEnbMC._visible = true;
            }
            else 
            {
                this.songsListMC.downArrowEnbMC._visible = false;
            }
            return;
        }
        this.songsListMC.upArrowEnbMC._visible = false;
        this.songsListMC.downArrowEnbMC._visible = false;
    }

    function addListener(obj, listener)
    {
        this.movieSongsEvent.addListener(obj, listener);
        obj = null;
        listener = null;
    }

    function removeListener(obj, listener)
    {
        this.movieSongsEvent.removeListener(obj, listener);
        obj = null;
        listener = null;
    }

    function highlightItem(yIndex)
    {
        this.songsListMC.selectorMC._y = yIndex * (this.cardHeight + this.verticalOffset);
        this.tierItems[yIndex].itemHighlight();
        yIndex = null;
    }

    function unHighlightItem(yIndex)
    {
        this.tierItems[yIndex].itemUnHighlight();
        yIndex = null;
    }

    function setTxtFormat(align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function showLoadingClip()
    {
        this.songsListMC.attachMovie("loading", "songsloadingMC", this.songsListMC.getNextHighestDepth(), {_x: this.infoPaneWidth / 2, _y: this.infoPaneHeight / 2});
    }

    function removeLoadingClip()
    {
        removeMovieClip(this.songsListMC.songsloadingMC);
    }

    function replaceString(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function startScrolling()
    {
        this.itemPool.addListener("onPoolEvent", this, this.onMovieSongsPoolEvent);
        this.highlightItem(this.currentItemIdx - this.topItemIdx);
        this.songsListMC.itemListingText._visible = true;
        this.songsListMC.selectorMC._visible = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.adjustArrows();
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.movieSongsEvent.notify("exit");
            return;
        }
        else if (__reg0 === 37) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            if (this.currentItemIdx > 0) 
            {
                if (this.currentItemIdx - this.topItemIdx > 0) 
                {
                    this.highlightItem(this.currentItemIdx - this.topItemIdx - 1);
                    this.unHighlightItem(this.currentItemIdx - this.topItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    --this.currentItemIdx;
                    this.songsListMC.itemListingText.text = this.currentItemIdx + 1 + " / " + this.totalItems;
                }
                else 
                {
                    this.previousItemIdx = this.currentItemIdx;
                    --this.currentItemIdx;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.unHighlightItem(0);
                    this.movieSongsEvent.notify("displayMessage", "Retrieving...");
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            if (this.currentItemIdx > 0) 
            {
                if (this.currentItemIdx - this.topItemIdx > 0) 
                {
                    this.highlightItem(this.currentItemIdx - this.topItemIdx - 1);
                    this.unHighlightItem(this.currentItemIdx - this.topItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    --this.currentItemIdx;
                    this.songsListMC.itemListingText.text = this.currentItemIdx + 1 + " / " + this.totalItems;
                }
                else 
                {
                    this.previousItemIdx = this.currentItemIdx;
                    --this.currentItemIdx;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.unHighlightItem(0);
                    this.movieSongsEvent.notify("displayMessage", "Retrieving...");
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            if (this.currentItemIdx < this.totalItems - 1) 
            {
                if (this.currentItemIdx - this.topItemIdx < this.maxItems - 1) 
                {
                    this.highlightItem(this.currentItemIdx - this.topItemIdx + 1);
                    this.unHighlightItem(this.currentItemIdx - this.topItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    ++this.currentItemIdx;
                    this.songsListMC.itemListingText.text = this.currentItemIdx + 1 + " / " + this.totalItems;
                }
                else 
                {
                    this.previousItemIdx = this.currentItemIdx;
                    ++this.currentItemIdx;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.unHighlightItem(this.maxItems - 1);
                    this.movieSongsEvent.notify("displayMessage", "Retrieving...");
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
            }
            else 
            {
                this.unHighlightItem(this.maxItems - 1);
                this.movieSongsEvent.notify("songsListScrollEnd");
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.songsListMC.selectorMC._visible = false;
                this.songsListMC.itemListingText._visible = false;
                this.songsListMC.upArrowEnbMC._visible = false;
                this.songsListMC.downArrowEnbMC._visible = false;
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            this.movieSongsEvent.notify("displayMessage", "");
            if (this.currentItemIdx < this.totalItems - 1) 
            {
                if (this.currentItemIdx - this.topItemIdx < this.maxItems - 1) 
                {
                    this.highlightItem(this.currentItemIdx - this.topItemIdx + 1);
                    this.unHighlightItem(this.currentItemIdx - this.topItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    ++this.currentItemIdx;
                    this.songsListMC.itemListingText.text = this.currentItemIdx + 1 + " / " + this.totalItems;
                }
                else 
                {
                    this.previousItemIdx = this.currentItemIdx;
                    ++this.currentItemIdx;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.unHighlightItem(this.maxItems - 1);
                    this.movieSongsEvent.notify("displayMessage", "Retrieving...");
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
            }
            else 
            {
                this.unHighlightItem(this.maxItems - 1);
                this.movieSongsEvent.notify("songsListScrollEnd");
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.songsListMC.selectorMC._visible = false;
                this.songsListMC.itemListingText._visible = false;
                this.songsListMC.upArrowEnbMC._visible = false;
                this.songsListMC.downArrowEnbMC._visible = false;
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.netStatus == "Up") 
        {
            this.movieSongsEvent.notify("startSongPlayback", this.tierItems[this.currentItemIdx - this.topItemIdx]);
            this.unHighlightItem(this.currentItemIdx - this.topItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        else 
        {
            this.movieSongsEvent.notify("displayMessage", this.netErrorStr);
        }
        return;
    }

}

//Sprite 651
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.ItemsPool
{
    var onPoolEvent = null;
    var itemsXml = null;
    var xmlInvoker = null;
    var tierItems = null;
    var startIdsPool = null;
    var itemsPool = null;
    var itemsIndices = null;
    var fn = null;
    var parseTierItems = null;
    var passItemsToTier = null;
    var tierItemsLink = null;
    var itemsStartIdx: Number = 0;
    var maxItems = null;
    var totalItems = null;
    var requestedItemStartIdx: Number = 0;
    var loadedItemsStartIdx: Number = 0;
    var previousItemIdx: Number = -1;
    var requestedItemIdx: Number = 0;
    var itemsToReturn: Number = 0;
    var minimumPoolItems: Number = 0;
    var itemsStorageStartIndex: Number = 0;
    var itemsStorageEndIndex: Number = 0;
    var itemsToStore: Number = 0;
    var pageCounter: Number = 0;
    var historyPages: Number = 4;
    var itemStartIdToLoad: Number = 0;
    var poolUpdated: Boolean = false;
    var isBackPage: Boolean = false;
    var xmlLoadError: Boolean = false;
    var zeroItemsLoaded: Boolean = false;
    var failureCount: Number = 0;
    var retries: Number = 2;
    var initializePool: Boolean = false;
    var pagesToStore: Number = 0;
    var returnedItems = null;
    var temporaryPoolItems = null;
    var temporaryItemIndicies = null;
    var temporaryStartIds = null;
    var viewStartIdx: Number = 0;
    var viewEndIdx: Number = 0;
    var pageJump: Boolean = false;
    var initialPages: Number = 2;
    var xmlTimeOut: Boolean = false;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var allowXmlLoad: Boolean = true;
    var startIdsToLoad = null;
    var navigationIndex: Number = 0;
    var itemType = null;
    var playlistId = null;
    var temporaryStorageEnabled: Boolean = false;
    var isFavoritesCategory: Boolean = false;
    var favoritesFetched: Boolean = false;
    var playlistIdArray = null;
    var playlistNumber: Number = 0;
    var itemsRequested: Number = 0;

    function ItemsPool()
    {
    }

    function getPoolItems()
    {
    }

    function removeItem()
    {
    }

    function destroy()
    {
    }

    function addListener()
    {
    }

    function removeListener()
    {
    }

    function initialize()
    {
    }

}

//Sprite 652
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON
{
    var array;
    var error;
    var next;
    var number;
    var object;
    var string;
    var value;
    var white;
    var word;

    function JSON()
    {
    }

    static function stringify(arg)
    {
        var __reg3 = undefined;
        var __reg2 = undefined;
        var __reg6 = undefined;
        var __reg1 = "";
        var __reg4 = undefined;
        if ((__reg0 = typeof arg) === "object") 
        {
            if (arg) 
            {
                if (arg instanceof Array) 
                {
                    __reg2 = 0;
                    while (__reg2 < arg.length) 
                    {
                        __reg4 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.stringify(arg[__reg2]);
                        if (__reg1) 
                        {
                            __reg1 = __reg1 + ",";
                        }
                        __reg1 = __reg1 + __reg4;
                        ++__reg2;
                    }
                    return "[" + __reg1 + "]";
                }
                else if (typeof arg.toString != "undefined") 
                {
                    for (__reg2 in arg) 
                    {
                        __reg4 = arg[__reg2];
                        if (typeof __reg4 != "undefined" && typeof __reg4 != "function") 
                        {
                            __reg4 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.stringify(__reg4);
                            if (__reg1) 
                            {
                                __reg1 = __reg1 + ",";
                            }
                            __reg1 = __reg1 + (com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.stringify(__reg2) + ":" + __reg4);
                        }
                    }
                    return "{" + __reg1 + "}";
                }
            }
            return "null";
        }
        else if (__reg0 === "number") 
        {
            return isFinite(arg) ? String(arg) : "null";
        }
        else if (__reg0 === "string") 
        {
            __reg6 = arg.length;
            __reg1 = "\"";
            __reg2 = 0;
            while (__reg2 < __reg6) 
            {
                __reg3 = arg.charAt(__reg2);
                if (__reg3 >= " ") 
                {
                    if (__reg3 == "\\" || __reg3 == "\"") 
                    {
                        __reg1 = __reg1 + "\\";
                    }
                    __reg1 = __reg1 + __reg3;
                }
                else if ((__reg0 = __reg3) === "") 
                {
                    __reg1 = __reg1 + "\\b";
                }
                else if (__reg0 === "") 
                {
                    __reg1 = __reg1 + "\\f";
                }
                else if (__reg0 === "\n") 
                {
                    __reg1 = __reg1 + "\\n";
                }
                else if (__reg0 === "\r") 
                {
                    __reg1 = __reg1 + "\\r";
                }
                else if (__reg0 === "\t") 
                {
                    __reg1 = __reg1 + "\\t";
                }
                else 
                {
                    __reg3 = __reg3.charCodeAt();
                    __reg1 = __reg1 + ("\\u00" + Math.floor(__reg3 / 16).toString(16) + (__reg3 % 16).toString(16));
                }
                __reg2 = __reg2 + 1;
            }
            return __reg1 + "\"";
        }
        else if (__reg0 === "boolean") 
        {
            return String(arg);
        }
        return "null";
    }

    static function parse(text)
    {
        function error(m)
        {
        };
        function next()
        {
            ch = text.charAt(at);
            at = at + 1;
            return ch;
        }
        function white()
        {
            for (;;) 
            {
                if (!ch) 
                {
                    return;
                }
                if (ch <= " ") 
                {
                    this.next();
                }
                else if (ch == "/") 
                {
                    if ((__reg0 = this.next()) === "/") 
                    {
                        for (;;) 
                        {
                            if (!(this.next() && ch != "\n" && ch != "\r")) 
                            {
                                break;
                            }
                        }
                    }
                    else if (__reg0 === "*") 
                    {
                        this.next();
                        for (;;) 
                        {
                            if (ch) 
                            {
                                if (ch == "*") 
                                {
                                    if (this.next() == "/") 
                                    {
                                        next();
                                        break;
                                    }
                                }
                                else 
                                {
                                    this.next();
                                }
                            }
                            else 
                            {
                                error("Unterminated comment");
                            }
                        }
                    }
                    else 
                    {
                        this.error("Syntax error");
                    }
                }
                else 
                {
                    return;
                }
            }
        }
        function string()
        {
            var __reg5 = undefined;
            var __reg2 = "";
            var __reg4 = undefined;
            var __reg3 = undefined;
            var __reg6 = false;
            if (ch == "\"") 
            {
                while (this.next()) 
                {
                    if (ch == "\"") 
                    {
                        this.next();
                        return __reg2;
                    }
                    else if (ch == "\\") 
                    {
                        if ((__reg0 = this.next()) === "b") 
                        {
                            __reg2 = __reg2 + "";
                        }
                        else if (__reg0 === "f") 
                        {
                            __reg2 = __reg2 + "";
                        }
                        else if (__reg0 === "n") 
                        {
                            __reg2 = __reg2 + "\n";
                        }
                        else if (__reg0 === "r") 
                        {
                            __reg2 = __reg2 + "\r";
                        }
                        else if (__reg0 === "t") 
                        {
                            __reg2 = __reg2 + "\t";
                        }
                        else if (__reg0 === "u") 
                        {
                            __reg3 = 0;
                            __reg5 = 0;
                            while (__reg5 < 4) 
                            {
                                __reg4 = parseInt(this.next(), 16);
                                if (!isFinite(__reg4)) 
                                {
                                    __reg6 = true;
                                    break;
                                }
                                __reg3 = __reg3 * 16 + __reg4;
                                __reg5 = __reg5 + 1;
                            }
                            if (__reg6) 
                            {
                                __reg6 = false;
                            }
                            else 
                            {
                                __reg2 = __reg2 + String.fromCharCode(__reg3);
                            }
                        }
                        else 
                        {
                            __reg2 = __reg2 + ch;
                        }
                    }
                    else 
                    {
                        __reg2 = __reg2 + ch;
                    }
                }
            }
            this.error("Bad string");
        }
        function array()
        {
            var __reg2 = [];
            if (ch == "[") 
            {
                this.next();
                this.white();
                if (ch == "]") 
                {
                    this.next();
                    return __reg2;
                }
                while (ch) 
                {
                    __reg2.push(this.value());
                    this.white();
                    if (ch == "]") 
                    {
                        this.next();
                        return __reg2;
                    }
                    else if (ch != ",") 
                    {
                        break;
                    }
                    this.next();
                    this.white();
                }
            }
            this.error("Bad array");
        }
        function object()
        {
            var __reg3 = undefined;
            var __reg2 = {};
            if (ch == "{") 
            {
                this.next();
                this.white();
                if (ch == "}") 
                {
                    this.next();
                    return __reg2;
                }
                while (ch) 
                {
                    __reg3 = this.string();
                    this.white();
                    if (ch != ":") 
                    {
                        break;
                    }
                    this.next();
                    __reg2[__reg3] = this.value();
                    this.white();
                    if (ch == "}") 
                    {
                        this.next();
                        return __reg2;
                    }
                    else if (ch != ",") 
                    {
                        break;
                    }
                    this.next();
                    this.white();
                }
            }
            this.error("Bad object");
        }
        function number()
        {
            var __reg2 = "";
            var __reg3 = undefined;
            if (ch == "-") 
            {
                __reg2 = "-";
                this.next();
            }
            while (ch >= "0" && ch <= "9") 
            {
                __reg2 = __reg2 + ch;
                this.next();
            }
            if (ch == ".") 
            {
                __reg2 = __reg2 + ".";
                while (this.next() && ch >= "0" && ch <= "9") 
                {
                    __reg2 = __reg2 + ch;
                }
            }
            __reg3 = __reg2;
            if (!isFinite(__reg3)) 
            {
                this.error("Bad number");
                return;
            }
            return __reg3;
        }
        function word()
        {
            if ((__reg0 = ch) === "t") 
            {
                if (this.next() == "r" && this.next() == "u" && this.next() == "e") 
                {
                    this.next();
                    return true;
                }
            }
            else if (__reg0 === "f") 
            {
                if (this.next() == "a" && this.next() == "l" && this.next() == "s" && this.next() == "e") 
                {
                    this.next();
                    return false;
                }
            }
            else if (__reg0 === "n") 
            {
                if (this.next() == "u" && this.next() == "l" && this.next() == "l") 
                {
                    this.next();
                    return null;
                }
            }
            this.error("Syntax error");
        }
        function value()
        {
            this.white();
            if ((__reg0 = ch) === "{") 
            {
                return this.object();
            }
            else if (__reg0 === "[") 
            {
                return this.array();
            }
            else if (__reg0 === "\"") 
            {
                return this.string();
            }
            else if (__reg0 === "-") 
            {
                return this.number();
            }
            return ch >= "0" && ch <= "9" ? this.number() : this.word();
        }
        var at = 0;
        var ch = " ";
        return value();
    }

}

//Sprite 653
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.YoutubeMutiplePlaylistItemsPool extends com.jadoo.as2.JadooPlus.Parser.XmlParser.ItemsPool
{
    var tempItems = null;
    var currentPlaylistTotItems: Number = 0;
    var totalItemsQueue = null;
    var accTotalItems = null;
    var multipleCalls: Boolean = false;
    var totalItemsLoaded: Number = 0;
    var storeStartId: Boolean = false;
    var parsedItems: Number = 0;
    var itemsToFetch: Number = 0;
    var allPageTokensArray = null;
    var pageTokenIndex: Number = 0;
    var allowXmlLoad;
    var failureCount;
    var favoritesFetched;
    var fn;
    var historyPages;
    var initialPages;
    var initializePool;
    var isBackPage;
    var isFavoritesCategory;
    var itemStartIdToLoad;
    var itemType;
    var itemsIndices;
    var itemsPool;
    var itemsRequested;
    var itemsStartIdx;
    var itemsToReturn;
    var itemsXml;
    var loadedItemsStartIdx;
    var maxItems;
    var minimumPoolItems;
    var navigationIndex;
    var netErrorStr;
    var netStatus;
    var onPoolEvent;
    var pageCounter;
    var pageJump;
    var pagesToStore;
    var parseTierItems;
    var passItemsToTier;
    var playlistId;
    var playlistIdArray;
    var playlistNumber;
    var poolUpdated;
    var previousItemIdx;
    var requestedItemIdx;
    var requestedItemStartIdx;
    var retries;
    var returnedItems;
    var startIdsPool;
    var startIdsToLoad;
    var temporaryItemIndicies;
    var temporaryPoolItems;
    var temporaryStartIds;
    var temporaryStorageEnabled;
    var tierItems;
    var tierItemsLink;
    var totalItems;
    var xmlInvoker;
    var xmlLoadError;
    var xmlTimeOut;
    var zeroItemsLoaded;

    function YoutubeMutiplePlaylistItemsPool()
    {
        super();
        this.fn = {onLoadXml: mx.utils.Delegate.create(this, this.onLoadItems)};
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.startIdsPool = new Array();
        this.itemsPool = new Array();
        this.itemsIndices = new Array();
        this.onPoolEvent = new com.BigRoom.Event();
        this.accTotalItems = new Array();
        this.tempItems = new Array();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function constructDailymotionUrl(itemsStartIndex, playlistId, itemsToLoad)
    {
        var __reg3 = null;
        var __reg2 = Math.ceil(itemsStartIndex / this.maxItems) + 1;
        __reg3 = "https://api.dailymotion.com/playlist/" + playlistId + "/videos?fields=duration,thumbnail_medium_url,title,url,views_total&sort=recent&page=" + __reg2 + "&limit=" + itemsToLoad;
        itemsStartIndex = null;
        __reg2 = null;
        playlistId = null;
        itemsToLoad = null;
        return __reg3;
    }

    function constructYoutubeUrl(pageToken, playlistId, itemsToLoad)
    {
        var __reg2 = null;
        __reg2 = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&fields=nextPageToken%2Citems%2Fsnippet%2Ftitle%2Citems%2Fsnippet%2FresourceId%2Citems%2Fsnippet%2Fthumbnails%2Citems%2Fsnippet%2Fposition&playlistId=" + playlistId + "&maxResults=" + this.maxItems;
        if (pageToken != null && pageToken != "") 
        {
            __reg2 = __reg2 + "&pageToken=" + pageToken;
        }
        __reg2 = __reg2 + "&key=" + com.jadoo.as2.JadooPlus.Utils.Config.YOUTUBE_DEVELOPER_KEY;
        pageToken = null;
        playlistId = null;
        itemsToLoad = null;
        return __reg2;
    }

    function initialize(tierUrl, itemsStartIndex, maximumItems, totItems, parseItems, isBackPage, isFavoritesCategory)
    {
        this.parseTierItems = parseItems;
        this.isBackPage = isBackPage;
        this.navigationIndex = 0;
        this.isFavoritesCategory = isFavoritesCategory;
        this.playlistIdArray = arguments[7];
        this.itemType = arguments[8];
        this.totalItemsQueue = arguments[9];
        this.allPageTokensArray = new Array();
        this.getAccumulatedItems();
        if (isBackPage) 
        {
            this.storeStartId = true;
            this.itemStartIdToLoad = itemsStartIndex;
            this.pagesToStore = this.historyPages;
        }
        else 
        {
            this.pagesToStore = this.initialPages;
        }
        this.playlistId = this.getPlaylistId(itemsStartIndex);
        this.initializePool = true;
        this.tierItemsLink = tierUrl;
        this.requestedItemStartIdx = 0;
        this.maxItems = maximumItems;
        this.totalItems = totItems;
        this.minimumPoolItems = 2 * this.maxItems;
        this.itemsStartIdx = itemsStartIndex;
        this.currentPlaylistTotItems = this.totalItemsQueue[this.playlistNumber];
        if (!isFavoritesCategory) 
        {
            this.loadItems(this.itemsStartIdx);
        }
        isFavoritesCategory = null;
        arguments = null;
        tierUrl = null;
        maximumItems = null;
        totItems = null;
        parseItems = null;
        itemsStartIndex = null;
        isBackPage = null;
    }

    function loadItems(itemsStartIndex)
    {
        var __reg2 = this.tierItemsLink;
        this.allowXmlLoad = false;
        this.itemsStartIdx = itemsStartIndex;
        this.poolUpdated = false;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("LoadItems_" + __reg2);
        }
        this.parsedItems = 0;
        if (this.itemsStartIdx + this.maxItems > this.accTotalItems[this.playlistNumber]) 
        {
            this.itemsToFetch = Math.abs(this.itemsStartIdx - this.accTotalItems[this.playlistNumber]);
        }
        else 
        {
            this.itemsToFetch = this.maxItems;
        }
        if (itemsStartIndex + this.maxItems > this.totalItems) 
        {
            this.itemsRequested = Math.abs(this.totalItems - itemsStartIndex);
        }
        else 
        {
            this.itemsRequested = this.maxItems;
        }
        if (this.itemType == "dailymotionplaylist") 
        {
            __reg2 = this.constructDailymotionUrl(this.itemsStartIdx);
            if (this.xmlInvoker != null) 
            {
                this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
                this.xmlInvoker.destroy();
                delete this.xmlInvoker;
                this.xmlInvoker = null;
            }
            this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
            this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false);
        }
        else if (this.itemType == "youtubeplaylist") 
        {
            if (itemsStartIndex < this.itemsPool.length) 
            {
                itemsStartIndex = this.itemsPool.length;
            }
            this.playlistId = this.getPlaylistId(itemsStartIndex);
            itemsStartIndex = this.getItemStartIdx(itemsStartIndex);
            this.currentPlaylistTotItems = this.totalItemsQueue[this.playlistNumber];
            var __reg6 = this.allPageTokensArray[this.playlistNumber];
            var __reg4 = Math.floor(itemsStartIndex / this.maxItems);
            this.pageTokenIndex = __reg4;
            var __reg5 = undefined;
            if (__reg4 > 0) 
            {
                __reg5 = __reg6[__reg4 - 1];
            }
            __reg2 = this.constructYoutubeUrl(__reg5, this.playlistId, this.maxItems);
            if (this.xmlInvoker != null) 
            {
                this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
                this.xmlInvoker.destroy();
                delete this.xmlInvoker;
                this.xmlInvoker = null;
            }
            this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
            this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false);
        }
        else 
        {
            if (__reg2.charAt(__reg2.length - 1) != "/") 
            {
                __reg2 = __reg2 + "/";
            }
            __reg2 = __reg2 + itemsStartIndex;
            if (__reg2.charAt(__reg2.length - 1) != "/") 
            {
                __reg2 = __reg2 + "/";
            }
            __reg2 = __reg2 + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
            this.xmlInvoker.loadXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true, true, false);
        }
        itemsStartIndex = null;
        __reg2 = null;
    }

    function getPlaylistId(itemStartIndex)
    {
        var __reg3 = undefined;
        var __reg5 = undefined;
        var __reg2 = 0;
        while (__reg2 <= this.accTotalItems.length - 1) 
        {
            if (__reg2 == 0) 
            {
                __reg3 = 0;
            }
            else 
            {
                __reg3 = this.accTotalItems[__reg2 - 1];
            }
            __reg5 = this.accTotalItems[__reg2];
            if (itemStartIndex >= __reg3 && itemStartIndex <= __reg5) 
            {
                this.playlistNumber = __reg2;
                if (itemStartIndex == this.accTotalItems[this.playlistNumber]) 
                {
                    ++this.playlistNumber;
                }
                return this.playlistIdArray[this.playlistNumber];
            }
            ++__reg2;
        }
        itemStartIndex = null;
        __reg2 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function getAccumulatedItems()
    {
        var __reg3 = undefined;
        var __reg4 = 0;
        while (__reg4 <= this.totalItemsQueue.length - 1) 
        {
            __reg3 = 0;
            var __reg2 = 0;
            while (__reg2 <= __reg4) 
            {
                __reg3 = __reg3 + this.totalItemsQueue[__reg2];
                ++__reg2;
            }
            this.accTotalItems.push(__reg3);
            ++__reg4;
        }
        __reg3 = null;
        __reg4 = null;
    }

    function getItemStartIdx(itemStartIndex)
    {
        var __reg3 = undefined;
        var __reg5 = undefined;
        var __reg6 = 0;
        var __reg2 = 0;
        while (__reg2 <= this.accTotalItems.length - 1) 
        {
            if (__reg2 == 0) 
            {
                __reg3 = 0;
            }
            else 
            {
                __reg3 = this.accTotalItems[__reg2 - 1];
            }
            __reg5 = this.accTotalItems[__reg2];
            if (itemStartIndex >= __reg3 && itemStartIndex <= __reg5) 
            {
                __reg6 = __reg2;
                break;
            }
            ++__reg2;
        }
        if (itemStartIndex == this.accTotalItems[__reg6]) 
        {
            itemStartIndex = 0;
        }
        if (__reg6 == 0) 
        {
            return itemStartIndex;
        }
        else 
        {
            return itemStartIndex - this.accTotalItems[__reg2 - 1];
        }
        itemStartIndex = null;
        __reg2 = null;
        __reg3 = null;
        __reg5 = null;
        __reg6 = null;
    }

    function loadMoreItems(items)
    {
        var __reg2 = items.length;
        this.totalItemsLoaded = this.totalItemsLoaded + __reg2;
        this.storeItems(items);
        this.calculateNextLoadCall(this.totalItemsLoaded);
        items = null;
        __reg2 = null;
    }

    function storeItems(items)
    {
        var __reg3 = items.length;
        var __reg2 = 0;
        while (__reg2 < __reg3) 
        {
            this.tempItems.push(items.shift());
            ++__reg2;
        }
        ++this.playlistNumber;
        __reg2 = null;
        __reg3 = null;
        items = null;
    }

    function calculateNextLoadCall(loadedItems)
    {
        this.playlistId = this.playlistIdArray[this.playlistNumber];
        if (this.totalItemsQueue[this.playlistNumber] < this.maxItems) 
        {
            if (this.parsedItems + this.totalItemsQueue[this.playlistNumber] > this.itemsRequested) 
            {
                this.itemsToFetch = this.itemsRequested - this.parsedItems;
            }
            else 
            {
                this.itemsToFetch = this.totalItemsQueue[this.playlistNumber];
            }
        }
        else 
        {
            this.itemsToFetch = this.maxItems - loadedItems;
        }
        this.pageTokenIndex = 0;
        var __reg2 = this.constructYoutubeUrl("", this.playlistId, this.maxItems - loadedItems);
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true);
        __reg2 = null;
        loadedItems = null;
    }

    function concatenateItems(items)
    {
        this.multipleCalls = false;
        this.tierItems = this.tempItems.concat(items);
    }

    function onLoadItems()
    {
        var __reg5 = arguments[0];
        var __reg6 = arguments[1];
        this.allowXmlLoad = true;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("onLoadItems:success_" + __reg5 + ":" + "timeOut_" + __reg6);
        }
        if (__reg5) 
        {
            this.failureCount = 0;
            this.xmlLoadError = false;
            if (this.temporaryStorageEnabled) 
            {
                this.temporaryStorage();
            }
            this.itemsXml = this.xmlInvoker.getXmlObject();
            this.destroyTierItems();
            this.tierItems = new Array();
            var __reg7 = undefined;
            __reg7 = new String();
            __reg7 = this.parseTierItems(this.itemsXml, this.tierItems, this.itemType, this.itemsToFetch);
            var __reg3 = this.itemsStartIdx;
            if (__reg3 < this.itemsPool.length) 
            {
                __reg3 = this.itemsPool.length;
            }
            __reg3 = this.getItemStartIdx(__reg3);
            var __reg8 = Math.floor(__reg3 / this.maxItems);
            var __reg4 = this.allPageTokensArray[this.playlistNumber];
            if (__reg4 == null) 
            {
                __reg4 = new Array();
            }
            __reg4[this.pageTokenIndex] = __reg7;
            this.allPageTokensArray[this.playlistNumber] = __reg4;
            this.parsedItems = this.parsedItems + this.tierItems.length;
            if (this.parsedItems < this.itemsRequested && this.itemsPool.length + this.parsedItems < this.accTotalItems[this.accTotalItems.length - 1]) 
            {
                if (this.itemsPool.length + this.parsedItems < this.accTotalItems[this.playlistNumber]) 
                {
                    this.loadExtraItems(Math.abs(this.accTotalItems[this.playlistNumber] - this.itemsPool.length - this.parsedItems));
                }
                this.multipleCalls = true;
                this.loadMoreItems(this.tierItems);
                return undefined;
            }
            if (this.multipleCalls) 
            {
                this.concatenateItems(this.tierItems);
                this.totalItemsLoaded = 0;
                delete this.tempItems;
                this.tempItems = null;
                this.tempItems = new Array();
            }
            if (this.tierItems.length == 0) 
            {
                this.xmlLoadError = true;
                this.zeroItemsLoaded = true;
            }
            else 
            {
                this.updatePool(this.tierItems);
            }
            this.tierItems = null;
        }
        else 
        {
            if (this.multipleCalls) 
            {
                this.multipleCalls = false;
                this.totalItemsLoaded = 0;
                delete this.tempItems;
                this.tempItems = null;
                this.tempItems = new Array();
            }
            if (__reg6) 
            {
                this.xmlTimeOut = true;
            }
            this.requestedItemStartIdx = this.loadedItemsStartIdx;
            ++this.failureCount;
            this.isBackPage = false;
            this.xmlLoadError = true;
        }
        this.poolUpdated = true;
        this.onPoolUpdated();
        __reg5 = null;
        __reg6 = null;
    }

    function updatePool(items)
    {
        if (items != null && items.length > 0) 
        {
            this.itemsPool = this.itemsPool.concat(items);
        }
        if (this.isBackPage) 
        {
            this.requestedItemStartIdx = this.itemsStartIdx;
        }
        this.loadedItemsStartIdx = this.itemsStartIdx;
        items = null;
    }

    function loadExtraItems(extraItems)
    {
        var __reg3 = 0;
        for (;;) 
        {
            if (__reg3 >= extraItems) 
            {
                return;
            }
            var __reg2 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
            __reg2.itemId = null;
            __reg2.itemName = "Video Not Found";
            __reg2.itemViews = 0;
            __reg2.itemLink = null;
            __reg2.itemDuration = null;
            __reg2.itemImage = null;
            __reg2.itemType = "youtube";
            this.itemsPool.push(__reg2);
            __reg2 = null;
            ++__reg3;
        }
    }

    function onPoolUpdated()
    {
        if (this.navigationIndex > 1) 
        {
            this.isBackPage = false;
            this.pageCounter = 0;
            this.initializePool = false;
            this.pageJump = false;
            this.allowXmlLoad = true;
        }
        if (this.requestedItemIdx + this.maxItems <= this.itemsPool.length) 
        {
            this.allowXmlLoad = true;
            this.returnItemToView(this.requestedItemIdx);
            return;
        }
        if (this.xmlLoadError) 
        {
            this.isBackPage = false;
            this.pageCounter = 0;
            this.initializePool = false;
            this.pageJump = false;
            if (this.passItemsToTier != null) 
            {
                this.passItemsToTier = null;
                if (this.zeroItemsLoaded) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "zeroItemsLoaded");
                    this.zeroItemsLoaded = false;
                }
                else if (this.xmlTimeOut) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "timeOut");
                }
                else 
                {
                    this.onPoolEvent.notify("xmlLoadError", "loadingError");
                }
            }
            return;
        }
        if (this.netStatus == "Up" && this.allowXmlLoad && this.requestedItemIdx + this.minimumPoolItems > this.itemsPool.length && this.itemsPool.length < this.accTotalItems[this.accTotalItems.length - 1]) 
        {
            this.loadItems(this.requestedItemIdx + this.maxItems);
            return;
        }
        if (this.passItemsToTier != null) 
        {
            this.passItemsToTier = null;
            this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
        }
    }

    function loadFavorites(favoriteItemsType)
    {
        this.favoritesFetched = true;
        this.clearArrays();
        var __reg3 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesIndexArray(favoriteItemsType);
        this.itemsPool = new Array();
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            this.itemsPool[__reg2] = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
            this.itemsPool[__reg2].itemName = __reg3[__reg2].itemName;
            this.itemsPool[__reg2].itemType = __reg3[__reg2].itemType;
            this.itemsPool[__reg2].itemId = __reg3[__reg2].itemId;
            this.itemsPool[__reg2].itemLink = __reg3[__reg2].itemLink;
            this.itemsPool[__reg2].itemImage = __reg3[__reg2].itemImage;
            this.itemsPool[__reg2].responseLink = __reg3[__reg2].responseLink;
            this.itemsPool[__reg2].categoryId = __reg3[__reg2].categoryId;
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        favoriteItemsType = null;
    }

    function getPoolItems(currentItemIdx, previousItemIndex, requestedItemsStartIdx, itemsToReturn, onGetPoolItems, favoriteItemsType)
    {
        this.passItemsToTier = onGetPoolItems;
        if (this.isFavoritesCategory) 
        {
            if (!this.favoritesFetched) 
            {
                this.loadFavorites(favoriteItemsType);
            }
            this.returnedItems = this.itemsPool.slice(currentItemIdx, currentItemIdx + itemsToReturn);
            this.passItemsToTier(this.returnedItems);
        }
        else 
        {
            ++this.navigationIndex;
            this.itemsToReturn = itemsToReturn;
            var __reg2 = Math.floor(currentItemIdx / this.maxItems) * this.maxItems;
            this.requestedItemIdx = currentItemIdx;
            this.previousItemIdx = previousItemIndex;
            if (this.requestedItemIdx + itemsToReturn <= this.itemsPool.length || this.itemsPool.length == this.accTotalItems[this.accTotalItems.length - 1]) 
            {
                this.returnItemToView(this.requestedItemIdx);
            }
            else if (this.xmlLoadError) 
            {
                this.isBackPage = false;
                this.itemsStartIdx = __reg2;
                if (!this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.xmlLoadError = false;
                        this.loadItems(this.itemsStartIdx);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
            else if (this.poolUpdated) 
            {
                this.initializePool = true;
                this.pageJump = true;
                this.temporaryStorageEnabled = true;
                this.itemStartIdToLoad = requestedItemsStartIdx;
                this.pageCounter = 0;
                this.pagesToStore = 2;
                this.navigationIndex = 0;
                if (!this.isStartIdloaded(__reg2) && __reg2 >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.itemsStartIdx = __reg2;
                        this.loadItems(this.itemsStartIdx);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
        }
        currentItemIdx = null;
        onGetPoolItems = null;
        __reg2 = null;
        itemsToReturn = null;
        previousItemIndex = null;
        requestedItemsStartIdx = null;
        favoriteItemsType = null;
    }

    function clearArrays()
    {
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            this.itemsPool = null;
            __reg2 = null;
        }
    }

    function temporaryStorage()
    {
        this.temporaryStorageEnabled = false;
        var __reg5 = 0;
        delete this.temporaryPoolItems;
        this.temporaryPoolItems = null;
        this.temporaryPoolItems = new Array();
        delete this.temporaryStartIds;
        this.temporaryStartIds = null;
        this.temporaryStartIds = new Array();
        delete this.temporaryItemIndicies;
        this.temporaryItemIndicies = null;
        this.temporaryItemIndicies = new Array();
        __reg5 = this.itemsPool.length;
        var __reg4 = 0;
        while (__reg4 < __reg5) 
        {
            this.temporaryPoolItems.unshift(this.itemsPool.pop());
            ++__reg4;
        }
        __reg5 = this.itemsIndices.length;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            this.temporaryItemIndicies.unshift(this.itemsIndices.pop());
            ++__reg3;
        }
        __reg5 = this.startIdsPool.length;
        var __reg2 = 0;
        while (__reg2 < __reg5) 
        {
            this.temporaryStartIds.unshift(this.startIdsPool.pop());
            ++__reg2;
        }
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function isStartIdAlreadyloaded(itemsStartIndex)
    {
        if (itemsStartIndex + this.maxItems <= this.itemsPool.length && itemsStartIndex != null) 
        {
            return true;
        }
        return false;
    }

    function returnItemToView(requestedItemIndex)
    {
        this.returnedItems = this.itemsPool.slice(requestedItemIndex, requestedItemIndex + this.itemsToReturn);
        this.passItemsToTier(this.returnedItems);
        this.passItemsToTier = null;
        if (this.failureCount < this.retries && this.allowXmlLoad && this.netStatus == "Up" && this.requestedItemIdx + this.minimumPoolItems > this.itemsPool.length && this.itemsPool.length < this.accTotalItems[this.accTotalItems.length - 1]) 
        {
            this.loadItems(requestedItemIndex + this.maxItems);
        }
        requestedItemIndex = null;
        this.returnedItems = null;
    }

    function isStartIdloaded(itemsStartIndex)
    {
        if (itemsStartIndex + this.maxItems < this.itemsPool.length) 
        {
            return true;
        }
        return false;
    }

    function isItemStartIdValid(itemStartIdx)
    {
        if (itemStartIdx < this.totalItems && itemStartIdx >= 0) 
        {
            return true;
        }
        itemStartIdx = null;
        return false;
    }

    function removeItem(itemIdx)
    {
        if (this.isFavoritesCategory) 
        {
            this.itemsPool.splice(itemIdx, 1);
        }
        else 
        {
            var __reg7 = -1;
            var __reg2 = 0;
            while (__reg2 < this.itemsIndices.length) 
            {
                if (itemIdx == this.itemsIndices[__reg2]) 
                {
                    __reg7 = __reg2;
                    break;
                }
                ++__reg2;
            }
            var __reg3 = this.itemsPool.splice(__reg7, 1);
            __reg2 = 0;
            while (__reg2 < __reg3.length) 
            {
                __reg3[__reg2].destroy();
                delete __reg3[__reg2];
                __reg3[__reg2] = null;
                var __reg5 = Number(this.itemsIndices.pop());
                --this.totalItems;
                var __reg6 = Math.floor(__reg5 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg6)) 
                {
                    var __reg4 = Number(this.startIdsPool.pop());
                    if (__reg4 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx - this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx - this.maxItems;
                    }
                    __reg4 = null;
                }
                __reg5 = null;
                __reg6 = null;
                ++__reg2;
            }
            __reg2 = null;
            __reg7 = null;
            __reg3 = null;
        }
        itemIdx = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function destroyTierItems()
    {
        var __reg2 = 0;
        while (__reg2 < this.tierItems.length) 
        {
            this.tierItems[__reg2].destroy();
            delete this.tierItems[__reg2];
            this.tierItems[__reg2] = null;
            ++__reg2;
        }
        delete this.tierItems;
        this.tierItems = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.tierItems != null) 
        {
            this.destroyTierItems();
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            delete this.itemsPool;
            this.itemsPool = null;
        }
        if (this.startIdsToLoad != null) 
        {
            delete this.startIdsToLoad;
            this.startIdsToLoad = null;
        }
        if (this.startIdsPool != null) 
        {
            delete this.startIdsPool;
            this.startIdsPool = null;
        }
        if (this.onPoolEvent != null) 
        {
            delete this.onPoolEvent;
            this.onPoolEvent = null;
        }
        this.passItemsToTier = null;
        this.parseTierItems = null;
        this.itemsXml = null;
    }

}

//Sprite 654
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.DebugLevels
{
    static var DEBUG_LEVEL_PLAYBACK: String = "Playback";
    static var DEBUG_LEVEL_VIEWXML: String = "ViewXML";

    function DebugLevels()
    {
    }

}

//Sprite 655
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.Debug
{
    static var debugData: String = "";
    static var debugInfo = null;
    static var fn = null;
    static var xml = null;
    static var userDebugData = null;
    static var postResponse = null;
    static var url = null;
    static var debugInitialized: Boolean = false;
    static var deleteSharedObj: Boolean = false;
    static var sharedObjectListener = new Object();
    static var isLimitExceeded: Boolean = false;

    function Debug()
    {
    }

    static function init()
    {
        com.jadoo.as2.JadooPlus.Features.Debug.postResponse = new com.BigRoom.Event();
        SharedObject.addListener("DebugData", com.jadoo.as2.JadooPlus.Features.Debug.onGetDebugData);
        com.jadoo.as2.JadooPlus.Features.Debug.userDebugData = SharedObject.getLocal("DebugData");
        com.jadoo.as2.JadooPlus.Features.Debug.debugInitialized = true;
    }

    static function onGetDebugData()
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.data.debugInfo;
        if (__reg1 != null && __reg1 != undefined && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode == false) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.postDataToServer(true);
        }
        __reg1 = null;
    }

    static function storeDebugData(data)
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.getSize();
        __reg1 = __reg1 / 1024;
        if (__reg1 < 15) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.debugData = com.jadoo.as2.JadooPlus.Features.Debug.debugData + data + "%0A";
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.data.debugInfo = com.jadoo.as2.JadooPlus.Features.Debug.debugData;
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.flush();
        }
        else if (!com.jadoo.as2.JadooPlus.Features.Debug.isLimitExceeded) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.isLimitExceeded = true;
            com.jadoo.as2.JadooPlus.Features.Debug.debugData = com.jadoo.as2.JadooPlus.Features.Debug.debugData + "Debug Information Storage Limit Reached" + "%0A";
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.data.debugInfo = com.jadoo.as2.JadooPlus.Features.Debug.debugData;
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.flush();
        }
        __reg1 = null;
        data = null;
    }

    static function isDebugInitialized()
    {
        return com.jadoo.as2.JadooPlus.Features.Debug.debugInitialized;
    }

    static function postDataToServer(deleteObj)
    {
        com.jadoo.as2.JadooPlus.Features.Debug.deleteSharedObj = deleteObj;
        if (com.jadoo.as2.JadooPlus.Features.Debug.fn != null) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.fn = null;
        }
        com.jadoo.as2.JadooPlus.Features.Debug.fn = {onPostData: mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.Features.Debug, com.jadoo.as2.JadooPlus.Features.Debug.onPostData)};
        if (com.jadoo.as2.JadooPlus.Features.Debug.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.Debug.xml;
            com.jadoo.as2.JadooPlus.Features.Debug.xml = null;
        }
        com.jadoo.as2.JadooPlus.Features.Debug.xml = new XML();
        if (com.jadoo.as2.JadooPlus.Features.Debug.debugInfo != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.Debug.debugInfo;
            com.jadoo.as2.JadooPlus.Features.Debug.debugInfo = null;
        }
        com.jadoo.as2.JadooPlus.Features.Debug.debugInfo = new LoadVars();
        com.jadoo.as2.JadooPlus.Features.Debug.debugInfo.debug_info = com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.data.debugInfo;
        com.jadoo.as2.JadooPlus.Features.Debug.url = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getDebugServerURL() + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        com.jadoo.as2.JadooPlus.Features.Debug.debugInfo.sendAndLoad(com.jadoo.as2.JadooPlus.Features.Debug.url, com.jadoo.as2.JadooPlus.Features.Debug.xml, "POST");
        com.jadoo.as2.JadooPlus.Features.Debug.xml.onLoad = com.jadoo.as2.JadooPlus.Features.Debug.fn.onPostData;
        deleteObj = null;
        delete com.jadoo.as2.JadooPlus.Features.Debug.debugInfo;
        com.jadoo.as2.JadooPlus.Features.Debug.debugInfo = null;
    }

    static function onPostData()
    {
        var __reg1 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Features.Debug.xml.firstChild, "/xml/item/status").firstChild.nodeValue;
        if (com.jadoo.as2.JadooPlus.Features.Debug.deleteSharedObj && __reg1 == "success") 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.destroy();
        }
        com.jadoo.as2.JadooPlus.Features.Debug.postResponse.notify(__reg1);
    }

    static function isDataPosted()
    {
        if (com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.getSize() == 0) 
        {
            return true;
        }
        return false;
    }

    static function addListener(eventName, obj, listener)
    {
        if (eventName == "onPostData") 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.postResponse.addListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function removeListener(eventName, obj, listener)
    {
        if (eventName == "onPostData") 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.postResponse.removeListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.Features.Debug.debugData = null;
        com.jadoo.as2.JadooPlus.Features.Debug.fn = null;
        if (com.jadoo.as2.JadooPlus.Features.Debug.debugInfo != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.Debug.debugInfo;
            com.jadoo.as2.JadooPlus.Features.Debug.debugInfo = null;
        }
        if (com.jadoo.as2.JadooPlus.Features.Debug.xml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.Debug.xml;
            com.jadoo.as2.JadooPlus.Features.Debug.xml = null;
        }
        if (com.jadoo.as2.JadooPlus.Features.Debug.userDebugData != null) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.clear();
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData.flush();
            delete com.jadoo.as2.JadooPlus.Features.Debug.userDebugData;
            com.jadoo.as2.JadooPlus.Features.Debug.userDebugData = null;
        }
        if (com.jadoo.as2.JadooPlus.Features.Debug.postResponse != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.Debug.postResponse;
            com.jadoo.as2.JadooPlus.Features.Debug.postResponse = null;
        }
    }

}

//Sprite 656
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var itemDuration = null;
    var itemViews: Number = 0;
    var itemDescription = null;
    var itemCategory = null;
    var itemPosition = null;
    var episode = null;
    var part = null;
    var itemIdx = null;
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var onLoadImage = null;
    var imgLoaded: Boolean = false;
    var fn = null;
    var cardImageWidth = null;
    var cardImageHeight = null;
    var cardTitleWidth = null;
    var itemWidth = null;
    var itemHeight = null;
    var textHeight: Number = 35;
    var itemImageMC = null;
    var itemNameText = null;
    var isCardItem: Boolean = false;
    var cardItemTitleText = null;
    var searchedItemPathText = null;
    var itemImage;
    var itemLink;
    var itemName;
    var itemPath;
    var itemType;

    function GridContentItem()
    {
        super();
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadItemImageError);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function destroy()
    {
        if (this.isCardItem) 
        {
            if (this.cardItemTitleText != null) 
            {
                this.cardItemTitleText.removeTextField();
                delete this.cardItemTitleText;
                this.cardItemTitleText = null;
            }
            if (this.searchedItemPathText != null) 
            {
                this.searchedItemPathText.removeTextField();
                delete this.searchedItemPathText;
                this.searchedItemPathText = null;
            }
        }
        else 
        {
            this.itemBaseMC._visible = false;
            this.itemBaseMC.itemDefBgMC._visible = false;
            this.itemBaseMC.itemNameTxt._visible = false;
        }
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.unloadClip(this.itemBaseMC.itemImageMC);
            removeMovieClip(this.itemBaseMC.itemImageMC);
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.itemImageMC != null) 
        {
            removeMovieClip(this.itemImageMC);
            this.itemImageMC = null;
        }
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        this.itemDescription = null;
        this.itemCategory = null;
        this.itemBaseMC = null;
        this.onLoadImage = null;
        this.fn = null;
        super.destroy();
    }

    function createIconItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        itemBaseMC.itemNameTxt._visible = true;
        itemBaseMC.itemNameTxt.htmlText = this.itemName;
        var __reg6 = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        var __reg4 = new TextFormat();
        __reg4.font = "Arial";
        __reg4.align = "center";
        __reg4.size = 18;
        __reg4.bold = false;
        __reg4.color = 16777215;
        var __reg5 = itemBaseMC.attachMovie("maskMC", "itemDurationBgMC", itemBaseMC.getNextHighestDepth());
        __reg4.align = "right";
        var __reg2 = itemBaseMC.createTextField("itemNameText", itemBaseMC.getNextHighestDepth(), 0, 0, width, height);
        __reg2.autoSize = true;
        __reg2.setNewTextFormat(__reg4);
        __reg2.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(this.itemDuration);
        __reg2._x = (width - __reg2._width) / 2;
        __reg2._y = height - __reg2._height;
        if (this.itemDuration == NaN || this.itemDuration <= 0) 
        {
            __reg2._visible = false;
            __reg5._visible = false;
        }
        __reg5._width = width;
        __reg5._height = __reg2._height;
        __reg5._y = __reg2._y;
        __reg5._alpha = 75;
        itemBaseMC = null;
        __reg6 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function createCardItem(itemBaseMC, width, height, pageTitle)
    {
        this.itemBaseMC = itemBaseMC;
        this.isCardItem = true;
        this.cardImageWidth = 86;
        this.cardImageHeight = height - 12;
        this.cardTitleWidth = width - this.cardImageWidth - 20;
        var __reg8 = itemBaseMC.attachMovie("CardBaseMC", "cardImageBaseMC", itemBaseMC.getNextHighestDepth());
        __reg8._width = width;
        __reg8._height = height;
        var __reg7 = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        __reg7._x = width - this.cardImageWidth - 6;
        __reg7._y = 6;
        var __reg5 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg5._x = 6;
        __reg5._y = 6;
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "left";
        __reg3.size = 28;
        __reg3.bold = false;
        __reg3.color = 15790320;
        this.cardItemTitleText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.cardItemTitleText.createTextField(__reg5, 0, 0, this.cardTitleWidth, 0, "true");
        this.cardItemTitleText.setTextFormat(__reg3);
        this.cardItemTitleText.setHtmlText(this.itemName);
        this.cardItemTitleText.setWidth(this.cardTitleWidth);
        __reg3.size = 24;
        if (pageTitle == "Search Results") 
        {
            __reg3.align = "right";
            this.searchedItemPathText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            this.searchedItemPathText.createTextField(itemBaseMC, 0, __reg5._y + this.cardItemTitleText.getTextHeight(), this.cardTitleWidth, 0, "true");
            this.searchedItemPathText.setTextFormat(__reg3);
            this.searchedItemPathText.setHtmlText(this.itemPath);
            this.searchedItemPathText.setWidth(this.cardTitleWidth);
        }
        else 
        {
            var __reg4 = itemBaseMC.createTextField("itemNameText", itemBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
            __reg4.autoSize = true;
            __reg4.setNewTextFormat(__reg3);
            __reg4.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(this.itemDuration);
            __reg4._x = __reg5._x;
            __reg4._y = __reg5._y + this.cardItemTitleText.getTextHeight();
            if (this.itemDuration == NaN || this.itemDuration <= 0) 
            {
                __reg4._visible = false;
            }
            var __reg6 = itemBaseMC.createTextField("itemViewsText", itemBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
            __reg6.autoSize = true;
            __reg6.setNewTextFormat(__reg3);
            __reg6.htmlText = "Views: " + this.itemViews;
            __reg6._x = __reg5._x + this.cardTitleWidth - __reg6._width;
            __reg6._y = __reg4._y;
        }
        if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else if ((this.itemType == "youtube" || this.itemType == "dailymotion") && (this.itemLink == null && this.itemName == "Video Not Found")) 
        {
            var __reg9 = itemBaseMC.itemImageMC.attachMovie("ytDefaultCardImageMC", "itemImageMC", itemBaseMC.itemImageMC.getNextHighestDepth());
            this.onLoadItemImage(itemBaseMC.itemImageMC.defaultImageMC);
            __reg9 = null;
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, itemBaseMC.itemImageMC);
        }
        __reg3 = null;
        __reg8 = null;
        __reg7 = null;
        __reg5 = null;
        __reg4 = null;
        __reg6 = null;
        itemBaseMC = null;
    }

    function createCategoryItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        if (itemBaseMC.itemNameBaseMC != undefined) 
        {
            removeMovieClip(itemBaseMC.itemNameBaseMC);
        }
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 0;
        __reg4._y = this.itemHeight;
        var __reg5 = __reg4.createEmptyMovieClip("itemNameMC", __reg4.getNextHighestDepth());
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "center";
        __reg3.bold = false;
        __reg3.size = 24;
        __reg3.color = 16777215;
        this.itemNameText.createTextField(__reg5, 0, 0, this.itemWidth, 0, "false");
        this.itemNameText.setTextFormat(__reg3);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setHeight(this.textHeight);
        this.itemNameText.setY((this.itemNameText.getHeight() - this.itemNameText.getHeight()) / 2);
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function loadImage(itemIdx, onLoad)
    {
        this.onLoadImage = onLoad;
        this.itemIdx = itemIdx;
        if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else if ((this.itemType == "youtube" || this.itemType == "dailymotion") && (this.itemLink == null && this.itemName == "Video Not Found")) 
        {
            var __reg2 = this.itemBaseMC.itemImageMC.attachMovie("ytDefaultImageMC", "itemImageMC", this.itemBaseMC.itemImageMC.getNextHighestDepth());
            this.onLoadItemImage(this.itemBaseMC.itemImageMC.defaultImageMC);
            __reg2 = null;
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemBaseMC.itemImageMC);
        }
        onLoad = null;
        itemIdx = null;
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemBaseMC.itemImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        if (this.isCardItem) 
        {
            targetMC._width = this.cardImageWidth;
            targetMC._height = this.cardImageHeight;
        }
        else 
        {
            targetMC._width = this.itemBaseMC.itemDefBgMC._width;
            targetMC._height = this.itemBaseMC.itemDefBgMC._height;
            targetMC._visible = false;
            this.imgLoaded = true;
            this.displayImage();
        }
        targetMC = null;
    }

    function onLoadItemImageError(targetMC, errorCode, httpStatus)
    {
        this.imgLoaded = false;
        targetMC = null;
        errorCode = null;
        httpStatus = null;
    }

    function displayImage()
    {
        if (this.imgLoaded) 
        {
            this.itemBaseMC.itemImageMC._visible = true;
            this.itemBaseMC.itemDefBgMC._visible = false;
            this.itemBaseMC.itemNameTxt._visible = false;
        }
    }

    function isImageLoaded()
    {
        return this.imgLoaded;
    }

    function itemHighlight()
    {
        if (this.isCardItem) 
        {
            this.cardItemTitleText.enable(false, 2000);
            this.searchedItemPathText.enable(false, 2000);
        }
    }

    function itemUnHighlight()
    {
        if (this.isCardItem) 
        {
            this.cardItemTitleText.disable();
            this.searchedItemPathText.disable();
        }
    }

}

//Sprite 657
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.Favorites
{
    static var favorites = null;
    static var userFavorites = null;
    static var sharedObjectListener = new Object();

    function Favorites()
    {
    }

    static function init()
    {
        SharedObject.addListener("Favorites", com.jadoo.as2.JadooPlus.Features.Favorites.onGetFavorites);
        SharedObject.getLocal("Favorites");
    }

    static function onGetFavorites(favoritesSO)
    {
        com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites = favoritesSO;
        com.jadoo.as2.JadooPlus.Features.Favorites.favorites = com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.data.favorites;
        if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites == null || com.jadoo.as2.JadooPlus.Features.Favorites.favorites == undefined) 
        {
            com.jadoo.as2.JadooPlus.Features.Favorites.favorites = new Array();
            com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.data.favorites = com.jadoo.as2.JadooPlus.Features.Favorites.favorites;
        }
    }

    static function addFavorites(arrayIndex, itemName, itemLink, itemType, itemId, responseLink, itemImage, appType, categoryId, groupId)
    {
        var __reg1 = -1;
        __reg1 = com.jadoo.as2.JadooPlus.Features.Favorites.searchFavoriteItem(arrayIndex, itemId, itemType, appType);
        if (__reg1 == -1) 
        {
            if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex] == null || com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex] == undefined) 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex] = new Array();
            }
            com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].splice(0, 0, {itemName: itemName, itemLink: itemLink, itemType: itemType, itemId: itemId, responseLink: responseLink, itemImage: itemImage, appType: appType, categoryId: categoryId, groupId: groupId});
            com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.flush();
        }
        __reg1 = null;
    }

    static function deleteFavorites(arrayIndex, favoriteIdx)
    {
        com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].splice(favoriteIdx, 1);
        com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.flush();
    }

    static function searchFavoriteItem(arrayIndex, itemId, itemType, appType)
    {
        if (appType == "TVApp") 
        {
            appType = "JadooPLUS";
        }
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].itemId == itemId && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].itemType == itemType && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].appType == appType) 
            {
                return __reg1;
            }
            ++__reg1;
        }
        return -1;
    }

    static function searchFavorites(itemId, itemType, appType)
    {
        if (appType == "TVApp") 
        {
            appType = "JadooPLUS";
        }
        var __reg2 = 0;
        while (__reg2 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites.length) 
        {
            var __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2].length) 
            {
                if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemId == itemId && itemType == "channel" && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].appType == appType) 
                {
                    return __reg1;
                }
                else if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemId == itemId && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemType == itemType && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].appType == appType) 
                {
                    return __reg1;
                }
                ++__reg1;
            }
            ++__reg2;
        }
        return -1;
    }

    static function getItemIdByName(itemName)
    {
        var __reg2 = 0;
        while (__reg2 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites.length) 
        {
            var __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2].length) 
            {
                if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemName == itemName) 
                {
                    return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemId;
                }
                ++__reg1;
            }
            ++__reg2;
        }
        return null;
    }

    static function getItemTypeByName(itemName)
    {
        var __reg2 = 0;
        while (__reg2 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites.length) 
        {
            var __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2].length) 
            {
                if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemName == itemName) 
                {
                    return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemType;
                }
                ++__reg1;
            }
            ++__reg2;
        }
        return null;
    }

    static function getItemNameByGroupId(groupId)
    {
        var __reg2 = 0;
        while (__reg2 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites.length) 
        {
            var __reg1 = 0;
            while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2].length) 
            {
                if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].groupId == groupId) 
                {
                    return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[__reg2][__reg1].itemName;
                }
                ++__reg1;
            }
            ++__reg2;
        }
        return null;
    }

    static function removeFavoriteItem(arrayIndex, itemId, itemType, appType)
    {
        if (appType == "TVApp") 
        {
            appType = "JadooPLUS";
        }
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].length) 
        {
            if (itemType == "channel" && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].itemId == itemId && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].appType == appType) 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].splice(__reg1, 1);
            }
            else if (com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].itemId == itemId && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].itemType == itemType && com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex][__reg1].appType == appType) 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.favorites[arrayIndex].splice(__reg1, 1);
            }
            ++__reg1;
        }
        com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.flush();
    }

    static function getFavoritesIndexArray(index)
    {
        return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[index];
    }

    static function getRequiredFavoriteItems(index, startIdx, requiredItems)
    {
        return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[index].slice(startIdx, startIdx + requiredItems);
    }

    static function getFavoritesLength(index)
    {
        return com.jadoo.as2.JadooPlus.Features.Favorites.favorites[index].length;
    }

    static function getAllFavorites()
    {
        return com.jadoo.as2.JadooPlus.Features.Favorites.favorites;
    }

    static function getFavoritesSize()
    {
        return com.jadoo.as2.JadooPlus.Features.Favorites.userFavorites.getSize();
    }

}

//Sprite 658
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.DailymotionMutiplePlaylistItemsPool extends com.jadoo.as2.JadooPlus.Parser.XmlParser.ItemsPool
{
    var tempItems = null;
    var currentPlaylistTotItems: Number = 0;
    var totalItemsQueue = null;
    var accTotalItems = null;
    var multipleCalls: Boolean = false;
    var totalItemsLoaded: Number = 0;
    var storeStartId: Boolean = false;
    var parsedItems: Number = 0;
    var isNewPlaylist: Boolean = false;
    var startIdToLoad: Number = 0;
    var allowXmlLoad;
    var failureCount;
    var favoritesFetched;
    var fn;
    var initialPages;
    var initializePool;
    var isFavoritesCategory;
    var itemStartIdToLoad;
    var itemType;
    var itemsIndices;
    var itemsPool;
    var itemsRequested;
    var itemsStartIdx;
    var itemsStorageEndIndex;
    var itemsStorageStartIndex;
    var itemsToReturn;
    var itemsToStore;
    var itemsXml;
    var loadedItemsStartIdx;
    var maxItems;
    var minimumPoolItems;
    var navigationIndex;
    var netErrorStr;
    var netStatus;
    var onPoolEvent;
    var pageCounter;
    var pagesToStore;
    var parseTierItems;
    var passItemsToTier;
    var playlistId;
    var playlistIdArray;
    var playlistNumber;
    var poolUpdated;
    var previousItemIdx;
    var requestedItemIdx;
    var requestedItemStartIdx;
    var retries;
    var returnedItems;
    var startIdsPool;
    var startIdsToLoad;
    var temporaryItemIndicies;
    var temporaryPoolItems;
    var temporaryStartIds;
    var temporaryStorageEnabled;
    var tierItems;
    var tierItemsLink;
    var totalItems;
    var viewEndIdx;
    var viewStartIdx;
    var xmlInvoker;
    var xmlLoadError;
    var xmlTimeOut;
    var zeroItemsLoaded;

    function DailymotionMutiplePlaylistItemsPool()
    {
        super();
        this.fn = {onLoadXml: mx.utils.Delegate.create(this, this.onLoadItems)};
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.startIdsPool = new Array();
        this.itemsPool = new Array();
        this.itemsIndices = new Array();
        this.onPoolEvent = new com.BigRoom.Event();
        this.accTotalItems = new Array();
        this.tempItems = new Array();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function constructDailymotionUrl(itemsStartIndex, playlistId)
    {
        var __reg3 = null;
        var __reg2 = Math.ceil(itemsStartIndex / this.maxItems) + 1;
        __reg3 = "https://api.dailymotion.com/playlist/" + playlistId + "/videos?fields=duration,thumbnail_medium_url,id,title,embed_url,views_total&sort=recent&page=" + __reg2 + "&limit=" + this.maxItems;
        itemsStartIndex = null;
        __reg2 = null;
        playlistId = null;
        return __reg3;
    }

    function initialize(tierUrl, itemsStartIndex, maximumItems, totItems, parseItems, isBackPage, isFavoritesCategory)
    {
        this.parseTierItems = parseItems;
        this.navigationIndex = 0;
        this.isFavoritesCategory = isFavoritesCategory;
        this.playlistIdArray = arguments[7];
        this.itemType = arguments[8];
        this.totalItemsQueue = arguments[9];
        this.getAccumulatedItems();
        this.pagesToStore = this.initialPages;
        this.playlistId = this.getPlaylistId(itemsStartIndex);
        this.initializePool = true;
        this.tierItemsLink = tierUrl;
        this.requestedItemStartIdx = 0;
        this.maxItems = maximumItems;
        this.totalItems = totItems;
        this.minimumPoolItems = 2 * maximumItems;
        this.itemsStartIdx = itemsStartIndex;
        this.currentPlaylistTotItems = this.totalItemsQueue[this.playlistNumber];
        if (!isFavoritesCategory) 
        {
            this.calculateIndiciesToLoad();
            this.loadItems(this.itemsStartIdx);
        }
        isFavoritesCategory = null;
        arguments = null;
        tierUrl = null;
        maximumItems = null;
        totItems = null;
        parseItems = null;
        itemsStartIndex = null;
        isBackPage = null;
    }

    function calculateIndiciesToLoad()
    {
        if (this.startIdsToLoad != null) 
        {
            delete this.startIdsToLoad;
            this.startIdsToLoad = null;
        }
        this.startIdsToLoad = new Array();
        var __reg2 = 0;
        while (__reg2 < this.pagesToStore) 
        {
            if (__reg2 % 2 == 0) 
            {
                this.startIdsToLoad[__reg2] = this.itemStartIdToLoad + (Math.ceil(__reg2 / 2) + 1) * this.maxItems;
            }
            else 
            {
                this.startIdsToLoad[__reg2] = this.itemStartIdToLoad - Math.ceil(__reg2 / 2) * this.maxItems;
            }
            ++__reg2;
        }
        __reg2 = null;
    }

    function loadItems(itemsStartIndex)
    {
        if (this.tempItems != null) 
        {
            delete this.tempItems;
            this.tempItems = null;
        }
        var __reg2 = this.tierItemsLink;
        this.startIdToLoad = this.itemsStartIdx = itemsStartIndex;
        this.poolUpdated = false;
        this.parsedItems = 0;
        this.multipleCalls = false;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("LoadItems_" + __reg2);
        }
        if (itemsStartIndex + this.maxItems > this.totalItems) 
        {
            this.itemsRequested = Math.abs(this.totalItems - itemsStartIndex);
        }
        else 
        {
            this.itemsRequested = this.maxItems;
        }
        if (this.itemType == "dailymotionplaylist") 
        {
            this.playlistId = this.getPlaylistId(itemsStartIndex);
            itemsStartIndex = this.getItemStartIdx(itemsStartIndex);
            __reg2 = this.constructDailymotionUrl(Math.floor(itemsStartIndex / this.maxItems) * this.maxItems, this.playlistId);
            if (this.xmlInvoker != null) 
            {
                this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
                this.xmlInvoker.destroy();
                delete this.xmlInvoker;
                this.xmlInvoker = null;
            }
            this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
            this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false);
        }
        else 
        {
            if (__reg2.charAt(__reg2.length - 1) != "/") 
            {
                __reg2 = __reg2 + "/";
            }
            __reg2 = __reg2 + itemsStartIndex;
            if (__reg2.charAt(__reg2.length - 1) != "/") 
            {
                __reg2 = __reg2 + "/";
            }
            __reg2 = __reg2 + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
            this.xmlInvoker.loadXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true, true, false);
        }
        itemsStartIndex = null;
        __reg2 = null;
    }

    function getPlaylistId(itemStartIndex)
    {
        var __reg3 = undefined;
        var __reg4 = undefined;
        var __reg2 = 0;
        while (__reg2 <= this.accTotalItems.length - 1) 
        {
            if (__reg2 == 0) 
            {
                __reg3 = 0;
            }
            else 
            {
                __reg3 = this.accTotalItems[__reg2 - 1];
            }
            __reg4 = this.accTotalItems[__reg2];
            if (itemStartIndex >= __reg3 && itemStartIndex < __reg4) 
            {
                this.playlistNumber = __reg2;
                return this.playlistIdArray[__reg2];
            }
            ++__reg2;
        }
        itemStartIndex = null;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function getAccumulatedItems()
    {
        var __reg3 = undefined;
        var __reg4 = 0;
        while (__reg4 <= this.totalItemsQueue.length - 1) 
        {
            __reg3 = 0;
            var __reg2 = 0;
            while (__reg2 <= __reg4) 
            {
                __reg3 = __reg3 + this.totalItemsQueue[__reg2];
                ++__reg2;
            }
            this.accTotalItems.push(__reg3);
            ++__reg4;
        }
        __reg3 = null;
        __reg4 = null;
    }

    function getItemStartIdx(itemStartIndex)
    {
        var __reg3 = undefined;
        var __reg5 = undefined;
        var __reg6 = 0;
        var __reg2 = 0;
        while (__reg2 <= this.accTotalItems.length - 1) 
        {
            if (__reg2 == 0) 
            {
                __reg3 = 0;
            }
            else 
            {
                __reg3 = this.accTotalItems[__reg2 - 1];
            }
            __reg5 = this.accTotalItems[__reg2];
            if (itemStartIndex >= __reg3 && itemStartIndex < __reg5) 
            {
                __reg6 = __reg2;
                break;
            }
            ++__reg2;
        }
        if (__reg6 == 0) 
        {
            return itemStartIndex;
        }
        else 
        {
            return itemStartIndex - this.accTotalItems[__reg2 - 1];
        }
        itemStartIndex = null;
        __reg2 = null;
        __reg3 = null;
        __reg5 = null;
        __reg6 = null;
    }

    function loadMoreItems(items)
    {
        var __reg2 = items.length;
        this.totalItemsLoaded = this.totalItemsLoaded + __reg2;
        this.storeItems(items);
        this.calculateNextLoadCall(this.totalItemsLoaded);
        items = null;
        __reg2 = null;
    }

    function storeItems(items)
    {
        var __reg3 = items.length;
        if (this.tempItems == null) 
        {
            this.tempItems = new Array();
        }
        var __reg2 = 0;
        while (__reg2 < __reg3) 
        {
            this.tempItems.push(items.shift());
            ++__reg2;
        }
        if (this.startIdToLoad + this.parsedItems >= this.accTotalItems[this.playlistNumber]) 
        {
            this.isNewPlaylist = true;
            ++this.playlistNumber;
        }
        __reg2 = null;
        __reg3 = null;
        items = null;
    }

    function calculateNextLoadCall(loadedItems)
    {
        this.playlistId = this.playlistIdArray[this.playlistNumber];
        var __reg3 = null;
        var __reg2 = 0;
        if (this.isNewPlaylist) 
        {
            this.isNewPlaylist = false;
        }
        else 
        {
            __reg2 = Math.floor(this.getItemStartIdx(this.startIdToLoad) / this.maxItems) * this.maxItems + 1;
        }
        __reg3 = this.constructDailymotionUrl(__reg2, this.playlistId);
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        this.xmlInvoker.loadPlaylistXML(__reg3, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true);
        __reg3 = null;
        loadedItems = null;
        __reg2 = null;
    }

    function concatenateItems(items)
    {
        this.multipleCalls = false;
        this.tierItems = this.tempItems.concat(items);
    }

    function onLoadItems()
    {
        var __reg6 = arguments[0];
        var __reg7 = arguments[1];
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("onLoadItems:success_" + __reg6 + ":" + "timeOut_" + __reg7);
        }
        if (__reg6) 
        {
            this.failureCount = 0;
            this.xmlLoadError = false;
            this.itemsXml = this.xmlInvoker.getXmlObject();
            this.destroyTierItems();
            this.tierItems = new Array();
            var __reg8 = this.getItemStartIdx(this.startIdToLoad);
            var __reg4 = __reg8 % this.maxItems;
            var __reg5 = this.itemsRequested;
            if (!this.multipleCalls && this.startIdToLoad - __reg4 + this.maxItems >= this.accTotalItems[this.playlistNumber]) 
            {
                __reg5 = this.accTotalItems[this.playlistNumber] - (this.startIdToLoad + this.parsedItems - __reg4);
            }
            else if (this.startIdToLoad + this.parsedItems + this.maxItems >= this.accTotalItems[this.playlistNumber] || this.totalItemsQueue[this.playlistNumber] < this.itemsRequested) 
            {
                __reg5 = this.accTotalItems[this.playlistNumber] - this.startIdToLoad - this.parsedItems;
            }
            this.parseTierItems(this.itemsXml, this.tierItems, this.itemType, __reg5);
            if (!this.multipleCalls) 
            {
                var __reg3 = 0;
                while (__reg3 < __reg4) 
                {
                    this.tierItems.shift();
                    ++__reg3;
                }
            }
            this.parsedItems = this.parsedItems + this.tierItems.length;
            if (this.parsedItems < this.itemsRequested && this.tierItems != null) 
            {
                this.multipleCalls = true;
                this.loadMoreItems(this.tierItems);
                return undefined;
            }
            if (this.multipleCalls) 
            {
                __reg4 = this.parsedItems - this.itemsRequested;
                __reg3 = 0;
                while (__reg3 < __reg4) 
                {
                    this.tierItems.pop();
                    ++__reg3;
                }
                this.concatenateItems(this.tierItems);
                this.totalItemsLoaded = 0;
                if (this.tempItems != null) 
                {
                    delete this.tempItems;
                    this.tempItems = null;
                }
            }
            if (this.tierItems.length == 0) 
            {
                this.xmlLoadError = true;
                this.zeroItemsLoaded = true;
            }
            else if (!(this.startIdsPool[0] - this.startIdToLoad > this.maxItems || this.startIdToLoad - this.startIdsPool[this.startIdsPool.length - 1] > this.maxItems)) 
            {
                this.updatePool(this.tierItems);
            }
            this.tierItems = null;
            __reg8 = null;
            __reg4 = null;
            __reg5 = null;
        }
        else 
        {
            if (this.multipleCalls) 
            {
                this.multipleCalls = false;
                this.totalItemsLoaded = 0;
                if (this.tempItems != null) 
                {
                    delete this.tempItems;
                    this.tempItems = null;
                }
            }
            if (__reg7) 
            {
                this.xmlTimeOut = true;
            }
            this.requestedItemStartIdx = this.loadedItemsStartIdx;
            ++this.failureCount;
            this.xmlLoadError = true;
        }
        this.poolUpdated = true;
        this.onPoolUpdated();
        __reg6 = null;
        __reg7 = null;
    }

    function updatePool(items)
    {
        this.poolItemsToStore(this.startIdToLoad, items.length);
        if (this.startIdToLoad == 0) 
        {
            __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.unshift(items[this.itemsToStore - 1 - __reg2]);
                this.itemsIndices.unshift(this.startIdToLoad + (this.itemsToStore - 1 - __reg2));
                ++__reg2;
            }
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.unshift(this.startIdToLoad);
            }
        }
        else if (this.startIdToLoad > this.startIdsPool[this.startIdsPool.length - 1]) 
        {
            __reg4 = this.itemsIndices[this.itemsIndices.length - 1] + 1;
            __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.push(items[this.itemsStorageStartIndex + __reg2]);
                if (this.storeStartId) 
                {
                    this.itemsIndices.push(this.itemStartIdToLoad + __reg2);
                }
                else 
                {
                    this.itemsIndices.push(__reg4 + __reg2);
                }
                ++__reg2;
            }
            this.storeStartId = false;
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.push(this.startIdToLoad);
            }
            __reg4 = null;
        }
        else if (this.startIdToLoad < this.startIdsPool[0]) 
        {
            var __reg4 = this.itemsIndices[0];
            var __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.unshift(items[this.itemsToStore - 1 - __reg2]);
                this.itemsIndices.unshift(__reg4 - (__reg2 + 1));
                ++__reg2;
            }
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.unshift(this.startIdToLoad);
            }
            __reg4 = null;
        }
        this.loadedItemsStartIdx = this.startIdToLoad;
        items = null;
        __reg2 = null;
    }

    function onPoolUpdated()
    {
        if (this.navigationIndex > 1) 
        {
            this.pageCounter = 0;
            this.initializePool = false;
            this.allowXmlLoad = true;
        }
        if (this.isItemAvailable(this.requestedItemIdx)) 
        {
            this.allowXmlLoad = true;
            this.returnItemToView(this.requestedItemIdx);
            return;
        }
        if (this.xmlLoadError) 
        {
            this.pageCounter = 0;
            this.initializePool = false;
            if (this.passItemsToTier != null) 
            {
                this.passItemsToTier = null;
                if (this.zeroItemsLoaded) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "zeroItemsLoaded");
                    this.zeroItemsLoaded = false;
                }
                else if (this.xmlTimeOut) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "timeOut");
                }
                else 
                {
                    this.onPoolEvent.notify("xmlLoadError", "loadingError");
                }
            }
            return;
        }
        if (this.netStatus == "Up") 
        {
            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
            return;
        }
        if (this.passItemsToTier != null) 
        {
            this.passItemsToTier = null;
            this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
        }
    }

    function poolItemsToStore(itemsStartIndex, totItems)
    {
        var __reg3 = 0;
        var __reg4 = 0;
        this.itemsStorageEndIndex = 0;
        this.itemsStorageStartIndex = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            __reg3 = Math.floor(this.itemsIndices[__reg2] / this.maxItems) * this.maxItems;
            if (__reg3 == itemsStartIndex) 
            {
                ++__reg4;
                this.itemsStorageEndIndex = this.itemsIndices[__reg2];
            }
            ++__reg2;
        }
        if (itemsStartIndex > this.startIdsPool[this.startIdsPool.length - 1] || itemsStartIndex == 0) 
        {
            this.itemsStorageStartIndex = this.itemsStorageEndIndex + 1 - itemsStartIndex;
            this.itemsToStore = totItems - __reg4;
            if (__reg4 == 0) 
            {
                this.itemsToStore = totItems;
                this.itemsStorageStartIndex = 0;
            }
        }
        else if (itemsStartIndex < this.startIdsPool[0]) 
        {
            this.itemsStorageStartIndex = this.itemsStorageEndIndex - __reg4 - itemsStartIndex;
            this.itemsToStore = totItems - __reg4;
            if (__reg4 == 0) 
            {
                this.itemsToStore = totItems;
                this.itemsStorageStartIndex = totItems;
            }
        }
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
        totItems = null;
        itemsStartIndex = null;
    }

    function loadFavorites(favoriteItemsType)
    {
        this.favoritesFetched = true;
        this.clearArrays();
        var __reg3 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesIndexArray(favoriteItemsType);
        this.itemsPool = new Array();
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            this.itemsPool[__reg2] = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
            this.itemsPool[__reg2].itemName = __reg3[__reg2].itemName;
            this.itemsPool[__reg2].itemType = __reg3[__reg2].itemType;
            this.itemsPool[__reg2].itemId = __reg3[__reg2].itemId;
            this.itemsPool[__reg2].itemLink = __reg3[__reg2].itemLink;
            this.itemsPool[__reg2].itemImage = __reg3[__reg2].itemImage;
            this.itemsPool[__reg2].responseLink = __reg3[__reg2].responseLink;
            this.itemsPool[__reg2].categoryId = __reg3[__reg2].categoryId;
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        favoriteItemsType = null;
    }

    function getPoolItems(currentItemIdx, previousItemIndex, requestedItemsStartIdx, itemsToReturn, onGetPoolItems, favoriteItemsType)
    {
        this.passItemsToTier = onGetPoolItems;
        if (this.isFavoritesCategory) 
        {
            if (!this.favoritesFetched) 
            {
                this.loadFavorites(favoriteItemsType);
            }
            this.returnedItems = this.itemsPool.slice(currentItemIdx, currentItemIdx + itemsToReturn);
            this.passItemsToTier(this.returnedItems);
        }
        else 
        {
            ++this.navigationIndex;
            this.itemsToReturn = itemsToReturn;
            var __reg2 = Math.floor(currentItemIdx / this.maxItems) * this.maxItems;
            this.offLoadItems(currentItemIdx, this.previousItemIdx);
            this.requestedItemIdx = currentItemIdx;
            this.previousItemIdx = previousItemIndex;
            if (this.isItemAvailable(this.requestedItemIdx)) 
            {
                if (this.initializePool) 
                {
                    this.allowXmlLoad = false;
                }
                this.returnItemToView(this.requestedItemIdx);
            }
            else if (this.xmlLoadError) 
            {
                this.itemsStartIdx = __reg2;
                if (!this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.xmlLoadError = false;
                        this.loadItems(this.itemsStartIdx);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
            else if (this.poolUpdated) 
            {
                this.initializePool = true;
                this.temporaryStorageEnabled = true;
                this.itemStartIdToLoad = requestedItemsStartIdx;
                this.pageCounter = 0;
                this.pagesToStore = 2;
                this.navigationIndex = 0;
                this.calculateIndiciesToLoad();
                if (!this.isStartIdloaded(__reg2) && __reg2 >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.itemsStartIdx = __reg2;
                        this.loadItems(this.itemsStartIdx);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
        }
        currentItemIdx = null;
        onGetPoolItems = null;
        __reg2 = null;
        itemsToReturn = null;
        previousItemIndex = null;
        requestedItemsStartIdx = null;
        favoriteItemsType = null;
    }

    function clearArrays()
    {
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            this.itemsPool = null;
            __reg2 = null;
        }
    }

    function temporaryStorage()
    {
        this.temporaryStorageEnabled = false;
        var __reg5 = 0;
        delete this.temporaryPoolItems;
        this.temporaryPoolItems = null;
        this.temporaryPoolItems = new Array();
        delete this.temporaryStartIds;
        this.temporaryStartIds = null;
        this.temporaryStartIds = new Array();
        delete this.temporaryItemIndicies;
        this.temporaryItemIndicies = null;
        this.temporaryItemIndicies = new Array();
        __reg5 = this.itemsPool.length;
        var __reg4 = 0;
        while (__reg4 < __reg5) 
        {
            this.temporaryPoolItems.unshift(this.itemsPool.pop());
            ++__reg4;
        }
        __reg5 = this.itemsIndices.length;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            this.temporaryItemIndicies.unshift(this.itemsIndices.pop());
            ++__reg3;
        }
        __reg5 = this.startIdsPool.length;
        var __reg2 = 0;
        while (__reg2 < __reg5) 
        {
            this.temporaryStartIds.unshift(this.startIdsPool.pop());
            ++__reg2;
        }
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function isStartIdAlreadyloaded(itemsStartIndex)
    {
        var __reg2 = 0;
        while (__reg2 < this.temporaryStartIds.length) 
        {
            if (itemsStartIndex == this.temporaryStartIds[__reg2]) 
            {
                return true;
            }
            ++__reg2;
        }
        __reg2 = null;
        itemsStartIndex = null;
        return false;
    }

    function returnItemToView(requestedItemIndex)
    {
        var __reg3 = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            if (requestedItemIndex == this.itemsIndices[__reg2]) 
            {
                __reg3 = __reg2;
            }
            ++__reg2;
        }
        if (requestedItemIndex == 0) 
        {
            this.viewStartIdx = 0;
            this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
        }
        else if (this.requestedItemIdx > this.previousItemIdx) 
        {
            if (this.passItemsToTier != null) 
            {
                if (this.itemsToReturn == this.maxItems) 
                {
                    this.viewStartIdx = this.itemsIndices[__reg3];
                    this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
                }
                else 
                {
                    this.viewStartIdx = this.viewStartIdx + this.itemsToReturn;
                    this.viewEndIdx = this.viewEndIdx + this.itemsToReturn;
                }
            }
        }
        else if (this.requestedItemIdx < this.previousItemIdx) 
        {
            if (this.passItemsToTier != null) 
            {
                if (this.itemsToReturn == this.maxItems) 
                {
                    this.viewStartIdx = this.itemsIndices[__reg3];
                    this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
                }
                else 
                {
                    this.viewStartIdx = this.viewStartIdx - this.itemsToReturn;
                    if (Math.abs(this.viewStartIdx - this.viewEndIdx) >= this.maxItems) 
                    {
                        this.viewEndIdx = this.viewEndIdx - this.itemsToReturn;
                    }
                }
            }
        }
        this.returnedItems = this.itemsPool.slice(__reg3, __reg3 + this.itemsToReturn);
        this.passItemsToTier(this.returnedItems);
        this.passItemsToTier = null;
        if (this.failureCount < this.retries && this.allowXmlLoad && this.netStatus == "Up") 
        {
            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
        }
        requestedItemIndex = null;
        __reg2 = null;
        this.returnedItems = null;
        __reg3 = null;
    }

    function offLoadItems(currentItemIdx, previousItemIndex)
    {
        var __reg5 = 0;
        var __reg4 = 0;
        var __reg3 = 0;
        var __reg2 = null;
        if (currentItemIdx > previousItemIndex && currentItemIdx - this.itemsIndices[0] > this.minimumPoolItems) 
        {
            var __reg6 = 0;
            while (__reg6 < this.itemsToReturn) 
            {
                __reg2 = this.itemsPool.shift();
                __reg2.destroy();
                false;
                __reg2 = null;
                __reg4 = Number(this.itemsIndices.shift());
                __reg5 = Math.floor(__reg4 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg5)) 
                {
                    __reg3 = Number(this.startIdsPool.shift());
                    if (__reg3 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx + this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx + this.maxItems;
                    }
                }
                ++__reg6;
            }
        }
        if (currentItemIdx < previousItemIndex && this.itemsIndices[this.itemsIndices.length - 1] - currentItemIdx > this.minimumPoolItems) 
        {
            var __reg7 = this.itemsToReturn;
            if ((this.itemsIndices[this.itemsIndices.length - 1] + 1) % this.itemsToReturn != 0) 
            {
                __reg7 = (this.itemsIndices[this.itemsIndices.length - 1] + 1) % this.itemsToReturn;
            }
            __reg6 = 0;
            while (__reg6 < __reg7) 
            {
                __reg2 = this.itemsPool.pop();
                __reg2.destroy();
                false;
                __reg2 = null;
                __reg4 = Number(this.itemsIndices.pop());
                __reg5 = Math.floor(__reg4 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg5)) 
                {
                    __reg3 = Number(this.startIdsPool.pop());
                    if (__reg3 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx - this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx - this.maxItems;
                    }
                }
                ++__reg6;
            }
            __reg7 = null;
        }
        __reg6 = null;
        currentItemIdx = null;
        previousItemIndex = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function isItemAvailable(ItemIdx)
    {
        var __reg4 = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            if (ItemIdx == this.itemsIndices[__reg2]) 
            {
                ++ItemIdx;
                ++__reg4;
                if (__reg4 == this.itemsToReturn || ItemIdx == this.totalItems) 
                {
                    return true;
                }
            }
            ++__reg2;
        }
        __reg2 = null;
        ItemIdx = null;
        __reg4 = null;
        return false;
    }

    function isStartIdloaded(itemsStartIndex)
    {
        var __reg2 = 0;
        while (__reg2 < this.startIdsPool.length) 
        {
            if (itemsStartIndex == this.startIdsPool[__reg2]) 
            {
                return true;
            }
            ++__reg2;
        }
        __reg2 = null;
        itemsStartIndex = null;
        return false;
    }

    function isItemStartIdValid(itemStartIdx)
    {
        if (itemStartIdx < this.totalItems && itemStartIdx >= 0) 
        {
            return true;
        }
        itemStartIdx = null;
        return false;
    }

    function loadAdditionalItems(currentItemIdx, previousItemIndex)
    {
        if (this.initializePool) 
        {
            if (this.pageCounter < this.pagesToStore) 
            {
                var __reg2 = 0;
                if (this.pageCounter == 0) 
                {
                    __reg2 = this.startIdsToLoad[this.pageCounter];
                    if (this.isStartIdloaded(__reg2) || !this.isItemStartIdValid(__reg2)) 
                    {
                        ++this.pageCounter;
                        this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                        return undefined;
                    }
                }
                else if (this.pageCounter == 1) 
                {
                    __reg2 = this.startIdsToLoad[this.pageCounter];
                    if (this.isStartIdloaded(__reg2) || !this.isItemStartIdValid(__reg2)) 
                    {
                        ++this.pageCounter;
                        this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                        return undefined;
                    }
                }
                else if (this.pageCounter > 1) 
                {
                    if (this.pageCounter % 2 == 0) 
                    {
                        __reg2 = this.startIdsToLoad[this.pageCounter];
                        if (this.isStartIdloaded(__reg2) || !this.isItemStartIdValid(__reg2)) 
                        {
                            ++this.pageCounter;
                            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                            return undefined;
                        }
                    }
                    else 
                    {
                        __reg2 = this.startIdsToLoad[this.pageCounter];
                        if (this.isStartIdloaded(__reg2) || !this.isItemStartIdValid(__reg2)) 
                        {
                            ++this.pageCounter;
                            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                            return undefined;
                        }
                    }
                }
            }
            this.itemsStartIdx = __reg2;
            if (this.isStartIdAlreadyloaded(this.itemsStartIdx)) 
            {
                ++this.pageCounter;
                this.updatePool(this.fetchTempItems(this.itemsStartIdx));
                this.poolUpdated = true;
                this.onPoolUpdated();
            }
            else if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0 && this.itemsStartIdx < this.totalItems) 
            {
                ++this.pageCounter;
                this.loadItems(this.itemsStartIdx);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
            this.initializePool = false;
        }
        else if (currentItemIdx == 0 && this.previousItemIdx == -1) 
        {
            this.itemsStartIdx = currentItemIdx + this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx < this.totalItems) 
            {
                this.loadItems(this.itemsStartIdx);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        else if (currentItemIdx > previousItemIndex && this.itemsIndices[this.itemsIndices.length - 1] - currentItemIdx <= this.minimumPoolItems) 
        {
            this.itemsStartIdx = this.startIdsPool[this.startIdsPool.length - 1] + this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx < this.totalItems) 
            {
                this.loadItems(this.itemsStartIdx);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        else if (currentItemIdx < previousItemIndex && Math.abs(this.itemsIndices[0] - currentItemIdx) <= this.minimumPoolItems) 
        {
            this.itemsStartIdx = this.startIdsPool[0] - this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0) 
            {
                this.loadItems(this.itemsStartIdx);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        currentItemIdx = null;
        previousItemIndex = null;
        __reg2 = null;
    }

    function fetchTempItems(itemsStartIndex)
    {
        var __reg3 = 0;
        var __reg2 = 0;
        while (__reg2 < this.temporaryItemIndicies.length) 
        {
            if (itemsStartIndex == this.temporaryItemIndicies[__reg2]) 
            {
                __reg3 = __reg2;
                break;
            }
            ++__reg2;
        }
        __reg3 = null;
        itemsStartIndex = null;
        return this.temporaryPoolItems.slice(__reg2, __reg2 + this.maxItems);
    }

    function removeItem(itemIdx)
    {
        if (this.isFavoritesCategory) 
        {
            this.itemsPool.splice(itemIdx, 1);
        }
        else 
        {
            var __reg7 = -1;
            var __reg2 = 0;
            while (__reg2 < this.itemsIndices.length) 
            {
                if (itemIdx == this.itemsIndices[__reg2]) 
                {
                    __reg7 = __reg2;
                    break;
                }
                ++__reg2;
            }
            var __reg3 = this.itemsPool.splice(__reg7, 1);
            __reg2 = 0;
            while (__reg2 < __reg3.length) 
            {
                __reg3[__reg2].destroy();
                delete __reg3[__reg2];
                __reg3[__reg2] = null;
                var __reg5 = Number(this.itemsIndices.pop());
                --this.totalItems;
                var __reg6 = Math.floor(__reg5 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg6)) 
                {
                    var __reg4 = Number(this.startIdsPool.pop());
                    if (__reg4 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx - this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx - this.maxItems;
                    }
                    __reg4 = null;
                }
                __reg5 = null;
                __reg6 = null;
                ++__reg2;
            }
            __reg2 = null;
            __reg7 = null;
            __reg3 = null;
        }
        itemIdx = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function destroyTierItems()
    {
        var __reg2 = 0;
        while (__reg2 < this.tierItems.length) 
        {
            this.tierItems[__reg2].destroy();
            delete (this.tierItems[__reg2]);
            this.tierItems[__reg2] = null;
            ++__reg2;
        }
        delete (this.tierItems);
        this.tierItems = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.tierItems != null) 
        {
            this.destroyTierItems();
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete (this.xmlInvoker);
            this.xmlInvoker = null;
        }
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            delete this.itemsPool;
            this.itemsPool = null;
        }
        if (this.startIdsToLoad != null) 
        {
            delete (this.startIdsToLoad);
            this.startIdsToLoad = null;
        }
        if (this.startIdsPool != null) 
        {
            delete this.startIdsPool;
            this.startIdsPool = null;
        }
        if (this.onPoolEvent != null) 
        {
            delete (this.onPoolEvent);
            this.onPoolEvent = null;
        }
        this.passItemsToTier = null;
        this.parseTierItems = null;
        this.itemsXml = null;
    }

}

//Sprite 659
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool extends com.jadoo.as2.JadooPlus.Parser.XmlParser.ItemsPool
{
    var isCacheBypassed: Boolean = false;
    var getCachedXml: Boolean = true;
    var startIdToLoad: Number = 0;
    var allowXmlLoad;
    var failureCount;
    var favoritesFetched;
    var fn;
    var historyPages;
    var initialPages;
    var initializePool;
    var isBackPage;
    var isFavoritesCategory;
    var itemStartIdToLoad;
    var itemType;
    var itemsIndices;
    var itemsPool;
    var itemsRequested;
    var itemsStartIdx;
    var itemsStorageEndIndex;
    var itemsStorageStartIndex;
    var itemsToReturn;
    var itemsToStore;
    var itemsXml;
    var loadedItemsStartIdx;
    var maxItems;
    var minimumPoolItems;
    var navigationIndex;
    var netErrorStr;
    var netStatus;
    var nextPageTokenArray;
    var onPoolEvent;
    var pageCounter;
    var pageJump;
    var pagesToStore;
    var parseTierItems;
    var passItemsToTier;
    var playlistId;
    var playlistIdArray;
    var poolUpdated;
    var previousItemIdx;
    var requestedItemIdx;
    var requestedItemStartIdx;
    var retries;
    var returnedItems;
    var startIdsPool;
    var startIdsToLoad;
    var temporaryItemIndicies;
    var temporaryPoolItems;
    var temporaryStartIds;
    var temporaryStorageEnabled;
    var tierItems;
    var tierItemsLink;
    var totalItems;
    var viewEndIdx;
    var viewStartIdx;
    var xmlInvoker;
    var xmlLoadError;
    var xmlTimeOut;
    var zeroItemsLoaded;

    function TierItemsPool()
    {
        super();
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.startIdsPool = new Array();
        this.itemsPool = new Array();
        this.itemsIndices = new Array();
        this.onPoolEvent = new com.BigRoom.Event();
        this.fn = {onLoadXml: mx.utils.Delegate.create(this, this.onLoadItems)};
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function constructDailymotionUrl(itemsStartIndex)
    {
        var __reg3 = null;
        var __reg2 = itemsStartIndex / this.maxItems + 1;
        __reg3 = "https://api.dailymotion.com/playlist/" + this.playlistId + "/videos?fields=duration,thumbnail_medium_url,title,embed_url,id,views_total&sort=recent&page=" + __reg2 + "&limit=" + this.maxItems;
        itemsStartIndex = null;
        __reg2 = null;
        return __reg3;
    }

    function constructYoutubeUrl(pageToken)
    {
        var __reg2 = null;
        __reg2 = "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&fields=nextPageToken%2Citems%2Fsnippet%2Ftitle%2Citems%2Fsnippet%2FresourceId%2Citems%2Fsnippet%2Fthumbnails%2Citems%2Fsnippet%2Fposition&playlistId=" + this.playlistId + "&maxResults=" + this.maxItems;
        if (pageToken != null) 
        {
            __reg2 = __reg2 + "&pageToken=" + pageToken;
        }
        __reg2 = __reg2 + "&key=" + com.jadoo.as2.JadooPlus.Utils.Config.YOUTUBE_DEVELOPER_KEY;
        pageToken = null;
        return __reg2;
    }

    function initialize(tierUrl, itemsStartIndex, maximumItems, totItems, parseItems, isBackPage, isFavoritesCategory)
    {
        this.parseTierItems = parseItems;
        this.isBackPage = isBackPage;
        this.navigationIndex = 0;
        this.isFavoritesCategory = isFavoritesCategory;
        this.playlistIdArray = arguments[7];
        this.itemType = arguments[8];
        this.playlistId = this.playlistIdArray[0];
        if (isBackPage) 
        {
            this.itemStartIdToLoad = itemsStartIndex;
            this.pagesToStore = this.historyPages;
        }
        else 
        {
            this.pagesToStore = this.initialPages;
        }
        this.initializePool = true;
        this.tierItemsLink = tierUrl;
        this.requestedItemStartIdx = 0;
        this.maxItems = maximumItems;
        this.totalItems = totItems;
        this.minimumPoolItems = 2 * this.maxItems;
        this.itemsStartIdx = itemsStartIndex;
        this.nextPageTokenArray = new Array();
        if (!isFavoritesCategory) 
        {
            this.calculateIndiciesToLoad();
            this.loadItems(this.itemsStartIdx, this.getCachedXml);
        }
        isFavoritesCategory = null;
        arguments = null;
        tierUrl = null;
        maximumItems = null;
        totItems = null;
        parseItems = null;
        itemsStartIndex = null;
        isBackPage = null;
    }

    function calculateIndiciesToLoad()
    {
        if (this.startIdsToLoad != null) 
        {
            delete this.startIdsToLoad;
            this.startIdsToLoad = null;
        }
        this.startIdsToLoad = new Array();
        var __reg2 = 0;
        while (__reg2 < this.pagesToStore) 
        {
            if (__reg2 % 2 == 0) 
            {
                this.startIdsToLoad[__reg2] = this.itemStartIdToLoad + (Math.ceil(__reg2 / 2) + 1) * this.maxItems;
            }
            else 
            {
                this.startIdsToLoad[__reg2] = this.itemStartIdToLoad - Math.ceil(__reg2 / 2) * this.maxItems;
            }
            ++__reg2;
        }
        __reg2 = null;
    }

    function loadItems(itemsStartIndex, loadFromCache)
    {
        var __reg2 = this.tierItemsLink;
        this.itemsStartIdx = this.startIdToLoad = itemsStartIndex;
        this.poolUpdated = false;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("LoadItems_" + __reg2);
        }
        if (itemsStartIndex + this.maxItems > this.totalItems) 
        {
            this.itemsRequested = Math.abs(this.totalItems - itemsStartIndex);
        }
        else 
        {
            this.itemsRequested = this.maxItems;
        }
        if (this.itemType == "dailymotionplaylist") 
        {
            __reg2 = this.constructDailymotionUrl(this.itemsStartIdx);
            if (this.xmlInvoker != null) 
            {
                this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
                this.xmlInvoker.destroy();
                delete this.xmlInvoker;
                this.xmlInvoker = null;
            }
            this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
            this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false);
            return;
        }
        if (this.itemType == "youtubeplaylist") 
        {
            var __reg4 = Math.floor(this.itemsStartIdx / this.maxItems);
            var __reg5 = undefined;
            if (__reg4 > 0) 
            {
                __reg5 = this.nextPageTokenArray[__reg4 - 1];
            }
            __reg2 = this.constructYoutubeUrl(__reg5);
            if (this.xmlInvoker != null) 
            {
                this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
                this.xmlInvoker.destroy();
                delete this.xmlInvoker;
                this.xmlInvoker = null;
            }
            this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
            this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.loadPlaylistXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false);
            return;
        }
        if (__reg2.charAt(__reg2.length - 1) != "/") 
        {
            __reg2 = __reg2 + "/";
        }
        __reg2 = __reg2 + itemsStartIndex;
        if (__reg2.charAt(__reg2.length - 1) != "/") 
        {
            __reg2 = __reg2 + "/";
        }
        __reg2 = __reg2 + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.fn.onLoadXml);
        this.xmlInvoker.loadXML(__reg2, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, loadFromCache, true, false);
        loadFromCache = false;
        itemsStartIndex = null;
        __reg2 = null;
    }

    function onLoadItems()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("onLoadItems:success_" + __reg3 + ":" + "timeOut_" + __reg4);
        }
        if (__reg3) 
        {
            this.failureCount = 0;
            this.xmlLoadError = false;
            if (this.temporaryStorageEnabled) 
            {
                this.temporaryStorage();
            }
            this.itemsXml = this.xmlInvoker.getXmlObject();
            this.destroyTierItems();
            this.tierItems = new Array();
            var __reg5 = undefined;
            __reg5 = new String();
            __reg5 = this.parseTierItems(this.itemsXml, this.tierItems, this.itemType, this.itemsRequested);
            var __reg6 = Math.floor(this.itemsStartIdx / this.maxItems);
            this.nextPageTokenArray[__reg6] = __reg5;
            if (this.tierItems.length == 0) 
            {
                this.xmlLoadError = true;
                this.zeroItemsLoaded = true;
            }
            else if (this.tierItems.length != this.itemsRequested && (this.itemType != "youtubeplaylist" && this.itemType != "dailymotionplaylist")) 
            {
                if (this.isCacheBypassed) 
                {
                    this.isCacheBypassed = false;
                    this.xmlLoadError = true;
                }
                else 
                {
                    this.getCachedXml = false;
                }
            }
            else if (!(this.startIdsPool[0] - this.startIdToLoad > this.maxItems || this.startIdToLoad - this.startIdsPool[this.startIdsPool.length - 1] > this.maxItems)) 
            {
                this.updatePool(this.tierItems);
            }
            this.tierItems = null;
        }
        else 
        {
            if (__reg4) 
            {
                this.xmlTimeOut = true;
            }
            this.requestedItemStartIdx = this.loadedItemsStartIdx;
            ++this.failureCount;
            this.isBackPage = false;
            this.xmlLoadError = true;
        }
        this.poolUpdated = true;
        this.onPoolUpdated();
        __reg3 = null;
        __reg4 = null;
    }

    function updatePool(items)
    {
        this.poolItemsToStore(this.startIdToLoad, items.length);
        if (this.startIdToLoad == 0) 
        {
            __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.unshift(items[this.itemsToStore - 1 - __reg2]);
                this.itemsIndices.unshift(this.startIdToLoad + (this.itemsToStore - 1 - __reg2));
                ++__reg2;
            }
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.unshift(this.startIdToLoad);
            }
        }
        else if (this.startIdToLoad > this.startIdsPool[this.startIdsPool.length - 1] || this.startIdsPool.length == 0) 
        {
            __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.push(items[this.itemsStorageStartIndex + __reg2]);
                this.itemsIndices.push(this.startIdToLoad + (this.itemsStorageStartIndex + __reg2));
                ++__reg2;
            }
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.push(this.startIdToLoad);
            }
        }
        else if (this.startIdToLoad < this.startIdsPool[0]) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsToStore) 
            {
                this.itemsPool.unshift(items[this.itemsToStore - 1 - __reg2]);
                this.itemsIndices.unshift(this.startIdToLoad + (this.itemsToStore - 1 - __reg2));
                ++__reg2;
            }
            if (this.startIdToLoad % this.maxItems == 0) 
            {
                this.startIdsPool.unshift(this.startIdToLoad);
            }
        }
        if (this.isBackPage) 
        {
            this.requestedItemStartIdx = this.startIdToLoad;
        }
        this.loadedItemsStartIdx = this.startIdToLoad;
        items = null;
        __reg2 = null;
    }

    function onPoolUpdated()
    {
        if (this.navigationIndex > 1) 
        {
            this.isBackPage = false;
            this.pageCounter = 0;
            this.initializePool = false;
            this.pageJump = false;
            this.allowXmlLoad = true;
        }
        if (this.isItemAvailable(this.requestedItemIdx)) 
        {
            this.allowXmlLoad = true;
            this.getCachedXml = true;
            this.returnItemToView(this.requestedItemIdx);
            return;
        }
        if (this.xmlLoadError) 
        {
            this.isBackPage = false;
            this.pageCounter = 0;
            this.initializePool = false;
            this.pageJump = false;
            if (this.passItemsToTier != null) 
            {
                this.passItemsToTier = null;
                if (this.zeroItemsLoaded) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "zeroItemsLoaded");
                    this.zeroItemsLoaded = false;
                }
                else if (this.xmlTimeOut) 
                {
                    this.onPoolEvent.notify("xmlLoadError", "timeOut");
                }
                else 
                {
                    this.onPoolEvent.notify("xmlLoadError", "loadingError");
                }
            }
            return;
        }
        if (!this.getCachedXml) 
        {
            this.isCacheBypassed = true;
            this.loadItems(this.itemsStartIdx, this.getCachedXml);
            this.getCachedXml = true;
            return;
        }
        if (this.netStatus == "Up") 
        {
            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
            return;
        }
        if (this.passItemsToTier != null) 
        {
            this.passItemsToTier = null;
            this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
        }
    }

    function poolItemsToStore(itemsStartIndex, totItems)
    {
        var __reg3 = 0;
        var __reg4 = 0;
        this.itemsStorageEndIndex = 0;
        this.itemsStorageStartIndex = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            __reg3 = Math.floor(this.itemsIndices[__reg2] / this.maxItems) * this.maxItems;
            if (__reg3 == itemsStartIndex) 
            {
                ++__reg4;
                this.itemsStorageEndIndex = this.itemsIndices[__reg2];
            }
            ++__reg2;
        }
        if (this.pageJump) 
        {
            this.itemsStorageStartIndex = 0;
            this.itemsToStore = totItems;
        }
        else if (itemsStartIndex > this.startIdsPool[this.startIdsPool.length - 1] || itemsStartIndex == 0 || this.startIdsPool.length == 0) 
        {
            this.itemsStorageStartIndex = this.itemsStorageEndIndex + 1 - itemsStartIndex;
            this.itemsToStore = totItems - __reg4;
            if (__reg4 == 0) 
            {
                this.itemsToStore = totItems;
                this.itemsStorageStartIndex = 0;
            }
        }
        else if (itemsStartIndex < this.startIdsPool[0]) 
        {
            this.itemsStorageStartIndex = this.itemsStorageEndIndex - __reg4 - itemsStartIndex;
            this.itemsToStore = totItems - __reg4;
            if (__reg4 == 0) 
            {
                this.itemsToStore = totItems;
                this.itemsStorageStartIndex = totItems;
            }
        }
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
        totItems = null;
        itemsStartIndex = null;
    }

    function loadFavorites(favoriteItemsType)
    {
        this.favoritesFetched = true;
        this.clearArrays();
        var __reg3 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesIndexArray(favoriteItemsType);
        this.itemsPool = new Array();
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            this.itemsPool[__reg2] = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
            this.itemsPool[__reg2].itemName = __reg3[__reg2].itemName;
            this.itemsPool[__reg2].itemType = __reg3[__reg2].itemType;
            this.itemsPool[__reg2].itemId = __reg3[__reg2].itemId;
            this.itemsPool[__reg2].itemLink = __reg3[__reg2].itemLink;
            this.itemsPool[__reg2].itemImage = __reg3[__reg2].itemImage;
            this.itemsPool[__reg2].responseLink = __reg3[__reg2].responseLink;
            this.itemsPool[__reg2].categoryId = __reg3[__reg2].categoryId;
            this.itemsPool[__reg2].groupId = __reg3[__reg2].groupId;
            this.itemsPool[__reg2].appType = __reg3[__reg2].appType;
            if (__reg3[__reg2].appType == "JadooPLUS") 
            {
                __reg4 = this.constructJPPlayUrl(this.itemsPool[__reg2].itemId, this.itemsPool[__reg2].itemType);
                if (__reg4 != null) 
                {
                    this.itemsPool[__reg2].itemLink = __reg4;
                }
                __reg4 = null;
            }
            else if (__reg3[__reg2].appType == "MyJadoo") 
            {
                var __reg4 = this.constructMJPlayUrl(this.itemsPool[__reg2].itemId, this.itemsPool[__reg2].itemType, this.itemsPool[__reg2].groupId);
                if (__reg4 != null) 
                {
                    this.itemsPool[__reg2].itemLink = __reg4;
                }
                __reg4 = null;
            }
            ++__reg2;
        }
        __reg2 = null;
        __reg3 = null;
        favoriteItemsType = null;
    }

    function constructJPPlayUrl(itemId, itemType)
    {
        if ((__reg0 = itemType) === "liveRTMP") 
        {
            var __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "liveWMV") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "livePlaylist") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "wmv") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "flv") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "vodPlaylist") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "youtubesinglevideo") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        else if (__reg0 === "dailymotionsinglevideo") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.jpVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            return __reg1 + itemId;
        }
        return null;
    }

    function constructMJPlayUrl(itemId, itemType, groupId)
    {
        if ((__reg0 = itemType) === "liveRTMP") 
        {
            var __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "liveWMV") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "livePlaylist") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjChannelPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "wmv") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "flv") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "vodPlaylist") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "youtubesinglevideo") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        else if (__reg0 === "dailymotionsinglevideo") 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.mjVodPlayUrl;
            if (__reg1.charAt(__reg1.length - 1) != "/") 
            {
                __reg1 = __reg1 + "/";
            }
            if (isNaN(groupId) || groupId == -2) 
            {
                return __reg1 + itemId + "/0";
            }
            else 
            {
                return __reg1 + itemId + "/" + groupId;
            }
            return;
        }
        return null;
    }

    function getPoolItems(currentItemIdx, previousItemIndex, requestedItemsStartIdx, itemsToReturn, onGetPoolItems, favoriteItemsType)
    {
        this.passItemsToTier = onGetPoolItems;
        if (this.isFavoritesCategory) 
        {
            if (!this.favoritesFetched) 
            {
                this.loadFavorites(favoriteItemsType);
            }
            this.returnedItems = this.itemsPool.slice(currentItemIdx, currentItemIdx + itemsToReturn);
            this.passItemsToTier(this.returnedItems);
        }
        else 
        {
            ++this.navigationIndex;
            this.itemsToReturn = itemsToReturn;
            var __reg2 = Math.floor(currentItemIdx / this.maxItems) * this.maxItems;
            this.offLoadItems(currentItemIdx, this.previousItemIdx);
            this.requestedItemIdx = currentItemIdx;
            this.previousItemIdx = previousItemIndex;
            if (this.isItemAvailable(this.requestedItemIdx)) 
            {
                if (this.initializePool) 
                {
                    this.allowXmlLoad = false;
                }
                this.returnItemToView(this.requestedItemIdx);
            }
            else if (this.xmlLoadError) 
            {
                this.isBackPage = false;
                this.itemsStartIdx = __reg2;
                if (!this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.xmlLoadError = false;
                        this.loadItems(this.itemsStartIdx, this.getCachedXml);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
            else if (this.poolUpdated) 
            {
                this.initializePool = true;
                this.pageJump = true;
                this.temporaryStorageEnabled = true;
                this.itemStartIdToLoad = requestedItemsStartIdx;
                this.pageCounter = 0;
                this.pagesToStore = 2;
                this.navigationIndex = 0;
                this.calculateIndiciesToLoad();
                if (!this.isStartIdloaded(__reg2) && __reg2 >= 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.itemsStartIdx = __reg2;
                        this.loadItems(this.itemsStartIdx, this.getCachedXml);
                        this.requestedItemStartIdx = this.itemsStartIdx;
                    }
                    else if (this.passItemsToTier != null) 
                    {
                        this.passItemsToTier = null;
                        this.onPoolEvent.notify("xmlLoadError", "internetDown", this.netErrorStr);
                    }
                }
            }
        }
        currentItemIdx = null;
        onGetPoolItems = null;
        __reg2 = null;
        itemsToReturn = null;
        previousItemIndex = null;
        requestedItemsStartIdx = null;
        favoriteItemsType = null;
    }

    function clearArrays()
    {
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            this.itemsPool = null;
            __reg2 = null;
        }
    }

    function temporaryStorage()
    {
        this.temporaryStorageEnabled = false;
        var __reg5 = 0;
        delete this.temporaryPoolItems;
        this.temporaryPoolItems = null;
        this.temporaryPoolItems = new Array();
        delete this.temporaryStartIds;
        this.temporaryStartIds = null;
        this.temporaryStartIds = new Array();
        delete this.temporaryItemIndicies;
        this.temporaryItemIndicies = null;
        this.temporaryItemIndicies = new Array();
        __reg5 = this.itemsPool.length;
        var __reg4 = 0;
        while (__reg4 < __reg5) 
        {
            this.temporaryPoolItems.unshift(this.itemsPool.pop());
            ++__reg4;
        }
        __reg5 = this.itemsIndices.length;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            this.temporaryItemIndicies.unshift(this.itemsIndices.pop());
            ++__reg3;
        }
        __reg5 = this.startIdsPool.length;
        var __reg2 = 0;
        while (__reg2 < __reg5) 
        {
            this.temporaryStartIds.unshift(this.startIdsPool.pop());
            ++__reg2;
        }
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function isStartIdAlreadyloaded(itemsStartIndex)
    {
        var __reg2 = 0;
        while (__reg2 < this.temporaryStartIds.length) 
        {
            if (itemsStartIndex == this.temporaryStartIds[__reg2]) 
            {
                return true;
            }
            ++__reg2;
        }
        __reg2 = null;
        itemsStartIndex = null;
        return false;
    }

    function returnItemToView(requestedItemIndex)
    {
        var __reg3 = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            if (requestedItemIndex == this.itemsIndices[__reg2]) 
            {
                __reg3 = __reg2;
            }
            ++__reg2;
        }
        if (requestedItemIndex == 0) 
        {
            this.viewStartIdx = 0;
            this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
        }
        else if (this.requestedItemIdx > this.previousItemIdx) 
        {
            if (this.passItemsToTier != null) 
            {
                if (this.itemsToReturn == this.maxItems) 
                {
                    this.viewStartIdx = this.itemsIndices[__reg3];
                    this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
                }
                else 
                {
                    this.viewStartIdx = this.viewStartIdx + this.itemsToReturn;
                    this.viewEndIdx = this.viewEndIdx + this.itemsToReturn;
                }
            }
        }
        else if (this.requestedItemIdx < this.previousItemIdx) 
        {
            if (this.passItemsToTier != null) 
            {
                if (this.itemsToReturn == this.maxItems) 
                {
                    this.viewStartIdx = this.itemsIndices[__reg3];
                    this.viewEndIdx = this.viewStartIdx + this.itemsToReturn;
                }
                else 
                {
                    this.viewStartIdx = this.viewStartIdx - this.itemsToReturn;
                    if (Math.abs(this.viewStartIdx - this.viewEndIdx) >= this.maxItems) 
                    {
                        this.viewEndIdx = this.viewEndIdx - this.itemsToReturn;
                    }
                }
            }
        }
        this.returnedItems = this.itemsPool.slice(__reg3, __reg3 + this.itemsToReturn);
        this.passItemsToTier(this.returnedItems);
        this.passItemsToTier = null;
        if (this.failureCount < this.retries && this.allowXmlLoad && this.netStatus == "Up") 
        {
            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
        }
        requestedItemIndex = null;
        __reg2 = null;
        this.returnedItems = null;
        __reg3 = null;
    }

    function offLoadItems(currentItemIdx, previousItemIndex)
    {
        var __reg5 = 0;
        var __reg4 = 0;
        var __reg3 = 0;
        var __reg2 = null;
        if (currentItemIdx > previousItemIndex && currentItemIdx - this.itemsIndices[0] > this.minimumPoolItems) 
        {
            var __reg6 = 0;
            while (__reg6 < this.itemsToReturn) 
            {
                __reg2 = this.itemsPool.shift();
                __reg2.destroy();
                false;
                __reg2 = null;
                __reg4 = Number(this.itemsIndices.shift());
                __reg5 = Math.floor(__reg4 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg5)) 
                {
                    __reg3 = Number(this.startIdsPool.shift());
                    if (__reg3 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx + this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx + this.maxItems;
                    }
                }
                ++__reg6;
            }
        }
        if (currentItemIdx < previousItemIndex && this.itemsIndices[this.itemsIndices.length - 1] - currentItemIdx > this.minimumPoolItems) 
        {
            var __reg7 = this.itemsToReturn;
            if ((this.itemsIndices[this.itemsIndices.length - 1] + 1) % this.itemsToReturn != 0) 
            {
                __reg7 = (this.itemsIndices[this.itemsIndices.length - 1] + 1) % this.itemsToReturn;
            }
            __reg6 = 0;
            while (__reg6 < __reg7) 
            {
                __reg2 = this.itemsPool.pop();
                __reg2.destroy();
                false;
                __reg2 = null;
                __reg4 = Number(this.itemsIndices.pop());
                __reg5 = Math.floor(__reg4 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg5)) 
                {
                    __reg3 = Number(this.startIdsPool.pop());
                    if (__reg3 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx - this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx - this.maxItems;
                    }
                }
                ++__reg6;
            }
        }
        __reg6 = null;
        currentItemIdx = null;
        previousItemIndex = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function isItemAvailable(ItemIdx)
    {
        var __reg4 = 0;
        var __reg2 = 0;
        while (__reg2 < this.itemsIndices.length) 
        {
            if (ItemIdx == this.itemsIndices[__reg2]) 
            {
                ++ItemIdx;
                ++__reg4;
                if (__reg4 == this.itemsToReturn || ItemIdx == this.totalItems) 
                {
                    return true;
                }
            }
            ++__reg2;
        }
        __reg2 = null;
        ItemIdx = null;
        __reg4 = null;
        return false;
    }

    function isStartIdloaded(itemsStartIndex)
    {
        var __reg2 = 0;
        while (__reg2 < this.startIdsPool.length) 
        {
            if (itemsStartIndex == this.startIdsPool[__reg2]) 
            {
                return true;
            }
            ++__reg2;
        }
        __reg2 = null;
        itemsStartIndex = null;
        return false;
    }

    function isItemStartIdValid(itemStartIdx)
    {
        if (itemStartIdx < this.totalItems && itemStartIdx >= 0) 
        {
            return true;
        }
        itemStartIdx = null;
        return false;
    }

    function loadAdditionalItems(currentItemIdx, previousItemIndex)
    {
        if (this.initializePool) 
        {
            if (this.pageCounter < this.pagesToStore) 
            {
                var __reg5 = 0;
                if (this.pageCounter == 0) 
                {
                    __reg5 = this.startIdsToLoad[this.pageCounter];
                    if (this.isStartIdloaded(__reg5) || !this.isItemStartIdValid(__reg5)) 
                    {
                        ++this.pageCounter;
                        this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                        return undefined;
                    }
                }
                else if (this.pageCounter == 1) 
                {
                    __reg5 = this.startIdsToLoad[this.pageCounter];
                    if (this.isStartIdloaded(__reg5) || !this.isItemStartIdValid(__reg5)) 
                    {
                        ++this.pageCounter;
                        this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                        return undefined;
                    }
                }
                else if (this.pageCounter > 1) 
                {
                    if (this.pageCounter % 2 == 0) 
                    {
                        __reg5 = this.startIdsToLoad[this.pageCounter];
                        if (this.isStartIdloaded(__reg5) || !this.isItemStartIdValid(__reg5)) 
                        {
                            ++this.pageCounter;
                            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                            return undefined;
                        }
                    }
                    else 
                    {
                        __reg5 = this.startIdsToLoad[this.pageCounter];
                        if (this.isStartIdloaded(__reg5) || !this.isItemStartIdValid(__reg5)) 
                        {
                            ++this.pageCounter;
                            this.loadAdditionalItems(this.requestedItemIdx, this.previousItemIdx);
                            return undefined;
                        }
                    }
                }
            }
            else 
            {
                if (this.pageJump) 
                {
                    var __reg2 = 0;
                    while (__reg2 < this.temporaryItemIndicies.length) 
                    {
                        var __reg4 = true;
                        var __reg3 = 0;
                        while (__reg3 < this.itemsIndices.length) 
                        {
                            if (this.temporaryItemIndicies[__reg2] == this.itemsIndices[__reg3] || (this.temporaryItemIndicies[__reg2] >= this.viewStartIdx && this.temporaryItemIndicies[__reg2] <= this.viewEndIdx)) 
                            {
                                __reg4 = false;
                            }
                            ++__reg3;
                        }
                        if (__reg4) 
                        {
                            this.temporaryPoolItems[__reg2].destroy();
                            delete this.temporaryPoolItems[__reg2];
                            this.temporaryPoolItems[__reg2] = null;
                        }
                        __reg4 = null;
                        __reg3 = null;
                        ++__reg2;
                    }
                    __reg2 = null;
                    delete this.temporaryPoolItems;
                    this.temporaryPoolItems = null;
                    delete this.temporaryItemIndicies;
                    this.temporaryItemIndicies = null;
                    delete this.temporaryStartIds;
                    this.temporaryStartIds = null;
                    this.pageJump = false;
                }
                this.pageCounter = 0;
                this.initializePool = false;
                this.isBackPage = false;
            }
            this.itemsStartIdx = __reg5;
            if (this.isStartIdAlreadyloaded(this.itemsStartIdx)) 
            {
                ++this.pageCounter;
                this.updatePool(this.fetchTempItems(this.itemsStartIdx));
                this.poolUpdated = true;
                this.onPoolUpdated();
            }
            else if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0 && this.itemsStartIdx < this.totalItems) 
            {
                ++this.pageCounter;
                this.loadItems(this.itemsStartIdx, this.getCachedXml);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        else if (currentItemIdx == 0 && this.previousItemIdx == -1) 
        {
            this.itemsStartIdx = currentItemIdx + this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx < this.totalItems) 
            {
                this.loadItems(this.itemsStartIdx, this.getCachedXml);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        else if (currentItemIdx > previousItemIndex && this.itemsIndices[this.itemsIndices.length - 1] - currentItemIdx <= this.minimumPoolItems) 
        {
            this.itemsStartIdx = this.startIdsPool[this.startIdsPool.length - 1] + this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx < this.totalItems) 
            {
                this.loadItems(this.itemsStartIdx, this.getCachedXml);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        else if (currentItemIdx < previousItemIndex && Math.abs(this.itemsIndices[0] - currentItemIdx) <= this.minimumPoolItems) 
        {
            this.itemsStartIdx = this.startIdsPool[0] - this.maxItems;
            if (this.itemsStartIdx != this.requestedItemStartIdx && !this.isStartIdloaded(this.itemsStartIdx) && this.itemsStartIdx >= 0) 
            {
                this.loadItems(this.itemsStartIdx, this.getCachedXml);
                this.requestedItemStartIdx = this.itemsStartIdx;
            }
        }
        currentItemIdx = null;
        previousItemIndex = null;
        __reg5 = null;
    }

    function fetchTempItems(itemsStartIndex)
    {
        var __reg3 = 0;
        var __reg2 = 0;
        while (__reg2 < this.temporaryItemIndicies.length) 
        {
            if (itemsStartIndex == this.temporaryItemIndicies[__reg2]) 
            {
                __reg3 = __reg2;
                break;
            }
            ++__reg2;
        }
        __reg3 = null;
        itemsStartIndex = null;
        return this.temporaryPoolItems.slice(__reg2, __reg2 + this.maxItems);
    }

    function removeItem(itemIdx)
    {
        if (this.isFavoritesCategory) 
        {
            this.itemsPool.splice(itemIdx, 1);
        }
        else 
        {
            var __reg7 = -1;
            var __reg2 = 0;
            while (__reg2 < this.itemsIndices.length) 
            {
                if (itemIdx == this.itemsIndices[__reg2]) 
                {
                    __reg7 = __reg2;
                    break;
                }
                ++__reg2;
            }
            var __reg3 = this.itemsPool.splice(__reg7, 1);
            __reg2 = 0;
            while (__reg2 < __reg3.length) 
            {
                __reg3[__reg2].destroy();
                delete __reg3[__reg2];
                __reg3[__reg2] = null;
                var __reg5 = Number(this.itemsIndices.pop());
                --this.totalItems;
                var __reg6 = Math.floor(__reg5 / this.maxItems) * this.maxItems;
                if (this.isStartIdloaded(__reg6)) 
                {
                    var __reg4 = Number(this.startIdsPool.pop());
                    if (__reg4 == this.requestedItemStartIdx) 
                    {
                        this.requestedItemStartIdx = this.requestedItemStartIdx - this.maxItems;
                        this.loadedItemsStartIdx = this.loadedItemsStartIdx - this.maxItems;
                    }
                    __reg4 = null;
                }
                __reg5 = null;
                __reg6 = null;
                ++__reg2;
            }
            __reg2 = null;
            __reg7 = null;
            __reg3 = null;
        }
        itemIdx = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onPoolEvent") 
        {
            this.onPoolEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function destroyTierItems()
    {
        var __reg2 = 0;
        while (__reg2 < this.tierItems.length) 
        {
            this.tierItems[__reg2].destroy();
            delete this.tierItems[__reg2];
            this.tierItems[__reg2] = null;
            ++__reg2;
        }
        delete this.tierItems;
        this.tierItems = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.tierItems != null) 
        {
            this.destroyTierItems();
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.fn.onLoadXml);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.itemsPool != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.itemsPool.length) 
            {
                this.itemsPool[__reg2].destroy();
                delete this.itemsPool[__reg2];
                this.itemsPool[__reg2] = null;
                ++__reg2;
            }
            delete this.itemsPool;
            this.itemsPool = null;
        }
        if (this.startIdsToLoad != null) 
        {
            delete this.startIdsToLoad;
            this.startIdsToLoad = null;
        }
        if (this.startIdsPool != null) 
        {
            delete this.startIdsPool;
            this.startIdsPool = null;
        }
        if (this.onPoolEvent != null) 
        {
            delete (this.onPoolEvent);
            this.onPoolEvent = null;
        }
        this.passItemsToTier = null;
        this.parseTierItems = null;
        this.itemsXml = null;
    }

}

//Sprite 660
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser
{
    static var xml = null;
    static var xmlInvoker = null;
    static var onLoadXml = null;

    function XmlParser()
    {
    }

    static function loadPageXML(url, itemStartIdx, index, onLoad)
    {
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        url = url + itemStartIdx;
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        url = url + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        if (index == 0) 
        {
            if (com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker != null) 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onPageXmlResponse);
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.destroy();
                delete com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker;
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker = null;
            }
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.addListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onPageXmlResponse);
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.loadXML(url, index, com.jadoo.as2.JadooPlus.Utils.Config.pageXmlTimeOutDuration, true, true, false);
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onLoadXml = onLoad;
    }

    static function onPageXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg4 = arguments[1];
        var __reg3 = arguments[2];
        if (__reg2) 
        {
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.getXmlObject();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onLoadXml(__reg2, __reg4, __reg3);
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    static function parsePageInfo(mainPage)
    {
        var __reg2 = null;
        mainPage.pageId = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_id").firstChild.nodeValue;
        mainPage.pageTitle = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/title").firstChild.nodeValue;
        mainPage.pageTitleX = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/startx").firstChild.nodeValue);
        mainPage.pageTitleY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/starty").firstChild.nodeValue);
        mainPage.pageTitleWidth = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/width").firstChild.nodeValue);
        mainPage.pageTitleHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/height").firstChild.nodeValue);
        if (mainPage.pageTitleTxtFormat == null) 
        {
            mainPage.pageTitleTxtFormat = new TextFormat();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.pageTitleTxtFormat, mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/page_title/text_format"));
        mainPage.backImgUrl = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/background_image").firstChild.nodeValue;
        mainPage.selectorUrl = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/selector/img_url").firstChild.nodeValue;
        mainPage.msgAreaX = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/message/startx").firstChild.nodeValue);
        mainPage.msgAreaY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/message/starty").firstChild.nodeValue);
        mainPage.msgAreaWidth = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/message/width").firstChild.nodeValue);
        mainPage.msgAreaHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/message/height").firstChild.nodeValue);
        if (mainPage.msgTxtFormat == null) 
        {
            mainPage.msgTxtFormat = new TextFormat();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.msgTxtFormat, mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/message/text_format"));
        mainPage.weatherAreaX = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/weather/startx").firstChild.nodeValue);
        mainPage.weatherAreaY = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/weather/starty").firstChild.nodeValue);
        mainPage.weatherAreaWidth = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/weather/width").firstChild.nodeValue);
        mainPage.weatherAreaHeight = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/weather/height").firstChild.nodeValue);
        mainPage.weatherUnit = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/weather/unit").firstChild.nodeValue;
        if (mainPage.weatherAreaX != null && mainPage.weatherAreaX != undefined && mainPage.weatherAreaY != null && mainPage.weatherAreaY != undefined && mainPage.weatherAreaWidth != null && mainPage.weatherAreaWidth != undefined && mainPage.weatherAreaHeight != null && mainPage.weatherAreaHeight != undefined && mainPage.weatherUnit != null && mainPage.weatherUnit != undefined) 
        {
            mainPage.showWeather = true;
        }
        mainPage.timeAreaX = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/time_area/startx").firstChild.nodeValue);
        mainPage.timeAreaY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/time_area/starty").firstChild.nodeValue);
        mainPage.timeAreaWidth = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/time_area/width").firstChild.nodeValue);
        mainPage.timeAreaHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/time_area/height").firstChild.nodeValue);
        mainPage.topRightLogoX = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/topright_logo/startx").firstChild.nodeValue);
        mainPage.topRightLogoY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/topright_logo/starty").firstChild.nodeValue);
        mainPage.topRightLogoWidth = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/topright_logo/width").firstChild.nodeValue);
        mainPage.topRightLogoHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/topright_logo/height").firstChild.nodeValue);
        __reg2 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement");
        if (__reg2 == null) 
        {
            mainPage.isAdView = false;
        }
        else 
        {
            mainPage.isAdView = true;
        }
        mainPage.adsTitle = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/title").firstChild.nodeValue;
        mainPage.adsXMLLink = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/ad_xml_url").firstChild.nodeValue;
        mainPage.adsX = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/startx").firstChild.nodeValue);
        mainPage.adsY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/starty").firstChild.nodeValue);
        mainPage.adsWidth = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/width").firstChild.nodeValue);
        mainPage.adsHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/advertisement/height").firstChild.nodeValue);
        mainPage.videoAdsXMLLink = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/videoads/ad_xml_url").firstChild.nodeValue;
        mainPage.firstAdFetchTime = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/videoads/first_ad_fetch_time").firstChild.nodeValue) * 1000;
        mainPage.listingIdxRightX = Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/listing_indx_text/rightx").firstChild.nodeValue);
        mainPage.listingIdxY = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/listing_indx_text/starty").firstChild.nodeValue);
        if (mainPage.listIdxTxtFormat == null) 
        {
            mainPage.listIdxTxtFormat = new TextFormat();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.listIdxTxtFormat, mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/listing_indx_text/text_format"));
        var __reg3 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/ticker");
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTickerTag(__reg3, mainPage);
        __reg2 = null;
    }

    static function parsePageTitleTag(pageTitleNode, mainPage)
    {
        var __reg4 = pageTitleNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "title") 
            {
                mainPage.pageTitle = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "startx") 
            {
                mainPage.pageTitleX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.pageTitleY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.pageTitleWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.pageTitleHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (mainPage.pageTitleTxtFormat == null) 
                {
                    mainPage.pageTitleTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.pageTitleTxtFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        pageTitleNode = null;
        mainPage = null;
    }

    static function parseMessageTag(messageNode, mainPage)
    {
        var __reg4 = messageNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                mainPage.msgAreaX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.msgAreaY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.msgAreaWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.msgAreaHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (mainPage.msgTxtFormat == null) 
                {
                    mainPage.msgTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.msgTxtFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        messageNode = null;
        mainPage = null;
    }

    static function parseLogoTag(logoNode, mainPage)
    {
        var __reg4 = logoNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "startx") 
            {
                mainPage.topRightLogoX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.topRightLogoY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.topRightLogoWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.topRightLogoHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg4 = null;
        __reg1 = null;
        logoNode = null;
        mainPage = null;
    }

    static function parseAdTag(adNode, mainPage)
    {
        var __reg4 = adNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "ad_xml_url") 
            {
                mainPage.adsXMLLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "startx") 
            {
                mainPage.adsX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.adsY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.adsWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.adsHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "next_ad") 
            {
                mainPage.nextAdFetchTime = Number(__reg1.firstChild.nodeValue) * 1000;
            }
            ++__reg3;
        }
        mainPage.isAdView = true;
        __reg4 = null;
        __reg1 = null;
        adNode = null;
        mainPage = null;
    }

    static function parseSearchLinksTag(searchLinksNode, mainPage)
    {
        var __reg3 = searchLinksNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "dropdown_link") 
            {
                mainPage.searchHelpLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "results_link") 
            {
                mainPage.searchResultsLink = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg1 = null;
        __reg3 = null;
        searchLinksNode = null;
        mainPage = null;
    }

    static function parseListingIdxTag(listingIdxNode, mainPage)
    {
        var __reg4 = listingIdxNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "rightx") 
            {
                mainPage.listingIdxRightX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.listingIdxY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (mainPage.listIdxTxtFormat == null) 
                {
                    mainPage.listIdxTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.listIdxTxtFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        listingIdxNode = null;
        mainPage = null;
    }

    static function parseWeatherTag(weatherNode, mainPage)
    {
        var __reg4 = weatherNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                mainPage.weatherAreaX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.weatherAreaY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.weatherAreaWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.weatherAreaHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "unit") 
            {
                mainPage.weatherUnit = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        mainPage.showWeather = true;
        __reg4 = null;
        __reg1 = null;
        weatherNode = null;
        mainPage = null;
    }

    static function parseTimeAreaTag(timeAreaNode, mainPage)
    {
        var __reg4 = timeAreaNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "startx") 
            {
                mainPage.timeAreaX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                mainPage.timeAreaY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                mainPage.timeAreaWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                mainPage.timeAreaHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        mainPage.showWeather = true;
        __reg4 = null;
        __reg1 = null;
        timeAreaNode = null;
        mainPage = null;
    }

    static function getTier1Type()
    {
        return mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/view_info/tier1_type").firstChild.nodeValue;
    }

    static function getTier2Type()
    {
        return mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/view_info/tier2_type").firstChild.nodeValue;
    }

    static function getTier3Type()
    {
        return mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/view_info/tier3_type").firstChild.nodeValue;
    }

    static function getViewType()
    {
        return mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/view").firstChild.nodeValue;
    }

    static function getBackgroundImage()
    {
        return mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/background_image").firstChild.nodeValue;
    }

    static function parseTextFormat(txtFormat, xmlNode)
    {
        var __reg5 = null;
        var __reg4 = xmlNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "font") 
            {
                txtFormat.font = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "alignment") 
            {
                txtFormat.align = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "size") 
            {
                txtFormat.size = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "is_bold") 
            {
                txtFormat.bold = Boolean(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "color_rgb") 
            {
                __reg5 = __reg1.firstChild.nodeValue.split(",");
            }
            ++__reg2;
        }
        txtFormat.color = (int(__reg5[0]) << 8 | int(__reg5[1])) << 8 | int(__reg5[2]);
        xmlNode = null;
        txtFormat = null;
        __reg4 = null;
        __reg1 = null;
        __reg5 = null;
    }

    static function parseTickerTag(tickerNode, mainPage)
    {
        var __reg4 = null;
        var __reg5 = tickerNode.childNodes;
        var __reg1 = null;
        mainPage.ticker = new com.jadoo.as2.JadooPlus.Features.Ticker();
        var __reg3 = 0;
        while (__reg3 < __reg5.length) 
        {
            __reg1 = __reg5[__reg3];
            if (__reg1.nodeName == "y_pos") 
            {
                mainPage.ticker.yPos = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "link") 
            {
                mainPage.ticker.url = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "refresh_time") 
            {
                mainPage.ticker.refreshTime = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "alpha") 
            {
                mainPage.ticker.alpha = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "background_color") 
            {
                __reg4 = __reg1.firstChild.nodeValue.split(",");
                mainPage.ticker.backgroundColor = (int(__reg4[0]) << 8 | int(__reg4[1])) << 8 | int(__reg4[2]);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (mainPage.ticker.textFormat == null) 
                {
                    mainPage.ticker.textFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(mainPage.ticker.textFormat, __reg1);
            }
            ++__reg3;
        }
        tickerNode = null;
        mainPage = null;
        __reg5 = null;
        __reg1 = null;
        __reg4 = null;
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onLoadXml = null;
        if (com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.onPageXmlResponse);
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker.destroy();
            delete (com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker);
            com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xmlInvoker = null;
        }
    }

    static function getCategoryStatus()
    {
        if (Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/status").firstChild.nodeValue) == 0) 
        {
            return "hidden";
        }
        if (Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/geofilter_allowed").firstChild.nodeValue) == 0) 
        {
            return "geofiltered";
        }
        if (Number(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/popup/status").firstChild.nodeValue) == 1) 
        {
            return "popup";
        }
        return "active";
    }

    static function getPopupData()
    {
        var __reg6 = new Object();
        __reg6.popupType = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/popup/type").firstChild.nodeValue;
        __reg6.popupMsg = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/popup/message").firstChild.nodeValue;
        var __reg4 = mx.xpath.XPathAPI.selectNodeList(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml/page/popup/buttons/button");
        var __reg3 = null;
        var __reg5 = new Array();
        var __reg1 = 0;
        while (__reg1 < __reg4.length) 
        {
            __reg3 = __reg4[__reg1];
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/button/text").firstChild.nodeValue;
            __reg5[__reg1] = __reg2;
            __reg2 = null;
            ++__reg1;
        }
        __reg6.buttons = __reg5;
        __reg4 = null;
        __reg3 = null;
        return __reg6;
    }

}

//Sprite 661
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser
{
    static var tierXml = null;
    static var itemsXml = null;
    static var itemsStartIdx: Number = 0;
    static var xmlInvoker = null;
    static var onLoadXml = null;

    function TierXmlParser()
    {
        super();
    }

    static function loadItemXML(url, index, onLoad)
    {
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        url = url + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        if (com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onItemXmlResponse);
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker;
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker = null;
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.addListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onItemXmlResponse);
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.loadXML(url, index, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true, true, false);
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onLoadXml = onLoad;
    }

    static function onItemXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg3 = arguments[1];
        if (__reg2) 
        {
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.itemsXml = com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.getXmlObject();
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onLoadXml(__reg2, __reg3);
        __reg2 = null;
        __reg3 = null;
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onLoadXml = null;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.itemsXml = null;
        if (com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser, com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.onItemXmlResponse);
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker;
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.xmlInvoker = null;
        }
        if (com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.tierXml != null) 
        {
            delete com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.tierXml;
            com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.tierXml = null;
        }
        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.destroy();
    }

    static function parseThreeTierPageInfo(threeTierPage)
    {
        var __reg7 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml").childNodes;
        var __reg6 = null;
        var __reg5 = 0;
        while (__reg5 < __reg7.length) 
        {
            __reg6 = __reg7[__reg5];
            if (__reg6.nodeName == "page") 
            {
                var __reg4 = __reg6.childNodes;
                var __reg1 = null;
                var __reg3 = 0;
                while (__reg3 < __reg4.length) 
                {
                    __reg1 = __reg4[__reg3];
                    if (__reg1.nodeName == "page_id") 
                    {
                        threeTierPage.pageId = Number(__reg1.firstChild.nodeValue);
                    }
                    else if (__reg1.nodeName == "page_title") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parsePageTitleTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "background_image") 
                    {
                        threeTierPage.backImgUrl = __reg1.firstChild.nodeValue;
                    }
                    else if (__reg1.nodeName == "message") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseMessageTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "topright_logo") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseLogoTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "advertisement") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseAdTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "listing_indx_text") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseListingIdxTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "ticker") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTickerTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "weather") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseWeatherTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "time_area") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTimeAreaTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "search_links") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseSearchLinksTag(__reg1, threeTierPage);
                    }
                    else if (__reg1.nodeName == "Tier_1") 
                    {
                        threeTierPage.tier1.parseTier(threeTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "Tier_2") 
                    {
                        threeTierPage.tier2.parseTier(threeTierPage.tier2, __reg1);
                    }
                    else if (__reg1.nodeName == "MatrixTier") 
                    {
                        threeTierPage.tier3.parseTier(threeTierPage.tier3, __reg1);
                    }
                    else if (__reg1.nodeName == "DetailedMatrixTier") 
                    {
                        threeTierPage.tier3.parseTier(threeTierPage.tier3, __reg1);
                    }
                    else if (__reg1.nodeName == "CategoryTier") 
                    {
                        threeTierPage.tier3.parseTier(threeTierPage.tier3, __reg1);
                    }
                    else if (__reg1.nodeName == "vod_response_link") 
                    {
                        threeTierPage.vodResponseLink = __reg1.firstChild.nodeValue;
                    }
                    ++__reg3;
                }
                __reg4 = null;
                __reg1 = null;
            }
            ++__reg5;
        }
        __reg7 = null;
        __reg6 = null;
        threeTierPage = null;
    }

    static function parseTwoTierPageInfo(twoTierPage)
    {
        var __reg7 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml").childNodes;
        var __reg6 = null;
        var __reg5 = 0;
        while (__reg5 < __reg7.length) 
        {
            __reg6 = __reg7[__reg5];
            if (__reg6.nodeName == "page") 
            {
                var __reg4 = __reg6.childNodes;
                var __reg1 = null;
                var __reg3 = 0;
                while (__reg3 < __reg4.length) 
                {
                    __reg1 = __reg4[__reg3];
                    if (__reg1.nodeName == "page_id") 
                    {
                        twoTierPage.pageId = Number(__reg1.firstChild.nodeValue);
                    }
                    else if (__reg1.nodeName == "page_title") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parsePageTitleTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "background_image") 
                    {
                        twoTierPage.backImgUrl = __reg1.firstChild.nodeValue;
                    }
                    else if (__reg1.nodeName == "message") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseMessageTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "topright_logo") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseLogoTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "advertisement") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseAdTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "listing_indx_text") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseListingIdxTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "ticker") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTickerTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "weather") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseWeatherTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "time_area") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTimeAreaTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "search_links") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseSearchLinksTag(__reg1, twoTierPage);
                    }
                    else if (__reg1.nodeName == "Tier_1") 
                    {
                        twoTierPage.tier1.parseTier(twoTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "MatrixTier") 
                    {
                        twoTierPage.tier2.parseTier(twoTierPage.tier2, __reg1);
                    }
                    else if (__reg1.nodeName == "DetailedMatrixTier") 
                    {
                        twoTierPage.tier2.parseTier(twoTierPage.tier2, __reg1);
                    }
                    else if (__reg1.nodeName == "GroupTier") 
                    {
                        twoTierPage.tier2.parseTier(twoTierPage.tier2, __reg1);
                    }
                    else if (__reg1.nodeName == "CategoryTier") 
                    {
                        twoTierPage.tier2.parseTier(twoTierPage.tier2, __reg1);
                    }
                    else if (__reg1.nodeName == "vod_response_link") 
                    {
                        twoTierPage.vodResponseLink = __reg1.firstChild.nodeValue;
                    }
                    ++__reg3;
                }
                __reg4 = null;
                __reg1 = null;
            }
            ++__reg5;
        }
        __reg7 = null;
        __reg6 = null;
        twoTierPage = null;
    }

    static function parseSingleTierPageInfo(singleTierPage)
    {
        var __reg10 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.xml.firstChild, "/xml").childNodes;
        var __reg8 = null;
        var __reg9 = 0;
        while (__reg9 < __reg10.length) 
        {
            __reg8 = __reg10[__reg9];
            if (__reg8.nodeName == "page") 
            {
                var __reg6 = __reg8.childNodes;
                var __reg1 = null;
                __reg4 = 0;
                while (__reg4 < __reg6.length) 
                {
                    __reg1 = __reg6[__reg4];
                    if (__reg1.nodeName == "page_id") 
                    {
                        singleTierPage.pageId = Number(__reg1.firstChild.nodeValue);
                    }
                    else if (__reg1.nodeName == "page_title") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parsePageTitleTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "background_image") 
                    {
                        singleTierPage.backImgUrl = __reg1.firstChild.nodeValue;
                    }
                    else if (__reg1.nodeName == "message") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseMessageTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "topright_logo") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseLogoTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "advertisement") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseAdTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "listing_indx_text") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseListingIdxTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "ticker") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTickerTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "weather") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseWeatherTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "time_area") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTimeAreaTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "search_links") 
                    {
                        com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseSearchLinksTag(__reg1, singleTierPage);
                    }
                    else if (__reg1.nodeName == "Tier_1") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "MatrixTier") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "DetailedMatrixTier") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "CategoryTier") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "RotationTier") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "MultiRowTier") 
                    {
                        singleTierPage.tier1.parseTier(singleTierPage.tier1, __reg1);
                    }
                    else if (__reg1.nodeName == "vod_response_link") 
                    {
                        singleTierPage.vodResponseLink = __reg1.firstChild.nodeValue;
                    }
                    ++__reg4;
                }
                __reg6 = null;
                __reg1 = null;
            }
            else if (__reg8.nodeName == "tier_info") 
            {
                var __reg7 = __reg8.childNodes;
                var __reg3 = null;
                var __reg4 = 0;
                while (__reg4 < __reg7.length) 
                {
                    __reg3 = __reg7[__reg4];
                    if (__reg3.nodeName == "item_startidx") 
                    {
                        singleTierPage.tier1.itemsStartIdx = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "total_items") 
                    {
                        singleTierPage.totalItems = Number(__reg3.firstChild.nodeValue);
                    }
                    else if (__reg3.nodeName == "items_link") 
                    {
                        singleTierPage.itemsLink = __reg3.firstChild.nodeValue;
                    }
                    else if (__reg3.nodeName == "type") 
                    {
                        singleTierPage.type = __reg3.firstChild.nodeValue;
                    }
                    else if (__reg3.nodeName == "playlist_id") 
                    {
                        var __reg5 = __reg3.firstChild.nodeValue;
                        singleTierPage.playlistId = __reg5.split(",");
                        __reg5 = null;
                    }
                    else if (__reg3.nodeName == "load_as2_ytplayer") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer = Boolean(Number(__reg3.firstChild.nodeValue));
                    }
                    ++__reg4;
                }
                __reg7 = null;
                __reg3 = null;
            }
            ++__reg9;
        }
        __reg10 = null;
        __reg8 = null;
        singleTierPage = null;
    }

    static function parseChannelItem(channelItem, channelNode)
    {
        var __reg4 = channelNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                channelItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                channelItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                channelItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                channelItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                channelItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "gid") 
            {
                channelItem.groupId = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "protected") 
            {
                channelItem.itemProtected = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "restrict_link") 
            {
                channelItem.restrictLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sub_status") 
            {
                channelItem.subscriptionStatus = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "description") 
            {
                channelItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "response_link") 
            {
                channelItem.responseLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "program_listing") 
            {
                channelItem.itemProgramListing = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "program_guide") 
            {
                channelItem.itemProgramGuideLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "category_id") 
            {
                channelItem.categoryId = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parsePopupTag(__reg1, channelItem);
            }
            else if (__reg1.nodeName == "path") 
            {
                channelItem.itemPath = __reg1.firstChild.nodeValue;
                if (channelItem.itemPath == null || channelItem.itemPath == undefined) 
                {
                    channelItem.itemPath = "-";
                }
            }
            ++__reg3;
        }
        channelNode = null;
        channelItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseContentItem(contentItem, contentNode)
    {
        var __reg4 = contentNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                contentItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                contentItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                contentItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                contentItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                contentItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "views") 
            {
                contentItem.itemViews = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "episode_number") 
            {
                contentItem.episode = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "part_number") 
            {
                contentItem.part = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "protected") 
            {
                contentItem.itemProtected = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "restrict_link") 
            {
                contentItem.restrictLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "description") 
            {
                contentItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "response_link") 
            {
                contentItem.responseLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "duration") 
            {
                contentItem.itemDuration = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "category") 
            {
                contentItem.itemCategory = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parsePopupTag(__reg1, contentItem);
            }
            else if (__reg1.nodeName == "info") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseItemInfo(__reg1, contentItem);
            }
            else if (__reg1.nodeName == "path") 
            {
                contentItem.itemPath = __reg1.firstChild.nodeValue;
                if (contentItem.itemPath == null || contentItem.itemPath == undefined) 
                {
                    contentItem.itemPath = "-";
                }
            }
            ++__reg3;
        }
        contentNode = null;
        contentItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseCategoryItem(categoryItem, categoryNode)
    {
        var __reg4 = categoryNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                categoryItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                categoryItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                categoryItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                categoryItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "item_image") 
            {
                categoryItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "description") 
            {
                categoryItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parsePopupTag(__reg1, categoryItem);
            }
            else if (__reg1.nodeName == "announcements") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseAnnouncementsTag(__reg1, categoryItem);
            }
            else if (__reg1.nodeName == "cache") 
            {
                categoryItem.cache = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "path") 
            {
                categoryItem.itemPath = __reg1.firstChild.nodeValue;
                if (categoryItem.itemPath == null || categoryItem.itemPath == undefined) 
                {
                    categoryItem.itemPath = "-";
                }
            }
            ++__reg3;
        }
        categoryNode = null;
        categoryItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseGroupSubItem(groupSubItem, groupNode)
    {
        var __reg4 = groupNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                groupSubItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                groupSubItem.groupName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                groupSubItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                groupSubItem.subscriptionLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                groupSubItem.groupImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "date_added") 
            {
                groupSubItem.creationDate = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "date_updated") 
            {
                groupSubItem.modificationDate = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "members") 
            {
                groupSubItem.members = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "description") 
            {
                groupSubItem.description = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sub_status") 
            {
                groupSubItem.subscriptionStatus = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "channels_link") 
            {
                groupSubItem.channelsLink = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        groupNode = null;
        groupSubItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseChannelSubItem(channelSubItem, channelSuNode)
    {
        var __reg4 = channelSuNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                channelSubItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                channelSubItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                channelSubItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                channelSubItem.subscriptionLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                channelSubItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "date_added") 
            {
                channelSubItem.creationDate = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "views") 
            {
                channelSubItem.views = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "description") 
            {
                channelSubItem.description = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sub_status") 
            {
                channelSubItem.subscriptionStatus = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg3;
        }
        channelSuNode = null;
        channelSubItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseAreaTag(tier, areaNode)
    {
        var __reg4 = areaNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "startx") 
            {
                tier.areaStartX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                tier.areaStartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                tier.areaWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                tier.areaHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg4 = null;
        __reg1 = null;
        tier = null;
        areaNode = null;
    }

    static function parseItemContainerTag(tier, itemContainerNode)
    {
        var __reg4 = itemContainerNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                tier.containerStartX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                tier.containerStartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                tier.containerWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                tier.containerHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_selector") 
            {
                tier.selectorUrl = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        tier = null;
        itemContainerNode = null;
    }

    static function parsePopupTag(popupNode, item)
    {
        if (popupNode != null && popupNode != undefined) 
        {
            item.deletePopupButton();
            item.isItemPopUp = true;
            item.popUpType = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/type").firstChild.nodeValue;
            item.popUpMsg = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/message").firstChild.nodeValue;
            var __reg4 = mx.xpath.XPathAPI.selectNodeList(popupNode, "/popup/buttons/button");
            var __reg3 = null;
            var __reg1 = 0;
            while (__reg1 < __reg4.length) 
            {
                __reg3 = __reg4[__reg1];
                var __reg2 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/button/text").firstChild.nodeValue;
                item.addPopupButton(__reg2);
                __reg2 = null;
                ++__reg1;
            }
            __reg4 = null;
            __reg3 = null;
        }
        popupNode = null;
        item = null;
    }

    static function parseItemInfo(itemInfoNode, item)
    {
        var __reg5 = itemInfoNode.childNodes;
        var __reg1 = null;
        item.itemInfo = new com.jadoo.as2.JadooPlus.Views.TierItems.ItemInfo();
        var __reg3 = 0;
        while (__reg3 < __reg5.length) 
        {
            __reg1 = __reg5[__reg3];
            if (__reg1.nodeName == "image") 
            {
                item.itemInfo.imageUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "genre") 
            {
                item.itemInfo.genre = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "producer") 
            {
                item.itemInfo.producer = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "director") 
            {
                item.itemInfo.director = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "cast") 
            {
                item.itemInfo.cast = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo1_title") 
            {
                item.itemInfo.shortInfo1Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo1") 
            {
                item.itemInfo.shortInfo1 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo2_title") 
            {
                item.itemInfo.shortInfo2Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo2") 
            {
                item.itemInfo.shortInfo2 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo3_title") 
            {
                item.itemInfo.shortInfo3Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo3") 
            {
                item.itemInfo.shortInfo3 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo4_title") 
            {
                item.itemInfo.shortInfo4Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo4") 
            {
                item.itemInfo.shortInfo4 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "linfo_title") 
            {
                item.itemInfo.longInfoTitle = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "linfo") 
            {
                item.itemInfo.longInfo = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "songs_playlist") 
            {
                var __reg4 = __reg1.firstChild.nodeValue;
                item.itemInfo.playlistIds = __reg4.split(",");
                __reg4 = null;
            }
            else if (__reg1.nodeName == "songs_playlist_type") 
            {
                item.itemInfo.playlistType = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg5 = null;
        __reg1 = null;
        itemInfoNode = null;
        item = null;
    }

    static function parseAnnouncementsTag(itemAnnouncementNode, item)
    {
        var __reg3 = mx.xpath.XPathAPI.selectNodeList(itemAnnouncementNode, "/announcements/announcement");
        if (__reg3.length > 0) 
        {
            var __reg2 = null;
            item.announcements = new Array();
            var __reg1 = 0;
            while (__reg1 < __reg3.length) 
            {
                __reg2 = __reg3[__reg1];
                item.announcements[__reg1] = {date: mx.xpath.XPathAPI.selectSingleNode(__reg2, "/announcement/ann_date").firstChild.nodeValue, text: mx.xpath.XPathAPI.selectSingleNode(__reg2, "/announcement/ann_text").firstChild.nodeValue};
                ++__reg1;
            }
            __reg2 = null;
        }
        __reg3 = null;
    }

    static function getItemsStartIdx()
    {
        return com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.itemsStartIdx;
    }

}

//Sprite 662
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Page.ThreeTierPage extends com.jadoo.as2.JadooPlus.Views.Page.ParentPage
{
    var tier1 = null;
    var tier2 = null;
    var tier3 = null;

    function ThreeTierPage()
    {
        super();
        var __reg5 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier1Type();
        var __reg3 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier2Type();
        var __reg4 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier3Type();
        if ((__reg0 = __reg5) === "Tier_1") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
        }
        else if (__reg0 === "GroupTier") 
        {
            this.tier1 = new com.jadoo.as2.MyJadoo.GroupSubTier();
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
        }
        if ((__reg0 = __reg3) === "Tier_1") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
        }
        else if (__reg0 === "GroupTier") 
        {
            this.tier2 = new com.jadoo.as2.MyJadoo.GroupSubTier();
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
        }
        if ((__reg0 = __reg4) === "Tier_1") 
        {
            this.tier3 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier3 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier3 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier3 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
        }
        else if (__reg0 === "GroupTier") 
        {
            this.tier3 = new com.jadoo.as2.MyJadoo.GroupSubTier();
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier3 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
        }
        __reg5 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function destroy()
    {
        if (this.tier1 != null) 
        {
            this.tier1.destroy();
            delete this.tier1;
            this.tier1 = null;
        }
        if (this.tier2 != null) 
        {
            this.tier2.destroy();
            delete this.tier2;
            this.tier2 = null;
        }
        if (this.tier3 != null) 
        {
            this.tier3.destroy();
            delete this.tier3;
            this.tier3 = null;
        }
        super.destroy();
    }

}

//Sprite 663
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var containerStartX: Number = 0;
    var containerStartY: Number = 0;
    var containerWidth: Number = 0;
    var containerHeight: Number = 0;
    var listingIdxX = null;
    var listingIdxY = null;
    var areaStartX: Number = 0;
    var areaStartY: Number = 0;
    var areaWidth: Number = 0;
    var areaHeight: Number = 0;
    var selectorUrl = null;
    var itemsLink = null;
    var totalItems: Number = 0;
    var maxItems: Number = 0;
    var itemsStartIdx: Number = 0;
    var contentType = null;
    var playContinuous: String = "no";
    var showInfo: Boolean = false;
    var isEpgItem: Boolean = false;
    var infoTitleTxtFormat = null;
    var infoTxtFormat = null;
    var isXmlPlaylist: Boolean = false;
    var parentMC = null;
    var viewBaseMC = null;
    var viewMC = null;
    var tierBaseMC = null;
    var itemContainerMC = null;
    var loadingMC = null;
    var loadingSignMC = null;
    var fn = null;
    var keyListener = null;
    var currentItemIdx: Number = 0;
    var categoryToJump: Number = 0;
    var textFormat = null;
    var playMovieSong: Boolean = false;
    var movieSongItem = null;
    var contentPlayer = null;
    var livePlayer = null;
    var playerAction: String = "Stop";
    var buttonPressed: String = "Stop";
    var isViewVisible: Boolean = true;
    var tierItems = null;
    var tierType = null;
    var onTierEvent = null;
    var isEnabled: Boolean = false;
    var isMenuEnabled: Boolean = false;
    var previousItemStartIdx = null;
    var previousItemIdx = null;
    var prePreviousItemIdx = null;
    var epgItem = null;
    var channelBarActive: Boolean = false;
    var epgEnabled: Boolean = false;
    var nextPrevEnabled: Boolean = false;
    var selectorLoader = null;
    var selectorLoaderListener = null;
    var pageTitle = null;
    var pageId = null;
    var currentCategoryTitle = null;
    var selectedItemIdx: Number = 0;
    var grandParentIdx = null;
    var parentIdx = null;
    var parentCurrentItemIdx = null;
    var parentId = null;
    var menuHandler = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var epg = null;
    var epgLink = null;
    var isSubscriptionMsg: Boolean = false;
    var subscriptionMsg = null;
    var xmlObjectIndex: Number = 0;
    var hidePopUp: Boolean = false;
    var itemName = null;
    var passwrdSettings = null;
    var searchHelpLink = null;
    var searchResultsLink = null;
    var searching = null;
    var isChannelItem: Boolean = false;
    var channelItem = null;
    var itemIndicies = null;
    var itemPool = null;
    var initialItems: Boolean = true;
    var errorLoadingTier: Boolean = false;
    var selectedItem = null;
    var chnlBarPgeChng: Boolean = false;
    var msgBox = null;
    var resumeMsgBox = null;
    var reLoadPage: Boolean = false;
    var channelToJump: Number = 0;
    var selectedVisible: Boolean = true;
    var resumeMovie: Boolean = false;
    var youtubeParser = null;
    var currentItemResume = null;
    var channelId = null;
    var channelName = null;
    var channelType = null;
    var channelLink = null;
    var channelResponseLink = null;
    var channelEpgLink = null;
    var categoryId = null;
    var categoryPopupType = null;
    var categoryPopupMsg = null;
    var categoryPopupBtns = null;
    var isChannelItemPopup: Boolean = false;
    var dailymotionParser = null;
    var xmlPlaylist = null;
    var isFavoriteDeleted = null;
    var isFavoritesCategory: Boolean = false;
    var vodResponseLink = null;
    var adEnabled: Boolean = false;
    var pageAdItem = null;
    var movieItem = null;
    var wasPopupEnabled: Boolean = false;
    var parseTier = null;
    var saveTierItems = null;
    var parseTierItems = null;

    function ParentTier()
    {
        this.fn = {onFetchItemDirectLink: mx.utils.Delegate.create(this, this.onFetchItemDirectLink), onFetchNextItemDirectLink: mx.utils.Delegate.create(this, this.onFetchNextItemDirectLink), onFetchPrevItemDirectLink: mx.utils.Delegate.create(this, this.onFetchPrevItemDirectLink)};
        this.keyListener = new Object();
        this.onTierEvent = new com.BigRoom.Event();
        this.selectorLoader = new MovieClipLoader();
        this.selectorLoaderListener = new Object();
        this.selectorLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadSelector);
        this.selectorLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadSelectorError);
        this.selectorLoader.addListener(this.selectorLoaderListener);
    }

    function setCurrentItemsStartIdx(itemsStartIdx)
    {
        this.itemsStartIdx = itemsStartIdx;
    }

    function draw()
    {
    }

    function terminateDisplay()
    {
    }

    function getItemsCount()
    {
        return this.tierItems.length;
    }

    function getCurrentItemName()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName;
    }

    function getCurrentItemLink()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink;
    }

    function getCurrentItemType()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType;
    }

    function getSelectedItemType()
    {
        return this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemType;
    }

    function getCurrentItemIdx()
    {
        return this.currentItemIdx;
    }

    function getItemStartIdx()
    {
        return this.itemsStartIdx;
    }

    function getSelectedItemIdx()
    {
        return -1;
    }

    function getCurrentItemId()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId;
    }

    function getItemGroupId()
    {
        return -1;
    }

    function getItemSubscriptionStatus()
    {
        return -1;
    }

    function isHidden()
    {
        return !this.tierBaseMC._visible;
    }

    function getCurrentItemResponseLink()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink;
    }

    function getTierName()
    {
        return this.tierType;
    }

    function isSelectorLoaded()
    {
        return this.tierBaseMC.selectorMC;
    }

    function isChannelBarActive()
    {
        return this.channelBarActive;
    }

    function isSelectedVisible()
    {
        return this.selectedVisible;
    }

    function getCurrentItemStartIdx(currentIdx)
    {
        return Math.floor(currentIdx / this.maxItems) * this.maxItems;
    }

    function getContentType()
    {
        return this.contentType;
    }

    function disable()
    {
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
    }

    function setItemStartIdx(currentIdx)
    {
        this.itemsStartIdx = Math.floor(currentIdx / this.maxItems) * this.maxItems;
    }

    function selectItem(selectedItemId)
    {
    }

    function unSelectItem(selectedItemId)
    {
    }

    function itemHighlight(itemIdx)
    {
    }

    function itemUnHighlight(itemIdx)
    {
    }

    function displayArrows()
    {
    }

    function loadNextItem()
    {
    }

    function loadPreviousItem()
    {
    }

    function channelBarPageChange()
    {
    }

    function drawPage()
    {
    }

    function setParentIdx(parentIdx)
    {
        this.parentIdx = parentIdx;
    }

    function setParentCurrentItemIdx(parentCurrentItemIdx)
    {
        this.parentCurrentItemIdx = parentCurrentItemIdx;
    }

    function notifyViewToProceed(selectedItemId)
    {
    }

    function getCurrentItemItemsLink()
    {
        return this.itemsLink;
    }

    function drawFavoriteIcon(itemIdx)
    {
    }

    function setSelectedItemIdx(selectedItemId)
    {
    }

    function removeFavoriteIcon(itemIdx)
    {
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        this.parentMC = parentMC;
        this.viewBaseMC = viewBaseMC;
        this.viewMC = viewMC;
        this.pageTitle = pageTitle;
        this.pageId = pageId;
        this.searchHelpLink = searchHelpLink;
        this.searchResultsLink = searchResultsLink;
        if (this.tierType == "Tier1") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("tier1BaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "Tier2") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("tier2BaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "MatrixTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("gridBaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "DetailedMatrixTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("CardTierBaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "GroupSubTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("GroupTierBaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "CategoryTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("categoryTierBaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "RotationTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("rotationTierBaseMC", viewMC.getNextHighestDepth());
        }
        else if (this.tierType == "MultiRowTier") 
        {
            this.tierBaseMC = viewMC.createEmptyMovieClip("multiRowTierBaseMC", viewMC.getNextHighestDepth());
        }
        var __reg3 = this.tierBaseMC.attachMovie("tierSelector", "tierSelectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.areaStartX;
        __reg3._y = this.areaStartY;
        __reg3._width = this.areaWidth;
        __reg3._height = this.areaHeight;
        __reg3._visible = false;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        __reg3 = null;
        parentMC = null;
        viewBaseMC = null;
        viewMC = null;
        pageTitle = null;
        pageId = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        this.removeLoadingClip();
        this.removeLoadingSign();
        this.destroyTierItems();
        if (this.epg != null) 
        {
            this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
            this.epg.destroy();
            delete this.epg;
            this.epg = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.infoTitleTxtFormat != null) 
        {
            delete this.infoTitleTxtFormat;
            this.infoTitleTxtFormat = null;
        }
        if (this.infoTxtFormat != null) 
        {
            delete this.infoTxtFormat;
            this.infoTxtFormat = null;
        }
        if (this.channelItem != null) 
        {
            this.isChannelItem = false;
            this.channelItem.destroy();
            delete this.channelItem;
            this.channelItem = null;
        }
        if (this.epgItem != null) 
        {
            this.epgEnabled = false;
            this.epgItem.destroy();
            delete this.epgItem;
            this.epgItem = null;
        }
        if (this.searching != null) 
        {
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
        }
        delete this.onTierEvent;
        this.selectorLoader.removeListener(this.selectorLoaderListener);
        delete this.selectorLoader;
        delete this.selectorLoaderListener;
        this.currentCategoryTitle = null;
        this.searchHelpLink = null;
        this.searchResultsLink = null;
        this.fn = null;
        this.selectorLoader = null;
        this.selectorLoaderListener = null;
        this.onTierEvent = null;
        this.itemContainerMC = null;
        this.tierBaseMC = null;
        this.viewMC = null;
        this.viewBaseMC = null;
        this.parentMC = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onTierEvent") 
        {
            this.onTierEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onTierEvent") 
        {
            this.onTierEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function hideTier()
    {
        this.tierBaseMC._visible = false;
    }

    function showTier()
    {
        this.tierBaseMC._visible = true;
    }

    function getNumPages()
    {
        if (this.maxItems == 0) 
        {
            return 1;
        }
        return Math.ceil(this.totalItems / this.maxItems);
    }

    function destroyTierItems()
    {
        if (this.tierItems != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.tierItems.length) 
            {
                this.tierItems[__reg2].destroy();
                delete this.tierItems[__reg2];
                this.tierItems[__reg2] = null;
                ++__reg2;
            }
            delete this.tierItems;
            this.tierItems = null;
        }
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        if (netStatus == "Down") 
        {
            if (this.contentPlayer != null) 
            {
                this.contentPlayer.stopPlayer();
            }
            if (this.livePlayer != null) 
            {
                this.livePlayer.streamStop();
            }
            if (this.xmlPlaylist != null) 
            {
                this.xmlPlaylist.forceStop();
            }
        }
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        if (this.tierType = "Tier1") 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            return;
        }
        if (this.tierType = "Tier2") 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            return;
        }
        if (this.tierType = "MatrixTier") 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        }
    }

    function enableView()
    {
        this.buttonPressed = "Stop";
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Enable_View");
        }
        this.removeLoadingSign();
        this.isViewVisible = true;
        this.channelBarActive = false;
        this.isChannelItem = false;
        this.viewBaseMC._visible = true;
        if (!this.playMovieSong) 
        {
            this.onTierEvent.notify("disableChannelBar");
            this.onTierEvent.notify("onEnableView");
        }
        if (this.isEnabled) 
        {
            this.itemHighlight(this.currentItemIdx);
            if (this.playMovieSong) 
            {
                return;
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
    }

    function disableView()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Disable_View");
        }
        if (this.epgEnabled) 
        {
            this.epg.disable();
        }
        if (this.isEnabled) 
        {
            this.itemUnHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        this.viewBaseMC._visible = false;
        if (this.playMovieSong) 
        {
            return;
        }
        this.onTierEvent.notify("onDisableView");
    }

    function onLivePlayerEvent()
    {
        var __reg3 = arguments;
        if ((__reg0 = __reg3[0]) === "livePlayerError") 
        {
            this.stopPlayback();
            if (this.epgEnabled) 
            {
                if (__reg3[1] == null) 
                {
                    if (this.isChannelItem) 
                    {
                        this.epg.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY);
                    }
                    else 
                    {
                        this.epg.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.itemName);
                    }
                }
                else 
                {
                    this.epg.displayMessage(__reg3[1]);
                }
                this.isChannelItem = false;
                this.epg.enable();
            }
            else 
            {
                this.enableView();
                if (__reg3[1] == null) 
                {
                    if (this.isChannelItem) 
                    {
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY);
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.itemName);
                    }
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", __reg3[1]);
                }
                this.isChannelItem = false;
            }
        }
        else if (__reg0 === "livePlayerNext") 
        {
            if (this.nextPrevEnabled) 
            {
                this.playerAction = "Next";
                this.buttonPressed = "Next";
                if (!this.isXmlPlaylist) 
                {
                    this.livePlayer.streamStop();
                }
            }
        }
        else if (__reg0 === "livePlayerPrev") 
        {
            if (this.nextPrevEnabled) 
            {
                this.playerAction = "Prev";
                this.buttonPressed = "Prev";
                if (!this.isXmlPlaylist) 
                {
                    this.livePlayer.streamStop();
                }
            }
        }
        else if (__reg0 === "channelChange") 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Jump_To_" + this.categoryToJump + " : " + this.channelName);
            }
            this.playerAction = "ChannelChange";
            this.categoryToJump = __reg3[1];
            this.channelToJump = __reg3[2];
            this.channelId = __reg3[3];
            this.channelName = __reg3[4];
            this.channelType = __reg3[5];
            this.channelLink = __reg3[6];
            this.channelResponseLink = __reg3[7];
            this.channelEpgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + __reg3[8];
            if (this.categoryId == __reg3[8]) 
            {
                this.categoryPopupType = null;
                this.categoryPopupMsg = null;
                this.categoryPopupBtns = null;
            }
            else 
            {
                this.categoryId = __reg3[8];
                this.categoryPopupType = __reg3[9];
                this.categoryPopupMsg = __reg3[10];
                this.categoryPopupBtns = __reg3[11];
            }
            if (!this.isXmlPlaylist) 
            {
                this.livePlayer.streamStop();
            }
        }
        else if (__reg0 === "livePlayerStop") 
        {
            this.stopPlayback();
            this.isChannelItem = false;
            if (this.playerAction == "EpgSelected") 
            {
                if (this.pageTitle == "Search Results" || this.epgEnabled || this.isFavoritesCategory || this.parentIdx == -1 && this.grandParentIdx == -1) 
                {
                    this.channelBarActive = true;
                    this.isEpgItem = true;
                    this.playSearchedItem();
                }
                else 
                {
                    this.channelBarActive = true;
                    this.displayLoadingSign();
                    this.channelBarChannelChange(this.channelToJump);
                }
            }
            else if (this.playerAction == "Next") 
            {
                if (this.currentItemIdx == this.totalItems - 1) 
                {
                    this.enableView();
                }
                else 
                {
                    this.loadNextItem();
                }
            }
            else if (this.playerAction == "Prev") 
            {
                if (this.currentItemIdx <= 0) 
                {
                    this.enableView();
                }
                else if (this.currentItemIdx >= 0) 
                {
                    this.loadPreviousItem();
                }
            }
            else if (this.playerAction == "ChannelChange") 
            {
                if (this.pageTitle == "Search Results" || this.epgEnabled || this.isFavoritesCategory || this.parentIdx == -1 && this.grandParentIdx == -1) 
                {
                    this.channelBarActive = true;
                    this.playSearchedItem();
                }
                else 
                {
                    this.channelBarActive = true;
                    if (this.categoryToJump == this.parentCurrentItemIdx) 
                    {
                        this.displayLoadingSign();
                        this.channelBarChannelChange(this.channelToJump);
                    }
                    else 
                    {
                        this.onTierEvent.notify("ChangeCategory", this.categoryToJump, this.channelToJump);
                    }
                }
            }
            else 
            {
                if (this.epgEnabled) 
                {
                    this.epg.enable();
                }
                else 
                {
                    this.enableView();
                }
                this.isChannelItem = false;
            }
            this.playerAction = "Stop";
        }
        else if (__reg0 === "epgProgramPlay") 
        {
            this.playerAction = "EpgSelected";
            this.channelName = __reg3[1];
            this.channelType = __reg3[2];
            this.channelId = __reg3[3];
            this.channelLink = __reg3[4];
            this.channelResponseLink = __reg3[5];
            this.channelToJump = __reg3[6];
            this.categoryPopupType = null;
            this.categoryPopupMsg = null;
            this.categoryPopupBtns = null;
        }
        __reg3 = null;
    }

    function playSearchedItem()
    {
        this.displayLoadingSign();
        if (this.channelItem != null) 
        {
            this.channelItem.destroy();
            delete this.channelItem;
            this.channelItem = null;
        }
        this.channelItem = new com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem();
        this.channelItem.itemId = this.channelId;
        this.channelItem.itemName = this.channelName;
        this.channelItem.itemLink = this.channelLink;
        this.channelItem.itemType = this.channelType;
        this.channelItem.responseLink = this.channelResponseLink;
        this.channelItem.categoryId = this.categoryId;
        this.isChannelItem = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.categoryPopupType != null && this.categoryPopupType != undefined) 
        {
            this.channelItem.popUpType = this.categoryPopupType;
            this.channelItem.popUpMsg = this.categoryPopupMsg;
            this.channelItem.popUpButtons = this.categoryPopupBtns;
            this.isChannelItemPopup = true;
            this.removeLoadingSign();
            this.popUpMsgBox(this.channelItem);
            return;
        }
        this.channelItem.loadPlayItemXML(this.fn.onFetchItemDirectLink);
    }

    function channelBarCategoryChange(categoryNumber, channelNumber)
    {
        this.previousItemIdx = this.currentItemIdx;
        this.previousItemStartIdx = this.itemsStartIdx;
        this.channelBarActive = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnHighlight();
        this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnSelect();
        this.currentItemIdx = categoryNumber;
        this.selectedItemIdx = this.currentItemIdx;
        this.channelToJump = channelNumber;
        if (categoryNumber >= this.itemIndicies[0] && categoryNumber <= this.itemIndicies[this.itemIndicies.length - 1]) 
        {
            this.selectItem(this.currentItemIdx);
        }
        else 
        {
            this.categoryToJump = categoryNumber;
            this.itemsStartIdx = Math.floor(categoryNumber / this.maxItems) * this.maxItems;
            this.initialItems = true;
            this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
        }
        categoryNumber = null;
        channelNumber = null;
    }

    function channelBarChannelChange(channelNumber)
    {
        this.chnlBarPgeChng = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.channelBarPageChange(channelNumber);
        channelNumber = null;
    }

    function onContentPlayerError(errorMsg)
    {
        this.isEnabled = true;
        this.enableView();
        this.stopPlayback();
        if (this.playMovieSong) 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(errorMsg);
            this.returnToSongsList();
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", errorMsg);
        }
        errorMsg = null;
    }

    function onContentPlayerStop()
    {
        this.stopPlayback();
        var __reg2 = null;
        if (this.playerAction == "Next") 
        {
            if (this.currentItemIdx == this.totalItems - 1) 
            {
                this.isEnabled = true;
                this.enableView();
            }
            else if (this.currentItemIdx == this.totalItems - 1) 
            {
                this.enableView();
            }
            else 
            {
                this.playerAction = "Stop";
                this.loadNextItem();
            }
        }
        else if (this.playerAction == "Prev") 
        {
            if (this.currentItemIdx == 0 && this.itemsStartIdx == 0) 
            {
                this.isEnabled = true;
                this.enableView();
            }
            else if (this.currentItemIdx <= 0) 
            {
                this.enableView();
            }
            else if (this.currentItemIdx >= 0) 
            {
                this.playerAction = "Stop";
                this.loadPreviousItem();
            }
        }
        else 
        {
            this.isEnabled = true;
            this.enableView();
        }
        if (this.playMovieSong) 
        {
            this.returnToSongsList();
        }
        this.playerAction = "Stop";
        __reg2 = null;
    }

    function returnToSongsList()
    {
        this.playMovieSong = false;
        this.removeLoadingClip();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.parentMC.itemInfoBaseMC._visible = true;
        this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.songsList.startScrolling();
    }

    function onContentPlayerNext()
    {
        if (this.playContinuous == "yes") 
        {
            this.playerAction = "Next";
            this.buttonPressed = "Next";
            if (this.isXmlPlaylist) 
            {
                return;
            }
            this.contentPlayer.stopPlayer();
        }
    }

    function onContentPlayerPrev()
    {
        if (this.playContinuous == "yes") 
        {
            this.playerAction = "Prev";
            this.buttonPressed = "Prev";
            if (this.isXmlPlaylist) 
            {
                return;
            }
            this.contentPlayer.stopPlayer();
        }
    }

    function onContentPlayerEndPlayback()
    {
        if (this.playContinuous == "yes") 
        {
            this.playerAction = "Next";
        }
        else 
        {
            this.playerAction = "Stop";
        }
        this.onContentPlayerStop();
    }

    function onResumeMsgBoxBtnPress(button)
    {
        if (button == "Resume") 
        {
            this.resumeMovie = true;
        }
        else if (button == "Restart") 
        {
            this.resumeMovie = false;
        }
        var __reg2 = (this.isFavoritesCategory && this.parentIdx == 1) || this.movieItem.itemPath.split(">", 1)[0] == "Movies";
        this.contentPlayer.create(this.parentMC.vodPlayerMC, this.movieItem, this.playContinuous, null, this.resumeMovie, this.contentType, null, __reg2);
        this.contentPlayer.play();
        this.resumeMovie = false;
        __reg2 = null;
        this.movieItem = null;
        this.resumeMsgBox.destroy();
        this.resumeMsgBox = null;
        delete this.resumeMsgBox;
    }

    function startPlayback()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Start_Playback");
        }
        this.onTierEvent.notify("onStartPlayback");
        var __reg2 = null;
        this.disableView();
        this.removeLoadingSign();
        if (this.isChannelItem) 
        {
            __reg2 = this.channelItem;
        }
        else if (this.epgEnabled) 
        {
            __reg2 = this.epgItem;
        }
        else if (this.adEnabled) 
        {
            __reg2 = this.pageAdItem;
        }
        else if (this.playMovieSong) 
        {
            __reg2 = this.movieSongItem;
        }
        else 
        {
            __reg2 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (__reg2.itemType == "wmv" || __reg2.itemType == "flv") 
        {
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            var __reg6 = this.isFavoritesCategory || __reg2.itemPath.split(">", 1)[0] == "Movies";
            var __reg4 = com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODItemLink(__reg2.itemLink) == true && com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODItemId(__reg2.itemId) == true;
            if (__reg6 && __reg4) 
            {
                if (this.resumeMsgBox != null) 
                {
                    this.resumeMsgBox.removeListener("onButtonPress", this, this.onResumeMsgBoxBtnPress);
                    this.resumeMsgBox.destroy();
                    delete this.resumeMsgBox;
                    this.resumeMsgBox = null;
                }
                var __reg5 = this.parentMC.createEmptyMovieClip("resumeMsgBoxBaseMC", this.viewMC.getNextHighestDepth());
                var __reg7 = new Array("Resume", "Restart");
                this.movieItem = __reg2;
                this.resumeMsgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
                this.resumeMsgBox.addListener("onButtonPress", this, this.onResumeMsgBoxBtnPress);
                this.resumeMsgBox.create(__reg5, "Resume Movie", com.jadoo.as2.JadooPlus.Utils.Messages.RESUME_MOVIE, true, __reg7);
                __reg5 = null;
                __reg7 = null;
            }
            else 
            {
                var __reg3 = (this.isFavoritesCategory && this.parentIdx == 1) || __reg2.itemPath.split(">", 1)[0] == "Movies";
                this.contentPlayer.create(this.parentMC.vodPlayerMC, __reg2, this.playContinuous, null, this.resumeMovie, this.contentType, null, __reg3);
                this.contentPlayer.play();
                __reg3 = null;
            }
            __reg4 = null;
            __reg6 = null;
        }
        else if (__reg2.itemType == "dailymotion" || __reg2.itemType == "dailymotionsinglevideo") 
        {
            if (__reg2.streamLink == null) 
            {
                this.onDailymotionLinkError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_NOT_FOUND);
            }
            else 
            {
                __reg2.responseLink = this.vodResponseLink;
                this.displayLoadingSign();
                if (this.dailymotionParser != null) 
                {
                    this.dailymotionParser.removeListener("onLinkReady", this, this.onDailymotionLinkReady);
                    this.dailymotionParser.removeListener("onLinkError", this, this.onDailymotionLinkError);
                    this.dailymotionParser.removeListener("onNetDown", this, this.onDailymotionNetDown);
                    this.dailymotionParser.destroy();
                    delete this.dailymotionParser;
                    this.dailymotionParser = null;
                }
                this.dailymotionParser = new com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser();
                this.dailymotionParser.addListener("onLinkReady", this, this.onDailymotionLinkReady);
                this.dailymotionParser.addListener("onLinkError", this, this.onDailymotionLinkError);
                this.dailymotionParser.addListener("onNetDown", this, this.onDailymotionNetDown);
                this.dailymotionParser.parsePlayableLink(__reg2.streamLink);
            }
        }
        else if (__reg2.itemType == "youtube" || __reg2.itemType == "youtubesinglevideo") 
        {
            if (__reg2.streamLink == null) 
            {
                this.onYoutubeLinkError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_NOT_FOUND);
            }
            else 
            {
                __reg2.responseLink = this.vodResponseLink;
                if (com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == false) 
                {
                    this.displayLoadingSign();
                    if (this.youtubeParser != null) 
                    {
                        this.youtubeParser.removeListener("onLinkReady", this, this.onYoutubeLinkReady);
                        this.youtubeParser.removeListener("onLinkError", this, this.onYoutubeLinkError);
                        this.youtubeParser.removeListener("onNetDown", this, this.onYoutubeNetDown);
                        this.youtubeParser.destroy();
                        delete this.youtubeParser;
                        this.youtubeParser = null;
                    }
                    this.youtubeParser = new com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubeLinkParser();
                    this.youtubeParser.addListener("onLinkReady", this, this.onYoutubeLinkReady);
                    this.youtubeParser.addListener("onLinkError", this, this.onYoutubeLinkError);
                    this.youtubeParser.addListener("onNetDown", this, this.onYoutubeNetDown);
                    this.youtubeParser.parsePlayableLink(__reg2.streamLink);
                }
                else 
                {
                    this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
                    this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
                    this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
                    this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
                    this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
                    this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
                    this.contentPlayer.create(this.parentMC.vodPlayerMC, __reg2, this.playContinuous, null, this.resumeMovie, this.contentType, null);
                    this.contentPlayer.play();
                }
            }
        }
        else if (__reg2.itemType == "liveRTMP" || __reg2.itemType == "liveWMV") 
        {
            this.livePlayer = new com.jadoo.as2.JadooPlus.Player.LivePlayer.LivePlayer();
            this.livePlayer.onPlayerEvent.addListener(this, this.onLivePlayerEvent);
            if (this.epgEnabled || this.pageTitle == "Search Results" || this.isChannelItem || this.adEnabled) 
            {
                this.nextPrevEnabled = false;
            }
            else 
            {
                this.nextPrevEnabled = true;
            }
            if (this.contentType == "live" && this.nextPrevEnabled == true) 
            {
                this.livePlayer.create(this.parentMC, __reg2, this.parentCurrentItemIdx, this.currentItemIdx, this.nextPrevEnabled, null, this.epgLink, this.pageTitle, this.pageId, this.adEnabled);
            }
            else 
            {
                this.livePlayer.create(this.parentMC, __reg2, null, null, this.nextPrevEnabled, null, this.channelEpgLink, this.pageTitle, this.pageId, this.adEnabled);
            }
            this.livePlayer.streamPlay();
        }
        else if (__reg2.itemType == "livePlaylist" || __reg2.itemType == "vodPlaylist") 
        {
            if (this.epgEnabled || this.pageTitle == "Search Results" || this.isChannelItem || this.adEnabled) 
            {
                this.nextPrevEnabled = false;
            }
            else 
            {
                this.nextPrevEnabled = true;
            }
            this.xmlPlaylist = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.XmlPlaylist();
            this.isXmlPlaylist = true;
            this.xmlPlaylist.onXmlPlaylistEvent.addListener(this, this.onXmlPlayerEvent);
            if (__reg2.itemType == "livePlaylist") 
            {
                if (this.contentType == "live" && this.nextPrevEnabled == true) 
                {
                    this.xmlPlaylist.create(this.parentMC, __reg2, this.playContinuous, this.parentCurrentItemIdx, this.currentItemIdx, this.nextPrevEnabled, null, null, this.epgLink, this.pageTitle, this.pageId, this.adEnabled);
                }
                else 
                {
                    this.xmlPlaylist.create(this.parentMC, __reg2, this.playContinuous, null, null, this.nextPrevEnabled, null, null, this.channelEpgLink, this.pageTitle, this.pageId, this.adEnabled);
                }
            }
            else if (__reg2.itemType == "vodPlaylist") 
            {
                this.xmlPlaylist.create(this.parentMC, __reg2, this.playContinuous, null, null, null, this.contentType, this.resumeMovie, null, null, null);
            }
        }
        __reg2 = null;
    }

    function onDailymotionLinkReady()
    {
        var __reg4 = String(arguments[0]);
        var __reg3 = null;
        if (this.dailymotionParser != null) 
        {
            this.dailymotionParser.removeListener("onLinkReady", this, this.onDailymotionLinkReady);
            this.dailymotionParser.removeListener("onLinkError", this, this.onDailymotionLinkError);
            this.dailymotionParser.removeListener("onNetDown", this, this.onDailymotionNetDown);
            this.dailymotionParser.destroy();
            delete this.dailymotionParser;
            this.dailymotionParser = null;
        }
        this.removeLoadingSign();
        if (this.epgEnabled) 
        {
            __reg3 = this.epgItem;
        }
        else if (this.playMovieSong) 
        {
            __reg3 = this.movieSongItem;
        }
        else 
        {
            __reg3 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (__reg4 == "INVALID_RESPONSE") 
        {
            this.isEnabled = true;
            this.enableView();
            if (this.playMovieSong) 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.movieSongItem.itemName);
                this.returnToSongsList();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + __reg3.itemName);
            }
        }
        else 
        {
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            __reg3.streamLink = __reg4;
            this.contentPlayer.create(this.parentMC.vodPlayerMC, __reg3, this.playContinuous, null, this.resumeMovie, this.contentType, null);
            this.contentPlayer.play();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function onDailymotionLinkError()
    {
        var __reg4 = null;
        var __reg3 = arguments[0];
        if (this.dailymotionParser != null) 
        {
            this.dailymotionParser.removeListener("onLinkReady", this, this.onDailymotionLinkReady);
            this.dailymotionParser.removeListener("onLinkError", this, this.onDailymotionLinkError);
            this.dailymotionParser.removeListener("onNetDown", this, this.onDailymotionNetDown);
            this.dailymotionParser.destroy();
            delete (this.dailymotionParser);
            this.dailymotionParser = null;
        }
        this.removeLoadingSign();
        if (this.epgEnabled) 
        {
            __reg4 = this.epgItem;
        }
        else if (this.playMovieSong) 
        {
            __reg4 = this.movieSongItem;
        }
        else 
        {
            __reg4 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        this.isEnabled = true;
        this.enableView();
        if (this.playMovieSong) 
        {
            if (__reg3 == null) 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.movieSongItem.itemName);
            }
            else 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(__reg3);
            }
            this.returnToSongsList();
        }
        else if (__reg3 == null) 
        {
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + __reg4.itemName);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", __reg3);
        }
        __reg4 = null;
        __reg3 = null;
    }

    function onDailymotionNetDown()
    {
        if (this.dailymotionParser != null) 
        {
            this.dailymotionParser.removeListener("onLinkReady", this, this.onDailymotionLinkReady);
            this.dailymotionParser.removeListener("onLinkError", this, this.onDailymotionLinkError);
            this.dailymotionParser.removeListener("onNetDown", this, this.onDailymotionNetDown);
            this.dailymotionParser.destroy();
            delete this.dailymotionParser;
            this.dailymotionParser = null;
        }
        this.enableView();
        if (this.playMovieSong) 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(arguments[0]);
            this.returnToSongsList();
            return;
        }
        this.onTierEvent.notify("onDisplayMessage", arguments[0]);
    }

    function onYoutubeLinkReady()
    {
        var __reg4 = arguments[0];
        var __reg3 = null;
        if (this.youtubeParser != null) 
        {
            this.youtubeParser.removeListener("onLinkReady", this, this.onYoutubeLinkReady);
            this.youtubeParser.removeListener("onLinkError", this, this.onYoutubeLinkError);
            this.youtubeParser.removeListener("onNetDown", this, this.onYoutubeNetDown);
            this.youtubeParser.destroy();
            delete this.youtubeParser;
            this.youtubeParser = null;
        }
        this.removeLoadingSign();
        if (this.epgEnabled) 
        {
            __reg3 = this.epgItem;
        }
        else if (this.playMovieSong) 
        {
            __reg3 = this.movieSongItem;
        }
        else 
        {
            __reg3 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (__reg4 == "INVALID_RESPONSE") 
        {
            this.isEnabled = true;
            this.enableView();
            if (this.playMovieSong) 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.movieSongItem.itemName);
                this.returnToSongsList();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + __reg3.itemName);
            }
        }
        else 
        {
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            __reg3.streamLink = __reg4;
            this.contentPlayer.create(this.parentMC.vodPlayerMC, __reg3, this.playContinuous, null, this.resumeMovie, this.contentType, null);
            this.contentPlayer.play();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function onYoutubeLinkError()
    {
        var __reg3 = null;
        var __reg4 = arguments[0];
        if (this.youtubeParser != null) 
        {
            this.youtubeParser.removeListener("onLinkReady", this, this.onYoutubeLinkReady);
            this.youtubeParser.removeListener("onLinkError", this, this.onYoutubeLinkError);
            this.youtubeParser.removeListener("onNetDown", this, this.onYoutubeNetDown);
            this.youtubeParser.destroy();
            delete this.youtubeParser;
            this.youtubeParser = null;
        }
        this.removeLoadingSign();
        if (this.epgEnabled) 
        {
            __reg3 = this.epgItem;
        }
        else if (this.playMovieSong) 
        {
            __reg3 = this.movieSongItem;
        }
        else 
        {
            __reg3 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        this.isEnabled = true;
        this.enableView();
        if (this.playMovieSong) 
        {
            if (__reg4 == null) 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + __reg3.itemName);
            }
            else 
            {
                this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(__reg4);
            }
            this.returnToSongsList();
        }
        else if (__reg4 == null) 
        {
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + __reg3.itemName);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", __reg4);
        }
        __reg3 = null;
        __reg4 = null;
    }

    function onYoutubeNetDown()
    {
        if (this.youtubeParser != null) 
        {
            this.youtubeParser.removeListener("onLinkReady", this, this.onYoutubeLinkReady);
            this.youtubeParser.removeListener("onLinkError", this, this.onYoutubeLinkError);
            this.youtubeParser.removeListener("onNetDown", this, this.onYoutubeNetDown);
            this.youtubeParser.destroy();
            delete this.youtubeParser;
            this.youtubeParser = null;
        }
        this.enableView();
        if (this.playMovieSong) 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.displayMessage(arguments[0]);
            this.returnToSongsList();
            return;
        }
        this.onTierEvent.notify("onDisplayMessage", arguments[0]);
    }

    function stopPlayback()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Stop_Playback");
        }
        if (!this.playMovieSong) 
        {
            this.onTierEvent.notify("onStopPlayback");
        }
        var __reg2 = null;
        this.channelBarActive = false;
        if (this.isChannelItem) 
        {
            __reg2 = this.channelItem;
        }
        else if (this.epgEnabled) 
        {
            __reg2 = this.epgItem;
        }
        else if (this.adEnabled) 
        {
            __reg2 = this.pageAdItem;
            this.adEnabled = false;
            this.itemName = __reg2.itemName;
        }
        else if (this.playMovieSong) 
        {
            __reg2 = this.movieSongItem;
            this.itemName = __reg2.itemName;
        }
        else 
        {
            __reg2 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
            this.itemName = __reg2.itemName;
        }
        if (__reg2.itemType == "wmv" || __reg2.itemType == "flv" || __reg2.itemType == "youtube" || __reg2.itemType == "dailymotion" || __reg2.itemType == "youtubesinglevideo" || __reg2.itemType == "dailymotionsinglevideo") 
        {
            this.contentPlayer.onError.removeListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.removeListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.removeListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.removeListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.removeListener(this, this.onContentPlayerEndPlayback);
            this.contentPlayer.destroy();
            delete this.contentPlayer;
            this.contentPlayer = null;
            this.resumeMovie = false;
        }
        else if (__reg2.itemType == "livePlaylist" || __reg2.itemType == "vodPlaylist") 
        {
            this.xmlPlaylist.onXmlPlaylistEvent.removeListener(this, this.onXmlPlayerEvent);
            this.xmlPlaylist.destroy();
            delete this.xmlPlaylist;
            this.xmlPlaylist = null;
            this.isXmlPlaylist = false;
        }
        else if (__reg2.itemType == "liveRTMP" || __reg2.itemType == "liveWMV") 
        {
            this.livePlayer.onPlayerEvent.removeListener(this, this.onLivePlayerEvent);
            this.livePlayer.destroy();
            delete this.livePlayer;
            this.livePlayer = null;
        }
        if (this.isChannelItem) 
        {
            this.itemName = __reg2.itemName;
            this.channelItem.destroy();
            delete this.channelItem;
            this.channelItem = null;
        }
        else if (this.epgEnabled) 
        {
            this.itemName = __reg2.itemName;
            this.epgItem.destroy();
            delete this.epgItem;
            this.epgItem = null;
        }
        this.hidePopUp = false;
        __reg2 = null;
    }

    function restartMsg()
    {
        var __reg3 = this.parentMC.createEmptyMovieClip("msgBoxBaseMC", this.parentMC.getNextHighestDepth());
        var __reg2 = new Array("OK");
        this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        this.msgBox.addListener("onButtonPress", this, this.onRestartMsgButtonPress);
        this.msgBox.create(__reg3, "", com.jadoo.as2.JadooPlus.Utils.Messages.APP_RESTART, true, __reg2);
        __reg3 = null;
        false;
        __reg2 = null;
    }

    function onRestartMsgButtonPress(button)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onRestartMsgButtonPress);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        this.onTierEvent.notify("onAppRestart");
    }

    function onFetchItemDirectLink()
    {
        var __reg5 = arguments[0];
        var __reg6 = arguments[1];
        var __reg4 = null;
        if (this.isChannelItem) 
        {
            __reg4 = this.channelItem;
        }
        else if (this.epgEnabled) 
        {
            __reg4 = this.epgItem;
        }
        else if (this.adEnabled) 
        {
            __reg4 = this.pageAdItem;
        }
        else 
        {
            __reg4 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        this.removeLoadingSign();
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
        if (__reg5) 
        {
            this.onTierEvent.notify("onDisplayMessage", "");
            if (__reg4.appRestart) 
            {
                if (this.epgEnabled) 
                {
                    this.epg.displayMessage("");
                }
                this.restartMsg();
            }
            else if (__reg4.isActive == 0 || __reg4.isActive == -1 || __reg4.geoFilterAllowed == false) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("This item is no longer available. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "This item is no longer available");
                }
            }
            else if ((_global.currentApplication == "MyJadoo" || __reg4.appType == "MyJadoo") && (__reg4.channelSubStatus == 0 && __reg4.groupSubStatus == 0 && __reg4.existsInOwnerGrp == 0)) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("You are no longer subscribed to this channel. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "You are no longer subscribed to this item");
                }
            }
            else if (__reg4.isItemPopUp) 
            {
                this.isEnabled = false;
                this.isMenuEnabled = true;
                if (this.epgEnabled) 
                {
                    this.epg.removeLoadingMC();
                    this.popUpMsgBox(__reg4);
                    this.epg.displayMessage("");
                }
                else 
                {
                    this.popUpMsgBox(__reg4);
                }
            }
            else if (this.showInfo == true && __reg4.itemInfo != null) 
            {
                this.isEnabled = false;
                this.isMenuEnabled = true;
                this.onTierEvent.notify("onDisableView");
                this.displayInfoPage(__reg4);
            }
            else 
            {
                this.startPlayback();
            }
        }
        else 
        {
            if (__reg6) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_ITEM_DIRECT_LINK_TIMEOUT, this.tierType, this.pageTitle, this.pageId);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_ITEM_DIRECT_LINK_NOT_LOADED, this.tierType, this.pageTitle, this.pageId);
            }
            if (this.epgEnabled) 
            {
                this.isChannelItem = false;
                this.epg.removeLoadingMC();
                this.epg.addKeylistener();
                this.epg.enable();
                this.epg.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER);
            }
            else 
            {
                this.enableView();
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER_CHECK_CONNECTION);
            }
            if (this.adEnabled == true) 
            {
                this.adEnabled = false;
            }
        }
        __reg4 = null;
        __reg5 = null;
        __reg6 = null;
    }

    function displayInfoPage(currentItem)
    {
        currentItem.itemInfo.addListener(this, this.onItemsInfoEvent);
        if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODItemLink(currentItem.itemLink) == true && com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODItemId(currentItem.itemId) == true) 
        {
            currentItem.itemInfo.displayInfo(this.parentMC, currentItem.itemName, this.infoTitleTxtFormat, this.infoTxtFormat, true);
        }
        else 
        {
            currentItem.itemInfo.displayInfo(this.parentMC, currentItem.itemName, this.infoTitleTxtFormat, this.infoTxtFormat, false);
        }
        currentItem = null;
    }

    function onFetchNextItemDirectLink(success)
    {
        success = arguments[0];
        var __reg6 = arguments[1];
        var __reg4 = null;
        if (success == true) 
        {
            this.onTierEvent.notify("onDisplayMessage", "");
            __reg4 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
            if (this.tierItems[this.getItemIndex(this.currentItemIdx)].appRestart) 
            {
                this.restartMsg();
            }
            else if (__reg4.isActive == 0 || __reg4.isActive == -1 || __reg4.geoFilterAllowed == false) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("This item is no longer available. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "This item is no longer available");
                }
            }
            else if ((_global.currentApplication == "MyJadoo" || __reg4.appType == "MyJadoo") && (__reg4.channelSubStatus == 0 && __reg4.groupSubStatus == 0 && __reg4.existsInOwnerGrp == 0)) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("You are no longer subscribed to this channel. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "You are no longer subscribed to this item");
                }
            }
            else if (this.tierItems[this.getItemIndex(this.currentItemIdx)].isItemPopUp) 
            {
                if (__reg4.popUpType == "non-blocking") 
                {
                    this.isEnabled = false;
                    this.isMenuEnabled = true;
                    if (this.epgEnabled) 
                    {
                        this.epg.removeLoadingMC();
                        this.popUpMsgBox(__reg4);
                        this.epg.displayMessage("");
                    }
                    else 
                    {
                        this.popUpMsgBox(__reg4);
                    }
                }
                else if (this.currentItemIdx >= this.totalItems - 1) 
                {
                    this.enableView();
                }
                else 
                {
                    this.loadNextItem();
                }
            }
            else 
            {
                this.removeLoadingSign();
                this.startPlayback();
            }
        }
        else 
        {
            if (__reg6) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_NEXT_ITEM_DIRECT_LINK_TIMEOUT, this.tierType, this.pageTitle, this.pageId);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_NEXT_ITEM_DIRECT_LINK_NOT_LOADED, this.tierType, this.pageTitle, this.pageId);
            }
            this.enableView();
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER_CHECK_CONNECTION);
        }
        __reg4 = null;
        success = null;
        __reg6 = null;
    }

    function onFetchPrevItemDirectLink()
    {
        var __reg5 = arguments[0];
        var __reg6 = arguments[1];
        var __reg4 = null;
        if (__reg5 == true) 
        {
            this.onTierEvent.notify("onDisplayMessage", "");
            __reg4 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
            if (this.tierItems[this.getItemIndex(this.currentItemIdx)].appRestart) 
            {
                this.restartMsg();
            }
            else if (__reg4.isActive == 0 || __reg4.isActive == -1 || __reg4.geoFilterAllowed == false) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("This item is no longer available. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "This item is no longer available");
                }
            }
            else if ((_global.currentApplication == "MyJadoo" || __reg4.appType == "MyJadoo") && (__reg4.channelSubStatus == 0 && __reg4.groupSubStatus == 0 && __reg4.existsInOwnerGrp == 0)) 
            {
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                if (this.isFavoritesCategory) 
                {
                    this.deleteFavoriteMsgBox("You are no longer subscribed to this channel. Do you want to delete it from favorites?");
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", "You are no longer subscribed to this item");
                }
            }
            else if (this.tierItems[this.getItemIndex(this.currentItemIdx)].isItemPopUp) 
            {
                if (__reg4.popUpType == "non-blocking") 
                {
                    this.isEnabled = false;
                    this.isMenuEnabled = true;
                    if (this.epgEnabled) 
                    {
                        this.epg.removeLoadingMC();
                        this.popUpMsgBox(__reg4);
                        this.epg.displayMessage("");
                    }
                    else 
                    {
                        this.popUpMsgBox(__reg4);
                    }
                }
                else if (this.currentItemIdx == 0) 
                {
                    this.enableView();
                }
                else 
                {
                    this.loadPreviousItem();
                }
            }
            else 
            {
                this.removeLoadingSign();
                this.startPlayback();
            }
        }
        else 
        {
            if (__reg6) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_PREV_ITEM_DIRECT_LINK_TIMEOUT, this.tierType, this.pageTitle, this.pageId);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ON_FETCH_PREV_ITEM_DIRECT_LINK_NOT_LOADED, this.tierType, this.pageTitle, this.pageId);
            }
            this.enableView();
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER_CHECK_CONNECTION);
        }
        __reg4 = null;
        __reg5 = null;
        __reg6 = null;
    }

    function fetchItemDirectLink(onFetchItemDirectLink)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("FetchItemDirectLink_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName + "_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink);
        }
        if (this.adEnabled == true) 
        {
            this.pageAdItem.loadPlayItemXML(onFetchItemDirectLink);
            return;
        }
        if (this.currentItemIdx >= 0 && this.currentItemIdx <= this.totalItems - 1) 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].loadPlayItemXML(onFetchItemDirectLink);
            return;
        }
        if (this.currentItemIdx < 0) 
        {
            this.currentItemIdx = 0;
        }
        if (this.currentItemIdx > this.totalItems - 1) 
        {
            this.currentItemIdx = this.totalItems - 1;
        }
        this.enableView();
        this.onTierEvent.notify("onEnableView");
    }

    function onItemsInfoEvent()
    {
        var __reg3 = arguments[0];
        if (__reg3 == "watchMovie") 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.removeListener(this, this.onItemsInfoEvent);
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.removeInfo();
            if (this.netStatus == "Up") 
            {
                this.resumeMovie = arguments[1];
                this.startPlayback();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                this.isEnabled = true;
                this.isMenuEnabled = false;
                this.enableView();
            }
        }
        else if (__reg3 == "playSong") 
        {
            this.movieSongItem = arguments[1];
            this.removeLoadingClip();
            this.parentMC.itemInfoBaseMC._visible = false;
            if (this.movieSongItem.itemType == "youtube") 
            {
                this.movieSongItem.streamLink = this.movieSongItem.itemId;
            }
            else 
            {
                this.movieSongItem.streamLink = this.movieSongItem.itemLink;
            }
            this.playMovieSong = true;
            this.startPlayback();
        }
        else if (__reg3 == "exit") 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.removeListener(this, this.onItemsInfoEvent);
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemInfo.removeInfo();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.isEnabled = true;
            this.isMenuEnabled = false;
            this.enableView();
        }
        __reg3 = null;
    }

    function displayLoadingSign()
    {
        if (this.loadingSignMC == null) 
        {
            this.loadingSignMC = this.parentMC.attachMovie("loading", "loadingSignMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360, _width: 80, _height: 80});
        }
    }

    function removeLoadingSign()
    {
        if (this.loadingSignMC != null) 
        {
            removeMovieClip(this.loadingSignMC);
            this.loadingSignMC = null;
        }
    }

    function onEnterKey()
    {
        var __reg2 = null;
        if (this.epgEnabled) 
        {
            __reg2 = this.epgItem;
        }
        else 
        {
            __reg2 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.getItemProtectedStatus() == true && !com.jadoo.as2.JadooPlus.UserInfo.Passwords.isUserPasswrdNull() && __reg2.itemType == "container") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.passwrdSettings = new com.jadoo.as2.JadooPlus.UserInfo.PasswordSettings(this.viewMC);
            this.passwrdSettings.addListener("onCancel", this, this.onPasswrdSwitchToBaseView);
            this.passwrdSettings.addListener("onSwitchToBaseView", this, this.onPasswrdSwitchToBaseView);
            this.passwrdSettings.addListener("onStatusOK", this, this.onPasswrdStatusOK);
            this.passwrdSettings.updateUserPasswrd("Enter Password");
        }
        else 
        {
            this.processCurrentItem();
        }
        __reg2 = null;
    }

    function processCurrentItem()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Processing_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType);
        }
        if ((__reg0 = this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType) === "liveRTMP") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "liveWMV") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "wmv") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "flv") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "vodPlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "youtubesinglevideo") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "dailymotionsinglevideo") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "youtube") 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].streamLink = this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId;
            this.removeLoadingSign();
            this.startPlayback();
            return;
        }
        else if (__reg0 === "dailymotion") 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].streamLink = this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink;
            this.removeLoadingSign();
            this.startPlayback();
            return;
        }
        else if (__reg0 === "channel") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.create();
            com.jadoo.as2.MyJadoo.MyJadooSubscription.addListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeChannel(this.viewMC, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus);
            return;
        }
        else if (__reg0 !== "container") 
        {
            if (__reg0 !== "subscribe_channels") 
            {
                if (__reg0 !== "subscribe_groups") 
                {
                    if (__reg0 !== "dailymotionplaylist") 
                    {
                        if (__reg0 !== "youtubeplaylist") 
                        {
                            return;
                        }
                    }
                }
            }
        }
        if (this.tierItems[this.getItemIndex(this.currentItemIdx)].isItemPopUp) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.popUpMsgBox(this.tierItems[this.getItemIndex(this.currentItemIdx)]);
        }
        else if (this.netStatus == "Up") 
        {
            this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, null, false, "", false);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
        }
        return;
    }

    function onSubscriptionEvent()
    {
        var __reg6 = arguments;
        if (__reg6[0] == "message") 
        {
            this.onTierEvent.notify("onDisplayMessage", __reg6[1]);
        }
        else 
        {
            if (__reg6[0] == "cancel") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            }
            else 
            {
                if (__reg6[0] == "NETWORK_LINK_DOWN") 
                {
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.NETWORK_LINK_DOWN);
                    this.reLoadPage = false;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                }
                else if (__reg6[0] == "XML_LOAD_ERROR") 
                {
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER);
                    this.reLoadPage = false;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                }
                else 
                {
                    if (__reg6[0] == "success") 
                    {
                        if (this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus == 0) 
                        {
                            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_SUBSCRIBED_TO_CHANNEL);
                            this.isSubscriptionMsg = true;
                            this.subscriptionMsg = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_SUBSCRIBED_TO_CHANNEL;
                            this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus = 1;
                        }
                        else 
                        {
                            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_UNSUBSCRIBED_FROM_CHANNEL);
                            this.isSubscriptionMsg = true;
                            this.subscriptionMsg = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_UNSUBSCRIBED_FROM_CHANNEL;
                            this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus = 0;
                            var __reg7 = com.jadoo.as2.JadooPlus.Features.Favorites.getItemIdByName(this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName);
                            var __reg8 = com.jadoo.as2.JadooPlus.Features.Favorites.getItemTypeByName(this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName);
                            if (__reg7 != null && __reg8 != null) 
                            {
                                this.removeFavoriteIcon(this.currentItemIdx);
                                com.jadoo.as2.JadooPlus.Features.Favorites.removeFavoriteItem(0, __reg7, __reg8, _global.currentApplication);
                            }
                            __reg7 = null;
                            __reg8 = null;
                        }
                    }
                    else if (this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus == 0) 
                    {
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_SUBSCRIBE_TO_CHANNEL);
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_UNSUBSCRIBE_FROM_CHANNEL);
                    }
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                }
                if (this.reLoadPage) 
                {
                    --this.totalItems;
                    if (this.tierItems.length == 1 && this.currentItemIdx == 0) 
                    {
                        this.onTierEvent.notify("onReturnKey");
                    }
                    else 
                    {
                        var __reg5 = -1;
                        this.itemPool.removeItem(this.currentItemIdx);
                        var __reg4 = 0;
                        while (__reg4 < this.itemIndicies.length) 
                        {
                            if (this.currentItemIdx == this.itemIndicies[__reg4]) 
                            {
                                __reg5 = __reg4;
                            }
                            ++__reg4;
                        }
                        this.tierItems.splice(__reg5, 1);
                        this.drawPage();
                        __reg5 = null;
                        __reg4 = null;
                    }
                    this.reLoadPage = false;
                }
            }
            com.jadoo.as2.MyJadoo.MyJadooSubscription.removeListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.destroy();
        }
        __reg6 = null;
    }

    function onMenuHandlerClose()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.menuHandler.removeListener("onClose", this, this.onMenuHandlerClose);
        this.menuHandler.removeListener("onKeyEnter", this, this.onMenuHandlerEnterKey);
        this.menuHandler.destroy();
        delete this.menuHandler;
        this.menuHandler = null;
        this.isEnabled = true;
        this.isMenuEnabled = false;
    }

    function onMenuHandlerEnterKey()
    {
        var __reg3 = arguments;
        var __reg5 = __reg3[0];
        this.menuHandler.removeListener("onClose", this, this.onMenuHandlerClose);
        this.menuHandler.removeListener("onKeyEnter", this, this.onMenuHandlerEnterKey);
        this.menuHandler.destroy();
        delete this.menuHandler;
        this.menuHandler = null;
        this.isEnabled = true;
        this.isMenuEnabled = false;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (__reg5 == "Password") 
        {
            if (this.passwrdSettings != null) 
            {
                delete this.passwrdSettings;
                this.passwrdSettings = null;
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.passwrdSettings = new com.jadoo.as2.JadooPlus.UserInfo.PasswordSettings(this.parentMC);
            this.passwrdSettings.addListener("onCancel", this, this.onPasswrdSwitchToBaseView);
            this.passwrdSettings.addListener("onSwitchToBaseView", this, this.onPasswrdSwitchToBaseView);
            this.passwrdSettings.addListener("onStatusOK", this, this.onPasswrdStatusOK);
            var __reg4 = this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId;
            if (__reg3[1] == "Lock Item") 
            {
                this.passwrdSettings.addRemovePasswrdToItem(__reg4, "apply");
            }
            else if (__reg3[1] == "Unlock Item") 
            {
                this.passwrdSettings.addRemovePasswrdToItem(__reg4, "remove");
            }
            else 
            {
                this.passwrdSettings.updateUserPasswrd(__reg3[1]);
            }
            __reg4 = null;
        }
        else if (this.netStatus == "Up") 
        {
            if (__reg5 == "MyJadoo") 
            {
                if (__reg3[1] == "Unsubscribe Selected Item") 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    com.jadoo.as2.MyJadoo.MyJadooSubscription.create();
                    if (this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemType == "container") 
                    {
                        com.jadoo.as2.MyJadoo.MyJadooSubscription.addListener("onSubscriptionEvent", this, this.onGroupSubscriptionEvent);
                        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeToGroup(this.viewMC, this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemId, 1);
                    }
                    else 
                    {
                        com.jadoo.as2.MyJadoo.MyJadooSubscription.addListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
                        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeChannel(this.viewMC, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, 1);
                        this.reLoadPage = true;
                    }
                }
            }
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
        }
        __reg5 = null;
        __reg3 = null;
    }

    function onPasswrdSwitchToBaseView()
    {
        var __reg3 = arguments;
        this.onTierEvent.notify("onDisplayMessage", __reg3[1]);
        if (__reg3[0] == "yes" || __reg3[0] == "no") 
        {
            this.tierItems[this.getItemIndex(this.currentItemIdx)].itemProtected = __reg3[0];
        }
        this.passwrdSettings.removeListener("onCancel", this, this.onPasswrdSwitchToBaseView);
        this.passwrdSettings.removeListener("onSwitchToBaseView", this, this.onPasswrdSwitchToBaseView);
        this.passwrdSettings.removeListener("onStatusOK", this, this.onPasswrdStatusOK);
        this.passwrdSettings.destroy();
        delete this.passwrdSettings;
        this.passwrdSettings = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function onPasswrdStatusOK()
    {
        this.passwrdSettings.removeListener("onCancel", this, this.onPasswrdSwitchToBaseView);
        this.passwrdSettings.removeListener("onSwitchToBaseView", this, this.onPasswrdSwitchToBaseView);
        this.passwrdSettings.removeListener("onStatusOK", this, this.onPasswrdStatusOK);
        this.passwrdSettings.destroy();
        delete this.passwrdSettings;
        this.passwrdSettings = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (this.tierItems[this.getItemIndex(this.currentItemIdx)].isItemPopUp) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.popUpMsgBox(this.tierItems[this.getItemIndex(this.currentItemIdx)]);
            return;
        }
        this.processCurrentItem();
    }

    function onGroupSubscriptionEvent()
    {
        var __reg9 = arguments;
        if (__reg9[0] == "message") 
        {
            this.onTierEvent.notify("onDisplayMessage", __reg9[1]);
        }
        else 
        {
            if (__reg9[0] == "XML_LOAD_ERROR") 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER);
            }
            else if (__reg9[0] == "success") 
            {
                if (this.tierItems[this.getItemIndex(this.selectedItemIdx)].subscriptionStatus == 0) 
                {
                    this.isSubscriptionMsg = true;
                    this.subscriptionMsg = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_SUBSCRIBED_TO_GROUP;
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].subscriptionStatus = 1;
                }
                else 
                {
                    this.isSubscriptionMsg = true;
                    this.subscriptionMsg = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_UNSUBSCRIBED_FROM_GROUP;
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].subscriptionStatus = 0;
                    --this.totalItems;
                    var __reg11 = this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemId;
                    var __reg10 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesLength(0);
                    var __reg4 = 0;
                    while (__reg4 < __reg10) 
                    {
                        var __reg6 = com.jadoo.as2.JadooPlus.Features.Favorites.getItemNameByGroupId(__reg11);
                        var __reg7 = com.jadoo.as2.JadooPlus.Features.Favorites.getItemTypeByName(__reg6);
                        var __reg5 = com.jadoo.as2.JadooPlus.Features.Favorites.getItemIdByName(__reg6);
                        if (__reg5 != null && __reg7 != null) 
                        {
                            com.jadoo.as2.JadooPlus.Features.Favorites.removeFavoriteItem(0, __reg5, __reg7, _global.currentApplication);
                        }
                        __reg6 = null;
                        __reg7 = null;
                        __reg5 = null;
                        ++__reg4;
                    }
                    __reg10 = null;
                    __reg11 = null;
                    __reg4 = null;
                }
            }
            else if (this.tierItems[this.getItemIndex(this.selectedItemIdx)].subscriptionStatus == 0) 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_SUBSCRIBE_TO_GROUP + __reg9[1]);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_UNSUBSCRIBE_FROM_GROUP + __reg9[1]);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.removeListener("onSubscriptionEvent", this, this.onGroupSubscriptionEvent);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.destroy();
            if (this.tierItems.length == 1 && this.selectedItemIdx == 0) 
            {
                this.onTierEvent.notify("onReturnKey");
            }
            else 
            {
                var __reg8 = -1;
                this.itemPool.removeItem(this.selectedItemIdx);
                __reg4 = 0;
                while (__reg4 < this.itemIndicies.length) 
                {
                    if (this.selectedItemIdx == this.itemIndicies[__reg4]) 
                    {
                        __reg8 = __reg4;
                    }
                    ++__reg4;
                }
                this.tierItems.splice(__reg8, 1);
                this.drawPage();
                __reg8 = null;
                __reg4 = null;
            }
        }
        __reg9 = null;
    }

    function onEpgEvent()
    {
        if ((__reg0 = arguments[0]) === "play") 
        {
            this.epgPlayChannel(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[7]);
            return;
        }
        else if (__reg0 !== "exit") 
        {
            return;
        }
        this.hidePopUp = true;
        if (this.epgEnabled) 
        {
            this.enableView();
        }
        this.epgEnabled = false;
        this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
        this.epg.destroy();
        delete (this.epg);
        this.epg = null;
        this.enable();
        return;
    }

    function epgPlayChannel(channelName, channelType, channelId, channelUrl, responseLink, categoryId)
    {
        if (this.epgItem != null) 
        {
            this.epgItem.destroy();
            delete (this.epgItem);
            this.epgItem = null;
        }
        this.epgItem = new com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem();
        this.epgItem.itemName = channelName;
        this.epgItem.itemType = channelType;
        this.epgItem.itemId = channelId;
        this.epgItem.itemLink = channelUrl;
        this.epgItem.responseLink = responseLink;
        this.channelEpgLink = this.epgLink;
        this.epgItem.categoryId = categoryId;
        this.epgEnabled = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.epgItem.loadPlayItemXML(this.fn.onFetchItemDirectLink);
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            if (this.adEnabled == false) 
            {
                if (this.netStatus == "Up") 
                {
                    if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
                    {
                        com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_Previous_Page");
                    }
                    this.onTierEvent.notify("onReturnKey");
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                }
            }
            return;
        }
        else if (__reg0 === Key.MENU) 
        {
            if (_global.currentApplication == "MyJadoo" && this.adEnabled == false) 
            {
                if (this.getItemSubscriptionStatus() != 2 && isNaN(this.getItemGroupId()) && (this.getTierName() == "Tier1" && this.getSelectedItemType() == "container" && this.isSelectedVisible()) || (this.getTierName() == "CategoryTier" && (this.getCurrentItemType() == "liveRTMP" || this.getCurrentItemType() == "liveWMV"))) 
                {
                    this.isEnabled = false;
                    this.isMenuEnabled = true;
                    this.menuHandler = new com.jadoo.as2.JadooPlus.Menu.MultiTierMenuHandler();
                    this.menuHandler.addListener("onClose", this, this.onMenuHandlerClose);
                    this.menuHandler.addListener("onKeyEnter", this, this.onMenuHandlerEnterKey);
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.menuHandler.create(this.viewMC, this);
                }
            }
            else if (_global.currentApplication != "MyJadoo" && this.pageTitle != "Search Results" && this.tierType != "MultiRowTier" && this.adEnabled == false) 
            {
                this.onTierEvent.notify("onPageAdEnable");
            }
            return;
        }
        else if (__reg0 === Key.RED) 
        {
            if (_global.currentApplication != "MyJadoo" && this.adEnabled == false) 
            {
                if (this.contentType == "live" || (this.pageTitle == "Search Results" && (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveRTMP" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveWMV" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "livePlaylist")) || this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.disable();
                        if (this.epg != null) 
                        {
                            this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
                            this.epg.destroy();
                            delete (this.epg);
                            this.epg = null;
                        }
                        this.epg = new com.jadoo.as2.JadooPlus.Features.EPG.EPG();
                        this.epg.addListener("onEpgEvent", this, this.onEpgEvent);
                        this.epg.create(this.parentMC, this.epgLink, this.pageTitle, this.pageId.toString(), false);
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                    }
                }
                else if (this.tierType == "MultiRowTier" && this.getPageId() == 0) 
                {
                    this.isEnabled = false;
                    this.isMenuEnabled = true;
                    this.menuHandler = new com.jadoo.as2.JadooPlus.Menu.MultiTierMenuHandler();
                    this.menuHandler.addListener("onClose", this, this.onMenuHandlerClose);
                    this.menuHandler.addListener("onKeyEnter", this, this.onMenuHandlerEnterKey);
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.menuHandler.create(this.viewMC, this);
                }
            }
            return;
        }
        else if (__reg0 === Key.BLUE) 
        {
            if (_global.currentApplication != "MyJadoo" && this.pageTitle != "Search Results" && this.pageTitle != "Favorites" && this.totalItems > 0 && this.totalItems != undefined && this.adEnabled == false) 
            {
                if (this.netStatus == "Up") 
                {
                    this.enableSearch();
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                }
            }
            return;
        }
        else if (__reg0 !== Key.YELLOW) 
        {
            return;
        }
        if (this.pageTitle != "Subscribe Channels" && this.pageTitle != "Subscribe Groups" && this.pageTitle != "Search Results" && this.tierType != "Tier1" && this.tierType != "MultiRowTier" && this.totalItems > 0 && this.totalItems != undefined && this.adEnabled == false && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isFavoriteEnabled) 
        {
            var __reg3 = this.parentMC.createEmptyMovieClip("msgBoxBaseMC", this.parentMC.getNextHighestDepth());
            this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
            this.msgBox.addListener("onButtonPress", this, this.onFavoritesMsgBoxBtnPressed);
            if (this.isFavoritesCategory) 
            {
                this.msgBox.create(__reg3, "", com.jadoo.as2.JadooPlus.Utils.Messages.REMOVE_FROM_FAVORITES, true, ["Yes", "No"]);
            }
            else if (this.itemContainerMC["favoriteIconBaseMC" + this.currentItemIdx] != null && this.itemContainerMC["favoriteIconBaseMC" + this.currentItemIdx] != undefined) 
            {
                this.msgBox.create(__reg3, "", com.jadoo.as2.JadooPlus.Utils.Messages.ALREADY_EXISTS_IN_FAVORITES, true, ["Remove", "Cancel"]);
            }
            else 
            {
                this.msgBox.create(__reg3, "", com.jadoo.as2.JadooPlus.Utils.Messages.ADD_TO_FAVORITES, true, ["Yes", "No"]);
            }
            __reg3 = null;
        }
        return;
    }

    function onPageAdEnterKey(adItem)
    {
        this.adEnabled = true;
        if (this.pageAdItem != null) 
        {
            this.pageAdItem.destroy();
            delete this.pageAdItem;
            this.pageAdItem = null;
        }
        this.pageAdItem = new com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem();
        this.pageAdItem = adItem;
        this.processPageAdItem();
        adItem = null;
    }

    function processPageAdItem()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Processing_" + this.pageAdItem.itemType);
        }
        if ((__reg0 = this.pageAdItem.itemType) === "liveRTMP") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "liveWMV") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "wmv") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "flv") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "vodPlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "youtubesinglevideo") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "dailymotionsinglevideo") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
            if (this.buttonPressed == "Next") 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
            else if (this.buttonPressed == "Prev") 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchItemDirectLink);
            }
            return;
        }
        else if (__reg0 === "youtube") 
        {
            this.pageAdItem.streamLink = this.pageAdItem.itemLink;
            this.removeLoadingSign();
            this.startPlayback();
            return;
        }
        else if (__reg0 === "dailymotion") 
        {
            this.pageAdItem.streamLink = this.pageAdItem.itemLink;
            this.removeLoadingSign();
            this.startPlayback();
            return;
        }
        else if (__reg0 === "channel") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.create();
            com.jadoo.as2.MyJadoo.MyJadooSubscription.addListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeChannel(this.viewMC, this.pageAdItem.itemName, this.pageAdItem.itemId, this.pageAdItem.subscriptionStatus);
            return;
        }
        else if (__reg0 !== "container") 
        {
            if (__reg0 !== "subscribe_channels") 
            {
                if (__reg0 !== "subscribe_groups") 
                {
                    if (__reg0 !== "dailymotionplaylist") 
                    {
                        if (__reg0 !== "youtubeplaylist") 
                        {
                            return;
                        }
                    }
                }
            }
        }
        if (this.pageAdItem.isItemPopUp) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.popUpMsgBox(this.pageAdItem);
        }
        else if (this.netStatus == "Up") 
        {
            this.onTierEvent.notify("onEnterKey", this.pageAdItem.itemLink, null, false, "", false);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
        }
        return;
    }

    function deleteFavoriteMsgBox(messageText)
    {
        var __reg2 = this.parentMC.createEmptyMovieClip("msgBoxBaseMC", this.parentMC.getNextHighestDepth());
        this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        this.msgBox.addListener("onButtonPress", this, this.onDeleteFavoritesMsgBoxBtnPressed);
        this.msgBox.create(__reg2, "", messageText, true, ["Yes", "No"]);
        __reg2 = null;
        messageText = null;
    }

    function onDeleteFavoritesMsgBoxBtnPressed(buttonPressed)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onFavoritesMsgBoxBtnPressed);
        this.msgBox.destroy();
        delete (this.msgBox);
        this.msgBox = null;
        if (buttonPressed == "Yes") 
        {
            this.deleteFavoriteItem();
        }
        else if (buttonPressed == "No") 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        buttonPressed = null;
    }

    function onFavoritesMsgBoxBtnPressed(buttonPressed)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onFavoritesMsgBoxBtnPressed);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        if (buttonPressed == "Remove") 
        {
            if (this.contentType == "live" || _global.currentApplication == "MyJadoo") 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.removeFavoriteItem(0, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, _global.currentApplication);
            }
            else if (this.contentType == "movies") 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.removeFavoriteItem(1, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, _global.currentApplication);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.removeFavoriteItem(2, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, _global.currentApplication);
            }
            this.itemContainerMC["favoriteIconBaseMC" + this.currentItemIdx].removeMovieClip();
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.ITEM_REMOVED_FROM_FAVORITES);
        }
        else if (buttonPressed == "Yes") 
        {
            if (this.isFavoritesCategory) 
            {
                this.deleteFavoriteItem();
            }
            else if (this.tierType != "Tier1") 
            {
                this.addFavoriteItem();
            }
        }
        buttonPressed = null;
    }

    function deleteFavoriteItem()
    {
        com.jadoo.as2.JadooPlus.Features.Favorites.deleteFavorites(this.parentIdx, this.currentItemIdx);
        this.itemPool.removeItem(this.currentItemIdx);
        --this.totalItems;
        var __reg3 = -1;
        var __reg2 = 0;
        while (__reg2 < this.itemIndicies.length) 
        {
            if (this.currentItemIdx == this.itemIndicies[__reg2]) 
            {
                __reg3 = __reg2;
            }
            ++__reg2;
        }
        this.tierItems.splice(__reg3, 1);
        this.isFavoriteDeleted = true;
        this.drawPage();
        __reg3 = null;
        __reg2 = null;
    }

    function addFavoriteItem()
    {
        var __reg3 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesSize();
        __reg3 = __reg3 / 1024;
        if (__reg3 < 25 && this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId != null) 
        {
            if (this.contentType == "live" || _global.currentApplication == "MyJadoo") 
            {
                if (_global.currentApplication == "MyJadoo") 
                {
                    if (isNaN(this.tierItems[this.getItemIndex(this.currentItemIdx)].groupId)) 
                    {
                        com.jadoo.as2.JadooPlus.Features.Favorites.addFavorites(0, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemImage, "MyJadoo", this.parentId, -2);
                    }
                    else 
                    {
                        com.jadoo.as2.JadooPlus.Features.Favorites.addFavorites(0, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemImage, "MyJadoo", this.parentId, this.tierItems[this.getItemIndex(this.currentItemIdx)].groupId);
                    }
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Features.Favorites.addFavorites(0, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemImage, "JadooPLUS", this.parentId);
                }
            }
            else if (this.contentType == "movies") 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.addFavorites(1, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemImage, "JadooPLUS");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Favorites.addFavorites(2, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId, this.tierItems[this.getItemIndex(this.currentItemIdx)].responseLink, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemImage, "JadooPLUS");
            }
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.ITEM_ADDED_TO_FAVORITES);
            if (this.tierType == "Tier2") 
            {
                this.drawFavoriteIcon(this.currentItemIdx, true);
            }
            else 
            {
                this.drawFavoriteIcon(this.currentItemIdx);
            }
        }
        else if (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemId == null) 
        {
            this.onTierEvent.notify("onDisplayMessage", "Invalid item, cannot add to favorites");
        }
        else 
        {
            this.favoritesMemoryMsg();
        }
        __reg3 = null;
    }

    function favoritesMemoryMsg()
    {
        var __reg3 = this.parentMC.createEmptyMovieClip("msgBoxBaseMC", this.parentMC.getNextHighestDepth());
        var __reg2 = new Array("OK");
        this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        this.msgBox.addListener("onButtonPress", this, this.onFavoritesMemoryMsgButtonPress);
        this.msgBox.create(__reg3, "", com.jadoo.as2.JadooPlus.Utils.Messages.ADD_TO_FAVORITES_FAILED, true, __reg2);
        __reg3 = null;
        false;
        __reg2 = null;
    }

    function onFavoritesMemoryMsgButtonPress(button)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onRestartMsgButtonPress);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        button = null;
    }

    function onXmlPlayerEvent()
    {
        if ((__reg0 = arguments[0]) === "onStartPlayback") 
        {
            this.onTierEvent.notify("onStartPlayback");
            this.disableView();
            return;
        }
        else if (__reg0 === "onContentPlayerError") 
        {
            this.onContentPlayerError(arguments[1]);
            return;
        }
        else if (__reg0 === "onContentPlayerNext") 
        {
            this.onContentPlayerNext();
            return;
        }
        else if (__reg0 === "onContentPlayerPrev") 
        {
            this.onContentPlayerPrev();
            return;
        }
        else if (__reg0 === "onContentPlayerStop") 
        {
            this.onContentPlayerStop();
            return;
        }
        else if (__reg0 === "onContentPlayerEndPlayback") 
        {
            this.onContentPlayerEndPlayback();
            return;
        }
        else if (__reg0 === "endXmlPlaylist") 
        {
            this.stopPlayback();
            if (this.epgEnabled) 
            {
                this.isChannelItem = false;
                this.epg.enable();
            }
            else 
            {
                this.isEnabled = true;
                this.enableView();
            }
            return;
        }
        else if (__reg0 === "xmlPlaylistError") 
        {
            this.stopPlayback();
            if (this.epgEnabled) 
            {
                if (arguments[1] == null) 
                {
                    this.epg.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.itemName);
                }
                else 
                {
                    this.epg.displayMessage(arguments[1]);
                }
                this.isChannelItem = false;
                this.epg.enable();
            }
            else 
            {
                this.isEnabled = true;
                this.enableView();
                if (arguments[1] == null) 
                {
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.itemName);
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", arguments[1]);
                }
            }
            return;
        }
        else if (__reg0 === "livePlayerError") 
        {
            this.onLivePlayerEvent("livePlayerError", arguments[1]);
            return;
        }
        else if (__reg0 === "livePlayerNext") 
        {
            this.onLivePlayerEvent("livePlayerNext");
            return;
        }
        else if (__reg0 === "livePlayerPrev") 
        {
            this.onLivePlayerEvent("livePlayerPrev");
            return;
        }
        else if (__reg0 === "livePlayerStop") 
        {
            this.onLivePlayerEvent("livePlayerStop");
            return;
        }
        else if (__reg0 === "channelChange") 
        {
            this.onLivePlayerEvent("channelChange", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
            return;
        }
        else if (__reg0 !== "epgProgramPlay") 
        {
            return;
        }
        this.onLivePlayerEvent("epgProgramPlay", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
        return;
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function getItemProtectedStatus()
    {
        var __reg2 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        return com.jadoo.as2.JadooPlus.UserInfo.Passwords.getItemProtectedStatus(__reg2.itemId);
    }

    function getPageId()
    {
        return Number(this.pageId);
    }

    function getItemIndex(itemIdx)
    {
        var __reg2 = 0;
        while (__reg2 < this.itemIndicies.length) 
        {
            if (itemIdx == this.itemIndicies[__reg2]) 
            {
                return __reg2;
            }
            ++__reg2;
        }
        return -1;
    }

    function updateListing(itemIdx)
    {
        this.tierBaseMC.listingText.htmlText = itemIdx + 1 + " / " + this.totalItems;
        itemIdx = null;
    }

    function enable()
    {
        this.removeLoadingClip();
    }

    function showLoadingClip()
    {
        if (this.loadingSignMC == null) 
        {
            this.loadingSignMC = this.parentMC.attachMovie("loadingView", "loadingViewMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360});
        }
    }

    function removeLoadingClip()
    {
        if (this.loadingSignMC != null) 
        {
            removeMovieClip(this.loadingSignMC);
            this.loadingSignMC = null;
        }
    }

    function disableChannelBar()
    {
        this.channelBarActive = false;
    }

    function onSearchEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "onSearchPressed") 
        {
            this.showLoadingClip();
            this.onTierEvent.notify("onSearchPressed", arguments[1], 0, true, arguments[2], false);
        }
        else if (__reg0 === "onCancelPressed") 
        {
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
            this.onTierEvent.notify("onDisplayMessage", "");
            this.enable();
        }
        __reg3 = null;
    }

    function enableSearch()
    {
        this.disable();
        this.searching = new com.jadoo.as2.JadooPlus.Features.Search();
        this.searching.addListener("onSearchEvent", this, this.onSearchEvent);
        this.searching.create(this.parentMC, this.pageTitle, this.searchHelpLink, this.searchResultsLink, "");
    }

    function popUpMsgBox(popUpItem)
    {
        var __reg2 = this.parentMC.createEmptyMovieClip("msgBoxBaseMC", this.parentMC.getNextHighestDepth());
        this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        this.msgBox.addListener("onButtonPress", this, this.onMsgBoxBtnPressed);
        this.msgBox.create(__reg2, "", popUpItem.popUpMsg, true, popUpItem.popUpButtons);
        this.wasPopupEnabled = true;
        __reg2 = null;
    }

    function onMsgBoxBtnPressed(button)
    {
        var __reg2 = null;
        if (this.isChannelItem) 
        {
            __reg2 = this.channelItem;
        }
        else if (this.epgEnabled) 
        {
            __reg2 = this.epgItem;
        }
        else if (this.adEnabled) 
        {
            __reg2 = this.pageAdItem;
        }
        else 
        {
            __reg2 = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        this.msgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPressed);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        this.parentMC.msgBoxBaseMC.removeMovieClip();
        this.isMenuEnabled = false;
        if (this.epgEnabled) 
        {
            if (__reg2.popUpType == "non-blocking") 
            {
                if (button == "Ok") 
                {
                    if (this.netStatus == "Up") 
                    {
                        this.wasPopupEnabled = false;
                        if (this.isChannelItemPopup) 
                        {
                            this.isChannelItemPopup = false;
                            this.displayLoadingSign();
                            __reg2.loadPlayItemXML(this.fn.onFetchItemDirectLink);
                        }
                        else 
                        {
                            this.startPlayback();
                        }
                    }
                    else 
                    {
                        this.wasPopupEnabled = false;
                        this.isChannelItem = false;
                        this.epg.enable();
                        this.epg.displayMessage(this.netErrorStr);
                    }
                }
                else 
                {
                    this.wasPopupEnabled = false;
                    this.isChannelItem = false;
                    this.epg.enable();
                }
            }
            else 
            {
                this.wasPopupEnabled = false;
                this.isChannelItem = false;
                this.epg.enable();
            }
        }
        else 
        {
            this.isEnabled = true;
            if (__reg2.popUpType == "non-blocking") 
            {
                if (button == "Ok") 
                {
                    if (this.netStatus == "Up") 
                    {
                        if (this.channelBarActive) 
                        {
                            this.viewBaseMC._visible = false;
                        }
                        else 
                        {
                            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                        }
                        if (__reg2.itemType == "container" || __reg2.itemType == "youtubeplaylist" || __reg2.itemType == "dailymotionplaylist") 
                        {
                            if (this.adEnabled) 
                            {
                                this.onTierEvent.notify("onEnterKey", __reg2.itemLink, null, false, "", this.wasPopupEnabled);
                            }
                            else 
                            {
                                this.notifyViewToProceed(this.currentItemIdx);
                            }
                        }
                        else if (this.showInfo == true && __reg2.itemInfo != null) 
                        {
                            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                            this.wasPopupEnabled = false;
                            this.isEnabled = false;
                            this.isMenuEnabled = true;
                            this.onTierEvent.notify("onDisableView");
                            this.displayInfoPage(__reg2);
                        }
                        else 
                        {
                            this.wasPopupEnabled = false;
                            if (this.isChannelItemPopup) 
                            {
                                this.isChannelItemPopup = false;
                                this.displayLoadingSign();
                                __reg2.loadPlayItemXML(this.fn.onFetchItemDirectLink);
                            }
                            else 
                            {
                                this.startPlayback();
                            }
                        }
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                        this.adEnabled = false;
                        this.wasPopupEnabled = false;
                        this.isEnabled = true;
                        this.enable();
                        if (this.viewBaseMC._visible == false) 
                        {
                            this.enableView();
                        }
                    }
                }
                else if (button == "Cancel") 
                {
                    this.adEnabled = false;
                    this.wasPopupEnabled = false;
                    this.isEnabled = true;
                    if (this.viewBaseMC._visible == false) 
                    {
                        this.enableView();
                    }
                    this.enable();
                    this.onTierEvent.notify("onRemovePopup");
                }
            }
            else 
            {
                this.adEnabled = false;
                this.wasPopupEnabled = false;
                this.isEnabled = true;
                if (this.viewBaseMC._visible == false) 
                {
                    this.enableView();
                }
                this.enable();
                this.onTierEvent.notify("onRemovePopup");
            }
        }
        __reg2 = null;
    }

    function setPopup(popupData)
    {
        this.tierItems[this.getItemIndex(this.currentItemIdx)].popUpType = popupData.popupType;
        this.tierItems[this.getItemIndex(this.currentItemIdx)].popUpMsg = popupData.popupMsg;
        this.tierItems[this.getItemIndex(this.currentItemIdx)].popUpButtons = popupData.buttons;
        this.popUpMsgBox(this.tierItems[this.getItemIndex(this.currentItemIdx)]);
        popupData = null;
    }

    function searchLoadingError(message)
    {
        this.removeLoadingClip();
        this.searching.searchResultsLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
        message = null;
    }

}

//Sprite 664
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer
{
    var parentMC = null;
    var loadingMC = null;
    var playbackBtnMC = null;
    var resumeMaskBaseMC = null;
    var onError = null;
    var onSuccess = null;
    var onStop = null;
    var onNext = null;
    var onPrev = null;
    var onEndPlayback = null;
    var fn = null;
    var stopProgressTxt = null;
    var keyListener = null;
    var currentVodStatus: String = "Loading...";
    var btnPressed = null;
    var playContinuous = null;
    var contentType = null;
    var contentItem = null;
    var streamPlayer = null;
    var infoBar = null;
    var seekBar = null;
    var currTime: Number = 0;
    var hideInfoBarId: Number = -1;
    var seekTimerId: Number = -1;
    var infoBarDisplayTime: Number = 10000;
    var totalVodTime: Number = 0;
    var playbackBtnX: Number = 1100;
    var playbackBtnY: Number = 100;
    var moviePartIdx = null;
    var stopPressed: Boolean = false;
    var playbackStarted: Boolean = false;
    var infoBtnPressed: Boolean = false;
    var seekBtnPressed: Boolean = false;
    var isSeeking: Boolean = false;
    var forward: Boolean = false;
    var rewind: Boolean = false;
    var endPlayback: Boolean = false;
    var resumeVod: Boolean = false;
    var canSeekOnTime: Boolean = true;
    var playerPaused: Boolean = false;
    var isAnAd: Boolean = false;
    var storeResumeInfo: Boolean = false;

    function ContentPlayer()
    {
        this.fn = {onWrapperKeyDown: mx.utils.Delegate.create(this, this.onWrapperKeyDown)};
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onWrapperKeyDown;
        this.onError = new com.BigRoom.Event();
        this.onSuccess = new com.BigRoom.Event();
        this.onStop = new com.BigRoom.Event();
        this.onNext = new com.BigRoom.Event();
        this.onPrev = new com.BigRoom.Event();
        this.onEndPlayback = new com.BigRoom.Event();
    }

    function destroy()
    {
        clearInterval(this.hideInfoBarId);
        clearInterval(this.seekTimerId);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.removeLoadingMC();
        this.removePlaybackBtn();
        removeMovieClip(this.resumeMaskBaseMC);
        this.resumeMaskBaseMC = null;
        if (this.stopProgressTxt != null) 
        {
            this.stopProgressTxt.removeTextField();
        }
        if (this.seekBar != null) 
        {
            this.seekBar.destroy();
            delete this.seekBar;
            this.seekBar = null;
        }
        if (this.streamPlayer != null) 
        {
            this.streamPlayer.onPlayerEvent.removeListener(this, this.onStreamPlayerEvent);
            this.streamPlayer.onLoadingEvent.removeListener(this, this.onLoadingEvent);
            this.streamPlayer.destroy();
            delete this.streamPlayer;
            this.streamPlayer = null;
        }
        if (this.keyListener != null) 
        {
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.fn != null) 
        {
            delete this.fn;
            this.fn = null;
        }
        if (this.infoBar != null) 
        {
            this.infoBar.destroy();
            delete this.infoBar;
            this.infoBar = null;
        }
        delete this.onError;
        delete this.onSuccess;
        delete this.onStop;
        delete this.onNext;
        delete this.onPrev;
        delete this.onEndPlayback;
        delete this.fn;
        this.seekTimerId = null;
        this.keyListener = null;
        this.onError = null;
        this.onSuccess = null;
        this.onStop = null;
        this.onNext = null;
        this.onPrev = null;
        this.onEndPlayback = null;
        this.fn = null;
        this.parentMC = null;
    }

    function create(parentMC, contentItem, playContinuous, maxDuration, resumeVod, contentType, moviePartIdx)
    {
        this.parentMC = parentMC;
        this.contentItem = contentItem;
        this.playContinuous = playContinuous;
        this.resumeVod = resumeVod;
        this.contentType = contentType;
        this.moviePartIdx = moviePartIdx;
        this.storeResumeInfo = arguments[7] ? true : false;
        if (contentItem.itemName == "ad") 
        {
            this.isAnAd = true;
        }
        if (contentItem.itemType == "wmv") 
        {
            this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodPlayer();
        }
        else if (contentItem.itemType == "flv" || contentItem.itemType == "dailymotion" || contentItem.itemType == "dailymotionsinglevideo") 
        {
            this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.FlvPlayer();
        }
        else if (contentItem.itemType == "youtube" || contentItem.itemType == "youtubesinglevideo") 
        {
            if (com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == true) 
            {
                this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.YoutubePlayer();
                this.streamPlayer.onLoadingEvent.addListener(this, this.onLoadingEvent);
            }
            else 
            {
                this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.FlvPlayer();
            }
        }
        this.streamPlayer.create(parentMC, contentItem, maxDuration);
        this.streamPlayer.onPlayerEvent.addListener(this, this.onStreamPlayerEvent);
        this.resumeMaskBaseMC = parentMC.createEmptyMovieClip("resumeMaskBaseMC", parentMC.getNextHighestDepth());
        this.displayLoadingMC();
        if (this.infoBar == null) 
        {
            this.infoBar = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.InfoBar();
            this.infoBar.create(parentMC, contentItem.itemName);
        }
        this.createStopMsgTxtField();
        parentMC = null;
        contentItem = null;
        playContinuous = null;
        maxDuration = null;
        resumeVod = null;
        contentType = null;
        moviePartIdx = null;
    }

    function constructAS2URL(videoUrl)
    {
        var __reg2 = videoUrl;
        if (__reg2 == "INVALID_VIDEO_ID") 
        {
            this.onError.notify(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_INVALID_VIDEO_ID);
            return null;
        }
        return "http://www.youtube.com/v/" + __reg2;
    }

    function getVideoID(streamLink)
    {
        var __reg1 = undefined;
        var __reg2 = undefined;
        var __reg4 = undefined;
        var __reg3 = streamLink.split("&");
        __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg2 = __reg3[__reg1].indexOf("v=");
            if (__reg2 == -1) 
            {
                __reg2 = __reg3[__reg1].indexOf("v/");
            }
            if (__reg2 != -1) 
            {
                break;
            }
            ++__reg1;
        }
        if (__reg2 == -1) 
        {
            __reg4 = "INVALID_VIDEO_ID";
        }
        else 
        {
            __reg4 = __reg3[__reg1].slice(__reg2 + 2, __reg3[__reg1].length);
        }
        __reg1 = null;
        __reg2 = null;
        __reg3 = null;
        streamLink = null;
        return __reg4;
    }

    function onLoadingEvent()
    {
        this.removeLoadingMC();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.streamPlayer.startPlayer();
    }

    function onSeekVideo(seconds)
    {
        this.seekTimerId = setInterval(this, "seekVideo", 1000, seconds);
        seconds = null;
    }

    function seekVideo(seconds)
    {
        clearInterval(this.seekTimerId);
        this.seekTimerId = -1;
        this.seekBtnPressed = false;
        this.forward = false;
        this.seekBar.disable();
        this.isSeeking = true;
        if (seconds == 0 && this.rewind == true) 
        {
            this.removePlaybackBtn();
            this.streamPlayer.play();
            this.playerPaused = false;
        }
        else if (seconds == this.totalVodTime) 
        {
            this.rewind = false;
            this.saveResumeInfo(seconds);
            this.streamPlayer.endPlayback();
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.rewind = false;
            this.streamPlayer.seekVideo(seconds);
            this.playerPaused = false;
        }
        seconds = null;
    }

    function resumeVideo(seconds)
    {
        clearInterval(this.seekTimerId);
        this.seekTimerId = -1;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.streamPlayer.seekVideo(seconds);
        seconds = null;
    }

    function play()
    {
        if ((this.contentItem.itemType == "youtube" || this.contentItem.itemType == "youtubesinglevideo") && com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == true) 
        {
            this.contentItem.streamLink = this.constructAS2URL(this.contentItem.streamLink);
        }
        this.streamPlayer.streamPlay();
        if (this.resumeVod) 
        {
            var __reg2 = this.resumeMaskBaseMC.attachMovie("MaskMC", "videoMaskMC", this.resumeMaskBaseMC.getNextHighestDepth());
            this.resumeMaskBaseMC.videoMaskMC._width = 1280;
            this.resumeMaskBaseMC.videoMaskMC._height = 720;
            __reg2 = null;
        }
        this.setInfoBarStatus();
    }

    function stopPlayer()
    {
        this.showStopLoading();
        this.infoBar.disable();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.canSeekOnTime && (this.contentType == "movies" || this.storeResumeInfo) && this.contentItem.itemName != "ad") 
        {
            this.saveResumeInfo(this.streamPlayer.getElapseTime());
        }
        this.streamPlayer.stopPlayer();
    }

    function onStreamPlayerEvent()
    {
        var __reg3 = arguments[0];
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(__reg3 + "_Event_" + arguments[1]);
        }
        if ((__reg0 = __reg3) === "onMataData") 
        {
            this.canSeekOnTime = arguments[1];
            return;
        }
        else if (__reg0 === "loading") 
        {
            this.currentVodStatus = "Loading...";
            if ((this.contentItem.itemType != "youtube" && this.contentItem.itemType != "youtubesinglevideo") || com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == false) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            }
            this.setInfoBarStatus();
            return;
        }
        else if (__reg0 === "buffering") 
        {
            if (this.currentVodStatus != "Loading...") 
            {
                this.currentVodStatus = "Buffering...";
                if (com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == false || (this.contentItem.itemType != "youtube" && this.contentItem.itemType != "youtubesinglevideo")) 
                {
                    this.displayLoadingMC();
                }
                if (arguments[1] == null && arguments[2] == null) 
                {
                    this.infoBar.stopTimer();
                    this.streamPlayer.getCurrentTime();
                }
                else 
                {
                    if (this.isSeeking) 
                    {
                        this.isSeeking = false;
                        this.currTime = this.seekBar.getCurrentTime();
                    }
                    else 
                    {
                        this.currTime = arguments[1];
                    }
                    this.totalVodTime = arguments[2];
                    this.setInfoBarStatus();
                }
            }
            return;
        }
        else if (__reg0 === "playing") 
        {
            if (!this.playbackStarted && this.resumeVod) 
            {
                this.resumeVod = false;
                this.seekTimerId = setInterval(this, "resumeVideo", 1000, Math.round(com.jadoo.as2.JadooPlus.Features.ResumeVOD.getTimeToJump(this.contentItem.itemId)));
            }
            else 
            {
                if (this.resumeMaskBaseMC != null) 
                {
                    removeMovieClip(this.resumeMaskBaseMC);
                    this.resumeMaskBaseMC = null;
                }
                if (this.forward || this.rewind) 
                {
                    if (this.seekBar.getCurrentTime() == 0 && this.rewind == true) 
                    {
                        this.rewind = false;
                    }
                    this.seekVideo(this.seekBar.getCurrentTime());
                }
                else 
                {
                    if (com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer == false || (this.contentItem.itemType != "youtube" && this.contentItem.itemType != "youtubesinglevideo")) 
                    {
                        this.removeLoadingMC();
                    }
                    this.currentVodStatus = "Playing";
                    if (this.isSeeking) 
                    {
                        this.isSeeking = false;
                        this.currTime = this.seekBar.getCurrentTime();
                    }
                    else if (arguments[1] == null && arguments[2] == null) 
                    {
                        this.streamPlayer.getCurrentTime();
                    }
                    else 
                    {
                        this.currTime = arguments[1];
                        this.totalVodTime = arguments[2];
                        this.setInfoBarStatus();
                    }
                }
            }
            return;
        }
        else if (__reg0 === "paused") 
        {
            this.displayPauseBtn();
            this.currentVodStatus = "Paused";
            if (arguments[1] == null && arguments[2] == null) 
            {
                this.infoBar.stopTimer();
                this.streamPlayer.getCurrentTime();
            }
            else 
            {
                this.currTime = arguments[1];
                this.totalVodTime = arguments[2];
                this.setInfoBarStatus();
            }
            return;
        }
        else if (__reg0 === "onGetCurrentTime") 
        {
            this.totalVodTime = arguments[2];
            if (this.isSeeking) 
            {
                this.isSeeking = false;
                this.currTime = this.seekBar.getCurrentTime();
            }
            else 
            {
                this.currTime = arguments[1];
                if (this.currentVodStatus == "Playing") 
                {
                    this.streamPlayer.setElapseTime(this.currTime);
                }
            }
            if (this.btnPressed == "FORWARD" || this.btnPressed == "REWIND" || this.btnPressed == "SEEKBAR") 
            {
                this.setSeekBar();
            }
            else 
            {
                this.setInfoBarStatus();
            }
            return;
        }
        else if (__reg0 === "onError") 
        {
            this.onError.notify(arguments[1]);
            return;
        }
        else if (__reg0 === "onStop") 
        {
            if (!this.endPlayback) 
            {
                this.onStop.notify(this.stopPressed);
            }
            return;
        }
        else if (__reg0 === "onEndPlayback") 
        {
            this.endPlayback = true;
            this.stopPlayer();
            this.onEndPlayback.notify();
            return;
        }
        else if (__reg0 !== "onSeek") 
        {
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        return;
    }

    function showStopLoading()
    {
        this.displayLoadingMC();
        this.stopProgressTxt._y = this.loadingMC._y + this.loadingMC._height / 2 + 5;
        this.stopProgressTxt._visible = true;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.parentMC.attachMovie("loading", "loadingMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360, _width: 100, _height: 100});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function displayPauseBtn()
    {
        this.removePlaybackBtn();
        this.playbackBtnMC = this.parentMC.attachMovie("pauseBtn", "pauseBtnMC", this.parentMC.getNextHighestDepth());
        this.playbackBtnMC._x = this.playbackBtnX;
        this.playbackBtnMC._y = this.playbackBtnY;
    }

    function displayForwardBtn()
    {
        this.removePlaybackBtn();
        this.playbackBtnMC = this.parentMC.attachMovie("forwardBtn", "forwardBtnMC", this.parentMC.getNextHighestDepth());
        this.playbackBtnMC._x = this.playbackBtnX;
        this.playbackBtnMC._y = this.playbackBtnY;
    }

    function displayRewindBtn()
    {
        this.removePlaybackBtn();
        this.playbackBtnMC = this.parentMC.attachMovie("rewindBtn", "rewindBtnMC", this.parentMC.getNextHighestDepth());
        this.playbackBtnMC._x = this.playbackBtnX;
        this.playbackBtnMC._y = this.playbackBtnY;
    }

    function removePlaybackBtn()
    {
        if (this.playbackBtnMC != null) 
        {
            removeMovieClip(this.playbackBtnMC);
            this.playbackBtnMC = null;
        }
    }

    function saveResumeInfo(elapseTime)
    {
        if (this.playbackStarted) 
        {
            if (this.totalVodTime - elapseTime > 30) 
            {
                com.jadoo.as2.JadooPlus.Features.ResumeVOD.storeResumeVODInfo(this.contentItem.itemLink, this.contentItem.itemId, elapseTime, this.moviePartIdx);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.ResumeVOD.deleteResumeVODInfo(this.contentItem.itemId);
            }
        }
        elapseTime = null;
    }

    function createStopMsgTxtField()
    {
        this.stopProgressTxt = this.parentMC.createTextField("stopProgressTxt", this.parentMC.getNextHighestDepth(), 0, 0, 30, 15);
        this.stopProgressTxt.autoSize = true;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 16777215;
        this.stopProgressTxt.setNewTextFormat(__reg2);
        this.stopProgressTxt._visible = false;
        this.stopProgressTxt.htmlText = "Stopping...";
        this.stopProgressTxt._x = (1280 - this.stopProgressTxt._width) / 2;
        false;
        __reg2 = null;
    }

    function onWrapperKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.STOP) 
        {
            this.stopPressed = true;
            this.stopPlayer();
            return;
        }
        else if (__reg0 === Key.BACK) 
        {
            this.stopPressed = true;
            this.stopPlayer();
            return;
        }
        else if (__reg0 === Key.INFO) 
        {
            if (this.infoBtnPressed) 
            {
                this.infoBtnPressed = false;
                this.infoBar.disable();
            }
            else 
            {
                this.infoBtnPressed = true;
                this.streamPlayer.getCurrentTime();
            }
            return;
        }
        else if (__reg0 === Key.SYABAS_TIMESEEK) 
        {
            if (!this.isAnAd && this.canSeekOnTime && this.playbackStarted && !this.forward && !this.rewind && this.currentVodStatus != "Paused") 
            {
                if (this.seekBar == null || this.seekBar.isEnabled == false) 
                {
                    this.seekBtnPressed = true;
                    this.btnPressed = "SEEKBAR";
                    this.streamPlayer.getCurrentTime();
                }
                else 
                {
                    this.seekBtnPressed = false;
                    this.btnPressed = "";
                    this.seekBar.disable();
                }
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if ((!this.isAnAd && this.canSeekOnTime && this.currentVodStatus != "Paused" && this.currentVodStatus != "Buffering..." && this.currentVodStatus != "Loading..." && !this.seekBar.isEnabled && !this.rewind) || this.forward) 
            {
                if (this.playerPaused == false) 
                {
                    this.streamPlayer.pausePlayer(false);
                    this.playerPaused = true;
                }
                else if (this.contentItem.itemType == "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
                this.rewind = true;
                this.forward = false;
                this.btnPressed = "REWIND";
                this.infoBar.setStatus("Rewinding");
                if (this.contentItem.itemType != "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if ((!this.isAnAd && this.canSeekOnTime && this.currentVodStatus != "Paused" && this.currentVodStatus != "Buffering..." && this.currentVodStatus != "Loading..." && !this.seekBar.isEnabled && !this.forward) || this.rewind) 
            {
                if (this.playerPaused == false) 
                {
                    this.streamPlayer.pausePlayer(false);
                    this.playerPaused = true;
                }
                else if (this.contentItem.itemType == "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
                this.forward = true;
                this.rewind = false;
                this.btnPressed = "FORWARD";
                this.infoBar.setStatus("Forwarding");
                if (this.contentItem.itemType != "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
            }
            return;
        }
        else if (__reg0 === Key.FAST_FORWARD) 
        {
            if ((!this.isAnAd && this.canSeekOnTime && this.currentVodStatus != "Paused" && this.currentVodStatus != "Buffering..." && this.currentVodStatus != "Loading..." && !this.forward) || this.rewind) 
            {
                if (this.playerPaused == false) 
                {
                    this.streamPlayer.pausePlayer(false);
                    this.playerPaused = true;
                }
                else if (this.contentItem.itemType == "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
                this.forward = true;
                this.rewind = false;
                this.btnPressed = "FORWARD";
                this.infoBar.setStatus("Forwarding");
                if (this.contentItem.itemType != "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
            }
            return;
        }
        else if (__reg0 === Key.REWIND) 
        {
            if ((!this.isAnAd && this.canSeekOnTime && this.currentVodStatus != "Paused" && this.currentVodStatus != "Buffering..." && this.currentVodStatus != "Loading..." && !this.rewind) || this.forward) 
            {
                if (this.playerPaused == false) 
                {
                    this.streamPlayer.pausePlayer(false);
                    this.playerPaused = true;
                }
                else if (this.contentItem.itemType == "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
                this.rewind = true;
                this.forward = false;
                this.btnPressed = "REWIND";
                this.infoBar.setStatus("Rewinding");
                if (this.contentItem.itemType != "wmv") 
                {
                    this.streamPlayer.getCurrentTime();
                }
            }
            return;
        }
        else if (__reg0 === Key.NEXT) 
        {
            if (!this.isAnAd && this.playContinuous == "yes") 
            {
                if (this.seekBar.isEnabled == true) 
                {
                    this.seekBar.disable();
                }
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onNext.notify();
            }
            return;
        }
        else if (__reg0 === Key.PREVIOUS) 
        {
            if (!this.isAnAd && this.playContinuous == "yes") 
            {
                if (this.seekBar.isEnabled == true) 
                {
                    this.seekBar.disable();
                }
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onPrev.notify();
            }
            return;
        }
        else if (__reg0 === Key.PAUSE) 
        {
            if (!this.isAnAd && this.currentVodStatus == "Playing" && !this.forward && !this.rewind && !this.seekBar.isEnabled) 
            {
                this.streamPlayer.pausePlayer(false);
                this.playerPaused = true;
            }
            return;
        }
        else if (__reg0 !== Key.PLAY) 
        {
            return;
        }
        if (!this.isAnAd && this.currentVodStatus != "Buffering..." && this.currentVodStatus != "Loading...") 
        {
            this.removePlaybackBtn();
            this.streamPlayer.play();
            this.playerPaused = false;
        }
        return;
    }

    function hideInfoBar()
    {
        clearInterval(this.hideInfoBarId);
        this.infoBar.disable();
        this.infoBtnPressed = false;
    }

    function setSeekBar()
    {
        if (this.seekBar == null) 
        {
            this.seekBar = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.SeekBar();
            this.seekBar.addListener("onSeek", this, this.onSeekVideo);
            this.seekBar.create(this.parentMC, this.totalVodTime);
        }
        if (this.btnPressed == "FORWARD") 
        {
            this.displayForwardBtn();
            if (this.seekBar.isEnabled) 
            {
                this.seekBar.enable(this.seekBar.getCurrentTime(), "Forward");
            }
            else 
            {
                this.seekBar.enable(this.currTime, "Forward");
            }
        }
        else if (this.btnPressed == "REWIND") 
        {
            this.displayRewindBtn();
            if (this.seekBar.isEnabled) 
            {
                this.seekBar.enable(this.seekBar.getCurrentTime(), "Rewind");
            }
            else 
            {
                this.seekBar.enable(this.currTime, "Rewind");
            }
        }
        else if (this.btnPressed == "SEEKBAR") 
        {
            this.seekBar.enable(this.currTime);
        }
        this.btnPressed = "";
    }

    function setInfoBarStatus()
    {
        if (this.currentVodStatus == "Loading...") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(0, 0, false);
            this.infoBar.enable();
            this.infoBtnPressed = true;
            return;
        }
        if (this.currentVodStatus == "Buffering...") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(this.currTime, this.totalVodTime, false);
            if (this.infoBtnPressed) 
            {
                this.infoBar.enable();
            }
            return;
        }
        if (this.currentVodStatus == "Playing") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(this.currTime, this.totalVodTime, true);
            if (this.playbackStarted) 
            {
                if (this.infoBtnPressed) 
                {
                    this.infoBar.enable();
                }
            }
            else 
            {
                this.playbackStarted = true;
                this.hideInfoBarId = setInterval(this, "hideInfoBar", this.infoBarDisplayTime);
            }
            return;
        }
        if (this.currentVodStatus == "Paused") 
        {
            if (this.forward) 
            {
                this.infoBar.setStatus("Forwarding");
            }
            else if (this.rewind) 
            {
                this.infoBar.setStatus("Rewinding");
            }
            else 
            {
                this.infoBar.setStatus(this.currentVodStatus);
            }
            this.infoBar.setTime(this.currTime, this.totalVodTime, false);
            if (this.infoBtnPressed) 
            {
                this.infoBar.enable();
            }
        }
    }

}

//Sprite 665
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodStreamPlayer
{
    var parentMC = null;
    var contentItem = null;
    var onPlayerEvent = null;
    var onLoadingEvent = null;
    var responseLinkXML = null;
    var fn = null;
    var playbackResponseSent: Boolean = false;
    var maxDuration;

    function VodStreamPlayer()
    {
        this.onPlayerEvent = new com.BigRoom.Event();
        this.onLoadingEvent = new com.BigRoom.Event();
    }

    function streamPlay()
    {
    }

    function stopPlayer()
    {
    }

    function endPlayback()
    {
    }

    function getCurrentTime()
    {
    }

    function seekVideo()
    {
    }

    function pausePlayer(forwardRewing)
    {
    }

    function play()
    {
    }

    function getElapseTime()
    {
        return 0;
    }

    function setElapseTime(seconds)
    {
    }

    function startPlayer()
    {
    }

    function destroy()
    {
        delete this.fn;
        if (this.onLoadingEvent != null) 
        {
            delete this.onLoadingEvent;
            this.onLoadingEvent = null;
        }
        if (this.onPlayerEvent != null) 
        {
            delete this.onPlayerEvent;
            this.onPlayerEvent = null;
        }
        this.onPlayerEvent = null;
        this.fn = null;
    }

    function create(parentMC, contentItem, maxDuration)
    {
        this.parentMC = parentMC;
        this.contentItem = contentItem;
        this.maxDuration = maxDuration;
        parentMC = null;
        contentItem = null;
        maxDuration = null;
    }

    function sendPlaybackResponse(playbackStatus, responseLink)
    {
        this.playbackResponseSent = true;
        if (responseLink != null || responseLink != undefined) 
        {
            if (responseLink.charAt(responseLink.length - 1) != "/") 
            {
                responseLink = responseLink + "/";
            }
            if (this.responseLinkXML != null) 
            {
                delete this.responseLinkXML;
                this.responseLinkXML = null;
            }
            this.responseLinkXML = new XML();
            this.responseLinkXML.load(responseLink + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "/" + playbackStatus + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.regionName);
        }
        playbackStatus = null;
        responseLink = null;
    }

}

//Sprite 666
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.InfoBar
{
    var parentMC = null;
    var infoBaseMC = null;
    var incrementTimeId = null;
    var infoBarTime: Number = 0;
    var date = null;
    var setIntervalTime = null;
    var lastInterval = null;
    var startTimer: Boolean = false;
    var currentTime;
    var totalTime;

    function InfoBar()
    {
    }

    function create(parentMC, title)
    {
        this.parentMC = parentMC;
        this.infoBaseMC = parentMC.createEmptyMovieClip("infoBaseMC", parentMC.getNextHighestDepth());
        this.infoBaseMC._visible = false;
        var __reg8 = this.infoBaseMC.attachMovie("info", "infoMC", this.infoBaseMC.getNextHighestDepth());
        this.infoBaseMC._x = (1280 - __reg8._width) / 2;
        this.infoBaseMC._y = 720 - __reg8._height - 50;
        __reg8._alpha = 85;
        var __reg3 = this.infoBaseMC.attachMovie("progBarBase", "progBarBaseMC", this.infoBaseMC.getNextHighestDepth());
        __reg3._x = (__reg8._width - __reg3._width) / 2;
        __reg3._y = 85;
        var __reg4 = this.infoBaseMC.createEmptyMovieClip("progBarMC", this.infoBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = __reg3._y;
        var __reg10 = __reg4.attachMovie("progBarFill", "progBarFillMC", __reg4.getNextHighestDepth());
        __reg10._x = 2;
        __reg10._y = (__reg3._height - __reg10._height) / 2;
        var __reg6 = this.infoBaseMC.attachMovie("progBarMask", "progBarMaskMC", this.infoBaseMC.getNextHighestDepth());
        __reg6._height = __reg3._height;
        __reg6._width = 0;
        __reg6._x = __reg3._x;
        __reg6._y = __reg3._y;
        var __reg11 = this.infoBaseMC.attachMovie("progBarHead", "progBarHeadMC", this.infoBaseMC.getNextHighestDepth());
        __reg11._x = __reg3._x;
        __reg11._y = __reg3._y + (__reg3._height - __reg11._height) / 2;
        __reg4.setMask(__reg6);
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "left";
        __reg2.size = 32;
        __reg2.bold = true;
        __reg2.color = 16777215;
        var __reg5 = this.infoBaseMC.createTextField("titleTxt", this.infoBaseMC.getNextHighestDepth(), __reg4._x, 2, __reg4._width, 32);
        __reg5.setNewTextFormat(__reg2);
        __reg5.htmlText = title;
        __reg5._height = __reg5.textHeight;
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 16776960;
        var __reg14 = this.infoBaseMC.createTextField("statusTxt", this.infoBaseMC.getNextHighestDepth(), __reg5._x, __reg5._y + __reg5._height, __reg4._width, 38);
        __reg14.setNewTextFormat(__reg2);
        __reg2.size = 24;
        __reg2.align = "center";
        __reg2.bold = false;
        __reg2.color = 16777215;
        var __reg9 = this.infoBaseMC.attachMovie("timeContainer", "totalTimeMC", this.infoBaseMC.getNextHighestDepth());
        __reg9._x = __reg4._x + __reg3._width + 20;
        __reg9._y = __reg4._y - (__reg9._height - __reg3._height) / 2;
        var __reg12 = this.infoBaseMC.createTextField("totalTimeTxt", this.infoBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg12.autoSize = true;
        __reg12.setNewTextFormat(__reg2);
        var __reg7 = this.infoBaseMC.attachMovie("timeContainer", "currentTimeMC", this.infoBaseMC.getNextHighestDepth());
        __reg7._x = __reg4._x - __reg7._width - 20;
        __reg7._y = __reg4._y - (__reg7._height - __reg3._height) / 2;
        var __reg13 = this.infoBaseMC.createTextField("currentTimeTxt", this.infoBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg13.autoSize = true;
        __reg13.setNewTextFormat(__reg2);
        this.setTime(0, 0, false);
        __reg8 = null;
        __reg3 = null;
        __reg4 = null;
        __reg10 = null;
        __reg6 = null;
        __reg11 = null;
        __reg5 = null;
        __reg14 = null;
        __reg9 = null;
        __reg12 = null;
        __reg7 = null;
        __reg13 = null;
        false;
        __reg2 = null;
    }

    function destroy()
    {
        _global.clearTimeout(this.incrementTimeId);
        removeMovieClip(this.infoBaseMC);
        this.infoBaseMC = null;
        delete this.date;
        this.date = null;
    }

    function setTime(currentTime, totalTime, incrementTime)
    {
        this.infoBarTime = currentTime;
        this.currentTime = currentTime;
        this.totalTime = totalTime;
        this.startTimer = true;
        if (incrementTime) 
        {
            this.setInfoBarTime();
            this.date = new Date();
            this.setIntervalTime = this.date.getTime();
            this.incrementTimeId = _global.setTimeout(this, "incrementInfoBarTime", 1000);
            this.lastInterval = 1000;
            delete this.date;
            this.date = null;
            return;
        }
        this.setInfoBarTime();
    }

    function stopTimer()
    {
        _global.clearTimeout(this.incrementTimeId);
        this.startTimer = false;
    }

    function setTitle(videoTitle)
    {
        this.infoBaseMC.titleTxt.htmlText = videoTitle;
    }

    function setInfoBarTime()
    {
        var __reg2 = this.infoBaseMC.progBarMaskMC;
        var __reg3 = this.infoBaseMC.progBarBaseMC;
        if (this.totalTime == 0) 
        {
            __reg2._width = 0;
        }
        else if (this.infoBarTime > this.totalTime) 
        {
            __reg2._width = __reg3._width;
        }
        else 
        {
            __reg2._width = Math.ceil(__reg3._width * (this.infoBarTime / this.totalTime));
        }
        this.infoBaseMC.progBarHeadMC._x = __reg2._x + __reg2._width - this.infoBaseMC.progBarHeadMC._width / 2;
        this.infoBaseMC.totalTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(this.totalTime);
        this.infoBaseMC.currentTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(this.infoBarTime);
        this.infoBaseMC.totalTimeTxt._y = this.infoBaseMC.totalTimeMC._y + (this.infoBaseMC.totalTimeMC._height - this.infoBaseMC.totalTimeTxt._height) / 2;
        this.infoBaseMC.totalTimeTxt._x = this.infoBaseMC.totalTimeMC._x + (this.infoBaseMC.totalTimeMC._width - this.infoBaseMC.totalTimeTxt._width) / 2;
        this.infoBaseMC.currentTimeTxt._y = this.infoBaseMC.currentTimeMC._y + (this.infoBaseMC.currentTimeMC._height - this.infoBaseMC.currentTimeTxt._height) / 2;
        this.infoBaseMC.currentTimeTxt._x = this.infoBaseMC.currentTimeMC._x + (this.infoBaseMC.currentTimeMC._width - this.infoBaseMC.currentTimeTxt._width) / 2;
        __reg2 = null;
        __reg3 = null;
    }

    function incrementInfoBarTime()
    {
        this.date = new Date();
        var __reg3 = this.date.getTime() - this.setIntervalTime;
        if (this.startTimer) 
        {
            if (__reg3 > this.lastInterval) 
            {
                __reg3 = __reg3 - this.lastInterval;
                _global.clearTimeout(this.incrementTimeId);
                this.incrementTimeId = _global.setTimeout(this, "incrementInfoBarTime", 1000 - __reg3);
                this.lastInterval = 1000 - __reg3;
            }
            else 
            {
                _global.clearTimeout(this.incrementTimeId);
                this.incrementTimeId = _global.setTimeout(this, "incrementInfoBarTime", 1000);
                this.lastInterval = 1000;
            }
        }
        else 
        {
            _global.clearTimeout(this.incrementTimeId);
        }
        this.setIntervalTime = this.date.getTime();
        ++this.infoBarTime;
        this.setInfoBarTime();
        delete this.date;
        this.date = null;
        __reg3 = null;
    }

    function enable()
    {
        this.infoBaseMC._visible = true;
        this.startTimer = true;
    }

    function disable()
    {
        _global.clearTimeout(this.incrementTimeId);
        this.startTimer = false;
        this.infoBaseMC._visible = false;
    }

    function isEnabled()
    {
        return this.infoBaseMC._visible;
    }

    function setStatus(status)
    {
        _global.clearTimeout(this.incrementTimeId);
        this.startTimer = false;
        this.infoBaseMC.statusTxt.htmlText = status;
        status = null;
    }

}

//Sprite 667
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.SeekBar
{
    var seekSelection = null;
    var parentMC = null;
    var seekBaseMC = null;
    var totalTime: Number = 0;
    var fn = null;
    var keyListener = new Object();
    var isEnabled: Boolean = false;
    var onSeek = null;
    var seekJumpSecs: Number = 60;
    var forRewJumpSecs: Number = 60;
    var forwardRewindTimerId: Number = -1;
    var _visible;

    function SeekBar()
    {
        this.onSeek = new com.BigRoom.Event();
    }

    function create(parentMC, totalTime)
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parentMC = parentMC;
        this.totalTime = totalTime;
        this.seekBaseMC = parentMC.createEmptyMovieClip("seekBaseMC", parentMC.getNextHighestDepth());
        this.seekBaseMC._visible = false;
        this.seekBaseMC._alpha = 0;
        var __reg8 = this.seekBaseMC.attachMovie("seek", "seekMC", this.seekBaseMC.getNextHighestDepth());
        __reg8._alpha = 70;
        this.seekBaseMC._x = (1280 - __reg8._width) / 2;
        this.seekBaseMC._y = 0 - (this.seekBaseMC._y + __reg8._height);
        var __reg2 = this.seekBaseMC.attachMovie("progBarBase", "progBarBaseMC", this.seekBaseMC.getNextHighestDepth());
        __reg2._width = 550;
        __reg2._x = (__reg8._width - __reg2._width) / 2;
        __reg2._y = (__reg8._height - __reg2._height) / 2;
        var __reg3 = this.seekBaseMC.createEmptyMovieClip("progBarMC", this.seekBaseMC.getNextHighestDepth());
        __reg3._x = __reg2._x;
        __reg3._y = __reg2._y;
        var __reg9 = __reg3.attachMovie("progBarFill", "progBarFillMC", __reg3.getNextHighestDepth());
        __reg9._x = 2;
        __reg9._y = (__reg2._height - __reg9._height) / 2;
        __reg9._width = 546;
        var __reg7 = this.seekBaseMC.attachMovie("progBarMask", "progBarMaskMC", this.seekBaseMC.getNextHighestDepth());
        __reg7._width = 0;
        __reg7._height = __reg2._height;
        __reg7._x = __reg2._x;
        __reg7._y = __reg2._y;
        __reg3.setMask(__reg7);
        var __reg10 = this.seekBaseMC.attachMovie("progBarHead", "progBarHeadMC", this.seekBaseMC.getNextHighestDepth());
        __reg10._x = __reg2._x;
        __reg10._y = __reg2._y + (__reg2._height - __reg10._height) / 2;
        var __reg5 = new TextFormat();
        __reg5.font = "Arial";
        __reg5.align = "center";
        __reg5.size = 22;
        __reg5.bold = true;
        __reg5.color = 16777215;
        var __reg4 = this.seekBaseMC.attachMovie("timeContainer", "seekTimeMC", this.seekBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x - __reg4._width - 20;
        __reg4._y = __reg3._y - (__reg4._height - __reg2._height) / 2;
        var __reg12 = __reg4.createTextField("seekTimeTxt", __reg4.getNextHighestDepth(), 0, 1, __reg4._width, __reg4._height);
        __reg12.setNewTextFormat(__reg5);
        var __reg6 = this.seekBaseMC.attachMovie("timeContainer", "totalTimeMC", this.seekBaseMC.getNextHighestDepth());
        __reg6._x = __reg3._x + __reg2._width + 20;
        __reg6._y = __reg3._y - (__reg6._height - __reg2._height) / 2;
        var __reg11 = __reg6.createTextField("totalTimeTxt", __reg6.getNextHighestDepth(), 0, 1, __reg6._width, __reg6._height);
        __reg11.setNewTextFormat(__reg5);
        __reg11.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(totalTime);
        false;
        __reg5 = null;
        __reg8 = null;
        __reg2 = null;
        __reg3 = null;
        __reg7 = null;
        __reg9 = null;
        __reg10 = null;
        __reg4 = null;
        __reg12 = null;
        __reg6 = null;
        __reg11 = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.onSeek != null) 
        {
            delete this.onSeek;
            this.onSeek = null;
        }
        removeMovieClip(this.seekBaseMC);
        delete this.fn;
        this.fn = null;
        this.seekBaseMC = null;
        this.parentMC = null;
        this.totalTime = 0;
        this.seekSelection = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onSeek") 
        {
            this.onSeek.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onSeek") 
        {
            this.onSeek.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function getCurrentTime()
    {
        this.clearForwardRewindTimer();
        return com.jadoo.as2.JadooPlus.Utils.Utils.timeStrToSeconds(this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText);
    }

    function forwardPlayer()
    {
        var __reg11 = com.jadoo.as2.JadooPlus.Utils.Utils.hoursFromSeconds(this.totalTime);
        var __reg9 = com.jadoo.as2.JadooPlus.Utils.Utils.getModulusMinutes(this.totalTime);
        var __reg7 = com.jadoo.as2.JadooPlus.Utils.Utils.getModulusSeconds(this.totalTime);
        var __reg4 = this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText.split(":");
        var __reg6 = Number(__reg4[0]);
        var __reg8 = Number(__reg4[1]);
        var __reg2 = Number(__reg4[2]);
        var __reg3 = 0;
        var __reg5 = this.seekBaseMC.progBarMaskMC;
        var __reg10 = this.seekBaseMC.progBarBaseMC;
        if (__reg6 == __reg11 && __reg8 == __reg9) 
        {
            if (__reg7 - __reg2 < this.forRewJumpSecs) 
            {
                __reg2 = __reg2 + (__reg7 - __reg2);
            }
            else 
            {
                __reg2 = __reg2 + this.forRewJumpSecs;
            }
        }
        else 
        {
            __reg2 = __reg2 + this.forRewJumpSecs;
        }
        __reg3 = __reg6 * 3600 + __reg8 * 60 + __reg2;
        if (__reg3 >= this.totalTime) 
        {
            this.clearForwardRewindTimer();
            __reg3 = this.totalTime;
            this.onSeek.notify(this.totalTime);
        }
        __reg5._width = Math.ceil(__reg10._width * (__reg3 / this.totalTime));
        this.seekBaseMC.progBarHeadMC._x = __reg5._x + __reg5._width - this.seekBaseMC.progBarHeadMC._width / 2;
        this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg3);
        false;
        __reg4 = null;
        __reg11 = null;
        __reg9 = null;
        __reg7 = null;
        __reg6 = null;
        __reg8 = null;
        __reg2 = null;
        __reg3 = null;
        __reg5 = null;
        __reg10 = null;
    }

    function rewindPlayer()
    {
        var __reg3 = this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText.split(":");
        var __reg6 = Number(__reg3[0]);
        var __reg8 = Number(__reg3[1]);
        var __reg5 = Number(__reg3[2]);
        var __reg2 = 0;
        var __reg4 = this.seekBaseMC.progBarMaskMC;
        var __reg7 = this.seekBaseMC.progBarBaseMC;
        __reg5 = __reg5 - this.forRewJumpSecs;
        __reg2 = __reg6 * 3600 + __reg8 * 60 + __reg5;
        if (__reg2 <= 0) 
        {
            this.clearForwardRewindTimer();
            __reg2 = 0;
            this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg2);
            this.onSeek.notify(__reg2);
        }
        __reg4._width = Math.ceil(__reg7._width * (__reg2 / this.totalTime));
        this.seekBaseMC.progBarHeadMC._x = __reg4._x + __reg4._width - this.seekBaseMC.progBarHeadMC._width / 2;
        this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg2);
        false;
        __reg3 = null;
        __reg6 = null;
        __reg8 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
        __reg7 = null;
    }

    function clearForwardRewindTimer()
    {
        clearInterval(this.forwardRewindTimerId);
        this.forwardRewindTimerId = -1;
    }

    function enable()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg4 == "Forward") 
        {
            this.forwardRewindTimerId = setInterval(this, "forwardPlayer", 1000);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        else if (__reg4 == "Rewind") 
        {
            this.forwardRewindTimerId = setInterval(this, "rewindPlayer", 1000);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        this.seekSelection = "min";
        this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg3);
        this.seekBaseMC.progBarMaskMC._width = Math.ceil(this.seekBaseMC.progBarBaseMC._width * (__reg3 / this.totalTime));
        this.seekBaseMC.progBarHeadMC._x = this.seekBaseMC.progBarMaskMC._x + this.seekBaseMC.progBarMaskMC._width - this.seekBaseMC.progBarHeadMC._width / 2;
        this.seekBaseMC._visible = true;
        this.isEnabled = true;
        com.caurina.transitions.Tweener.addTween(this.seekBaseMC, {_y: 50, _alpha: 100, time: 1, transition: "linear"});
        __reg4 = null;
        __reg3 = null;
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.isEnabled = false;
        com.caurina.transitions.Tweener.addTween(this.seekBaseMC, {_y: -50, _alpha: 0, time: 1, transition: "linear", onComplete: function ()
        {
            this._visible = false;
        }
        , onCompleteScope: this});
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 37) 
        {
            var __reg5 = this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText.split(":");
            var __reg7 = Number(__reg5[0]);
            var __reg9 = Number(__reg5[1]);
            var __reg2 = Number(__reg5[2]);
            var __reg3 = 0;
            var __reg6 = this.seekBaseMC.progBarMaskMC;
            var __reg11 = this.seekBaseMC.progBarBaseMC;
            __reg2 = __reg2 - this.seekJumpSecs;
            __reg3 = __reg7 * 3600 + __reg9 * 60 + __reg2;
            if (__reg3 < 0) 
            {
                __reg3 = 0;
            }
            __reg6._width = Math.ceil(__reg11._width * (__reg3 / this.totalTime));
            this.seekBaseMC.progBarHeadMC._x = __reg6._x + __reg6._width - this.seekBaseMC.progBarHeadMC._width / 2;
            this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg3);
            false;
            __reg5 = null;
            __reg7 = null;
            __reg9 = null;
            __reg2 = null;
            __reg3 = null;
            __reg6 = null;
            __reg11 = null;
            return;
        }
        else if (__reg0 === 39) 
        {
            var __reg12 = com.jadoo.as2.JadooPlus.Utils.Utils.hoursFromSeconds(this.totalTime);
            var __reg10 = com.jadoo.as2.JadooPlus.Utils.Utils.getModulusMinutes(this.totalTime);
            var __reg8 = com.jadoo.as2.JadooPlus.Utils.Utils.getModulusSeconds(this.totalTime);
            __reg5 = this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText.split(":");
            __reg7 = Number(__reg5[0]);
            __reg9 = Number(__reg5[1]);
            __reg2 = Number(__reg5[2]);
            var __reg4 = 0;
            __reg6 = this.seekBaseMC.progBarMaskMC;
            __reg11 = this.seekBaseMC.progBarBaseMC;
            if (__reg7 == __reg12 && __reg9 == __reg10) 
            {
                if (__reg8 - __reg2 < this.seekJumpSecs) 
                {
                    __reg2 = __reg2 + (__reg8 - __reg2);
                }
                else 
                {
                    __reg2 = __reg2 + this.seekJumpSecs;
                }
            }
            else 
            {
                __reg2 = __reg2 + this.seekJumpSecs;
            }
            __reg4 = __reg7 * 3600 + __reg9 * 60 + __reg2;
            if (__reg4 > this.totalTime) 
            {
                __reg4 = this.totalTime;
            }
            __reg6._width = Math.ceil(__reg11._width * (__reg4 / this.totalTime));
            this.seekBaseMC.progBarHeadMC._x = __reg6._x + __reg6._width - this.seekBaseMC.progBarHeadMC._width / 2;
            this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(__reg4);
            false;
            __reg5 = null;
            __reg12 = null;
            __reg10 = null;
            __reg8 = null;
            __reg7 = null;
            __reg9 = null;
            __reg2 = null;
            __reg4 = null;
            __reg6 = null;
            __reg11 = null;
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        this.onSeek.notify(com.jadoo.as2.JadooPlus.Utils.Utils.timeStrToSeconds(this.seekBaseMC.seekTimeMC.seekTimeTxt.htmlText));
        return;
    }

}

//Sprite 668
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodPlayer extends com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodStreamPlayer
{
    var xml = null;
    var xmlVodInfo = null;
    var xmlDurationInfo = null;
    var startDateTime = null;
    var endDateTime = null;
    var elapseTime: Number = 0;
    var stopVodLoadTimerId: Number = -1;
    var playbackTimerId: Number = -1;
    var durationTimerId: Number = -1;
    var bufferingState: Boolean = false;
    var vodEventsRemoved: Boolean = false;
    var forStopVod: Boolean = false;
    var errorFlag: Boolean = false;
    var playerStarted: Boolean = false;
    var playerTimeOut: Boolean = false;
    var playbackStarted: Boolean = false;
    var stopBtnPressed: Boolean = false;
    var playerState = null;
    var isSeeking: Boolean = false;
    var contentItem;
    var errString;
    var errorCode;
    var fn;
    var maxDuration;
    var onPlayerEvent;
    var playbackResponseSent;
    var sendPlaybackResponse;

    function VodPlayer()
    {
        super();
        this.fn = {onLoadXml: mx.utils.Delegate.create(this, this.onLoadXml), onLoadXmlVodInfo: mx.utils.Delegate.create(this, this.onLoadXmlVodInfo), onLoadXmlDurationInfo: mx.utils.Delegate.create(this, this.onLoadXmlDurationInfo)};
    }

    function create(parentMC, contentItem, maxDuration)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("VOD_Player");
        }
        super.create(parentMC, contentItem, maxDuration);
        parentMC = null;
        contentItem = null;
        maxDuration = null;
    }

    function destroy()
    {
        clearInterval(this.stopVodLoadTimerId);
        clearInterval(this.playbackTimerId);
        clearInterval(this.durationTimerId);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.resetSocket();
        if (!this.vodEventsRemoved) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
        }
        if (this.xml) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        if (this.startDateTime != null) 
        {
            delete this.startDateTime;
            this.startDateTime = null;
        }
        if (this.endDateTime != null) 
        {
            delete this.endDateTime;
            this.endDateTime = null;
        }
        if (this.xmlDurationInfo) 
        {
            delete this.xmlDurationInfo;
            this.xmlDurationInfo = null;
        }
        if (this.xmlVodInfo) 
        {
            delete this.xmlVodInfo;
            this.xmlVodInfo = null;
        }
        super.destroy();
    }

    function streamPlay()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Play_" + this.contentItem.streamLink);
        }
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.isSocketConnected()) 
        {
            var __reg2 = this.urlEncode(this.contentItem.streamLink);
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("VodEvent", this, this.onVodEvent);
            this.execCommand("start_vod", this.contentItem.itemName, __reg2, "", 0);
            this.bufferingState = true;
            __reg2 = null;
            return;
        }
        this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_INITIALIZE_PLAYER;
        this.onPlayerEvent.notify("onError", this.errString);
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_EVENTS_SOCKET_NOT_CONNECTED, this.contentItem.responseLink);
    }

    function execCommand()
    {
        var __reg4 = arguments;
        var __reg5 = com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?";
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("VodCommand_" + __reg4[0]);
        }
        if (__reg4[0] == "stop_vod") 
        {
            clearInterval(this.stopVodLoadTimerId);
        }
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            if (__reg3 > 0) 
            {
                __reg5 = __reg5 + ("&arg" + __reg3 + "=" + __reg4[__reg3]);
            }
            else 
            {
                __reg5 = __reg5 + ("arg" + __reg3 + "=" + __reg4[__reg3]);
            }
            ++__reg3;
        }
        if (this.xml != null) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.xml.ignoreWhite = true;
        this.xml.onLoad = this.fn.onLoadXml;
        this.xml.load(__reg5);
    }

    function onLoadXml(success)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("onVodCommand_Success_" + success);
        }
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/theDavidBox/request/arg0").firstChild.nodeValue;
            var __reg4 = Number(mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg4 == 0) 
            {
                if ((__reg0 = __reg2) === "start_vod") 
                {
                    if (this.contentItem.itemName == "ad") 
                    {
                        this.playbackTimerId = setInterval(this, "checkPlayback", 15000);
                    }
                    else 
                    {
                        this.playbackTimerId = setInterval(this, "checkPlayback", com.jadoo.as2.JadooPlus.Utils.Config.playerLoadTimeOut);
                    }
                }
                else if (__reg0 === "stop_vod") 
                {
                    if (this.vodEventsRemoved) 
                    {
                        if (this.errorFlag) 
                        {
                            this.onPlayerEvent.notify("onError", this.errString);
                        }
                        else 
                        {
                            this.onPlayerEvent.notify("onStop");
                        }
                    }
                }
                else if (__reg0 === "pause_vod") 
                {
                    this.endTimer();
                    this.calculateElapsedTime();
                    this.onPlayerEvent.notify("paused", null, null);
                    this.playerState = "PAUSED";
                    this.bufferingState = false;
                }
                else if (__reg0 === "resume_vod") 
                {
                    this.playerState = "PLAYING";
                    this.onPlayerEvent.notify("playing", null, null);
                }
                else if (__reg0 !== "list_playback_speed_vod") 
                {
                    if (__reg0 !== "set_playback_speed_vod") 
                    {
                        __reg0 === "set_time_seek_vod";
                    }
                }
            }
            else if ((__reg0 = __reg2) === "start_vod") 
            {
                this.onPlayerEvent.notify("onError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT);
            }
            else if (__reg0 === "stop_vod") 
            {
                if (!this.vodEventsRemoved) 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
                    this.vodEventsRemoved = true;
                }
                this.forStopVod = true;
                this.getCurrentVodInfo();
            }
            else if (__reg0 !== "pause_vod") 
            {
                if (__reg0 !== "resume_vod") 
                {
                    if (__reg0 !== "list_playback_speed_vod") 
                    {
                        __reg0 === "set_time_seek_vod";
                    }
                }
            }
        }
        success = null;
    }

    function checkPlayback()
    {
        clearInterval(this.playbackTimerId);
        if (this.playbackStarted) 
        {
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("VOD_Player_Timeout");
        }
        this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT;
        this.errorFlag = true;
        this.playerTimeOut = true;
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_REACHED_MAX_BUF_TIME, this.contentItem.responseLink);
        if (!this.vodEventsRemoved) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
            this.vodEventsRemoved = true;
        }
        this.execCommand("stop_vod");
    }

    function onVodEvent()
    {
        var __reg3 = arguments;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("onVodEvent_" + __reg3[0] + "_" + __reg3[1]);
        }
        if ((__reg0 = __reg3[0]) === "playback start") 
        {
            this.onPlayerEvent.notify("loading");
            this.playerStarted = true;
            return;
        }
        else if (__reg0 === "buffering") 
        {
            this.playerState = "BUFFERING";
            if (this.playbackStarted) 
            {
                this.endTimer();
                this.calculateElapsedTime();
            }
            this.bufferingState = true;
            this.onPlayerEvent.notify("buffering", null, null);
            return;
        }
        else if (__reg0 === "playing") 
        {
            this.playerState = "PLAYING";
            if (this.isSeeking == true) 
            {
                this.isSeeking = false;
                this.onPlayerEvent.notify("onSeek", null, null);
            }
            if (!this.playbackStarted) 
            {
                this.playbackStarted = true;
                if (this.maxDuration != null && this.maxDuration != undefined) 
                {
                    this.durationTimerId = setInterval(this, "getDurationInfo", this.maxDuration * 1000);
                }
            }
            if (this.playbackResponseSent == false) 
            {
                this.sendPlaybackResponse("200", this.contentItem.responseLink);
                this.playbackResponseSent = true;
            }
            this.bufferingState = false;
            this.onPlayerEvent.notify("playing", null, null);
            return;
        }
        else if (__reg0 === "error") 
        {
            this.errorFlag = true;
            this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_UNKNOWN_ERROR;
            this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_ERROR_UNKNOWN;
            if ((__reg0 = __reg3[1]) === "INVALID_FILE") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_INVALID_FILE;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_FILE_NOT_FOUND;
            }
            else if (__reg0 === "OPEN_FILE_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_OPEN_FILE_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_FILE_OPEN_ERROR;
            }
            else if (__reg0 === "READ_FILE_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_READ_FILE_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_FILE_READ_ERROR;
            }
            else if (__reg0 === "CONNECTION_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_CONNECTION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_CONNECTION_ERROR;
            }
            else if (__reg0 === "DETECTION_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DETECTION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_DETECTION_ERROR;
            }
            else if (__reg0 === "DISC_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DISC_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_DISC_ERROR;
            }
            else if (__reg0 === "DISC_REGION_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DISC_REGION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_DISC_REGION_ERROR;
            }
            else if (__reg0 === "SYSTEM_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_SYSTEM_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_SYSTEM_ERROR;
            }
            else if (__reg0 === "NETWORK_ERROR") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_NETWORK_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_NETWORK_ERROR;
            }
            else if (__reg0 === "FORMAT_NOT_SUPPORTED") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_FORMAT_NOT_SUPPORTED;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_FORMAT_NOT_SUPPORTED;
            }
            else if (__reg0 === "ERROR_UNKNOWN") 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_UNKNOWN_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_ERROR_UNKNOWN;
            }
            return;
        }
        else if (__reg0 === "terminated") 
        {
            if (!this.vodEventsRemoved) 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
                this.vodEventsRemoved = true;
            }
            if (this.stopBtnPressed) 
            {
                this.onPlayerEvent.notify("onStop");
            }
            else if (this.errorFlag) 
            {
                if (this.playbackStarted) 
                {
                    if (!this.playerTimeOut) 
                    {
                        this.sendPlaybackResponse(this.errorCode, this.contentItem.responseLink);
                    }
                }
                else 
                {
                    this.sendPlaybackResponse("404", this.contentItem.responseLink);
                }
                this.onPlayerEvent.notify("onError", this.errString);
            }
            else if (this.playbackStarted) 
            {
                this.onPlayerEvent.notify("onEndPlayback");
            }
            else 
            {
                this.errString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY;
                this.sendPlaybackResponse("404", this.contentItem.responseLink);
                this.onPlayerEvent.notify("onError", this.errString);
            }
            this.playerState = "STOPPED";
            return;
        }
        else if (__reg0 !== "stream_end") 
        {
            return;
        }
        return;
    }

    function getCurrentTime()
    {
        this.getCurrentVodInfo();
    }

    function getCurrentVodInfo()
    {
        if (this.xmlVodInfo != null) 
        {
            delete this.xmlVodInfo;
            this.xmlVodInfo = null;
        }
        this.xmlVodInfo = new XML();
        this.xmlVodInfo.onLoad = this.fn.onLoadXmlVodInfo;
        this.xmlVodInfo.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=get_current_vod_info");
    }

    function onLoadXmlVodInfo(success)
    {
        var __reg3 = null;
        var __reg2 = null;
        var __reg4 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlVodInfo.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
        if (this.forStopVod) 
        {
            if (__reg4 == 0) 
            {
                this.stopVodLoadTimerId = setInterval(this, "execCommand", 500, "stop_vod");
            }
            else if (this.errorFlag) 
            {
                this.onPlayerEvent.notify("onError", this.errString);
            }
            else 
            {
                this.onPlayerEvent.notify("onStop");
            }
        }
        else 
        {
            if (__reg4 == 0) 
            {
                __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlVodInfo.firstChild, "/theDavidBox/response/currentTime").firstChild.nodeValue);
                __reg3 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlVodInfo.firstChild, "/theDavidBox/response/totalTime").firstChild.nodeValue);
            }
            this.onPlayerEvent.notify("onGetCurrentTime", __reg2, __reg3);
        }
        success = null;
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function seekVideo(seconds)
    {
        this.execCommand("set_time_seek_vod", com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(seconds));
        this.isSeeking = true;
        seconds = null;
    }

    function pausePlayer()
    {
        this.execCommand("pause_vod");
    }

    function play()
    {
        this.execCommand("resume_vod");
    }

    function endPlayback()
    {
        this.stopPlayer();
    }

    function stopPlayer()
    {
        if (this.stopBtnPressed) 
        {
            return;
        }
        this.stopBtnPressed = true;
        if (!this.playerStarted || this.playerTimeOut) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
            this.vodEventsRemoved = true;
        }
        this.execCommand("stop_vod");
    }

    function getDurationInfo()
    {
        if (this.xmlDurationInfo != null) 
        {
            delete this.xmlDurationInfo;
            this.xmlDurationInfo = null;
        }
        this.xmlDurationInfo = new XML();
        this.xmlDurationInfo.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=get_current_vod_info");
        this.xmlDurationInfo.onLoad = this.fn.onLoadXmlDurationInfo;
    }

    function onLoadXmlDurationInfo(success)
    {
        var __reg3 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlDurationInfo.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
        var __reg2 = null;
        var __reg4 = null;
        if (__reg3 == 0) 
        {
            __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlDurationInfo.firstChild, "/theDavidBox/response/currentTime").firstChild.nodeValue);
            __reg4 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlDurationInfo.firstChild, "/theDavidBox/response/totalTime").firstChild.nodeValue);
        }
        if (__reg2 >= this.maxDuration) 
        {
            this.stopPlayer();
        }
        else 
        {
            clearInterval(this.durationTimerId);
            this.durationTimerId = -1;
            this.durationTimerId = setInterval(this, "getDurationInfo", (this.maxDuration - __reg2) * 1000);
        }
        success = null;
    }

    function calculateElapsedTime()
    {
        var __reg2 = Math.abs(this.endDateTime.valueOf() - this.startDateTime.valueOf());
        __reg2 = __reg2 / 1000;
        this.elapseTime = this.elapseTime + __reg2;
        __reg2 = null;
    }

    function startTimer()
    {
        if (this.startDateTime != null) 
        {
            delete this.startDateTime;
            this.startDateTime = null;
        }
        this.startDateTime = new Date();
    }

    function endTimer()
    {
        if (this.endDateTime != null) 
        {
            delete this.endDateTime;
            this.endDateTime = null;
        }
        this.endDateTime = new Date();
    }

    function setElapseTime(seconds)
    {
        this.elapseTime = seconds;
        this.startTimer();
        seconds = null;
    }

    function getElapseTime()
    {
        if (this.playbackStarted) 
        {
            if (this.playerState == "PLAYING") 
            {
                this.endTimer();
                this.calculateElapsedTime();
            }
        }
        return this.elapseTime;
    }

    function urlEncode(encodedString)
    {
        encodedString = escape(encodedString);
        encodedString = this.replace(encodedString, "%2D", "-");
        encodedString = this.replace(encodedString, "%2E", ".");
        encodedString = this.replace(encodedString, "%5F", "_");
        encodedString = this.replace(encodedString, "%7E", "~");
        return encodedString;
    }

    function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

}

//Sprite 669
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents
{
    static var fn = null;
    static var boxSocket = null;
    static var eventsXML = null;
    static var playbackStarted: Boolean = false;
    static var socketConnected: Boolean = false;
    static var retrymode: Boolean = true;
    static var socketResponseSent: Boolean = false;
    static var onVodEvent = null;
    static var onSocketEvent = null;
    static var onSystemEvent = null;

    function XmlSocketEvents()
    {
    }

    static function destroy()
    {
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket != null) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.close();
            delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket = null;
        }
        delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent;
        delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent;
        delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent = null;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent = null;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent = null;
    }

    static function init()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.connectBoxSocket();
    }

    static function addListener(eventName, obj, listener)
    {
        if (eventName == "SocketEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent.addListener(obj, listener);
        }
        else if (eventName == "VodEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.addListener(obj, listener);
        }
        else if (eventName == "SystemEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent.addListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function removeListener(eventName, obj, listener)
    {
        if (eventName == "SocketEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent.removeListener(obj, listener);
        }
        else if (eventName == "VodEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.removeListener(obj, listener);
        }
        else if (eventName == "SystemEvent") 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent.removeListener(obj, listener);
        }
        eventName = null;
        obj = null;
        listener = null;
    }

    static function connectBoxSocket()
    {
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket != null) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.onConnect = null;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.onClose = null;
            delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket = null;
        }
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket = new XMLSocket();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.connect(com.jadoo.as2.JadooPlus.Utils.Config.localHostIP, 8118);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.onConnect = com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketOnConnect;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.onClose = com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketOnClose;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.onData = com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketOndata;
    }

    static function isSocketConnected()
    {
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketConnected) 
        {
            return true;
        }
        return false;
    }

    static function socketOnConnect(success)
    {
        if (success) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketConnected = true;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.retrymode = false;
            if (!com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketResponseSent) 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent.notify("Socket.Connect.Success");
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketResponseSent = true;
            }
            return;
        }
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.retrymode) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.retrymode = false;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.boxSocket.connect(com.jadoo.as2.JadooPlus.Utils.Config.localHostIP, 8118);
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketConnected = false;
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketResponseSent) 
        {
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSocketEvent.notify("Socket.Connect.Failed");
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketResponseSent = true;
    }

    static function socketOnClose()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.socketConnected = false;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.connectBoxSocket();
    }

    static function socketOndata(xmlData)
    {
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML;
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML = null;
        }
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML = new XML();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML = new XML();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML.ignoreWhite = true;
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML.parseXML(xmlData);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.processData(com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.eventsXML);
    }

    static function processData(eventsXML)
    {
        var __reg4 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/event");
        var __reg6 = __reg4[0].childNodes.toString();
        if ((__reg0 = __reg6) === "playback start") 
        {
            var __reg5 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/type")[0].childNodes.toString();
            if ((__reg0 = __reg5) === "audio") 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("playback start");
            }
            else if (__reg0 === "video") 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("playback start");
            }
            else 
            {
                __reg0 === "unknown";
            }
            __reg5 = null;
        }
        else if (__reg0 === "playback status") 
        {
            var __reg3 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/status")[0].childNodes.toString();
            if ((__reg0 = __reg3) === "0") 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("buffering");
            }
            else if (__reg0 === "1") 
            {
                if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.playbackStarted) 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("playing", false);
                }
                else 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("playing", true);
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.playbackStarted = true;
                }
            }
            __reg3 = null;
        }
        else if (__reg0 === "playback end") 
        {
            __reg5 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/type")[0].childNodes.toString();
            var __reg2 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/error")[0].childNodes.toString();
            if ((__reg0 = __reg5) === "audio") 
            {
                if (__reg2 == "0") 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("stream_end");
                }
                else 
                {
                    if ((__reg0 = __reg2) === "1") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "INVALID_FILE";
                    }
                    else if (__reg0 === "2") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "OPEN_FILE_ERROR";
                    }
                    else if (__reg0 === "3") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "READ_FILE_ERROR";
                    }
                    else if (__reg0 === "4") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "CONNECTION_ERROR";
                    }
                    else if (__reg0 === "5") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DETECTION_ERROR";
                    }
                    else if (__reg0 === "6") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DISC_ERROR";
                    }
                    else if (__reg0 === "7") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DISC_REGION_ERROR";
                    }
                    else if (__reg0 === "8") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "SYSTEM_ERROR";
                    }
                    else if (__reg0 === "10") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "NETWORK_ERROR";
                    }
                    else if (__reg0 === "12") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "FORMAT_NOT_SUPPORTED";
                    }
                    else if (__reg0 === "13") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "ERROR_UNKNOWN";
                    }
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("error", com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString);
                }
            }
            else if (__reg0 === "video") 
            {
                if (__reg2 == "0") 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("stream_end");
                }
                else 
                {
                    if ((__reg0 = __reg2) === "1") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "INVALID_FILE";
                    }
                    else if (__reg0 === "2") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "OPEN_FILE_ERROR";
                    }
                    else if (__reg0 === "3") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "READ_FILE_ERROR";
                    }
                    else if (__reg0 === "4") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "CONNECTION_ERROR";
                    }
                    else if (__reg0 === "5") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DETECTION_ERROR";
                    }
                    else if (__reg0 === "6") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DISC_ERROR";
                    }
                    else if (__reg0 === "7") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "DISC_REGION_ERROR";
                    }
                    else if (__reg0 === "8") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "SYSTEM_ERROR";
                    }
                    else if (__reg0 === "10") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "NETWORK_ERROR";
                    }
                    else if (__reg0 === "12") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "FORMAT_NOT_SUPPORTED";
                    }
                    else if (__reg0 === "13") 
                    {
                        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString = "ERROR_UNKNOWN";
                    }
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("error", com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.errorString);
                }
            }
            else 
            {
                __reg0 === "unknown";
            }
            __reg5 = null;
            __reg2 = null;
        }
        else if (__reg0 === "playback terminate") 
        {
            __reg5 = mx.xpath.XPathAPI.selectNodeList(eventsXML.firstChild, "/theDavidBox/type")[0].childNodes.toString();
            if ((__reg0 = __reg5) === "audio") 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("terminated");
            }
            else if (__reg0 === "video") 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onVodEvent.notify("terminated");
            }
            else 
            {
                __reg0 === "unknown";
            }
            __reg5 = null;
        }
        else if (__reg0 !== "slideshow start") 
        {
            if (__reg0 !== "slideshow next") 
            {
                if (__reg0 !== "slideshow end") 
                {
                    if (__reg0 !== "photo playback terminate") 
                    {
                        if (__reg0 === "wireless dongle insert") 
                        {
                            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent.notify("System.WirelessUsbInserted");
                        }
                        else if (__reg0 === "wireless dongle remove") 
                        {
                            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.onSystemEvent.notify("System.WirelessUsbRemoved");
                        }
                    }
                }
            }
        }
        __reg4 = null;
        __reg6 = null;
    }

    static function resetSocket()
    {
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.playbackStarted = false;
    }

}

//Sprite 670
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.ErrorCodes
{
    static var REGISTRATION_FIELDS_XML_NOT_LOADED: String = "0x2010";
    static var REGISTRATION_BOXID_NOT_LOADED: String = "0x2020";
    static var REGISTRATION_POST_SERVER_XML_NOT_LOADED: String = "0x2030";
    static var THREETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x3010";
    static var TWOTIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x3020";
    static var ONETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x3030";
    static var BACKGROUND_IMAGE_NOT_LOADED: String = "0x3040";
    static var TIER1_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4011";
    static var TIER1_ITEMS_XML_NOT_LOADED: String = "0x4012";
    static var TIER1_ITEMS_NOT_LOADED: String = "0x4013";
    static var TIER1_ITEMS_XML_TIMEOUT: String = "0x4014";
    static var TIER1_SELECTOR_NOT_LOADED: String = "0x4020";
    static var TIER2_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4111";
    static var TIER2_ITEMS_XML_NOT_LOADED: String = "0x4112";
    static var TIER2_ITEMS_NOT_LOADED: String = "0x4113";
    static var TIER2_ITEMS_XML_TIMEOUT: String = "0x4114";
    static var TIER2_SELECTOR_NOT_LOADED: String = "0x4120";
    static var GRIDTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4211";
    static var GRIDTIER_ITEM_INITIAL_ITEMS_NOT_LOADED: String = "0x4212";
    static var GRIDTIER_ITEMS_XML_NOT_LOADED: String = "0x4221";
    static var GRIDTIER_ITEMS_XML_TIMEOUT: String = "0x4222";
    static var GRIDTIER_ITEMS_NOT_LOADED: String = "0x4223";
    static var GRIDTIER_SELECTOR_NOT_LOADED: String = "0x4230";
    static var CARDTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4311";
    static var CARDTIER_ITEM_INITIAL_ITEMS_NOT_LOADED: String = "0x4312";
    static var CARDTIER_ITEMS_XML_NOT_LOADED: String = "0x4321";
    static var CARDTIER_ITEMS_XML_TIMEOUT: String = "0x4322";
    static var CARDTIER_ITEMS_NOT_LOADED: String = "0x4323";
    static var CARDTIER_SELECTOR_NOT_LOADED: String = "0x4330";
    static var CATEGORYTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4411";
    static var CATEGORYTIER_ITEM_INITIAL_ITEMS_NOT_LOADED: String = "0x4412";
    static var CATEGORYTIER_ITEMS_XML_NOT_LOADED: String = "0x4421";
    static var CATEGORYTIER_ITEMS_XML_TIMEOUT: String = "0x4422";
    static var CATEGORYTIER_ITEMS_NOT_LOADED: String = "0x4423";
    static var CATEGORYTIER_SELECTOR_NOT_LOADED: String = "0x4430";
    static var ROTATIONTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4511";
    static var ROTATIONTIER_ITEM_INITIAL_ITEMS_NOT_LOADED: String = "0x4512";
    static var ROTATIONTIER_ITEMS_XML_NOT_LOADED: String = "0x4521";
    static var ROTATIONTIER_ITEMS_XML_TIMEOUT: String = "0x4522";
    static var ROTATIONTIER_ITEMS_NOT_LOADED: String = "0x4523";
    static var ROTATIONTIER_SELECTOR_NOT_LOADED: String = "0x4530";
    static var GROUPSUBTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO: String = "0x4611";
    static var GROUPSUBTIER_ITEM_INITIAL_ITEMS_NOT_LOADED: String = "0x4612";
    static var GROUPSUBTIER_ITEMS_XML_NOT_LOADED: String = "0x4621";
    static var GROUPSUBTIER_ITEMS_XML_TIMEOUT: String = "0x4622";
    static var GROUPSUBTIER_ITEMS_NOT_LOADED: String = "0x4623";
    static var GROUPSUBTIER_SELECTOR_NOT_LOADED: String = "0x4630";
    static var PAGE_XML_NOT_LOADED: String = "0x5010";
    static var PAGE_XML_TIMEOUT: String = "0x5011";
    static var RTMP_SUBSCRIPTION_NOT_SUCCESSFUL: String = "0x6000";
    static var RTMP_REACHED_MAX_BUF_TIME: String = "0x6010";
    static var RTMP_STREAM_NOT_FOUND: String = "0x6020";
    static var RTMP_NET_CONNECTION_FAILED: String = "0x6030";
    static var RTMP_UNPUBLISH_NOTIFY: String = "0x6040";
    static var RTMP_BUFFER_TIMEOUT_30SECS: String = "0x6050";
    static var RTMP_INFINITE_BUFFER_PLAY_LOOP: String = "0x6060";
    static var RTMP_STREAM_CONNECTION_FAILED: String = "0x6070";
    static var WMV_REACHED_MAX_BUF_TIME: String = "0x6100";
    static var WMV_VOD_START_RETURNS_1: String = "0x6110";
    static var WMV_CONNECTION_ERROR: String = "0x6121";
    static var WMV_NETWORK_ERROR: String = "0x6122";
    static var WMV_FORMAT_NOT_SUPPORTED: String = "0x6123";
    static var WMV_ERROR_UNKNOWN: String = "0x6124";
    static var WMV_FILE_NOT_FOUND: String = "0x6125";
    static var WMV_FILE_OPEN_ERROR: String = "0x6126";
    static var WMV_FILE_READ_ERROR: String = "0x6127";
    static var WMV_DETECTION_ERROR: String = "0x6128";
    static var WMV_DISC_ERROR: String = "0x6129";
    static var WMV_DISC_REGION_ERROR: String = "0x612A";
    static var WMV_SYSTEM_ERROR: String = "0x612B";
    static var WMV_BUFFER_TIMEOUT_30SECS: String = "0x612C";
    static var WMV_TERMINATE: String = "0x612D";
    static var VOD_REACHED_MAX_BUF_TIME: String = "0x6200";
    static var VOD_FILE_NOT_FOUND: String = "0x6211";
    static var VOD_FILE_OPEN_ERROR: String = "0x6212";
    static var VOD_FILE_READ_ERROR: String = "0x6213";
    static var VOD_CONNECTION_ERROR: String = "0x6214";
    static var VOD_NETWORK_ERROR: String = "0x6215";
    static var VOD_FORMAT_NOT_SUPPORTED: String = "0x6216";
    static var VOD_ERROR_UNKNOWN: String = "0x6217";
    static var VOD_DETECTION_ERROR: String = "0x6218";
    static var VOD_DISC_ERROR: String = "0x6219";
    static var VOD_DISC_REGION_ERROR: String = "0x621A";
    static var VOD_SYSTEM_ERROR: String = "0x621B";
    static var FLV_REACHED_MAX_BUF_TIME: String = "0x6300";
    static var FLV_FILE_NOT_FOUND: String = "0x6310";
    static var FLV_FILE_STUCTURE_INVALID: String = "0x6320";
    static var FLV_NO_SUPPORTED_TRACK_FOUND: String = "0x6330";
    static var EPG_ITEMS_XML_NOT_LOADED: String = "0x7010";
    static var EPG_ITEMS_XML_TIMEOUT: String = "0x7011";
    static var VOD_EVENTS_SOCKET_NOT_CONNECTED: String = "0x8000";
    static var USERPROFILE_XML_NOT_LOADED: String = "0x9010";
    static var USERPROFILE_XML_TIMEOUT: String = "0x9011";
    static var ON_FETCH_ITEM_DIRECT_LINK_NOT_LOADED: String = "0xA011";
    static var ON_FETCH_NEXT_ITEM_DIRECT_LINK_NOT_LOADED: String = "0xA012";
    static var ON_FETCH_PREV_ITEM_DIRECT_LINK_NOT_LOADED: String = "0xA013";
    static var ON_FETCH_ITEM_DIRECT_LINK_TIMEOUT: String = "0xA014";
    static var ON_FETCH_NEXT_ITEM_DIRECT_LINK_TIMEOUT: String = "0xA015";
    static var ON_FETCH_PREV_ITEM_DIRECT_LINK_TIMEOUT: String = "0xA016";
    static var PROGRAMLISTING_ITEMS_XML_NOT_LOADED: String = "0xB010";
    static var PROGRAMLISTING_ITEMS_XML_TIMEOUT: String = "0xB011";
    static var errCodeBaseURL = null;
    static var errLogURL = null;
    static var errLogXML = null;

    function ErrorCodes()
    {
    }

    static function initialize(baseURL)
    {
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errCodeBaseURL = baseURL;
    }

    static function sendToServer(errCode, module, pageTitle, pageId)
    {
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errCodeBaseURL;
        if (com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL.charAt(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL.length - 1) != "/") 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL + "/";
        }
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL + (errCode + "/" + module + "/" + pageTitle + "/" + pageId + "/");
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL + (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId());
        if (com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogXML != null) 
        {
            delete com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogXML;
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogXML = null;
        }
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogXML = new XML();
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogXML.load(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.errLogURL);
    }

}

//Sprite 671
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.FlvPlayer extends com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodStreamPlayer
{
    var playerMC = null;
    var videoMC = null;
    var netConnection = null;
    var netStream = null;
    var loadTimerId = null;
    var totalTime: Number = 0;
    var durationTimerId: Number = -1;
    var errorString = null;
    var playbackState: String = "Playing";
    var playbackStarted: Boolean = false;
    var bufferingState: Boolean = false;
    var canSeekOnTime: Boolean = false;
    var timeInterval: Number = -1;
    var bufferingTimerId: Number = -1;
    var isBufferingTimerSet: Boolean = false;
    var stopBtnPressed: Boolean = false;
    var isSeeking: Boolean = false;
    var contentItem;
    var fn;
    var maxDuration;
    var onPlayerEvent;
    var parentMC;
    var playbackResponseSent;
    var sendPlaybackResponse;

    function FlvPlayer()
    {
        super();
        this.fn = {onStatus: mx.utils.Delegate.create(this, this.onStatus), onMetaData: mx.utils.Delegate.create(this, this.onMetaData)};
        this.netConnection = new NetConnection();
        this.netConnection.connect(null);
        this.netStream = new NetStream(this.netConnection);
        this.netStream.onStatus = this.fn.onStatus;
        this.netStream.onMetaData = this.fn.onMetaData;
    }

    function create(parentMC, contentItem, maxDuration)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("FLV_Player");
        }
        this.playerMC = parentMC.createEmptyMovieClip("playerMC", parentMC.getNextHighestDepth());
        super.create(parentMC, contentItem, maxDuration);
        this.videoMC = this.playerMC.attachMovie("videoContainer", "videoContainerMC", this.playerMC.getNextHighestDepth(), {_x: 0, _y: 0});
        this.videoMC.videoObj.attachVideo(this.netStream);
        if (contentItem.streamLink.substring(contentItem.streamLink.length - 4, contentItem.streamLink.length) != ".flv") 
        {
            this.canSeekOnTime = true;
        }
        parentMC = null;
        contentItem = null;
        maxDuration = null;
    }

    function destroy()
    {
        clearInterval(this.loadTimerId);
        clearInterval(this.durationTimerId);
        clearInterval(this.bufferingTimerId);
        removeMovieClip(this.parentMC.playerMC);
        this.destroyStreaming();
        this.playerMC = null;
        super.destroy();
    }

    function streamPlay()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Play_" + this.contentItem.streamLink);
        }
        this.netStream.setBufferTime(5);
        this.bufferingState = true;
        this.netStream.play(this.contentItem.streamLink);
        if (this.contentItem.itemName == "ad") 
        {
            this.loadTimerId = setInterval(this, "checkPlaybackStart", 15000);
            return;
        }
        this.loadTimerId = setInterval(this, "checkPlaybackStart", com.jadoo.as2.JadooPlus.Utils.Config.playerLoadTimeOut);
    }

    function checkPlaybackStart()
    {
        clearInterval(this.loadTimerId);
        if (this.playbackStarted) 
        {
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("FLV_Player_Timeout");
        }
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.FLV_REACHED_MAX_BUF_TIME, this.contentItem.responseLink);
        this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY + " " + this.contentItem.itemName;
        this.onPlayerEvent.notify("onError", this.errorString);
    }

    function endPlayback()
    {
        this.videoMC._visible = false;
        this.destroyStreaming();
        this.onPlayerEvent.notify("onEndPlayback");
    }

    function stopPlayer()
    {
        if (this.stopBtnPressed) 
        {
            return;
        }
        this.stopBtnPressed = true;
        this.videoMC._visible = false;
        this.destroyStreaming();
        this.onPlayerEvent.notify("onStop");
    }

    function seekVideo(seconds)
    {
        this.netStream.seek(seconds);
        this.isSeeking = true;
        seconds = null;
    }

    function destroyStreaming()
    {
        if (this.netConnection != null) 
        {
            delete this.netConnection;
            this.netConnection = null;
        }
        if (this.netStream != null) 
        {
            this.netStream.onStatus = null;
            this.netStream.onMetaData = null;
            this.netStream.play(false);
            this.netStream.close();
            delete this.netStream;
            this.netStream = null;
        }
        this.videoMC.videoObj.attachVideo(null);
        removeMovieClip(this.videoMC);
    }

    function getCurrentTime()
    {
        var __reg2 = int(this.netStream.time);
        this.onPlayerEvent.notify("onGetCurrentTime", __reg2, this.totalTime);
    }

    function bufferingTimeOut()
    {
        clearInterval(this.bufferingTimerId);
        this.isBufferingTimerSet = false;
        var __reg2 = int(this.netStream.time);
        if (__reg2 == this.timeInterval) 
        {
            this.onPlayerEvent.notify("onEndPlayback");
        }
        __reg2 = null;
    }

    function onStatus(infoObject)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NSStatus_" + infoObject.code);
        }
        if (infoObject.code == "NetStream.Play.Start") 
        {
            this.onPlayerEvent.notify("loading");
        }
        else if (infoObject.code == "NetStream.Play.StreamNotFound") 
        {
            clearInterval(this.loadTimerId);
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.FLV_FILE_NOT_FOUND, this.contentItem.responseLink);
            this.destroyStreaming();
            this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_NOT_FOUND;
            this.onPlayerEvent.notify("onError", this.errorString);
        }
        else if (infoObject.code == "NetStream.Play.FileStructureInvalid") 
        {
            clearInterval(this.loadTimerId);
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.FLV_FILE_STUCTURE_INVALID, this.contentItem.responseLink);
            this.destroyStreaming();
            this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_FILE_STRUCTURE_INVALID;
            this.onPlayerEvent.notify("onError", this.errorString);
        }
        else if (infoObject.code == "NetStream.Play.NoSupportedTrackFound") 
        {
            clearInterval(this.loadTimerId);
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.FLV_NO_SUPPORTED_TRACK_FOUND, this.contentItem.responseLink);
            this.destroyStreaming();
            this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_VIDEO_NO_SUPPORTED_TRACK;
            this.onPlayerEvent.notify("onError", this.errorString);
        }
        else if (infoObject.code == "NetStream.Buffer.Full") 
        {
            if (!this.playbackStarted) 
            {
                this.playbackStarted = true;
                if (this.maxDuration != null && this.maxDuration != undefined) 
                {
                    this.durationTimerId = setInterval(this, "getDurationInfo", this.maxDuration * 1000);
                }
            }
            if (this.playbackResponseSent == false) 
            {
                clearInterval(this.loadTimerId);
                this.sendPlaybackResponse("200", this.contentItem.responseLink);
                this.playbackResponseSent = true;
            }
            if (this.isSeeking == true) 
            {
                this.isSeeking = false;
                this.onPlayerEvent.notify("onSeek", null, null);
            }
            else if (this.isBufferingTimerSet == false) 
            {
                this.onPlayerEvent.notify("playing", int(this.netStream.time), this.totalTime);
                this.bufferingState = false;
            }
        }
        else if (infoObject.code == "NetStream.Buffer.Empty") 
        {
            var __reg3 = int(this.netStream.time);
            if (__reg3 == this.timeInterval && __reg3 > this.totalTime - 5) 
            {
                if (this.isBufferingTimerSet == false) 
                {
                    this.isBufferingTimerSet = true;
                    this.bufferingTimerId = setInterval(this, "bufferingTimeOut", 3000);
                }
            }
            else 
            {
                this.timeInterval = __reg3;
            }
            this.onPlayerEvent.notify("buffering", __reg3, this.totalTime);
            this.bufferingState = true;
        }
        else if (infoObject.code != "NetStream.Seek.Notify") 
        {
            if (infoObject.code == "NetStream.Play.Stop") 
            {
                this.onPlayerEvent.notify("onEndPlayback");
            }
        }
        infoObject = null;
    }

    function getDurationInfo()
    {
        var __reg2 = int(this.netStream.time);
        if (__reg2 >= this.maxDuration) 
        {
            this.stopPlayer();
            return;
        }
        clearInterval(this.durationTimerId);
        this.durationTimerId = -1;
        this.durationTimerId = setInterval(this, "getDurationInfo", (this.maxDuration - __reg2) * 1000);
    }

    function onMetaData(infoObject)
    {
        this.totalTime = int(infoObject.duration);
        if (this.maxDuration == null || this.maxDuration == undefined) 
        {
            this.maxDuration = this.totalTime;
        }
        if (this.canSeekOnTime == false) 
        {
            this.canSeekOnTime = infoObject.canseekontime;
            if (this.canSeekOnTime == null || this.canSeekOnTime == undefined) 
            {
                if (infoObject.seekpoints != null || infoObject.seekpoints != undefined) 
                {
                    this.canSeekOnTime = true;
                }
                else 
                {
                    this.canSeekOnTime = false;
                }
            }
        }
        this.onPlayerEvent.notify("onMataData", this.canSeekOnTime);
        infoObject = null;
    }

    function pausePlayer()
    {
        this.netStream.pause(true);
        this.onPlayerEvent.notify("paused", int(this.netStream.time), this.totalTime);
    }

    function play()
    {
        this.netStream.pause(false);
        this.onPlayerEvent.notify("playing");
    }

    function getElapseTime()
    {
        var __reg2 = this.netStream.time;
        return __reg2;
    }

}

//Sprite 672
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.YoutubePlayer extends com.jadoo.as2.JadooPlus.Player.ContentPlayer.VodStreamPlayer
{
    var bufferingState: Boolean = true;
    var playerLoadIntervalId = null;
    var playerMC = null;
    var isPlayerLoaded: Boolean = false;
    var totalTime: Number = 0;
    var currentTime: Number = 0;
    var ytPlayerLoader = null;
    var ytPlayerLoaderListener = null;
    var playbackStarted: Boolean = false;
    var checkingIntervalId: Number = -1;
    var isTimeSeeked: Boolean = false;
    var seekTime = null;
    var stopBtnPressed: Boolean = false;
    var isSeeking: Boolean = false;
    var contentItem;
    var fn;
    var onLoadingEvent;
    var onPlayerEvent;
    var parentMC;
    var playbackResponseSent;
    var sendPlaybackResponse;

    function YoutubePlayer()
    {
        super();
        System.security.allowDomain("http://www.youtube.com");
        this.fn = {onYtPlayerLoadInit: mx.utils.Delegate.create(this, this.onYtPlayerLoadInit), onYtPlayerLoadError: mx.utils.Delegate.create(this, this.onYtPlayerLoadError), onPlayerStateChange: mx.utils.Delegate.create(this, this.onPlayerStateChange), onPlayerError: mx.utils.Delegate.create(this, this.onPlayerError)};
    }

    function create(parentMC, contentItem, maxDuration)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("YT_AS2_Player");
        }
        this.playerMC = parentMC.createEmptyMovieClip("playerMC", parentMC.getNextHighestDepth());
        super.create(parentMC, contentItem, maxDuration);
        var __reg4 = parentMC.attachMovie("maskMC", "maskMC", parentMC.getNextHighestDepth());
        __reg4._width = 1280;
        __reg4._height = 720;
        this.ytPlayerLoader = new MovieClipLoader();
        this.ytPlayerLoaderListener = new Object();
        this.ytPlayerLoaderListener.onLoadInit = this.fn.onYtPlayerLoadInit;
        this.ytPlayerLoader.addListener(this.ytPlayerLoaderListener);
        __reg4 = null;
        parentMC = null;
    }

    function destroy()
    {
        clearInterval(this.playerLoadIntervalId);
        clearInterval(this.checkingIntervalId);
        if (this.ytPlayerLoader != null) 
        {
            this.ytPlayerLoader.removeListener(this.ytPlayerLoaderListener);
            delete this.ytPlayerLoader;
            this.ytPlayerLoader = null;
        }
        if (this.ytPlayerLoaderListener != null) 
        {
            delete this.ytPlayerLoaderListener;
            this.ytPlayerLoaderListener = null;
        }
        if (this.isPlayerLoaded) 
        {
            this.cleanRemove(this.playerMC.loadClip);
            this.cleanRemove(this.playerMC);
            this.playerMC.destroy();
        }
        this.playerMC.removeMovieClip();
        delete this.playerMC;
        this.playerMC = null;
        if (this.parentMC.maskMC != null && this.parentMC.maskMC != undefined) 
        {
            removeMovieClip(this.parentMC.maskMC);
        }
        this.parentMC = null;
        super.destroy();
    }

    function cleanRemove(object)
    {
        for (var __reg5 in object) 
        {
            if (object[__reg5] instanceof MovieClip) 
            {
                this.cleanMC(object[__reg5], false);
            }
            else if (object[__reg5] instanceof Array) 
            {
                __reg4 = object[__reg5].length;
                __reg3 = 0;
                while (__reg3 < __reg4) 
                {
                    object[__reg5].pop();
                    ++__reg3;
                }
            }
            else if (object[__reg5] instanceof TextField) 
            {
                object[__reg5].removeTextField();
            }
            else if (__reg5 == "firstChild") 
            {
                __reg4 = object[__reg5].childNodes.length;
                __reg3 = 0;
                while (__reg3 < __reg4) 
                {
                    object[__reg5].childNodes.pop();
                    ++__reg3;
                }
                object[__reg5].removeNode();
            }
            else if (__reg5 == "lastChild") 
            {
                var __reg4 = object[__reg5].childNodes.length;
                var __reg3 = 0;
                while (__reg3 < __reg4) 
                {
                    object[__reg5].childNodes.pop();
                    ++__reg3;
                }
                object[__reg5].removeNode();
            }
            delete object[__reg5];
            object[__reg5] = null;
        }
    }

    function cleanMC(target, keepMainMC)
    {
        for (var __reg4 in target) 
        {
            for (var __reg3 in target[__reg4]) 
            {
                for (var __reg2 in target[__reg4][__reg3]) 
                {
                    target[__reg4][__reg3][__reg2].removeMovieClip();
                }
                target[__reg4][__reg3].removeMovieClip();
            }
            target[__reg4].removeMovieClip();
        }
        if (keepMainMC) 
        {
            return;
        }
        target.removeMovieClip();
    }

    function streamPlay()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Play_" + this.contentItem.streamLink);
        }
        this.bufferingState = true;
        this.ytPlayerLoader.loadClip(this.contentItem.streamLink + "?version=2&autohide=1&autoplay=0&showinfo=0&rel=0&iv_load_policy=3&disablekb=1&cc_load_policy=1", this.playerMC);
        this.onPlayerEvent.notify("loading");
    }

    function play()
    {
        this.playerMC.playVideo();
        this.onPlayerEvent.notify("playing");
    }

    function seekVideo(seconds)
    {
        this.seekTime = seconds;
        this.isTimeSeeked = true;
        this.isSeeking = true;
        this.playerMC.seekTo(seconds, true);
        seconds = null;
    }

    function stopPlayer()
    {
        if (this.stopBtnPressed) 
        {
            return;
        }
        this.stopBtnPressed = true;
        clearInterval(this.playerLoadIntervalId);
        if (this.isPlayerLoaded) 
        {
            this.playerMC.stopVideo();
            this.playerMC.clearVideo();
            this.playerMC._visible = false;
            _global.setTimeout(this, "appNotification", 3000);
            return;
        }
        if (this.ytPlayerLoader != null) 
        {
            this.ytPlayerLoader.removeListener(this.ytPlayerLoaderListener);
            delete this.ytPlayerLoader;
            this.ytPlayerLoader = null;
        }
        if (this.ytPlayerLoaderListener != null) 
        {
            this.ytPlayerLoaderListener.onLoadInit = null;
            this.ytPlayerLoaderListener.onLoadError = null;
            delete this.ytPlayerLoaderListener;
            this.ytPlayerLoaderListener = null;
        }
        this.playerMC.removeMovieClip();
        delete this.playerMC;
        this.playerMC = null;
        if (this.parentMC.maskMC != null && this.parentMC.maskMC != undefined) 
        {
            removeMovieClip(this.parentMC.maskMC);
        }
        this.onPlayerEvent.notify("onStop");
    }

    function onYtPlayerLoadInit()
    {
        this.playerLoadIntervalId = setInterval(this, "checkPlayerLoaded", 250);
    }

    function onYtPlayerLoadError(targetMC, errorCode)
    {
        this.onPlayerEvent.notify("onError", "Unable to play the video. Can not load player");
        targetMC = null;
        errorCode = null;
    }

    function onPlayerStateChange(newState)
    {
        if (newState == 0) 
        {
            this.endPlayback();
            return;
        }
        if (newState == 1) 
        {
            if (this.isSeeking = true) 
            {
                this.isSeeking = false;
                this.onPlayerEvent.notify("onSeek", null, null);
            }
            if (!this.playbackStarted) 
            {
                this.totalTime = int(this.playerMC.getDuration());
                this.playbackStarted = true;
            }
            if (this.playbackResponseSent == false) 
            {
                this.sendPlaybackResponse("200", this.contentItem.responseLink);
                this.playbackResponseSent = true;
            }
            this.currentTime = int(this.playerMC.getCurrentTime());
            this.bufferingState = false;
            if (this.isTimeSeeked && this.currentTime == 0) 
            {
                this.onPlayerEvent.notify("playing", this.seekTime, this.totalTime);
            }
            else 
            {
                this.isTimeSeeked = false;
                this.onPlayerEvent.notify("playing", this.currentTime, this.totalTime);
            }
            return;
        }
        if (newState == 2) 
        {
            this.bufferingState = false;
            this.currentTime = int(this.playerMC.getCurrentTime());
            this.onPlayerEvent.notify("paused", this.currentTime, this.totalTime);
            return;
        }
        if (newState == 3) 
        {
            this.currentTime = int(this.playerMC.getCurrentTime());
            this.bufferingState = true;
            this.onPlayerEvent.notify("buffering", this.currentTime, this.totalTime);
        }
    }

    function getCurrentTime()
    {
        this.currentTime = int(this.playerMC.getCurrentTime());
        this.onPlayerEvent.notify("onGetCurrentTime", this.currentTime, this.totalTime);
    }

    function onPlayerError(errorCode)
    {
        this.playerMC.stopVideo();
        this.playerMC.clearVideo();
        this.playerMC._visible = false;
        if (errorCode == 100) 
        {
            this.onPlayerEvent.notify("onError", "Unable to play the video. Video not found");
            return;
        }
        this.onPlayerEvent.notify("onError", "Unable to play the video. Video playback is not supported");
    }

    function checkPlayerLoaded()
    {
        if (this.playerMC.isPlayerLoaded()) 
        {
            this.isPlayerLoaded = true;
            clearInterval(this.playerLoadIntervalId);
            this.playerMC.addEventListener("onStateChange", this.fn.onPlayerStateChange);
            this.playerMC.addEventListener("onError", this.fn.onPlayerError);
            this.playerMC.setSize(1280, 720);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoControls);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoInformation);
            removeMovieClip(this.playerMC.loadClip.overallHolder.search);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.displayButtons);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.endScreen);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.errorDisplay);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.genieMenu);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.metadataBar);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.playPauseBevel);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.restoreSizeButton);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.largePlayButton);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.mask);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.moduleDisplay);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.still);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.topmostModuleDisplay);
            removeMovieClip(this.playerMC.loadClip.overallHolder.videoPlayer.videoDisplayButton);
            removeMovieClip(this.playerMC.loadClip.sound_mc);
            this.playerMC.tabChildren = false;
            removeMovieClip(this.parentMC.maskMC);
            this.onLoadingEvent.notify();
        }
    }

    function startPlayer()
    {
        this.playerMC.playVideo();
        this.checkingIntervalId = setInterval(this, "checking", 500);
    }

    function checking()
    {
        if (this.playerMC.getCurrentTime() > 0 && this.isBlank(String(this.getTotalTime())) == false && Number(this.getTotalTime()) > 0) 
        {
            clearInterval(this.checkingIntervalId);
            this.playerMC.seekTo(0, true);
        }
    }

    function isBlank(str)
    {
        if (str == null || str == undefined || str == "") 
        {
            return true;
        }
        return false;
    }

    function getTotalTime()
    {
        return this.playerMC.getDuration() <= 0 ? 0 : this.playerMC.getDuration();
    }

    function appNotification()
    {
        this.onPlayerEvent.notify("onStop");
    }

    function endPlayback()
    {
        this.playerMC.stopVideo();
        this.playerMC.clearVideo();
        this.playerMC._visible = false;
        this.onPlayerEvent.notify("onEndPlayback");
    }

    function pausePlayer()
    {
        this.playerMC.pauseVideo();
    }

}

//Sprite 673
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.ResumeVOD
{
    static var resumeVODList = null;
    static var resumeVODInfo = null;
    static var sharedObjectListener = new Object();
    static var maxIdx: Number = 10;

    function ResumeVOD()
    {
    }

    static function initializeResumeVODInfo()
    {
        SharedObject.addListener("ResumeVODList", com.jadoo.as2.JadooPlus.Features.ResumeVOD.onGetResumeVODList);
        SharedObject.getLocal("ResumeVODList");
    }

    static function onGetResumeVODList(resumeVODInfoSO)
    {
        com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODInfo = resumeVODInfoSO;
        com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList = com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODInfo.data.resumeVODList;
        if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList == null || com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList == undefined) 
        {
            com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList = new Array();
            com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODInfo.data.resumeVODList = com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList;
        }
    }

    static function deleteResumeVODInfo(vodItemId)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemId == vodItemId) 
            {
                com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.splice(__reg1, 1);
            }
            ++__reg1;
        }
        com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODInfo.flush();
    }

    static function storeResumeVODInfo(vodLink, vodItemId, time, partIdx)
    {
        var __reg2 = -1;
        var __reg1 = new Object();
        __reg2 = com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODItemIdx(vodItemId);
        if (__reg2 == -1) 
        {
            __reg2 = com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODListLength();
        }
        __reg1.itemLink = vodLink;
        __reg1.itemId = vodItemId;
        __reg1.timeToJump = time;
        __reg1.partIdx = partIdx;
        if (__reg2 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.maxIdx) 
        {
            com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.splice(__reg2, 1, __reg1);
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.splice(0, 1);
            com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.splice(com.jadoo.as2.JadooPlus.Features.ResumeVOD.maxIdx - 1, 0, __reg1);
        }
        com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODInfo.flush();
        false;
        __reg1 = null;
        __reg2 = null;
    }

    static function getResumeVODListLength()
    {
        return com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length;
    }

    static function getResumeVODItemIdx(vodItemId)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemId == vodItemId) 
            {
                return __reg1;
            }
            ++__reg1;
        }
        return -1;
    }

    static function getTimeToJump(vodItemId)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemId == vodItemId) 
            {
                return com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].timeToJump;
            }
            ++__reg1;
        }
        return -1;
    }

    static function getResumeVODPartIdx(vodItemId)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemId == vodItemId) 
            {
                return com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].partIdx;
            }
            ++__reg1;
        }
        return null;
    }

    static function getResumeVODItemId(vodItemId)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemId == vodItemId) 
            {
                return true;
            }
            ++__reg1;
        }
        return false;
    }

    static function getResumeVODItemLink(vodItemlink)
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList.length) 
        {
            if (com.jadoo.as2.JadooPlus.Features.ResumeVOD.resumeVODList[__reg1].itemLink == vodItemlink) 
            {
                return true;
            }
            ++__reg1;
        }
        return false;
    }

}

//Sprite 674
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.LivePlayer
{
    var parentMC = null;
    var loadingMC = null;
    var epgBaseMC = null;
    var onPlayerEvent = null;
    var fn = null;
    var stopProgressTxt = null;
    var keyListener = null;
    var intimationMsgBox = null;
    var epg = null;
    var ofpXml = null;
    var progGuideLink = null;
    var currentVodStatus: String = "Loading...";
    var epgLink = null;
    var pageTitle = null;
    var pageId = null;
    var liveItem = null;
    var infoBar = null;
    var streamPlayer = null;
    var channelBar = null;
    var keepAliveTimerId: Number = -1;
    var msgBoxCounter: Number = 0;
    var msgBoxCounterId: Number = -1;
    var currTime: Number = 0;
    var hideInfoBarId: Number = -1;
    var infoBarDisplayTime: Number = 10000;
    var categoryIdx = null;
    var channelIdx = null;
    var ofpTimerId: Number = -1;
    var playbackStarted: Boolean = false;
    var infoBtnPressed: Boolean = false;
    var nextPrevEnabled: Boolean = false;
    var stopPressed: Boolean = false;
    var epgEnabled: Boolean = false;
    var isAdChannel: Boolean = false;

    function LivePlayer()
    {
        this.fn = {onChannelBarEvent: mx.utils.Delegate.create(this, this.onChannelBarEvent), onWrapperKeyDown: mx.utils.Delegate.create(this, this.onWrapperKeyDown)};
        this.onPlayerEvent = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onWrapperKeyDown;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.destroy();
        _global.clearTimeout(this.ofpTimerId);
        clearInterval(this.keepAliveTimerId);
        clearInterval(this.msgBoxCounterId);
        this.epgBaseMC.removeMovieClip();
        this.removeLoadingMC();
        if (this.stopProgressTxt != null) 
        {
            this.stopProgressTxt.removeTextField();
        }
        if (this.streamPlayer != null) 
        {
            this.streamPlayer.destroy();
            delete this.streamPlayer;
            this.streamPlayer = null;
        }
        if (this.channelBar != null) 
        {
            this.channelBar.destroy();
            delete this.channelBar;
            this.channelBar = null;
        }
        if (this.infoBar != null) 
        {
            this.infoBar.destroy();
            delete this.infoBar;
            this.infoBar = null;
        }
        if (this.intimationMsgBox != null) 
        {
            this.intimationMsgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
            this.intimationMsgBox.destroy();
            delete this.intimationMsgBox;
            this.intimationMsgBox = null;
        }
        if (this.epg != null) 
        {
            this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
            this.epg.destroy();
            delete this.epg;
            this.epg = null;
        }
        if (this.ofpXml != null) 
        {
            this.ofpXml.onData = null;
            this.ofpXml.onLoad = null;
            delete this.ofpXml;
            this.ofpXml = null;
        }
        this.progGuideLink = null;
        this.epgBaseMC = null;
    }

    function create(parentMC, liveItem, categoryIdx, channelIdx, nextPrevEnabled, maxDuration, epgLink, pageTitle, pageId, isAdChannel)
    {
        this.parentMC = parentMC;
        this.liveItem = liveItem;
        this.categoryIdx = categoryIdx;
        this.channelIdx = channelIdx;
        this.nextPrevEnabled = nextPrevEnabled;
        this.epgLink = epgLink;
        this.pageTitle = pageTitle;
        this.pageId = pageId;
        this.isAdChannel = isAdChannel;
        if (liveItem.itemType == "liveWMV") 
        {
            this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.LivePlayer.WmvPlayer();
        }
        else if (liveItem.itemType == "liveRTMP") 
        {
            this.streamPlayer = new com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpPlayer();
        }
        this.streamPlayer.onPlayerEvent.addListener(this, this.onstreamPlayerEvent);
        this.streamPlayer.create(parentMC, liveItem, maxDuration);
        this.createStopMsgTxtField();
        this.displayLoadingMC();
        if (this.infoBar == null) 
        {
            this.appendItemIdtoLink(liveItem.itemId);
            this.infoBar = new com.jadoo.as2.JadooPlus.Player.LivePlayer.LiveInfoBar();
            this.infoBar.create(parentMC, liveItem.itemName, this.progGuideLink);
        }
        if ((this.channelBar == null || pageTitle == "Favorites") && !isAdChannel) 
        {
            this.channelBar = new com.jadoo.as2.JadooPlus.Features.ChannelBar();
            this.channelBar.create(parentMC, categoryIdx, channelIdx, this.liveItem.categoryId);
            this.channelBar.channelBarEvent.addListener(this, this.fn.onChannelBarEvent);
        }
        this.epgBaseMC = parentMC.createEmptyMovieClip("epgContainerBaseMC", parentMC.getNextHighestDepth());
        parentMC = null;
        liveItem = null;
        categoryIdx = null;
        channelIdx = null;
        nextPrevEnabled = null;
        maxDuration = null;
        epgLink = null;
        pageTitle = null;
        pageId = null;
        isAdChannel = null;
    }

    function streamPlay()
    {
        this.streamPlayer.streamPlay();
        this.setInfoBarStatus();
    }

    function streamStop()
    {
        this.streamPlayer.streamStop();
    }

    function onstreamPlayerEvent()
    {
        var __reg3 = arguments[0];
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(__reg3 + "_Event_" + arguments[1]);
        }
        if ((__reg0 = __reg3) === "stopping") 
        {
            this.showStopLoading();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            return;
        }
        else if (__reg0 === "onGetCurrentTime") 
        {
            this.currTime = arguments[1];
            this.setInfoBarStatus();
            return;
        }
        else if (__reg0 === "loading") 
        {
            this.currentVodStatus = "Loading...";
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.setInfoBarStatus();
            return;
        }
        else if (__reg0 === "buffering") 
        {
            if (this.currentVodStatus != "Loading...") 
            {
                this.currentVodStatus = "Buffering...";
                if (!this.epgEnabled) 
                {
                    this.displayLoadingMC();
                }
                if (arguments[1] == null) 
                {
                    this.infoBar.stopTimer();
                    this.streamPlayer.getCurrentTime();
                }
                else 
                {
                    this.currTime = arguments[1];
                    this.setInfoBarStatus();
                }
            }
            return;
        }
        else if (__reg0 === "playing") 
        {
            this.currentVodStatus = "Playing";
            if (arguments[1] == null) 
            {
                this.streamPlayer.getCurrentTime();
            }
            else 
            {
                this.currTime = arguments[1];
                this.setInfoBarStatus();
            }
            return;
        }
        else if (__reg0 === "error") 
        {
            return;
        }
        else if (__reg0 === "stream_end") 
        {
            return;
        }
        else if (__reg0 === "terminated") 
        {
            return;
        }
        else if (__reg0 === "livePlayerStop") 
        {
            this.onPlayerEvent.notify("livePlayerStop", this.stopPressed);
            return;
        }
        else if (__reg0 !== "livePlayerError") 
        {
            return;
        }
        this.onPlayerEvent.notify("livePlayerError", arguments[1]);
        return;
    }

    function appendItemIdtoLink(itemId)
    {
        this.progGuideLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getProgramGuideURL();
        if (this.progGuideLink.charAt(this.progGuideLink.length - 1) != "/") 
        {
            this.progGuideLink = this.progGuideLink + "/";
        }
        this.progGuideLink = this.progGuideLink + (itemId + "/");
        itemId = null;
    }

    function createStopMsgTxtField()
    {
        this.stopProgressTxt = this.parentMC.createTextField("stopProgressTxt", this.parentMC.getNextHighestDepth(), 0, 0, 30, 15);
        this.stopProgressTxt.autoSize = true;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 16777215;
        this.stopProgressTxt.setNewTextFormat(__reg2);
        this.stopProgressTxt._visible = false;
        this.stopProgressTxt.htmlText = "Stopping...";
        this.stopProgressTxt._x = (1280 - this.stopProgressTxt._width) / 2;
        false;
        __reg2 = null;
    }

    function showStopLoading()
    {
        this.displayLoadingMC();
        this.stopProgressTxt._y = this.loadingMC._y + this.loadingMC._height / 2 + 5;
        this.stopProgressTxt._visible = true;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.parentMC.attachMovie("loading", "loadingMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360, _width: 100, _height: 100});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function setInfoBarStatus()
    {
        if (this.currentVodStatus == "Loading...") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(this.currTime, false);
            this.infoBar.enable();
            this.infoBtnPressed = true;
            return;
        }
        if (this.currentVodStatus == "Buffering...") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(this.currTime, false);
            if (this.infoBtnPressed) 
            {
                this.infoBar.enable();
            }
            return;
        }
        if (this.currentVodStatus == "Playing") 
        {
            this.infoBar.setStatus(this.currentVodStatus);
            this.infoBar.setTime(this.currTime, true);
            this.removeLoadingMC();
            if (!this.playbackStarted) 
            {
                this.playbackStarted = true;
                this.startKeepAliveTimer();
                this.checkOFPStatus();
                this.hideInfoBarId = setInterval(this, "hideInfoBar", this.infoBarDisplayTime);
                return;
            }
            if (this.infoBtnPressed) 
            {
                this.infoBar.enable();
            }
        }
    }

    function hideInfoBar()
    {
        clearInterval(this.hideInfoBarId);
        this.infoBar.disable();
        this.infoBtnPressed = false;
    }

    function onChannelBarEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "channelChange") 
        {
            this.onPlayerEvent.notify("channelChange", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
            return;
        }
        else if (__reg0 !== "deactivateChannelBar") 
        {
            return;
        }
        this.channelBar.disable();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        return;
    }

    function onWrapperKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            if (!this.channelBar.isEnabled() && !this.epgEnabled) 
            {
                this.stopPressed = true;
                this.streamPlayer.streamStop();
            }
            return;
        }
        else if (__reg0 === Key.STOP) 
        {
            if (this.epgEnabled) 
            {
                this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
                this.epg.destroy();
                delete this.epg;
                this.epg = null;
                this.streamPlayer.scaleLivePlayer(0, 0, 1280, 720);
            }
            this.stopPressed = true;
            this.streamPlayer.streamStop();
            return;
        }
        else if (__reg0 === Key.INFO) 
        {
            if (!this.epgEnabled) 
            {
                if (this.infoBtnPressed) 
                {
                    this.infoBtnPressed = false;
                    this.infoBar.disable();
                }
                else 
                {
                    this.infoBtnPressed = true;
                    this.streamPlayer.getCurrentTime();
                }
            }
            return;
        }
        else if (__reg0 === 13) 
        {
            if (_global.currentApplication != "MyJadoo" && this.channelBar != null && !this.epgEnabled && !this.channelBar.isEnabled()) 
            {
                if (this.pageTitle == "Favorites") 
                {
                    this.channelBar.enable(this.liveItem.itemId, true);
                }
                else 
                {
                    this.channelBar.enable(this.liveItem.itemId, false);
                }
            }
            return;
        }
        else if (__reg0 === Key.NEXT) 
        {
            if (this.nextPrevEnabled && !this.epgEnabled) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onPlayerEvent.notify("livePlayerNext");
            }
            return;
        }
        else if (__reg0 === Key.PREVIOUS) 
        {
            if (this.nextPrevEnabled && !this.epgEnabled) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onPlayerEvent.notify("livePlayerPrev");
            }
            return;
        }
        else if (__reg0 !== Key.RED) 
        {
            return;
        }
        if (_global.currentApplication != "MyJadoo" && this.currentVodStatus != "Loading..." && this.infoBar.getCurrentTime() > 5 && !this.epgEnabled && this.epgLink != null) 
        {
            this.removeLoadingMC();
            if (this.infoBar.isEnabled()) 
            {
                this.infoBar.disable();
            }
            if (this.channelBar.isEnabled()) 
            {
                this.channelBar.disable();
            }
            if (this.epg != null) 
            {
                this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
                this.epg.destroy();
                delete this.epg;
                this.epg = null;
            }
            if (this.liveItem.ofpEnabled) 
            {
                _global.clearTimeout(this.ofpTimerId);
                if (this.ofpXml != null) 
                {
                    this.ofpXml.onData = null;
                    this.ofpXml.onLoad = null;
                    delete this.ofpXml;
                    this.ofpXml = null;
                }
                com.jadoo.as2.JadooPlus.Features.OvertFingerprint.destroy();
            }
            this.epg = new com.jadoo.as2.JadooPlus.Features.EPG.EPG();
            this.epg.addListener("onEpgEvent", this, this.onEpgEvent);
            this.epg.create(this.epgBaseMC, this.epgLink, this.pageTitle, this.pageId, true);
            this.epgEnabled = true;
            this.streamPlayer.scaleLivePlayer(750, 32, 440, 325);
            this.epg.setMask(750, 32, 440, 325, this.liveItem.itemName);
        }
        return;
    }

    function startKeepAliveTimer()
    {
        this.keepAliveTimerId = setInterval(this, "intimateUser", com.jadoo.as2.JadooPlus.Utils.Config.liveChannelKeepAliveTime);
    }

    function intimateUser()
    {
        clearInterval(this.keepAliveTimerId);
        if (this.channelBar.isEnabled()) 
        {
            this.channelBar.disable();
        }
        if (this.intimationMsgBox != null) 
        {
            this.intimationMsgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
            this.intimationMsgBox.destroy();
            delete this.intimationMsgBox;
            this.intimationMsgBox = null;
        }
        var __reg2 = this.parentMC.createEmptyMovieClip("intimationMsgBoxBaseMC", this.parentMC.getNextHighestDepth());
        var __reg3 = "Channel will stop in " + (com.jadoo.as2.JadooPlus.Utils.Config.keepAliveMsgDuration / 1000 - this.msgBoxCounter) + " seconds";
        this.intimationMsgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        this.intimationMsgBox.addListener("onButtonPress", this, this.onMsgBoxBtnPress);
        this.intimationMsgBox.create(__reg2, "", __reg3, true, ["Cancel"]);
        this.msgBoxCounterId = setInterval(this, "onMsgBoxCounterUpdate", 1000);
        __reg2 = null;
        __reg3 = null;
    }

    function onMsgBoxCounterUpdate()
    {
        if (com.jadoo.as2.JadooPlus.Utils.Config.keepAliveMsgDuration / 1000 == this.msgBoxCounter) 
        {
            clearInterval(this.msgBoxCounterId);
            this.intimationMsgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
            this.intimationMsgBox.destroy();
            delete this.intimationMsgBox;
            this.intimationMsgBox = null;
            this.streamStop();
            return;
        }
        ++this.msgBoxCounter;
        this.intimationMsgBox.setMessage("Channel will stop in " + (com.jadoo.as2.JadooPlus.Utils.Config.keepAliveMsgDuration / 1000 - this.msgBoxCounter) + " seconds");
    }

    function checkOFPStatus()
    {
        if (this.liveItem.ofpEnabled) 
        {
            if (this.ofpXml != null) 
            {
                this.ofpXml.onData = null;
                this.ofpXml.onLoad = null;
                delete this.ofpXml;
                this.ofpXml = null;
            }
            this.ofpXml = new XML();
            this.ofpXml.ignoreWhite = true;
            this.ofpXml.onLoad = mx.utils.Delegate.create(this, this.onLoadOFPStatusXml);
            this.ofpXml.load(this.liveItem.ofpPingLink);
        }
    }

    function onLoadOFPStatusXml(success)
    {
        if (success) 
        {
            var __reg3 = Boolean(Number(mx.xpath.XPathAPI.selectSingleNode(this.ofpXml.firstChild, "/xml/status").firstChild.nodeValue));
            if (__reg3 == true) 
            {
                com.jadoo.as2.JadooPlus.Features.OvertFingerprint.show(this.parentMC, this.liveItem.ofpDuration);
            }
            __reg3 = null;
        }
        this.ofpTimerId = _global.setTimeout(this, "checkOFPStatus", this.liveItem.ofpPingDelay * 1000);
    }

    function onMsgBoxBtnPress(btnPressed)
    {
        clearInterval(this.msgBoxCounterId);
        this.intimationMsgBox.removeListener("onButtonPress", this, this.onMsgBoxBtnPress);
        this.intimationMsgBox.destroy();
        delete this.intimationMsgBox;
        this.intimationMsgBox = null;
        this.msgBoxCounter = 0;
        this.keepAliveTimerId = setInterval(this, "intimateUser", com.jadoo.as2.JadooPlus.Utils.Config.liveChannelKeepAliveTime);
        btnPressed = null;
    }

    function onEpgEvent()
    {
        if ((__reg0 = arguments[0]) === "play") 
        {
            if (this.liveItem.itemId == arguments[3] && this.liveItem.itemLink == arguments[4]) 
            {
                this.epg.displayMessage("Already playing the same channel");
            }
            else 
            {
                this.onPlayerEvent.notify("epgProgramPlay", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
                this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
                this.epg.destroy();
                delete this.epg;
                this.epg = null;
                this.epgEnabled = false;
                this.streamPlayer.scaleLivePlayer(0, 0, 1280, 720);
                this.streamStop();
            }
            return;
        }
        else if (__reg0 !== "exit") 
        {
            return;
        }
        this.epg.removeListener("onEpgEvent", this, this.onEpgEvent);
        this.epg.destroy();
        delete this.epg;
        this.epg = null;
        this.epgEnabled = false;
        this.streamPlayer.scaleLivePlayer(0, 0, 1280, 720);
        if (this.currentVodStatus == "Buffering...") 
        {
            this.displayLoadingMC();
        }
        if (this.liveItem.ofpEnabled) 
        {
            this.checkOFPStatus();
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        return;
    }

}

//Sprite 675
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.EPG.EPG
{
    var onEpgEvent = null;
    var epgBaseMC = null;
    var epgContainerMC = null;
    var epgBackgroundMC = null;
    var epgListingBaseMC = null;
    var loadingMC = null;
    var channelListMaskMC = null;
    var programListMaskMC = null;
    var timeLineMaskMC = null;
    var channelListArrowDownMC = null;
    var channelListArrowUpMC = null;
    var currentDateRightArrowMC = null;
    var currentDateLeftArrowMC = null;
    var timeLineRightArrowMC = null;
    var timeLineLeftArrowMC = null;
    var errorText = null;
    var messageText = null;
    var currentDateText = null;
    var textFormat = null;
    var fn = null;
    var isSlotNumberOdd: Boolean = false;
    var channelListX: Number = 8;
    var channelListY: Number = 103;
    var programListX: Number = 231;
    var programListY: Number = 103;
    var timeSlotListX: Number = 231;
    var timeSlotListY: Number = 60;
    var EpgContainerX: Number = 95;
    var EpgContainerY: Number = 35;
    var currentRow: Number = 0;
    var topChannelIndex = null;
    var bottomChannelIndex = null;
    var itemsOnPage: Number = 12;
    var totalTimeSlots: Number = 48;
    var timeSlotsInView: Number = 5;
    var offset: Number = 5;
    var oneMinuteInPixels = null;
    var programNumber: Number = 1;
    var maskLeftPosition = null;
    var maskRightPosition = null;
    var EpgDayCounter: Number = 0;
    var programNameTextHeight: Number = 35;
    var singleTimeSlotWidth: Number = 170;
    var interTimeSlotSpace: Number = 2;
    var EpgContainerWidth: Number = 1085;
    var EpgContainerHeight: Number = 640;
    var currentHours = null;
    var currentMinutes = null;
    var currentSeconds = null;
    var currentMilliSeconds = null;
    var pageId = null;
    var pageTitle = null;
    var epgOriginalLink = null;
    var currentDayEpgLink = null;
    var desiredDayEpgXMLLink = null;
    var channelListMaskHeight = null;
    var channelListMaskWidth = null;
    var timeSlots = null;
    var availableChannelNumber = null;
    var keyListener = null;
    var epgXmlObjectIndex: Number = 0;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var channelTextNames = null;
    var programTextTitle = null;
    var tempHtmlText = null;
    var isPlayerActive = null;
    var currentDate;
    var currentDay;
    var currentMonth;
    var currentYear;
    var epgItems;
    var itemHeight;
    var programListMaskWidth;

    function EPG()
    {
        this.onEpgEvent = new com.BigRoom.Event();
        this.availableChannelNumber = new Array();
        this.keyListener = new Object();
        this.fn = {onLoadItems: mx.utils.Delegate.create(this, this.onLoadItems), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.currentDate = new Date();
        this.currentDay = this.currentDate.getDate();
        this.currentYear = this.currentDate.getFullYear();
        this.currentMonth = this.currentDate.getMonth();
        this.timeSlots = new Array("00:00", "00:30", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00", "18:30", "19:00", "19:30", "20:00", "20:30", "21:00", "21:30", "22:00", "22:30", "23:00", "23:30");
        this.topChannelIndex = 0;
        this.programListMaskWidth = this.timeSlotsInView * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        this.oneMinuteInPixels = this.singleTimeSlotWidth / 30;
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function create(baseMC, epgLink, pageTitle, pageId, isPlayerActive)
    {
        this.epgBaseMC = baseMC.createEmptyMovieClip("epgBaseMC", baseMC.getNextHighestDepth());
        this.epgContainerMC = this.epgBaseMC.createEmptyMovieClip("epgContainerMC", this.epgBaseMC.getNextHighestDepth());
        this.epgBackgroundMC = this.epgContainerMC.attachMovie("maskMC", "epgBackgroundMC", this.epgContainerMC.getNextHighestDepth());
        this.epgBackgroundMC._width = 1380;
        this.epgBackgroundMC._height = 820;
        this.isPlayerActive = isPlayerActive;
        this.pageTitle = pageTitle;
        this.pageId = pageId;
        this.programTextTitle = new Array();
        this.channelTextNames = new Array();
        this.loadEpgContainers();
        this.loadTitle();
        if (isPlayerActive) 
        {
            this.EpgContainerHeight = 335;
            this.itemsOnPage = 5;
        }
        this.attachLoadingMC();
        this.epgOriginalLink = epgLink;
        this.currentDayEpgLink = this.getDesiredEpgLink(epgLink);
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.loadItemXML(this.currentDayEpgLink, this.epgXmlObjectIndex, this.fn.onLoadItems);
        this.loadtEpgDateTextField();
        this.loadtErrorTextField();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onEpgEvent") 
        {
            this.onEpgEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onEpgEvent") 
        {
            this.onEpgEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function loadEpgContainers()
    {
        this.epgListingBaseMC = this.epgContainerMC.createEmptyMovieClip("epgListingBaseMC", this.epgContainerMC.getNextHighestDepth());
        this.epgListingBaseMC._x = this.EpgContainerX;
        this.epgListingBaseMC._y = this.EpgContainerY;
        var __reg2 = this.epgListingBaseMC.createEmptyMovieClip("epgTimeLineContainerMC", this.epgListingBaseMC.getNextHighestDepth());
        var __reg4 = this.epgListingBaseMC.createEmptyMovieClip("epgChannelsListContainerMC", this.epgListingBaseMC.getNextHighestDepth());
        var __reg3 = this.epgListingBaseMC.createEmptyMovieClip("epgProgramsListContainerMC", this.epgListingBaseMC.getNextHighestDepth());
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function loadTitle()
    {
        var __reg2 = this.epgBaseMC.createEmptyMovieClip("epgTitleTxtBaseMC", this.epgBaseMC.getNextHighestDepth());
        __reg2._x = this.EpgContainerX;
        __reg2._y = this.EpgContainerY;
        var __reg3 = __reg2.createTextField("titleText", __reg2.getNextHighestDepth(), this.EpgContainerWidth * 0.02, this.EpgContainerHeight * 0.02, undefined, undefined);
        __reg3.autoSize = true;
        this.setTxtFormat("Arial", "left", 45, true, 16557312);
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.text = "EPG";
        __reg2 = null;
        __reg3 = null;
    }

    function loadtEpgDateTextField()
    {
        this.currentDateText = this.epgListingBaseMC.createTextField("currentDateText", this.epgListingBaseMC.getNextHighestDepth(), this.EpgContainerWidth * 0.73, this.EpgContainerHeight * 0.02, 0, 0);
        this.currentDateText.autoSize = true;
    }

    function loadtErrorTextField()
    {
        this.messageText = this.epgListingBaseMC.createTextField("messageText", this.epgListingBaseMC.getNextHighestDepth(), this.EpgContainerWidth / 2, this.EpgContainerHeight - 30, 0, 0);
        this.messageText.autoSize = "center";
        this.errorText = this.epgListingBaseMC.createTextField("errorText", this.epgListingBaseMC.getNextHighestDepth(), this.EpgContainerWidth / 2, this.EpgContainerHeight / 2, 0, 0);
        this.errorText.autoSize = "center";
    }

    function attachLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.epgListingBaseMC.attachMovie("loading", "loadingMC", this.epgListingBaseMC.getNextHighestDepth(), {_x: this.EpgContainerWidth / 2, _y: this.EpgContainerHeight / 2});
        }
    }

    function attachLoadingViewMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.epgListingBaseMC.attachMovie("loadingView", "loadingMC", this.epgListingBaseMC.getNextHighestDepth(), {_x: this.EpgContainerWidth / 2, _y: this.EpgContainerHeight / 2});
        }
    }

    function attachEpgDateArrows()
    {
        if (this.currentDateRightArrowMC == null) 
        {
            this.currentDateRightArrowMC = this.epgListingBaseMC.attachMovie("nextIconMC", "currentDateRightArrowMC", this.epgListingBaseMC.getNextHighestDepth());
            this.currentDateRightArrowMC._x = this.currentDateText._x + this.currentDateText._width + this.offset * 6;
            this.currentDateRightArrowMC._y = this.currentDateText._y + this.currentDateText._height / 2 - this.currentDateRightArrowMC._height / 2;
        }
        if (this.currentDateLeftArrowMC == null) 
        {
            this.currentDateLeftArrowMC = this.epgListingBaseMC.attachMovie("previousIconMC", "currentDateLeftArrowMC", this.epgListingBaseMC.getNextHighestDepth());
            this.currentDateLeftArrowMC._x = this.currentDateText._x - this.currentDateLeftArrowMC._width - this.offset * 6;
            this.currentDateLeftArrowMC._y = this.currentDateText._y + this.currentDateText._height / 2 - this.currentDateLeftArrowMC._height / 2;
        }
    }

    function getDesiredEpgLink(epgLink)
    {
        var __reg8 = null;
        var __reg3 = null;
        var __reg9 = undefined;
        var __reg2 = undefined;
        var __reg10 = undefined;
        var __reg5 = String(this.currentDate.getDate());
        var __reg11 = String(this.currentDate.getFullYear());
        var __reg6 = String(this.currentDate.getMonth() + 1);
        if (__reg5.length == 1) 
        {
            __reg5 = "0" + __reg5;
        }
        if (__reg6.length == 1) 
        {
            __reg6 = "0" + __reg6;
        }
        if (epgLink.charAt(epgLink.length - 1) != "/") 
        {
            epgLink = epgLink + "/";
        }
        __reg8 = __reg11 + "" + __reg6 + "" + __reg5;
        epgLink = epgLink + __reg8;
        __reg9 = this.currentDate.getTimezoneOffset();
        __reg2 = Math.floor(__reg9 / 60);
        __reg10 = Math.abs(__reg9 - __reg2 * 60);
        __reg2 = __reg2 * -1;
        __reg3 = String(__reg2);
        if (__reg3 >= 0) 
        {
            if (__reg2 < 10) 
            {
                __reg3 = "0" + __reg3;
            }
        }
        else 
        {
            __reg2 = Math.abs(__reg2);
            var __reg7 = String(__reg2);
            if (__reg2 > 9) 
            {
                __reg3 = "-" + __reg7;
            }
            else 
            {
                __reg3 = "-0" + __reg7;
            }
            __reg7 = null;
        }
        if (epgLink.charAt(epgLink.length - 1) != "/") 
        {
            epgLink = epgLink + "/";
        }
        epgLink = epgLink + (__reg3 + "/" + __reg10 + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode);
        __reg5 = null;
        __reg11 = null;
        __reg6 = null;
        __reg8 = null;
        __reg3 = null;
        __reg9 = null;
        __reg2 = null;
        __reg10 = null;
        return epgLink;
    }

    function onLoadItems(success)
    {
        success = arguments[0];
        var __reg4 = arguments[1];
        this.displayDate();
        this.attachEpgDateArrows();
        this.setCurrentDateLeftRightArrows();
        this.removeLoadingMC();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (success == true) 
        {
            this.epgItems = new Array();
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.parseEpgItems(this.epgItems);
            this.displayPrograms();
        }
        else 
        {
            if (__reg4) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.EPG_ITEMS_XML_TIMEOUT, "EPG", this.pageTitle, this.pageId);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.EPG_ITEMS_XML_NOT_LOADED, "EPG", this.pageTitle, this.pageId);
            }
            this.displayErrorMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_FETCH_EPG_FROM_SERVER);
        }
        success = null;
        __reg4 = null;
    }

    function displayErrorMessage(message)
    {
        this.setTxtFormat("Arial", "center", 35, false, 16555008);
        this.errorText.setNewTextFormat(this.textFormat);
        this.errorText.htmlText = message;
    }

    function displayMessage(message)
    {
        this.setTxtFormat("Arial", "center", 35, false, 16555008);
        this.messageText.setNewTextFormat(this.textFormat);
        this.messageText.htmlText = message;
    }

    function displayDate()
    {
        var __reg3 = null;
        var __reg2 = null;
        var __reg4 = this.currentDate.getDay();
        this.currentDay = this.currentDate.getDate();
        this.currentMonth = this.currentDate.getMonth();
        this.currentYear = this.currentDate.getFullYear();
        if ((__reg0 = __reg4) === 0) 
        {
            __reg3 = "Sun";
        }
        else if (__reg0 === 1) 
        {
            __reg3 = "Mon";
        }
        else if (__reg0 === 2) 
        {
            __reg3 = "Tue";
        }
        else if (__reg0 === 3) 
        {
            __reg3 = "Wed";
        }
        else if (__reg0 === 4) 
        {
            __reg3 = "Thur";
        }
        else if (__reg0 === 5) 
        {
            __reg3 = "Fri";
        }
        else if (__reg0 === 6) 
        {
            __reg3 = "Sat";
        }
        if ((__reg0 = this.currentMonth) === 0) 
        {
            __reg2 = "Jan";
        }
        else if (__reg0 === 1) 
        {
            __reg2 = "Feb";
        }
        else if (__reg0 === 2) 
        {
            __reg2 = "Mar";
        }
        else if (__reg0 === 3) 
        {
            __reg2 = "Apr";
        }
        else if (__reg0 === 4) 
        {
            __reg2 = "May";
        }
        else if (__reg0 === 5) 
        {
            __reg2 = "Jun";
        }
        else if (__reg0 === 6) 
        {
            __reg2 = "Jul";
        }
        else if (__reg0 === 7) 
        {
            __reg2 = "Aug";
        }
        else if (__reg0 === 8) 
        {
            __reg2 = "Sep";
        }
        else if (__reg0 === 9) 
        {
            __reg2 = "Oct";
        }
        else if (__reg0 === 10) 
        {
            __reg2 = "Nov";
        }
        else if (__reg0 === 11) 
        {
            __reg2 = "Dec";
        }
        this.setTxtFormat("Arial", "left", 30, false, 16557312);
        this.currentDateText.setNewTextFormat(this.textFormat);
        this.currentDateText.htmlText = __reg3 + ", " + __reg2 + " " + this.currentDay + ", " + this.currentYear;
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function displayTimeline()
    {
        var __reg6 = this.epgListingBaseMC.epgTimeLineContainerMC.createEmptyMovieClip("epgTimeslotBaseMC", this.epgListingBaseMC.epgTimeLineContainerMC.getNextHighestDepth());
        var __reg3 = 0;
        while (__reg3 < this.totalTimeSlots) 
        {
            var __reg2 = __reg6.attachMovie("EpgTimeContainer", "timeslotMC" + __reg3, __reg6.getNextHighestDepth());
            __reg2._x = __reg3 * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.timeSlotListX;
            __reg2._y = this.timeSlotListY;
            var __reg5 = __reg2.createEmptyMovieClip("timeslotTextBaseMC", __reg2.getNextHighestDepth());
            var __reg4 = __reg5.createTextField("timeslotTxt", __reg5.getNextHighestDepth(), __reg2._width / 2, 0, 0, 0);
            __reg4.autoSize = "center";
            this.setTxtFormat("Arial", "center", 28, false, 16777215);
            __reg4.setNewTextFormat(this.textFormat);
            __reg4.text = this.timeSlots[__reg3];
            __reg5 = null;
            __reg2 = null;
            __reg4 = null;
            ++__reg3;
        }
        this.timeLineLeftArrowMC = this.epgListingBaseMC.attachMovie("epgLeftArrowMC", "timeLineLeftArrowMC", this.epgListingBaseMC.getNextHighestDepth());
        this.timeLineLeftArrowMC._x = this.timeSlotListX + this.offset;
        this.timeLineLeftArrowMC._y = this.timeSlotListY + this.offset * 2;
        this.timeLineLeftArrowMC._visible = false;
        this.timeLineRightArrowMC = this.epgListingBaseMC.attachMovie("epgRightArrowMC", "timeLineRightArrowMC", this.epgListingBaseMC.getNextHighestDepth());
        this.timeLineRightArrowMC._x = this.timeSlotListX + this.singleTimeSlotWidth * 5 - this.offset * 3;
        this.timeLineRightArrowMC._y = this.timeSlotListY + this.offset * 2;
        this.timeLineRightArrowMC._visible = false;
        __reg3 = null;
        __reg6 = null;
    }

    function setProgramListRightArrow(channelId, programId)
    {
        var __reg6 = null;
        var __reg8 = this.programListMaskWidth;
        var __reg9 = null;
        if (this.isLastProgram(channelId, programId)) 
        {
            this.timeLineRightArrowMC._visible = false;
        }
        else 
        {
            var __reg2 = programId;
            while (__reg2 < this.epgItems[0].channels[channelId].length) 
            {
                var __reg4 = this.getMinutes(channelId, __reg2);
                var __reg3 = this.getTimeslot(channelId, __reg2);
                if (this.isSlotNumberOdd) 
                {
                    __reg6 = (__reg3 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + __reg4 * this.oneMinuteInPixels;
                }
                else 
                {
                    __reg6 = (__reg3 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + (__reg4 - 30) * this.oneMinuteInPixels;
                }
                var __reg5 = this.maskRightPosition - __reg6;
                if (__reg5 < __reg8 && __reg6 < this.maskRightPosition) 
                {
                    __reg8 = __reg5;
                    __reg9 = __reg2;
                }
                __reg4 = null;
                __reg3 = null;
                __reg5 = null;
                ++__reg2;
            }
            __reg2 = null;
            if (this.isLastProgram(channelId, __reg9 - 1)) 
            {
                this.timeLineRightArrowMC._visible = false;
            }
            else 
            {
                this.timeLineRightArrowMC._visible = true;
            }
        }
        __reg6 = null;
        __reg8 = null;
        __reg9 = null;
    }

    function setProgramListLeftArrow(channelId, programId)
    {
        var __reg6 = null;
        var __reg7 = this.programListMaskWidth;
        var __reg9 = null;
        if (programId == 1) 
        {
            this.timeLineLeftArrowMC._visible = false;
        }
        else 
        {
            var __reg2 = programId;
            while (__reg2 >= 1) 
            {
                var __reg4 = this.getMinutes(channelId, __reg2);
                var __reg3 = this.getTimeslot(channelId, __reg2);
                if (this.isSlotNumberOdd) 
                {
                    __reg6 = (__reg3 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + __reg4 * this.oneMinuteInPixels;
                }
                else 
                {
                    __reg6 = (__reg3 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + (__reg4 - 30) * this.oneMinuteInPixels;
                }
                var __reg5 = Math.abs(this.maskLeftPosition - __reg6);
                if (__reg5 < __reg7 && __reg6 >= this.maskLeftPosition) 
                {
                    __reg7 = __reg5;
                    __reg9 = __reg2;
                }
                __reg4 = null;
                __reg3 = null;
                __reg5 = null;
                --__reg2;
            }
            __reg2 = null;
            if (__reg9 == 1) 
            {
                this.timeLineLeftArrowMC._visible = false;
            }
            else 
            {
                this.timeLineLeftArrowMC._visible = true;
            }
        }
        __reg6 = null;
        __reg7 = null;
        __reg9 = null;
    }

    function attachUpDownScrollArrows()
    {
        this.channelListArrowUpMC = this.epgListingBaseMC.attachMovie("upArrowMC", "channelListArrowUpMC", this.epgListingBaseMC.getNextHighestDepth());
        this.channelListArrowUpMC._x = this.EpgContainerX;
        this.channelListArrowUpMC._y = this.EpgContainerY + this.offset * 6;
        this.channelListArrowUpMC._visible = false;
        this.channelListArrowDownMC = this.epgListingBaseMC.attachMovie("downArrowMC", "channelListArrowDownMC", this.epgListingBaseMC.getNextHighestDepth());
        this.channelListArrowDownMC._x = this.EpgContainerX;
        this.channelListArrowDownMC._y = this.itemsOnPage * this.itemHeight + this.channelListY + this.offset * 3;
        this.channelListArrowDownMC._visible = false;
    }

    function displayPrograms()
    {
        if (this.availableChannelNumber != null) 
        {
            delete this.availableChannelNumber;
            this.availableChannelNumber = null;
        }
        this.availableChannelNumber = new Array();
        var __reg27 = this.epgListingBaseMC.epgChannelsListContainerMC.createEmptyMovieClip("epgChannelsListBaseMC", this.epgListingBaseMC.epgChannelsListContainerMC.getNextHighestDepth());
        var __reg25 = this.epgListingBaseMC.epgProgramsListContainerMC.createEmptyMovieClip("epgProgramsListBaseMC", this.epgListingBaseMC.epgProgramsListContainerMC.getNextHighestDepth());
        var __reg24 = 0;
        var __reg2 = 0;
        while (__reg2 < this.epgItems[0].channels.length) 
        {
            if (this.epgItems[0].channels[__reg2].length - 1 != 0) 
            {
                this.availableChannelNumber[__reg24] = __reg2;
                var __reg18 = __reg27.attachMovie("EpgChannelNameContainer", "channelNameContainerMC" + __reg2, __reg27.getNextHighestDepth());
                var __reg26 = __reg18.createEmptyMovieClip("channelNameBaseMC", __reg18.getNextHighestDepth());
                this.itemHeight = __reg18._height + this.offset;
                this.channelListMaskWidth = __reg18._width;
                __reg18._x = this.channelListX;
                __reg18._y = __reg24 * this.itemHeight + this.channelListY;
                var __reg17 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
                var __reg22 = this.channelListMaskWidth - 2 * this.channelListX;
                __reg17.createTextField(__reg26, 0, 0, 0, 0, "true");
                this.setTxtFormat("Arial", "left", 26, false, 16777215);
                __reg17.setTextFormat(this.textFormat);
                __reg17.setHtmlText(this.epgItems[0].channels[__reg2][0].channelName);
                __reg17.setWidth(__reg22);
                __reg17.setY((__reg18._height - __reg17.getHeight()) / 2);
                __reg17.setX(this.channelListX);
                this.channelTextNames[__reg2] = __reg17;
                __reg17 = null;
                __reg22 = null;
                this.channelListMaskHeight = this.itemsOnPage * this.itemHeight;
                this.programTextTitle[__reg2] = new Array();
                var __reg4 = 1;
                while (__reg4 < this.epgItems[0].channels[__reg2].length) 
                {
                    var __reg5 = __reg25.createEmptyMovieClip("programBaseMC" + __reg2 + "_" + __reg4, __reg25.getNextHighestDepth());
                    var __reg6 = __reg5.attachMovie("EpgProgramNameContainer", "programNameMC", __reg5.getNextHighestDepth());
                    this.programNameTextHeight = __reg6._height;
                    var __reg14 = __reg5.attachMovie("epgSelectorMC", "programSelectorMC", __reg5.getNextHighestDepth());
                    __reg14._height = __reg6._height;
                    var __reg21 = __reg5.createEmptyMovieClip("programNameTextMC", __reg5.getNextHighestDepth());
                    var __reg11 = this.getMinutes(__reg2, __reg4);
                    var __reg19 = this.getHours(__reg2, __reg4);
                    var __reg10 = this.getTimeslot(__reg2, __reg4);
                    var __reg8 = this.getMinutes(__reg2, __reg4 + 1);
                    var __reg15 = this.getHours(__reg2, __reg4 + 1);
                    if (this.isSlotNumberOdd) 
                    {
                        __reg5._x = (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + __reg11 * this.oneMinuteInPixels;
                    }
                    else 
                    {
                        __reg5._x = (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace) + this.programListX + (__reg11 - 30) * this.oneMinuteInPixels;
                    }
                    __reg5._y = __reg24 * this.itemHeight + this.programListY;
                    var __reg12 = undefined;
                    var __reg16 = undefined;
                    var __reg9 = undefined;
                    if (this.isLastProgram(__reg2, __reg4)) 
                    {
                        __reg15 = 24;
                        __reg8 = 0;
                        __reg12 = ((__reg15 - __reg19) * 60 + (__reg8 - __reg11)) * this.oneMinuteInPixels;
                        __reg16 = this.totalTimeSlots + 1;
                    }
                    else 
                    {
                        __reg12 = ((__reg15 - __reg19) * 60 + (__reg8 - __reg11)) * this.oneMinuteInPixels;
                        __reg16 = this.getTimeslot(__reg2, __reg4 + 1);
                    }
                    if (__reg8 == 0 || __reg8 == 30) 
                    {
                        __reg9 = __reg16 - __reg10 - 1;
                    }
                    else 
                    {
                        __reg9 = __reg16 - __reg10;
                        __reg9 = __reg9 - 1;
                    }
                    if (__reg9 < 0) 
                    {
                        __reg9 = 0;
                    }
                    __reg6._width = __reg12 + __reg9 * 2;
                    __reg14._width = __reg6._width;
                    __reg14._visible = false;
                    var __reg20 = "...";
                    var __reg3 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
                    __reg3.createTextField(__reg21, 0, 0, 0, 0, "true");
                    __reg22 = __reg6._width - 2 * this.offset;
                    this.setTxtFormat("Arial", "left", 26, false, 16777215);
                    __reg3.setTextFormat(this.textFormat);
                    __reg3.setHtmlText(this.epgItems[0].channels[__reg2][__reg4].programTitle);
                    __reg3.setY((this.programNameTextHeight - __reg3.getHeight()) / 2);
                    __reg3.setX(this.offset);
                    var __reg23 = Math.ceil(__reg3.getWidth() / __reg3.getTextLength());
                    var __reg13 = __reg12 / (__reg23 + 1);
                    __reg13 = Math.floor(__reg13 - 1);
                    if (__reg3.getTextWidth() > __reg12) 
                    {
                        var __reg7 = __reg3.getHtmlText();
                        __reg7 = __reg7.slice(0, __reg13);
                        __reg7 = __reg7.concat("", __reg20);
                        __reg3.setHtmlText(__reg7);
                    }
                    __reg3.setWidth(__reg22);
                    this.programTextTitle[__reg2][__reg4] = __reg3;
                    __reg3 = null;
                    __reg22 = null;
                    __reg23 = null;
                    __reg13 = null;
                    __reg5 = null;
                    __reg14 = null;
                    __reg6 = null;
                    __reg21 = null;
                    __reg7 = null;
                    __reg20 = null;
                    __reg12 = null;
                    __reg9 = null;
                    __reg10 = null;
                    __reg19 = null;
                    __reg11 = null;
                    __reg16 = null;
                    __reg15 = null;
                    __reg8 = null;
                    ++__reg4;
                }
                ++__reg24;
                __reg4 = 1;
                __reg26 = null;
                __reg18 = null;
            }
            ++__reg2;
        }
        if (__reg24 == 0) 
        {
            this.displayErrorMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_PROGRAMS_TO_SHOW);
        }
        else 
        {
            if (__reg24 > this.itemsOnPage) 
            {
                this.bottomChannelIndex = this.itemsOnPage;
            }
            else 
            {
                this.bottomChannelIndex = __reg24;
            }
            this.attachUpDownScrollArrows();
            this.displayTimeline();
            this.loadMasks();
            this.findCurrentTimeProgram();
            this.highlightProgram(this.availableChannelNumber[this.currentRow], this.programNumber);
            this.setScrollArrows();
        }
        __reg27 = null;
        __reg25 = null;
        __reg2 = null;
        __reg24 = null;
    }

    function findCurrentTimeProgram()
    {
        var __reg11 = this.currentDate.getHours();
        var __reg12 = this.currentDate.getMinutes();
        var __reg8 = 1440;
        var __reg5 = null;
        var __reg10 = null;
        var __reg4 = null;
        var __reg3 = null;
        var __reg9 = null;
        var __reg7 = null;
        var __reg6 = null;
        var __reg2 = 1;
        while (__reg2 < this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]].length) 
        {
            __reg3 = this.getHours(this.availableChannelNumber[this.currentRow], __reg2);
            __reg9 = this.getMinutes(this.availableChannelNumber[this.currentRow], __reg2);
            if (__reg3 == 0) 
            {
                __reg3 = 24;
            }
            __reg5 = this.getTimeslot(this.availableChannelNumber[this.currentRow], __reg2);
            __reg7 = __reg11 * 60 + __reg12;
            __reg6 = __reg3 * 60 + __reg9;
            __reg4 = Math.abs(__reg7 - __reg6);
            if (__reg4 < __reg8) 
            {
                __reg10 = __reg5;
                __reg8 = __reg4;
                this.programNumber = __reg2;
            }
            ++__reg2;
        }
        this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        this.maskRightPosition = this.maskRightPosition + (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        this.maskLeftPosition = this.maskLeftPosition + (__reg10 - 1) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        this.rightShift(this.maskRightPosition);
        this.setProgramListRightArrow(this.availableChannelNumber[this.currentRow], this.programNumber);
        this.setProgramListLeftArrow(this.availableChannelNumber[this.currentRow], this.programNumber);
        __reg7 = null;
        __reg6 = null;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
        __reg11 = null;
        __reg12 = null;
        __reg8 = null;
        __reg5 = null;
        __reg10 = null;
    }

    function getMinutes(channelId, programId)
    {
        var __reg2 = null;
        var __reg4 = undefined;
        var __reg3 = this.epgItems[0].channels[channelId][programId].programTime;
        __reg2 = new Array();
        __reg2 = __reg3.split(":");
        __reg4 = Number(__reg2[1]);
        __reg3 = null;
        false;
        __reg2 = null;
        return __reg4;
    }

    function getHours(channelId, programId)
    {
        var __reg2 = null;
        var __reg4 = undefined;
        var __reg3 = this.epgItems[0].channels[channelId][programId].programTime;
        __reg2 = new Array();
        __reg2 = __reg3.split(":");
        __reg4 = Number(__reg2[0]);
        __reg3 = null;
        false;
        __reg2 = null;
        return __reg4;
    }

    function getTimeslot(channelId, programId)
    {
        var __reg3 = undefined;
        var __reg2 = undefined;
        var __reg4 = undefined;
        __reg3 = this.getMinutes(channelId, programId);
        __reg2 = this.getHours(channelId, programId);
        if (__reg3 > 29 && __reg3 < 60) 
        {
            __reg4 = (__reg2 + 1) * 2;
            this.isSlotNumberOdd = false;
        }
        else 
        {
            __reg4 = __reg2 * 2 + 1;
            this.isSlotNumberOdd = true;
        }
        __reg3 = null;
        __reg2 = null;
        return __reg4;
    }

    function loadMasks()
    {
        this.timeLineMaskMC = this.epgListingBaseMC.epgTimeLineContainerMC.attachMovie("maskMC", "timeLineMaskMC", this.epgListingBaseMC.epgTimeLineContainerMC.getNextHighestDepth());
        this.timeLineMaskMC._x = this.programListX;
        this.timeLineMaskMC._y = this.timeSlotListY;
        this.timeLineMaskMC._height = this.itemHeight - this.offset;
        this.timeLineMaskMC._width = this.programListMaskWidth;
        this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC.setMask(this.timeLineMaskMC);
        this.channelListMaskMC = this.epgListingBaseMC.epgChannelsListContainerMC.attachMovie("maskMC", "channelListMaskMC", this.epgListingBaseMC.epgChannelsListContainerMC.getNextHighestDepth());
        this.channelListMaskMC._x = this.channelListX;
        this.channelListMaskMC._y = this.channelListY;
        this.channelListMaskMC._height = this.channelListMaskHeight;
        this.channelListMaskMC._width = this.channelListMaskWidth;
        this.epgListingBaseMC.epgChannelsListContainerMC.setMask(this.channelListMaskMC);
        this.programListMaskMC = this.epgListingBaseMC.epgProgramsListContainerMC.attachMovie("maskMC", "programListMaskMC", this.epgListingBaseMC.epgProgramsListContainerMC.getNextHighestDepth());
        this.maskLeftPosition = this.programListMaskMC._x = this.programListX;
        this.programListMaskMC._y = this.programListY;
        this.programListMaskMC._height = this.channelListMaskHeight;
        this.programListMaskMC._width = this.programListMaskWidth;
        this.maskRightPosition = this.maskLeftPosition + this.programListMaskWidth;
        this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC.setMask(this.programListMaskMC);
    }

    function isLastProgram(channelId, programId)
    {
        if (programId == this.epgItems[0].channels[channelId].length - 1) 
        {
            return true;
        }
        return false;
    }

    function unHighlightProgram(channelId, programId)
    {
        this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId].programSelectorMC._visible = false;
        var __reg4 = this.programTextTitle[channelId][programId].getWidth();
        this.programTextTitle[channelId][programId].disable();
        this.programTextTitle[channelId][programId].setHtmlText(this.tempHtmlText);
        this.programTextTitle[channelId][programId].setWidth(__reg4);
        this.channelTextNames[channelId].disable();
        __reg4 = null;
    }

    function highlightProgram(channelId, programId)
    {
        this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId].programSelectorMC._visible = true;
        var __reg4 = this.programTextTitle[channelId][programId].getWidth();
        this.tempHtmlText = this.programTextTitle[channelId][programId].getHtmlText();
        this.programTextTitle[channelId][programId].setHtmlText(this.epgItems[0].channels[channelId][programId].programTitle);
        this.programTextTitle[channelId][programId].setWidth(__reg4);
        this.programTextTitle[channelId][programId].enable(false, 500);
        this.channelTextNames[channelId].enable(false, 500);
        __reg4 = null;
    }

    function downKeyPressed(channelId, programId)
    {
        var __reg32 = this.availableChannelNumber[this.currentRow - 1];
        var __reg2 = channelId;
        var __reg29 = true;
        var __reg27 = undefined;
        var __reg34 = undefined;
        var __reg36 = undefined;
        var __reg38 = undefined;
        var __reg39 = undefined;
        var __reg35 = undefined;
        __reg34 = this.getHours(__reg32, programId);
        __reg36 = this.getMinutes(__reg32, programId);
        __reg27 = this.getTimeslot(__reg32, programId);
        __reg38 = this.getHours(__reg32, programId + 1);
        __reg39 = this.getMinutes(__reg32, programId + 1);
        if (this.isLastProgram(channelId, programId)) 
        {
            __reg35 = (this.totalTimeSlots + 1 - __reg27) * this.singleTimeSlotWidth;
        }
        else 
        {
            __reg35 = (__reg38 - __reg34) * 60 + (__reg39 - __reg36);
        }
        var __reg14 = __reg34 * 60 + __reg36;
        var __reg31 = __reg35 + __reg14;
        var __reg8 = 1;
        while (__reg8 < this.epgItems[0].channels[__reg2].length) 
        {
            var __reg28 = undefined;
            __reg28 = this.getTimeslot(__reg2, __reg8);
            if (__reg28 == __reg27) 
            {
                var __reg6 = __reg8;
                var __reg12 = 0;
                ++__reg6;
                __reg28 = this.getTimeslot(__reg2, __reg6);
                while (__reg28 == __reg27) 
                {
                    ++__reg12;
                    __reg28 = this.getTimeslot(__reg2, __reg6);
                    ++__reg6;
                }
                var __reg3 = __reg8;
                if (__reg12 == 0) 
                {
                    this.programNumber = __reg8;
                }
                else 
                {
                    var __reg7 = 0;
                    while (__reg7 < __reg12 - 1) 
                    {
                        if (this.programNumber == __reg3 - 1) 
                        {
                            --__reg3;
                        }
                        var __reg13 = this.getHours(__reg2, __reg3);
                        var __reg9 = this.getMinutes(__reg2, __reg3);
                        var __reg11 = this.getHours(__reg2, __reg3 + 1);
                        var __reg10 = this.getMinutes(__reg2, __reg3 + 1);
                        var __reg5 = __reg13 * 60 + __reg9;
                        var __reg18 = __reg11 * 60 + __reg10;
                        var __reg24 = Math.abs(__reg14 - __reg5);
                        var __reg23 = Math.abs(__reg14 - __reg5);
                        if (__reg24 <= __reg23) 
                        {
                            this.programNumber = __reg3;
                        }
                        else 
                        {
                            this.programNumber = __reg3 + 1;
                        }
                        ++__reg3;
                        __reg13 = null;
                        __reg9 = null;
                        __reg11 = null;
                        __reg10 = null;
                        __reg5 = null;
                        __reg18 = null;
                        __reg24 = null;
                        __reg23 = null;
                        ++__reg7;
                    }
                    __reg7 = null;
                }
                __reg29 = false;
                break;
            }
            else 
            {
                __reg29 = true;
            }
            __reg28 = null;
            ++__reg8;
        }
        __reg8 = null;
        if (__reg29) 
        {
            var __reg4 = 1;
            while (__reg4 < this.epgItems[0].channels[__reg2].length) 
            {
                var __reg20 = undefined;
                var __reg22 = undefined;
                var __reg17 = 0;
                var __reg21 = undefined;
                var __reg19 = undefined;
                var __reg25 = undefined;
                var __reg16 = undefined;
                var __reg15 = undefined;
                __reg28 = this.getTimeslot(__reg2, __reg4);
                __reg21 = this.getHours(__reg2, __reg4);
                __reg19 = this.getMinutes(__reg2, __reg4);
                if (this.isLastProgram(__reg2, __reg4)) 
                {
                    __reg16 = 24;
                    __reg15 = 0;
                }
                else 
                {
                    __reg16 = this.getHours(__reg2, __reg4 + 1);
                    __reg15 = this.getMinutes(__reg2, __reg4 + 1);
                }
                __reg20 = __reg21 * 60 + __reg19;
                __reg25 = __reg16 * 60 + __reg15;
                if (this.isLastProgram(__reg2, __reg4)) 
                {
                    __reg17 = (this.totalTimeSlots + 1 - __reg28) * this.singleTimeSlotWidth;
                }
                else 
                {
                    __reg17 = (__reg16 - __reg21) * 60 + (__reg15 - __reg19);
                }
                __reg22 = __reg17 + __reg20;
                if (__reg22 > __reg14) 
                {
                    if (__reg22 >= __reg31) 
                    {
                        this.programNumber = __reg4;
                        break;
                    }
                    __reg24 = Math.abs(__reg14 - __reg20);
                    __reg23 = Math.abs(__reg14 - __reg25);
                    if (__reg24 <= __reg23) 
                    {
                        this.programNumber = __reg4;
                    }
                    else 
                    {
                        this.programNumber = __reg4 + 1;
                    }
                    break;
                }
                __reg20 = null;
                __reg22 = null;
                __reg17 = null;
                __reg21 = null;
                __reg19 = null;
                __reg25 = null;
                __reg16 = null;
                __reg15 = null;
                ++__reg4;
            }
            __reg4 = null;
        }
        this.highlightProgram(__reg2, this.programNumber);
        var __reg26 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + __reg2 + "_" + this.programNumber]._x;
        var __reg30 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + __reg2 + "_" + this.programNumber].programSelectorMC._width;
        if (__reg30 + __reg26 >= this.maskRightPosition) 
        {
            var __reg37 = Math.ceil((__reg26 + __reg30 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            if (__reg37 < this.programListMaskWidth) 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - Math.ceil((__reg26 + __reg30 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - Math.ceil((__reg26 + __reg30 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskLeftPosition = this.maskLeftPosition + Math.ceil((__reg26 + __reg30 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskRightPosition = this.maskRightPosition + Math.ceil((__reg26 + __reg30 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                if (__reg26 < this.maskLeftPosition) 
                {
                    this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                }
            }
            else 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskRightPosition = this.maskRightPosition + Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskLeftPosition = this.maskLeftPosition + Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            }
            __reg37 = null;
        }
        else if (__reg26 <= this.maskLeftPosition) 
        {
            this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        }
        this.rightShift(this.maskRightPosition);
        this.setProgramListLeftArrow(__reg2, this.programNumber);
        this.setProgramListRightArrow(__reg2, this.programNumber);
        __reg26 = null;
        __reg30 = null;
        __reg32 = null;
        __reg2 = null;
        __reg29 = null;
        __reg27 = null;
        __reg34 = null;
        __reg36 = null;
        __reg38 = null;
        __reg39 = null;
        __reg35 = null;
        __reg14 = null;
        __reg31 = null;
    }

    function upKeyPressed(channelId, programId)
    {
        var __reg31 = this.availableChannelNumber[this.currentRow + 1];
        var __reg2 = channelId;
        var __reg29 = true;
        var __reg27 = undefined;
        var __reg34 = undefined;
        var __reg36 = undefined;
        var __reg38 = undefined;
        var __reg39 = undefined;
        var __reg35 = undefined;
        var __reg30 = false;
        __reg34 = this.getHours(__reg31, programId);
        __reg36 = this.getMinutes(__reg31, programId);
        __reg27 = this.getTimeslot(__reg31, programId);
        __reg38 = this.getHours(__reg31, programId + 1);
        __reg39 = this.getMinutes(__reg31, programId + 1);
        if (this.isLastProgram(__reg31, programId)) 
        {
            __reg30 = true;
            __reg35 = (this.totalTimeSlots + 1 - __reg27) * this.singleTimeSlotWidth;
        }
        else 
        {
            __reg35 = (__reg38 - __reg34) * 60 + (__reg39 - __reg36);
        }
        var __reg5 = __reg34 * 60 + __reg36;
        var __reg21 = __reg35 + __reg5;
        var __reg9 = 1;
        while (__reg9 < this.epgItems[0].channels[__reg2].length) 
        {
            var __reg18 = undefined;
            __reg18 = this.getTimeslot(__reg2, __reg9);
            if (__reg18 == __reg27) 
            {
                var __reg7 = __reg9;
                var __reg11 = 0;
                ++__reg7;
                __reg18 = this.getTimeslot(__reg2, __reg7);
                while (__reg18 == __reg27) 
                {
                    ++__reg11;
                    __reg18 = this.getTimeslot(__reg2, __reg7);
                    ++__reg7;
                }
                var __reg3 = __reg9;
                if (__reg11 == 0) 
                {
                    this.programNumber = __reg9;
                }
                else 
                {
                    var __reg8 = 0;
                    while (__reg8 < __reg11 - 1) 
                    {
                        if (this.programNumber == __reg3 - 1) 
                        {
                            --__reg3;
                        }
                        var __reg19 = this.getHours(__reg2, __reg3);
                        var __reg16 = this.getMinutes(__reg2, __reg3);
                        var __reg14 = this.getHours(__reg2, __reg3 + 1);
                        __reg16 = this.getMinutes(__reg2, __reg3 + 1);
                        var __reg10 = __reg19 * 60 + __reg16;
                        var __reg12 = __reg14 * 60 + __reg16;
                        var __reg24 = Math.abs(__reg5 - __reg10);
                        var __reg22 = Math.abs(__reg5 - __reg12);
                        if (__reg24 <= __reg22) 
                        {
                            this.programNumber = __reg3;
                        }
                        else 
                        {
                            this.programNumber = __reg3 + 1;
                        }
                        ++__reg3;
                        __reg19 = null;
                        __reg16 = null;
                        __reg14 = null;
                        __reg16 = null;
                        __reg10 = null;
                        __reg12 = null;
                        __reg24 = null;
                        __reg22 = null;
                        ++__reg8;
                    }
                    __reg8 = null;
                }
                selectorNewPosFound = true;
                __reg29 = false;
                __reg7 = null;
                __reg11 = null;
                __reg3 = null;
                break;
            }
            else 
            {
                __reg29 = true;
            }
            __reg18 = null;
            ++__reg9;
        }
        __reg9 = null;
        if (__reg29) 
        {
            var selectorNewPosFound = false;
            var __reg6 = 1;
            while (__reg6 < this.epgItems[0].channels[__reg2].length) 
            {
                var __reg15 = undefined;
                var __reg20 = undefined;
                var __reg17 = 0;
                var __reg28 = undefined;
                var __reg13 = undefined;
                __reg18 = this.getTimeslot(__reg2, __reg6);
                __reg19 = this.getHours(__reg2, __reg6);
                __reg16 = this.getMinutes(__reg2, __reg6);
                __reg14 = this.getHours(__reg2, __reg6 + 1);
                __reg13 = this.getMinutes(__reg2, __reg6 + 1);
                __reg15 = __reg19 * 60 + __reg16;
                __reg28 = __reg14 * 60 + __reg13;
                if (this.isLastProgram(__reg2, __reg6)) 
                {
                    __reg17 = (this.totalTimeSlots + 1 - __reg18) * this.singleTimeSlotWidth;
                }
                else 
                {
                    __reg17 = (__reg14 - __reg19) * 60 + (__reg13 - __reg16);
                }
                __reg20 = __reg17 + __reg15;
                if (__reg15 < __reg5 && __reg20 > __reg21) 
                {
                    selectorNewPosFound = true;
                    this.programNumber = __reg6;
                    break;
                }
                __reg15 = null;
                __reg20 = null;
                __reg17 = null;
                __reg19 = null;
                __reg16 = null;
                __reg28 = null;
                __reg14 = null;
                __reg13 = null;
                __reg18 = null;
                ++__reg6;
            }
            __reg6 = null;
            var __reg4 = 1;
            while (__reg4 < this.epgItems[0].channels[__reg2].length) 
            {
                __reg19 = this.getHours(__reg2, __reg4);
                __reg16 = this.getMinutes(__reg2, __reg4);
                if (this.isLastProgram(__reg2, __reg4)) 
                {
                    __reg14 = 24;
                    __reg13 = 0;
                    __reg18 = this.getTimeslot(__reg2, __reg4);
                    __reg17 = (this.totalTimeSlots + 1 - __reg18) * this.singleTimeSlotWidth;
                    __reg18 = null;
                }
                else 
                {
                    __reg14 = this.getHours(__reg2, __reg4 + 1);
                    __reg13 = this.getMinutes(__reg2, __reg4 + 1);
                    __reg17 = (__reg14 - __reg19) * 60 + (__reg13 - __reg16);
                }
                __reg15 = __reg19 * 60 + __reg16;
                __reg28 = __reg14 * 60 + __reg13;
                __reg20 = __reg17 + __reg15;
                if (__reg15 < __reg5 && __reg20 > __reg5 && __reg20 <= __reg21) 
                {
                    selectorNewPosFound = true;
                    var __reg23 = __reg19 * 60 + __reg16;
                    var __reg25 = __reg14 * 60 + __reg13;
                    __reg24 = Math.abs(__reg5 - __reg23);
                    __reg22 = Math.abs(__reg5 - __reg25);
                    if (__reg24 <= __reg22) 
                    {
                        this.programNumber = __reg4;
                    }
                    else 
                    {
                        this.programNumber = __reg4 + 1;
                    }
                    __reg23 = null;
                    __reg25 = null;
                    __reg24 = null;
                    __reg22 = null;
                    break;
                }
                __reg15 = null;
                __reg20 = null;
                __reg17 = null;
                __reg19 = null;
                __reg16 = null;
                __reg28 = null;
                __reg14 = null;
                __reg13 = null;
                ++__reg4;
            }
            __reg4 = null;
            __reg4 = 1;
            while (__reg4 < this.epgItems[0].channels[__reg2].length) 
            {
                __reg19 = this.getHours(__reg2, __reg4);
                __reg16 = this.getMinutes(__reg2, __reg4);
                if (this.isLastProgram(__reg2, __reg4)) 
                {
                    __reg14 = 24;
                    __reg13 = 0;
                    __reg18 = this.getTimeslot(__reg2, __reg4);
                    __reg17 = (this.totalTimeSlots + 1 - __reg18) * this.singleTimeSlotWidth;
                    __reg18 = null;
                }
                else 
                {
                    __reg14 = this.getHours(__reg2, __reg4 + 1);
                    __reg13 = this.getMinutes(__reg2, __reg4 + 1);
                    __reg17 = (__reg14 - __reg19) * 60 + (__reg13 - __reg16);
                }
                __reg15 = __reg19 * 60 + __reg16;
                __reg28 = __reg14 * 60 + __reg13;
                __reg20 = __reg17 + __reg15;
                if (__reg5 < __reg15 && __reg21 < __reg20) 
                {
                    selectorNewPosFound = true;
                    this.programNumber = __reg4;
                    break;
                }
                if (!selectorNewPosFound) 
                {
                    if (__reg30) 
                    {
                        if (__reg5 < __reg15 && __reg21 >= __reg20) 
                        {
                            this.programNumber = __reg4;
                            break;
                        }
                    }
                }
                __reg18 = null;
                __reg15 = null;
                __reg20 = null;
                __reg17 = null;
                __reg19 = null;
                __reg16 = null;
                __reg28 = null;
                __reg14 = null;
                __reg13 = null;
                ++__reg4;
            }
        }
        this.highlightProgram(__reg2, this.programNumber);
        var __reg26 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + __reg2 + "_" + this.programNumber]._x;
        var __reg32 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + __reg2 + "_" + this.programNumber].programSelectorMC._width;
        if (__reg32 + __reg26 >= this.maskRightPosition) 
        {
            var __reg37 = Math.ceil((__reg26 + __reg32 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            if (__reg37 < this.programListMaskWidth) 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - Math.ceil((__reg26 + __reg32 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - Math.ceil((__reg26 + __reg32 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskLeftPosition = this.maskLeftPosition + Math.ceil((__reg26 + __reg32 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskRightPosition = this.maskRightPosition + Math.ceil((__reg26 + __reg32 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                if (__reg26 < this.maskLeftPosition) 
                {
                    this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                }
            }
            else 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskRightPosition = this.maskRightPosition + Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskLeftPosition = this.maskLeftPosition + Math.floor((__reg26 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            }
            __reg37 = null;
        }
        else if (__reg26 <= this.maskLeftPosition) 
        {
            this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg26) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        }
        this.rightShift(this.maskRightPosition);
        this.setProgramListLeftArrow(__reg2, this.programNumber);
        this.setProgramListRightArrow(__reg2, this.programNumber);
        __reg26 = null;
        __reg32 = null;
        selectorNewPosFound = null;
        __reg30 = null;
        __reg31 = null;
        __reg2 = null;
        __reg29 = null;
        __reg27 = null;
        __reg34 = null;
        __reg36 = null;
        __reg38 = null;
        __reg39 = null;
        __reg35 = null;
        __reg5 = null;
        __reg21 = null;
    }

    function rightKeyPresed(channelId, programId)
    {
        this.highlightProgram(channelId, programId);
        var __reg2 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId]._x;
        var __reg5 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId].programSelectorMC._width;
        if (__reg2 + __reg5 > this.maskRightPosition) 
        {
            var __reg3 = Math.ceil((__reg2 + __reg5 - this.maskRightPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            if (__reg3 < this.programListMaskWidth) 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - __reg3;
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - __reg3;
                this.maskLeftPosition = this.maskLeftPosition + __reg3;
                this.maskRightPosition = this.maskRightPosition + __reg3;
                if (__reg2 < this.maskLeftPosition) 
                {
                    this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                    this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                }
            }
            else 
            {
                this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x - Math.floor((__reg2 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x - Math.floor((__reg2 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskRightPosition = this.maskRightPosition + Math.floor((__reg2 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
                this.maskLeftPosition = this.maskLeftPosition + Math.floor((__reg2 - this.maskLeftPosition) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            }
            __reg3 = null;
        }
        this.rightShift(this.maskRightPosition);
        this.setProgramListRightArrow(channelId, programId);
        this.setProgramListLeftArrow(channelId, programId);
        __reg2 = null;
        __reg5 = null;
    }

    function leftKeyPresed(channelId, programId)
    {
        this.highlightProgram(channelId, programId);
        var __reg2 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId]._x;
        var __reg5 = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC["programBaseMC" + channelId + "_" + programId].programSelectorMC._width;
        if (__reg2 < this.maskLeftPosition) 
        {
            this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskRightPosition = this.maskRightPosition - Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
            this.maskLeftPosition = this.maskLeftPosition - Math.ceil((this.maskLeftPosition - __reg2) / (this.singleTimeSlotWidth + this.interTimeSlotSpace)) * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        }
        this.rightShift(this.maskRightPosition);
        this.setProgramListLeftArrow(channelId, programId);
        this.setProgramListRightArrow(channelId, programId);
        __reg2 = null;
        __reg5 = null;
    }

    function rightShift(rightEndPosition)
    {
        var __reg2 = this.maskRightPosition - (this.programListX + (this.singleTimeSlotWidth + this.interTimeSlotSpace) * this.totalTimeSlots);
        var __reg3 = Math.floor(__reg2 / (this.singleTimeSlotWidth + this.interTimeSlotSpace));
        __reg2 = __reg3 * (this.singleTimeSlotWidth + this.interTimeSlotSpace);
        if (rightEndPosition > this.programListX + (this.singleTimeSlotWidth + this.interTimeSlotSpace) * this.totalTimeSlots) 
        {
            this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x = this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC._x + __reg2;
            this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._x + __reg2;
            this.maskRightPosition = this.maskRightPosition - __reg2;
            this.maskLeftPosition = this.maskLeftPosition - __reg2;
        }
        __reg2 = null;
        __reg3 = null;
    }

    function setCurrentDateLeftRightArrows()
    {
        this.currentDateLeftArrowMC._visible = true;
        this.currentDateRightArrowMC._visible = true;
        this.currentDateRightArrowMC._x = this.currentDateText._x + this.currentDateText._width + this.offset * 6;
        if (this.EpgDayCounter == 0) 
        {
            this.currentDateLeftArrowMC._visible = false;
        }
        if (this.EpgDayCounter == 7) 
        {
            this.currentDateRightArrowMC._visible = false;
        }
    }

    function setScrollArrows()
    {
        this.channelListArrowDownMC._visible = true;
        this.channelListArrowUpMC._visible = true;
        if (this.bottomChannelIndex > this.itemsOnPage) 
        {
            this.channelListArrowUpMC._visible = true;
        }
        else 
        {
            this.channelListArrowUpMC._visible = false;
        }
        if (this.currentRow == this.availableChannelNumber.length - 1 || this.availableChannelNumber.length < this.itemsOnPage || this.bottomChannelIndex == this.availableChannelNumber.length && this.topChannelIndex == this.availableChannelNumber.length - this.itemsOnPage) 
        {
            this.channelListArrowDownMC._visible = false;
            return;
        }
        this.channelListArrowDownMC._visible = true;
    }

    function onKeyDown()
    {
        this.displayMessage("");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentRow < this.availableChannelNumber.length - 1) 
            {
                this.unHighlightProgram(this.availableChannelNumber[this.currentRow], this.programNumber);
                ++this.currentRow;
                if (this.currentRow == this.bottomChannelIndex) 
                {
                    this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._y = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._y - this.itemHeight;
                    this.epgListingBaseMC.epgChannelsListContainerMC.epgChannelsListBaseMC._y = this.epgListingBaseMC.epgChannelsListContainerMC.epgChannelsListBaseMC._y - this.itemHeight;
                    ++this.topChannelIndex;
                    ++this.bottomChannelIndex;
                }
                this.downKeyPressed(this.availableChannelNumber[this.currentRow], this.programNumber);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.currentRow > 0) 
            {
                if (this.currentRow == this.topChannelIndex) 
                {
                    this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._y = this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC._y + this.itemHeight;
                    this.epgListingBaseMC.epgChannelsListContainerMC.epgChannelsListBaseMC._y = this.epgListingBaseMC.epgChannelsListContainerMC.epgChannelsListBaseMC._y + this.itemHeight;
                    --this.topChannelIndex;
                    --this.bottomChannelIndex;
                }
                this.unHighlightProgram(this.availableChannelNumber[this.currentRow], this.programNumber);
                --this.currentRow;
                this.upKeyPressed(this.availableChannelNumber[this.currentRow], this.programNumber);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.programNumber < this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]].length - 1) 
            {
                this.unHighlightProgram(this.availableChannelNumber[this.currentRow], this.programNumber);
                ++this.programNumber;
                this.rightKeyPresed(this.availableChannelNumber[this.currentRow], this.programNumber);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.programNumber > 1) 
            {
                this.unHighlightProgram(this.availableChannelNumber[this.currentRow], this.programNumber);
                --this.programNumber;
                this.leftKeyPresed(this.availableChannelNumber[this.currentRow], this.programNumber);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === Key.NEXT) 
        {
            if (this.netStatus == "Up") 
            {
                if (this.EpgDayCounter < 7) 
                {
                    this.currentDay = this.currentDay + 1;
                    var __reg2 = new Date();
                    var __reg9 = __reg2.getHours();
                    var __reg10 = __reg2.getMinutes();
                    if (this.currentDate != null) 
                    {
                        delete this.currentDate;
                        this.currentDate = null;
                    }
                    this.currentDate = new Date(this.currentYear, this.currentMonth, this.currentDay, __reg9, __reg10, 0);
                    this.desiredDayEpgXMLLink = this.getDesiredEpgLink(this.epgOriginalLink);
                    this.removeEpg();
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.attachLoadingMC();
                    com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.loadItemXML(this.desiredDayEpgXMLLink, this.epgXmlObjectIndex, this.fn.onLoadItems);
                    ++this.EpgDayCounter;
                    this.desiredDayEpgXMLLink = null;
                    __reg9 = null;
                    __reg10 = null;
                    if (__reg2 != null) 
                    {
                        false;
                        __reg2 = null;
                    }
                }
            }
            else 
            {
                this.displayMessage(this.netErrorStr);
            }
            return;
        }
        else if (__reg0 === Key.PREVIOUS) 
        {
            if (this.netStatus == "Up") 
            {
                if (this.EpgDayCounter > 0) 
                {
                    __reg2 = new Date();
                    __reg9 = __reg2.getHours();
                    __reg10 = __reg2.getMinutes();
                    this.currentDay = this.currentDay - 1;
                    if (this.currentDate != null) 
                    {
                        delete this.currentDate;
                        this.currentDate = null;
                    }
                    this.currentDate = new Date(this.currentYear, this.currentMonth, this.currentDay, __reg9, __reg10, 0);
                    this.desiredDayEpgXMLLink = this.getDesiredEpgLink(this.epgOriginalLink);
                    this.removeEpg();
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.attachLoadingMC();
                    com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.loadItemXML(this.desiredDayEpgXMLLink, this.epgXmlObjectIndex, this.fn.onLoadItems);
                    --this.EpgDayCounter;
                    this.desiredDayEpgXMLLink = null;
                    __reg9 = null;
                    __reg10 = null;
                    if (__reg2 != null) 
                    {
                        false;
                        __reg2 = null;
                    }
                }
            }
            else 
            {
                this.displayMessage(this.netErrorStr);
            }
            return;
        }
        else if (__reg0 === Key.BACK) 
        {
            this.onEpgEvent.notify("exit");
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.availableChannelNumber.length != 0) 
        {
            if (this.netStatus == "Up") 
            {
                if (!this.isPlayerActive) 
                {
                    this.attachLoadingViewMC();
                    this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.CONNECTING_TO_SERVER);
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                }
                var __reg4 = null;
                var __reg7 = null;
                var __reg8 = this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]][0].channelName;
                var __reg11 = this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]][0].channelType;
                var __reg3 = this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]][0].channelId;
                var __reg6 = this.epgItems[0].categoryId;
                var __reg5 = this.epgItems[0].baseLink;
                var __reg12 = this.epgItems[0].channels[this.availableChannelNumber[this.currentRow]][0].channelIdx;
                __reg4 = this.getIndirectLink(__reg5, __reg3);
                __reg7 = this.getResponseLink(__reg5, __reg3, __reg6);
                this.onEpgEvent.notify("play", __reg8, __reg11, __reg3, __reg4, __reg7, __reg12, __reg6);
                __reg8 = null;
                __reg11 = null;
                __reg3 = null;
                __reg6 = null;
                __reg5 = null;
                __reg4 = null;
                __reg7 = null;
                __reg12 = null;
            }
            else 
            {
                this.displayMessage(this.netErrorStr);
            }
        }
        return;
    }

    function getIndirectLink(indirectLink, channelId)
    {
        if (indirectLink.charAt(indirectLink.length - 1) != "/") 
        {
            indirectLink = indirectLink + "/";
        }
        indirectLink = indirectLink + ("play/" + channelId);
        return indirectLink;
    }

    function getResponseLink(responseLink, channelId, categoryId)
    {
        if (responseLink.charAt(responseLink.length - 1) != "/") 
        {
            responseLink = responseLink + "/";
        }
        responseLink = responseLink + ("response/" + categoryId + "/" + channelId + "/" + "channel/");
        return responseLink;
    }

    function enable()
    {
        this.epgBaseMC._visible = true;
        this.addKeylistener();
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.removeLoadingMC();
        this.epgBaseMC._visible = false;
        this.displayMessage("");
    }

    function addKeylistener()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            this.loadingMC.removeMovieClip();
            this.loadingMC = null;
        }
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function removeEpg()
    {
        this.epgListingBaseMC.epgTimeLineContainerMC.epgTimeslotBaseMC.removeMovieClip();
        this.epgListingBaseMC.epgChannelsListContainerMC.epgChannelsListBaseMC.removeMovieClip();
        this.epgListingBaseMC.epgProgramsListContainerMC.epgProgramsListBaseMC.removeMovieClip();
        this.channelListMaskMC.removeMovieClip();
        this.programListMaskMC.removeMovieClip();
        this.timeLineMaskMC.removeMovieClip();
        this.currentDateLeftArrowMC._visible = false;
        this.currentDateRightArrowMC._visible = false;
        this.channelListArrowUpMC._visible = false;
        this.channelListArrowDownMC._visible = false;
        this.timeLineRightArrowMC._visible = false;
        this.timeLineLeftArrowMC._visible = false;
        this.errorText.htmlText = "";
        this.messageText.htmlText = "";
        this.currentDateText.htmlText = "";
        this.isSlotNumberOdd = null;
        if (this.epgItems != null) 
        {
            delete this.epgItems;
            this.epgItems = null;
        }
        if (this.availableChannelNumber != null) 
        {
            delete this.availableChannelNumber;
            this.availableChannelNumber = null;
        }
        this.currentRow = 0;
        this.topChannelIndex = 0;
        this.bottomChannelIndex = this.itemsOnPage;
        this.programNumber = 1;
        this.maskLeftPosition = this.programListX;
        this.maskRightPosition = this.programListX + this.programListMaskWidth;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.destroy();
        this.epgBaseMC.removeMovieClip();
        this.fn = null;
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.epgItems != null) 
        {
            delete this.epgItems;
            this.epgItems = null;
        }
        if (this.timeSlots != null) 
        {
            delete this.timeSlots;
            this.timeSlots = null;
        }
        if (this.currentDate != null) 
        {
            delete this.currentDate;
            this.currentDate = null;
        }
        if (this.keyListener != null) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.onEpgEvent != null) 
        {
            this.onEpgEvent = null;
            delete this.onEpgEvent;
        }
        if (this.availableChannelNumber != null) 
        {
            delete this.availableChannelNumber;
            this.availableChannelNumber = null;
        }
        this.netStatus = null;
        this.netErrorStr = null;
    }

    function setMask(x, y, width, height, channelTitle)
    {
        var __reg3 = this.epgContainerMC.attachMovie("MaskMC", "epgPlayerMaskMC", this.epgContainerMC.getNextHighestDepth());
        __reg3._x = 0;
        __reg3._y = height;
        __reg3._width = 1280;
        __reg3._height = 720 - y - height;
        this.epgContainerMC.setMask(__reg3);
        this.epgListingBaseMC._y = this.epgListingBaseMC._y + (height - 20);
        var __reg5 = this.epgBaseMC.createEmptyMovieClip("epgChannelTxtBaseMC", this.epgBaseMC.getNextHighestDepth());
        var __reg2 = __reg5.createTextField("channelName", __reg5.getNextHighestDepth(), 0, 0, 0, 0);
        __reg2.autoSize = true;
        this.setTxtFormat("Arial", "left", 35, true, 16557312);
        __reg2.setNewTextFormat(this.textFormat);
        __reg2.htmlText = channelTitle;
        __reg2._x = x - __reg2._width - 20;
        __reg2._y = height - __reg2._height - 10;
        __reg3 = null;
        __reg2 = null;
    }

}

//Sprite 676
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser
{
    static var xmlInvoker = null;
    static var onLoadXml = null;

    function EpgXmlParser()
    {
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onLoadXml = null;
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlObj = null;
        if (com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser, com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onEpgXmlResponse);
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker;
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker = null;
        }
        if (com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail;
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail = null;
        }
    }

    static function loadItemXML(url, index, onLoad)
    {
        if (com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser, com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onEpgXmlResponse);
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker;
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker = null;
        }
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.addListener("onXmlResponse", com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser, com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onEpgXmlResponse);
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.loadXML(url, index, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, true, false);
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onLoadXml = onLoad;
    }

    static function onEpgXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg3 = arguments[1];
        if (__reg2) 
        {
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlObj = com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlInvoker.getXmlObject();
        }
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.onLoadXml(__reg2, __reg3);
        __reg2 = null;
        __reg3 = null;
    }

    static function parseEpgItems(items)
    {
        if (com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail;
            com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail = null;
        }
        com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail = new Array();
        var __reg12 = mx.xpath.XPathAPI.selectNodeList(com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.xmlObj.firstChild, "/xml/items/item");
        var __reg9 = null;
        var __reg10 = 0;
        while (__reg10 < __reg12.length) 
        {
            var __reg6 = new com.jadoo.as2.JadooPlus.Features.EPG.EpgItem();
            __reg9 = __reg12[__reg10];
            __reg6.categoryId = mx.xpath.XPathAPI.selectSingleNode(__reg9, "/item/id").firstChild.nodeValue;
            __reg6.Name = mx.xpath.XPathAPI.selectSingleNode(__reg9, "/item/name").firstChild.nodeValue;
            __reg6.imageUrl = mx.xpath.XPathAPI.selectSingleNode(__reg9, "/item/item_image").firstChild.nodeValue;
            __reg6.baseLink = mx.xpath.XPathAPI.selectSingleNode(__reg9, "/item/play_url").firstChild.nodeValue;
            var __reg11 = mx.xpath.XPathAPI.selectNodeList(__reg9, "/item/channels/channel");
            var __reg7 = null;
            var __reg4 = 0;
            while (__reg4 < __reg11.length) 
            {
                var __reg5 = new Object();
                __reg7 = __reg11[__reg4];
                __reg5.channelId = mx.xpath.XPathAPI.selectSingleNode(__reg7, "/channel/channel_id").firstChild.nodeValue;
                __reg5.channelName = mx.xpath.XPathAPI.selectSingleNode(__reg7, "/channel/channel_name").firstChild.nodeValue;
                __reg5.channelType = mx.xpath.XPathAPI.selectSingleNode(__reg7, "/channel/channel_type").firstChild.nodeValue;
                __reg5.channelIdx = __reg4;
                __reg6.channels[__reg4] = new Array();
                __reg6.channels[__reg4][0] = __reg5;
                var __reg8 = mx.xpath.XPathAPI.selectNodeList(__reg7, "/channel/program_listings/program_listing/programs/program");
                var __reg3 = null;
                var __reg2 = 0;
                while (__reg2 < __reg8.length) 
                {
                    var __reg1 = new Object();
                    __reg3 = __reg8[__reg2];
                    __reg1.programTitle = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/program/title").firstChild.nodeValue;
                    __reg1.programTime = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/program/time").firstChild.nodeValue;
                    __reg1.programInfo = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/program/info").firstChild.nodeValue;
                    __reg1.programImage = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/program/image").firstChild.nodeValue;
                    com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail[__reg2] = __reg1;
                    __reg6.channels[__reg4].push(com.jadoo.as2.JadooPlus.Features.EPG.EpgXmlParser.programsDetail[__reg2]);
                    false;
                    __reg1 = null;
                    ++__reg2;
                }
                __reg2 = null;
                false;
                __reg5 = null;
                __reg8 = null;
                __reg3 = null;
                ++__reg4;
            }
            items[__reg10] = __reg6;
            __reg4 = null;
            false;
            __reg6 = null;
            ++__reg10;
        }
        __reg10 = null;
    }

}

//Sprite 677
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.EPG.EpgItem
{
    var Name;
    var baseLink;
    var categoryId;
    var channels;
    var imageUrl;

    function EpgItem()
    {
        this.Name = null;
        this.categoryId = null;
        this.imageUrl = null;
        this.baseLink = null;
        this.channels = new Array();
    }

}

//Sprite 678
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.LiveInfoBar
{
    var infoBarContainerMC = null;
    var infoBaseMC = null;
    var xml_obj = null;
    var currentProgramName: String = "";
    var nextProgramName: String = "";
    var programGuideUrl = null;
    var programNameTextWidth: Number = 300;
    var programNameTextHeight: Number = 65;
    var infoBarY: Number = 530;
    var backgroundWidth: Number = 1280;
    var txtMaskWidth: Number = 550;
    var currentProgmTxtX: Number = 10;
    var titleTxtY: Number = 5;
    var infoBarTime: Number = 0;
    var incrementTimeId = null;
    var updateProgramGuide: Boolean = true;
    var progGuideLoaderId: Number = -1;
    var currentState = null;
    var previousState = null;
    var fetchProgramGuideXML: Boolean = true;
    var currentProgramTime;
    var fn;
    var loadCalled;
    var nextProgramTime;
    var txtFrmt;
    var xmlPath;

    function LiveInfoBar()
    {
    }

    function create(parentMC, title, programGuideLink)
    {
        this.fn = {XMLParser: mx.utils.Delegate.create(this, this.XMLParser)};
        this.programGuideUrl = programGuideLink;
        this.infoBaseMC = parentMC.createEmptyMovieClip("infoBaseMC", parentMC.getNextHighestDepth());
        this.infoBarContainerMC = this.infoBaseMC.createEmptyMovieClip("infoBarContainerMC", this.infoBaseMC.getNextHighestDepth());
        this.infoBaseMC._visible = true;
        var __reg3 = this.infoBarContainerMC.attachMovie("info", "infoMC", this.infoBarContainerMC.getNextHighestDepth());
        this.infoBaseMC._x = (this.backgroundWidth - __reg3._width) / 2;
        this.infoBaseMC._y = this.infoBarY;
        __reg3._alpha = 85;
        var __reg8 = this.infoBarContainerMC.createEmptyMovieClip("titleTxtContainerMC", this.infoBarContainerMC.getNextHighestDepth());
        var __reg6 = this.infoBarContainerMC.attachMovie("MaskMC", "titletxtMaskMC", this.infoBarContainerMC.getNextHighestDepth());
        __reg6._x = (__reg3._width - this.txtMaskWidth) / 2;
        __reg6._width = this.txtMaskWidth;
        __reg6._height = titleTxt._height;
        var titleTxt = __reg8.createTextField("titleTxt", __reg8.getNextHighestDepth(), 0, this.titleTxtY, 0, 0);
        titleTxt.autoSize = true;
        this.setTxtFormat("Arial", 32, 16777215, "center", true);
        titleTxt.setNewTextFormat(this.txtFrmt);
        titleTxt.htmlText = title;
        if (titleTxt.textWidth > this.txtMaskWidth) 
        {
            titleTxt._x = (__reg3._width - this.txtMaskWidth) / 2;
        }
        else 
        {
            titleTxt._x = (__reg3._width - titleTxt._width) / 2;
        }
        titleTxt._height = titleTxt.textHeight;
        __reg8.setMask(__reg6);
        var __reg10 = this.infoBarContainerMC.createTextField("statusTxt", this.infoBarContainerMC.getNextHighestDepth(), __reg3._width / 2, titleTxt._y + titleTxt._height - 5, 0, 0);
        __reg10.autoSize = "center";
        if (_global.currentApplication != "MyJadoo") 
        {
            var __reg4 = this.infoBarContainerMC.createTextField("currentProgmLabelTxt", this.infoBarContainerMC.getNextHighestDepth(), __reg3._width * 0.15, __reg3._height * 0.15, 0, 0);
            __reg4.autoSize = "center";
            this.setTxtFormat("Arial", 28, 16776960, "center", false);
            __reg4.setNewTextFormat(this.txtFrmt);
            __reg4.text = "Current Program";
            var __reg9 = this.infoBarContainerMC.createTextField("currentProgmTxt", this.infoBarContainerMC.getNextHighestDepth(), this.currentProgmTxtX, __reg4._y + __reg4.textHeight, this.programNameTextWidth, this.programNameTextHeight);
            __reg9.wordWrap = true;
            var __reg5 = this.infoBarContainerMC.createTextField("nextProgmLabelTxt", this.infoBarContainerMC.getNextHighestDepth(), __reg3._width * 0.85, __reg4._y, 0, 0);
            __reg5.autoSize = "center";
            this.setTxtFormat("Arial", 28, 16776960, "center", false);
            __reg5.setNewTextFormat(this.txtFrmt);
            __reg5.text = "Next Program";
            var __reg12 = this.infoBarContainerMC.createTextField("nextProgmTxt", this.infoBarContainerMC.getNextHighestDepth(), __reg5._x - __reg5._width / 2, __reg9._y, this.programNameTextWidth, this.programNameTextHeight);
            __reg12.wordWrap = true;
            __reg12 = null;
            __reg5 = null;
            __reg9 = null;
            __reg4 = null;
        }
        var __reg7 = this.infoBaseMC.attachMovie("timeContainer", "currentTimeMC", this.infoBaseMC.getNextHighestDepth());
        __reg7._x = __reg10._x - __reg7._width / 2;
        __reg7._y = __reg3._height * 0.72;
        var __reg11 = this.infoBaseMC.createTextField("currentTimeTxt", this.infoBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg11.autoSize = true;
        this.setTime(0);
        __reg8 = null;
        __reg6 = null;
        __reg11 = null;
        __reg7 = null;
        __reg10 = null;
        titleTxt = null;
    }

    function getDesiredProgramGuideLink(programGuideLink)
    {
        var __reg3 = new Date();
        var __reg8 = null;
        var __reg2 = null;
        var __reg9 = undefined;
        var __reg1 = undefined;
        var __reg10 = undefined;
        var __reg5 = String(__reg3.getDate());
        var __reg11 = String(__reg3.getFullYear());
        var __reg6 = String(__reg3.getMonth() + 1);
        if (__reg5.length == 1) 
        {
            __reg5 = "0" + __reg5;
        }
        if (__reg6.length == 1) 
        {
            __reg6 = "0" + __reg6;
        }
        if (programGuideLink.charAt(programGuideLink.length - 1) != "/") 
        {
            programGuideLink = programGuideLink + "/";
        }
        __reg8 = __reg11 + "" + __reg6 + "" + __reg5;
        programGuideLink = programGuideLink + __reg8;
        __reg9 = __reg3.getTimezoneOffset();
        __reg1 = Math.floor(__reg9 / 60);
        __reg10 = Math.abs(__reg9 - __reg1 * 60);
        __reg1 = __reg1 * -1;
        __reg2 = String(__reg1);
        if (__reg2 >= 0) 
        {
            if (__reg1 < 10) 
            {
                __reg2 = "0" + __reg2;
            }
        }
        else 
        {
            __reg1 = Math.abs(__reg1);
            var __reg7 = String(__reg1);
            if (__reg1 > 9) 
            {
                __reg2 = "-" + __reg7;
            }
            else 
            {
                __reg2 = "-0" + __reg7;
            }
            __reg7 = null;
        }
        if (programGuideLink.charAt(programGuideLink.length - 1) != "/") 
        {
            programGuideLink = programGuideLink + "/";
        }
        programGuideLink = programGuideLink + (__reg2 + "/" + __reg10 + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode);
        if (__reg3 != null) 
        {
            false;
            __reg3 = null;
        }
        __reg5 = null;
        __reg11 = null;
        __reg6 = null;
        __reg8 = null;
        __reg2 = null;
        __reg9 = null;
        __reg1 = null;
        __reg10 = null;
        return programGuideLink;
    }

    function setTxtFormat(font, size, color, alignment, bold)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        this.txtFrmt.bold = bold;
    }

    function loadProgramGuideXML(xmlUrl)
    {
        if (this.xml_obj != null) 
        {
            this.xml_obj = null;
            delete this.xml_obj;
        }
        this.xml_obj = new XML();
        this.xml_obj.ignoreWhite = true;
        this.xml_obj.onLoad = this.fn.XMLParser;
        this.xml_obj.load(xmlUrl);
        this.loadCalled = true;
    }

    function XMLParser(success)
    {
        if (success) 
        {
            this.currentProgramName = mx.xpath.XPathAPI.selectSingleNode(this.xml_obj.firstChild, "/xml/program_guide/current_program_name").firstChild.nodeValue;
            this.nextProgramName = mx.xpath.XPathAPI.selectSingleNode(this.xml_obj.firstChild, "/xml/program_guide/next_program_name").firstChild.nodeValue;
            this.currentProgramTime = mx.xpath.XPathAPI.selectSingleNode(this.xml_obj.firstChild, "/xml/program_guide/current_program_time").firstChild.nodeValue;
            this.nextProgramTime = mx.xpath.XPathAPI.selectSingleNode(this.xml_obj.firstChild, "/xml/program_guide/next_program_time").firstChild.nodeValue;
            if (this.currentProgramName == "not available" || this.currentProgramName == undefined) 
            {
                this.currentProgramName = "Not available";
            }
            if (this.nextProgramName == "not available" || this.nextProgramName == undefined) 
            {
                this.nextProgramName = "Not available";
                this.fetchProgramGuideXML = false;
            }
        }
        else 
        {
            this.currentProgramName = "-";
            this.nextProgramName = "-";
        }
        this.setProgramTxt();
        this.loadCalled = false;
        if (this.fetchProgramGuideXML) 
        {
            this.calculateNextFetchTime();
        }
    }

    function calculateNextFetchTime()
    {
        var __reg5 = -1;
        var __reg8 = 0;
        var __reg3 = 0;
        var __reg4 = new Date();
        var __reg6 = 0;
        var __reg7 = 0;
        var __reg9 = this.getMinutes(this.nextProgramTime);
        var __reg2 = this.getHours(this.nextProgramTime);
        __reg3 = __reg4.getHours();
        __reg8 = __reg4.getMinutes();
        if (__reg3 > __reg2) 
        {
            __reg2 = __reg2 + 24;
        }
        __reg6 = __reg3 * 60 + __reg8;
        __reg7 = __reg2 * 60 + __reg9;
        __reg5 = Math.abs(__reg7 - __reg6) * 60;
        this.progGuideLoaderId = setInterval(this, "updateProgramGuideFlag", (__reg5 + 1) * 1000);
        __reg6 = null;
        __reg7 = null;
        __reg9 = null;
        __reg2 = null;
        __reg8 = null;
        __reg3 = null;
        __reg5 = null;
        false;
        __reg4 = null;
    }

    function updateProgramGuideFlag()
    {
        clearInterval(this.progGuideLoaderId);
        this.updateProgramGuide = true;
        if (this.isEnabled()) 
        {
            this.checkProgramGuideStatus();
        }
    }

    function getMinutes(progTime)
    {
        var __reg1 = null;
        var __reg3 = undefined;
        var __reg2 = progTime;
        __reg1 = new Array();
        __reg1 = __reg2.split(":");
        __reg3 = Number(__reg1[1]);
        progTime = null;
        __reg2 = null;
        false;
        __reg1 = null;
        return __reg3;
    }

    function getHours(progTime)
    {
        var __reg1 = null;
        var __reg3 = undefined;
        var __reg2 = progTime;
        __reg1 = new Array();
        __reg1 = __reg2.split(":");
        __reg3 = Number(__reg1[0]);
        progTime = null;
        __reg2 = null;
        false;
        __reg1 = null;
        return __reg3;
    }

    function destroy()
    {
        clearInterval(this.incrementTimeId);
        clearInterval(this.progGuideLoaderId);
        this.infoBaseMC.removeMovieClip();
        this.xmlPath = null;
        if (this.xml_obj != null) 
        {
            delete this.xml_obj;
            this.xml_obj = null;
        }
    }

    function setProgramTxt()
    {
        this.setTxtFormat("Arial", 26, 16777215, "center", false);
        this.infoBarContainerMC.currentProgmTxt.setNewTextFormat(this.txtFrmt);
        this.infoBarContainerMC.nextProgmTxt.setNewTextFormat(this.txtFrmt);
        if (this.currentState == "Loading...") 
        {
            this.infoBarContainerMC.currentProgmTxt.htmlText = "Updating...";
            this.infoBarContainerMC.nextProgmTxt.htmlText = "Updating...";
            return;
        }
        this.infoBarContainerMC.currentProgmTxt.htmlText = this.currentProgramName;
        this.infoBarContainerMC.nextProgmTxt.htmlText = this.nextProgramName;
    }

    function setTime(currentTime, incrementTime)
    {
        this.infoBarTime = currentTime;
        if (incrementTime) 
        {
            this.setInfoBarTime();
            this.incrementTimeId = setInterval(this, "incrementInfoBarTime", 1000);
            return;
        }
        this.setInfoBarTime();
    }

    function incrementInfoBarTime()
    {
        ++this.infoBarTime;
        this.setInfoBarTime();
    }

    function setInfoBarTime()
    {
        this.setTxtFormat("Arial", 24, 16777215, "center", false);
        this.infoBaseMC.currentTimeTxt.setNewTextFormat(this.txtFrmt);
        this.infoBaseMC.currentTimeTxt.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.secondsToTimeStr(this.infoBarTime);
        this.infoBaseMC.currentTimeTxt._y = this.infoBaseMC.currentTimeMC._y + (this.infoBaseMC.currentTimeMC._height - this.infoBaseMC.currentTimeTxt._height) / 2;
        this.infoBaseMC.currentTimeTxt._x = this.infoBaseMC.currentTimeMC._x + (this.infoBaseMC.currentTimeMC._width - this.infoBaseMC.currentTimeTxt._width) / 2;
    }

    function stopTimer()
    {
        clearInterval(this.incrementTimeId);
    }

    function enable()
    {
        if (this.infoBaseMC._visible == false) 
        {
            this.infoBaseMC._visible = true;
        }
        this.checkProgramGuideStatus();
        this.setProgramTxt();
    }

    function checkProgramGuideStatus()
    {
        if (_global.currentApplication != "MyJadoo" && !this.loadCalled && this.updateProgramGuide) 
        {
            this.xmlPath = this.getDesiredProgramGuideLink(this.programGuideUrl);
            this.loadProgramGuideXML(this.xmlPath);
            this.updateProgramGuide = false;
        }
    }

    function disable()
    {
        this.infoBaseMC._visible = false;
        clearInterval(this.incrementTimeId);
    }

    function isEnabled()
    {
        return this.infoBaseMC._visible;
    }

    function getCurrentTime()
    {
        return this.infoBarTime;
    }

    function setStatus(status)
    {
        clearInterval(this.incrementTimeId);
        this.currentState = status;
        if (this.previousState == "Loading..." && (status == "Buffering..." || status == "Playing")) 
        {
            this.setProgramTxt();
        }
        this.setTxtFormat("Arial", 30, 16776960, "center", false);
        this.infoBarContainerMC.statusTxt.setNewTextFormat(this.txtFrmt);
        this.infoBarContainerMC.statusTxt.htmlText = status;
        this.previousState = this.currentState;
        status = null;
    }

}

//Sprite 679
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.LiveStreamPlayer
{
    var parentMC = null;
    var liveItem = null;
    var onPlayerEvent = null;
    var responseLinkXML = null;
    var maxDuration;

    function LiveStreamPlayer()
    {
        this.onPlayerEvent = new com.BigRoom.Event();
    }

    function streamPlay()
    {
    }

    function streamStop()
    {
    }

    function getCurrentTime()
    {
    }

    function scaleLivePlayer()
    {
    }

    function destroy()
    {
        if (this.liveItem != null) 
        {
            delete this.liveItem;
            this.liveItem = null;
        }
        if (this.onPlayerEvent != null) 
        {
            delete this.onPlayerEvent;
            this.onPlayerEvent = null;
        }
        if (this.responseLinkXML != null) 
        {
            delete this.responseLinkXML;
            this.responseLinkXML = null;
        }
        this.parentMC = null;
    }

    function create(parentMC, liveItem, maxDuration)
    {
        this.parentMC = parentMC;
        this.liveItem = liveItem;
        this.maxDuration = maxDuration;
        parentMC = null;
        maxDuration = null;
        liveItem = null;
    }

    function sendPlaybackResponse(playbackStatus)
    {
        var __reg2 = this.liveItem.responseLink;
        if (__reg2 != null || __reg2 != undefined) 
        {
            if (__reg2.charAt(__reg2.length - 1) != "/") 
            {
                __reg2 = __reg2 + "/";
            }
            if (this.responseLinkXML != null) 
            {
                delete this.responseLinkXML;
                this.responseLinkXML = null;
            }
            this.responseLinkXML = new XML();
            this.responseLinkXML.load(__reg2 + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId() + "/" + playbackStatus + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.regionName);
        }
        playbackStatus = null;
        __reg2 = null;
    }

}

//Sprite 680
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.ChannelBar
{
    var backgroundMaskMC = null;
    var loadingMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var rightArrowMC = null;
    var leftArrowMC = null;
    var channelBarSelectorMC = null;
    var channelBarBaseMC = null;
    var topSliceMC = null;
    var middleSliceMC = null;
    var bottomSliceMC = null;
    var titleTextBaseMC = null;
    var errorTextBaseMC = null;
    var channelBarContainerMC = null;
    var channelNumberContainerMC = null;
    var topSliceOffset: Number = 3;
    var channelBarX: Number = 108;
    var channelBarY: Number = 50;
    var channelNamePosX: Number = 70;
    var channelNameMaskWidth: Number = 190;
    var itemsOnPage: Number = 9;
    var middleSliceOffset: Number = 15;
    var errorTextFieldHeight: Number = 40;
    var channelTextY = null;
    var currentChannelIdx: Number = 0;
    var currentCategoryIdx = null;
    var playingCategoryIdx = null;
    var playingChannelIdx = null;
    var maskHeight = null;
    var topItemIndex = null;
    var bottomItemIndex = null;
    var xmlObj = null;
    var fn = null;
    var channelBarItems = null;
    var categoryBarItems = null;
    var enabled: Boolean = false;
    var titleText = null;
    var textFormat = null;
    var keyListener = null;
    var channelNamesText = null;
    var channelNumbersText = null;
    var errorText = null;
    var xmlObjectIndex: Number = 0;
    var xmlInvoker = null;
    var channelBarEvent = null;
    var channelId = null;
    var categoryId = null;
    var isFavorites: Boolean = false;
    var channelBarItemHeight;

    function ChannelBar()
    {
        this.topItemIndex = 0;
        this.bottomItemIndex = this.itemsOnPage;
        this.channelBarEvent = new com.BigRoom.Event();
        this.fn = {onXmlLoad: mx.utils.Delegate.create(this, this.onXmlLoad), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function isEnabled()
    {
        return this.enabled;
    }

    function destroy()
    {
        this.channelBarBaseMC.removeMovieClip();
        this.xmlObj = null;
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onChannelBarXmlResponse);
            this.xmlInvoker.destroy();
            this.xmlInvoker = null;
            delete this.xmlInvoker;
        }
        if (this.channelBarItems != null) 
        {
            delete this.channelBarItems;
            this.channelBarItems = null;
        }
        if (this.channelBarEvent != null) 
        {
            delete this.channelBarEvent;
            this.channelBarEvent = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.titleText == null;
        this.titleText.removeTextField();
        delete this.titleText;
        this.titleText = null;
        if (this.channelBarItems != null) 
        {
            delete this.channelBarItems;
            this.channelBarItems = null;
        }
        if (this.categoryBarItems != null) 
        {
            delete this.categoryBarItems;
            this.categoryBarItems = null;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        this.fn = null;
        this.errorText.removeTextField();
        this.errorText = null;
        this.destroyTextFields();
    }

    function create(parentMC, playingCategoryIdx, playingChannelIdx, categoryId)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("ChannelBar_Create");
        }
        this.playingCategoryIdx = playingCategoryIdx;
        this.playingChannelIdx = playingChannelIdx;
        this.categoryId = categoryId;
        this.currentCategoryIdx = playingCategoryIdx;
        this.channelBarBaseMC = parentMC.createEmptyMovieClip("channelBarBaseMC", parentMC.getNextHighestDepth());
        this.topSliceMC = this.channelBarBaseMC.attachMovie("channelBarBgTopSlice", "topSliceMC", this.channelBarBaseMC.getNextHighestDepth());
        this.topSliceMC._x = this.channelBarX;
        this.topSliceMC._y = this.channelBarY;
        this.topSliceMC._alpha = 90;
        this.leftArrowMC = this.topSliceMC.attachMovie("epgLeftArrowMC", "leftArrowMC", this.topSliceMC.getNextHighestDepth());
        this.leftArrowMC._x = this.topSliceOffset;
        this.leftArrowMC._y = (this.topSliceMC._height - this.leftArrowMC._height) / 2;
        this.leftArrowMC._visible = false;
        this.rightArrowMC = this.topSliceMC.attachMovie("epgRightArrowMC", "rightArrowMC", this.topSliceMC.getNextHighestDepth());
        this.rightArrowMC._x = this.topSliceMC._width - this.topSliceOffset - this.rightArrowMC._width;
        this.rightArrowMC._y = this.leftArrowMC._y;
        this.rightArrowMC._visible = false;
        this.createTitleField();
        this.middleSliceMC = this.channelBarBaseMC.attachMovie("channelBarBgMiddleSlice", "middleSliceMC", this.channelBarBaseMC.getNextHighestDepth());
        this.middleSliceMC._x = this.channelBarX;
        this.middleSliceMC._y = this.channelBarY + this.topSliceMC._height;
        this.middleSliceMC._alpha = 90;
        this.loadSelector();
        this.channelBarItemHeight = this.channelBarSelectorMC._height;
        this.loadBackGroundMask();
        this.bottomSliceMC = this.channelBarBaseMC.attachMovie("channelBarBgBottomSlice", "bottomSliceMC", this.channelBarBaseMC.getNextHighestDepth());
        this.bottomSliceMC._x = this.channelBarX;
        this.bottomSliceMC._y = this.middleSliceMC._y + this.backgroundMaskMC._height;
        this.upArrowMC = this.middleSliceMC.attachMovie("upArrowMC", "upArrowMC", this.middleSliceMC.getNextHighestDepth());
        var __reg2 = (this.channelBarItemHeight - this.upArrowMC._height) / 2;
        this.upArrowMC._x = this.channelNamePosX + this.channelNameMaskWidth + 10;
        this.upArrowMC._y = __reg2;
        this.upArrowMC._visible = false;
        this.downArrowMC = this.middleSliceMC.attachMovie("downArrowMC", "downArrowMC", this.middleSliceMC.getNextHighestDepth());
        this.downArrowMC._x = this.upArrowMC._x;
        this.downArrowMC._y = __reg2 + (this.itemsOnPage - 1) * this.channelBarItemHeight;
        this.downArrowMC._visible = false;
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        this.errorTextBaseMC = this.middleSliceMC.createEmptyMovieClip("errorTextBaseMC", this.middleSliceMC.getNextHighestDepth());
        this.errorText = this.errorTextBaseMC.createTextField("errorTxt", this.errorTextBaseMC.getNextHighestDepth(), this.middleSliceOffset, 0, this.middleSliceMC._width - this.middleSliceOffset * 2, 0);
        this.errorText.wordWrap = true;
        this.errorText.autoSize = true;
        this.errorText.setNewTextFormat(this.textFormat);
        this.channelBarBaseMC._visible = false;
        this.middleSliceMC.selectorBaseMC._visible = false;
        __reg2 = null;
        parentMC = null;
        playingCategoryIdx = null;
        playingChannelIdx = null;
        categoryId = null;
    }

    function createTitleField()
    {
        this.titleTextBaseMC = this.topSliceMC.createEmptyMovieClip("titleTextBaseMC", this.topSliceMC.getNextHighestDepth());
        this.titleText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.titleText.createTextField(this.titleTextBaseMC, 0, 0, this.rightArrowMC._x - this.topSliceOffset - (this.leftArrowMC._x + this.leftArrowMC._width + this.topSliceOffset), this.topSliceMC._height, "false");
        this.titleText.setX(this.leftArrowMC._width + 2 * this.topSliceOffset);
        this.setTxtFormat("Arial", "center", 34, false, 16777215);
        this.titleText.setTextFormat(this.textFormat);
    }

    function loadSelector()
    {
        var __reg2 = this.middleSliceMC.createEmptyMovieClip("selectorBaseMC", this.middleSliceMC.getNextHighestDepth());
        this.channelBarSelectorMC = __reg2.attachMovie("channelBarSelector", "channelBarSelectorMC", __reg2.getNextHighestDepth());
        this.channelBarSelectorMC._x = (this.middleSliceMC._width - this.channelBarSelectorMC._width) / 2;
        __reg2 = null;
    }

    function loadBackGroundMask()
    {
        this.backgroundMaskMC = this.middleSliceMC.attachMovie("channelBarSelector", "backgroundMaskMC", this.middleSliceMC.getNextHighestDepth());
        this.backgroundMaskMC._x = 0;
        this.backgroundMaskMC._y = 0;
        this.backgroundMaskMC._width = this.middleSliceMC._width;
        this.backgroundMaskMC._height = this.channelBarItemHeight;
        this.middleSliceMC.setMask(this.backgroundMaskMC);
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function loadXML(XmlLink)
    {
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onChannelBarXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (XmlLink.charAt(XmlLink.length - 1) != "/") 
        {
            XmlLink = XmlLink + "/";
        }
        XmlLink = XmlLink + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        XmlLink = XmlLink + "/";
        XmlLink = XmlLink + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.onChannelBarXmlResponse);
        this.xmlInvoker.loadXML(XmlLink, this.xmlObjectIndex, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true, true, false);
    }

    function onChannelBarXmlResponse()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            this.xmlObj = this.xmlInvoker.getXmlObject();
        }
        this.onXmlLoad(__reg3, __reg4);
        __reg3 = null;
        __reg4 = null;
    }

    function onXmlLoad()
    {
        var __reg10 = arguments[0];
        var __reg11 = arguments[1];
        var __reg9 = null;
        var __reg8 = null;
        var __reg5 = null;
        this.channelBarItems = new Array();
        this.categoryBarItems = new Array();
        this.removeLoadingMC();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (__reg10) 
        {
            __reg9 = mx.xpath.XPathAPI.selectNodeList(this.xmlObj.firstChild, "/xml/sections/section");
            var __reg7 = 0;
            while (__reg7 < __reg9.length) 
            {
                __reg5 = new Object();
                __reg8 = __reg9[__reg7];
                var __reg4 = __reg8.childNodes;
                __reg5.id = Number(mx.xpath.XPathAPI.selectSingleNode(__reg8, "/section/section_id").firstChild.nodeValue);
                var __reg3 = 0;
                while (__reg3 < __reg4.length) 
                {
                    if (__reg4[__reg3].nodeName == "section_name") 
                    {
                        __reg5.name = __reg4[__reg3].firstChild.nodeValue;
                    }
                    else if (__reg4[__reg3].nodeName == "channels") 
                    {
                        this.parseChannels(__reg4[__reg3], __reg7, __reg5.id);
                    }
                    else if (__reg4[__reg3].nodeName == "popup") 
                    {
                        var __reg6 = this.parsePopupTag(__reg4[__reg3]);
                        __reg5.popupType = __reg6.popupType;
                        __reg5.popupMsg = __reg6.popupMsg;
                        __reg5.popupBtns = __reg6.buttons;
                    }
                    ++__reg3;
                }
                this.categoryBarItems[__reg7] = __reg5;
                __reg5 = null;
                __reg4 = null;
                ++__reg7;
            }
            this.displayTitle();
            this.displayChannelBar(this.playingChannelIdx);
        }
        else if (__reg11) 
        {
            this.displayErrorMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_LOAD_CHANNEL_LIST);
        }
        else 
        {
            this.displayErrorMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_LOAD_CHANNEL_LIST);
        }
        __reg9 = null;
        __reg8 = null;
        __reg10 = null;
        __reg11 = null;
    }

    function parsePopupTag(popupNode)
    {
        if (popupNode != null && popupNode != undefined) 
        {
            var __reg7 = new Object();
            __reg7.popupType = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/type").firstChild.nodeValue;
            __reg7.popupMsg = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/message").firstChild.nodeValue;
            var __reg4 = mx.xpath.XPathAPI.selectNodeList(popupNode, "/popup/buttons/button");
            var __reg3 = null;
            var __reg5 = new Array();
            var __reg1 = 0;
            while (__reg1 < __reg4.length) 
            {
                __reg3 = __reg4[__reg1];
                var __reg2 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/button/text").firstChild.nodeValue;
                __reg5[__reg1] = __reg2;
                __reg2 = null;
                ++__reg1;
            }
            __reg7.buttons = __reg5;
            __reg4 = null;
            __reg3 = null;
        }
        popupNode = null;
        return __reg7;
    }

    function parseChannels(channelsListNode, parentIdx, categoryId)
    {
        var __reg6 = channelsListNode.childNodes;
        var __reg7 = null;
        var __reg4 = null;
        this.channelBarItems[parentIdx] = new Array();
        var __reg5 = 0;
        while (__reg5 < __reg6.length) 
        {
            __reg7 = __reg6[__reg5];
            __reg4 = new Object();
            var __reg3 = __reg7.childNodes;
            var __reg2 = 0;
            while (__reg2 < __reg3.length) 
            {
                if (__reg3[__reg2].nodeName == "channel_id") 
                {
                    __reg4.id = Number(__reg3[__reg2].firstChild.nodeValue);
                }
                else if (__reg3[__reg2].nodeName == "channel_name") 
                {
                    __reg4.name = __reg3[__reg2].firstChild.nodeValue;
                }
                else if (__reg3[__reg2].nodeName == "channel_number") 
                {
                    __reg4.number = __reg3[__reg2].firstChild.nodeValue;
                }
                else if (__reg3[__reg2].nodeName == "channel_url") 
                {
                    __reg4.link = __reg3[__reg2].firstChild.nodeValue;
                }
                else if (__reg3[__reg2].nodeName == "channel_type") 
                {
                    __reg4.type = __reg3[__reg2].firstChild.nodeValue;
                }
                else if (__reg3[__reg2].nodeName == "response_link") 
                {
                    __reg4.reponseLink = __reg3[__reg2].firstChild.nodeValue;
                }
                ++__reg2;
            }
            if (this.playingCategoryIdx == null || this.playingChannelIdx == null) 
            {
                if (this.channelId == __reg4.id && this.categoryId == categoryId) 
                {
                    this.currentCategoryIdx = this.playingCategoryIdx = parentIdx;
                    this.playingChannelIdx = __reg5;
                }
            }
            this.channelBarItems[parentIdx][__reg5] = __reg4;
            __reg3 = null;
            ++__reg5;
        }
        __reg4 = null;
        __reg6 = null;
        __reg7 = null;
        channelsListNode = null;
        parentIdx = null;
        categoryId = null;
    }

    function parseFavoritesChannel()
    {
        var __reg5 = null;
        var __reg3 = null;
        var __reg4 = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesIndexArray(0);
        this.channelBarItems = new Array();
        this.categoryBarItems = new Array();
        __reg5 = new Object();
        __reg5.name = "Favorites";
        this.categoryBarItems[0] = __reg5;
        this.channelBarItems[0] = new Array();
        var __reg2 = 0;
        for (;;) 
        {
            if (__reg2 >= __reg4.length) 
            {
                return;
            }
            __reg3 = new Object();
            __reg3.number = __reg2 + 1;
            __reg3.id = __reg4[__reg2].itemId;
            __reg3.name = __reg4[__reg2].itemName;
            __reg3.link = __reg4[__reg2].itemLink;
            __reg3.type = __reg4[__reg2].itemType;
            __reg3.reponseLink = __reg4[__reg2].responseLink;
            __reg3.categoryId = __reg4[__reg2].categoryId;
            if (this.playingCategoryIdx == null || this.playingChannelIdx == null) 
            {
                if (this.channelId == __reg3.id) 
                {
                    this.playingChannelIdx = __reg2;
                }
            }
            this.channelBarItems[0][__reg2] = __reg3;
            ++__reg2;
        }
    }

    function displayErrorMessage(errorMessage)
    {
        this.errorText.htmlText = errorMessage;
        if (this.errorText._height > this.channelBarItemHeight) 
        {
            this.backgroundMaskMC._height = this.errorText._height + this.middleSliceOffset;
            this.bottomSliceMC._y = this.middleSliceMC._y + this.backgroundMaskMC._height;
        }
        this.errorText._y = (this.backgroundMaskMC._height - this.errorText._height) / 2;
        errorMessage = null;
    }

    function displayChannelBar(channelIdx)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Display_ChannelBar");
        }
        if (this.channelBarItems[this.currentCategoryIdx].length == 0) 
        {
            this.currentChannelIdx = 0;
            this.setScrollArrows();
            this.displayErrorMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
        }
        else 
        {
            this.channelBarContainerMC = this.middleSliceMC.createEmptyMovieClip("channelBarContainerMC", this.middleSliceMC.getNextHighestDepth());
            this.channelBarContainerMC._x = this.channelNamePosX;
            this.channelNumberContainerMC = this.middleSliceMC.createEmptyMovieClip("channelNumberContainerMC", this.middleSliceMC.getNextHighestDepth());
            if (channelIdx == null || channelIdx == undefined) 
            {
                channelIdx = 0;
            }
            this.currentChannelIdx = channelIdx;
            if (channelIdx >= this.bottomItemIndex) 
            {
                this.topItemIndex = channelIdx + 1 - this.itemsOnPage;
                this.channelBarContainerMC._y = this.channelBarContainerMC._y - this.channelBarItemHeight * this.topItemIndex;
                this.channelNumberContainerMC._y = this.channelNumberContainerMC._y - this.channelBarItemHeight * this.topItemIndex;
                this.middleSliceMC.selectorBaseMC._y = this.middleSliceMC.selectorBaseMC._y - this.channelBarItemHeight * this.topItemIndex;
                this.bottomItemIndex = channelIdx + 1;
            }
            this.maskHeight = this.itemsOnPage * this.channelBarItemHeight;
            if (this.middleSliceMC.selectorBaseMC._visible == false) 
            {
                this.middleSliceMC.selectorBaseMC._visible = true;
            }
            if (this.channelBarItems[this.currentCategoryIdx].length < this.itemsOnPage) 
            {
                this.backgroundMaskMC._height = this.channelBarItemHeight * this.channelBarItems[this.currentCategoryIdx].length;
            }
            else 
            {
                this.backgroundMaskMC._height = this.channelBarItemHeight * this.itemsOnPage;
            }
            this.bottomSliceMC._y = this.middleSliceMC._y + this.backgroundMaskMC._height;
            this.channelNumbersText = new Array();
            this.channelNamesText = new Array();
            var __reg3 = 0;
            while (__reg3 < this.channelBarItems[this.currentCategoryIdx].length) 
            {
                var __reg2 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
                __reg2.createTextField(this.channelNumberContainerMC, 0, 0, 0, 0, "true");
                this.setTxtFormat("Arial", "left", 26, false, 16777215);
                __reg2.setTextFormat(this.textFormat);
                __reg2.setX(this.middleSliceOffset);
                __reg2.setHtmlText(this.channelBarItems[this.currentCategoryIdx][__reg3].number + ". ");
                this.channelTextY = (this.channelBarItemHeight - __reg2.getHeight()) / 2;
                __reg2.setY(__reg3 * this.channelBarItemHeight + this.channelTextY);
                __reg2.setWidth(this.channelNamePosX - 5);
                var __reg4 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
                __reg4.createTextField(this.channelBarContainerMC, 0, 0, 0, 0, "true");
                this.setTxtFormat("Arial", "left", 26, false, 16777215);
                __reg4.setTextFormat(this.textFormat);
                __reg4.setHtmlText(this.channelBarItems[this.currentCategoryIdx][__reg3].name);
                __reg4.setY(__reg3 * this.channelBarItemHeight + this.channelTextY);
                __reg4.setWidth(this.channelNameMaskWidth);
                this.channelNumbersText[__reg3] = __reg2;
                this.channelNamesText[__reg3] = __reg4;
                __reg4 = null;
                __reg2 = null;
                ++__reg3;
            }
            this.setScrollArrows();
            this.highlightChannel(channelIdx);
        }
        channelIdx = null;
        __reg3 = null;
    }

    function enable(chnlId, isFavorites)
    {
        this.isFavorites = isFavorites;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Enable_ChannelBar");
        }
        this.channelBarBaseMC._visible = true;
        this.loadingMC = this.middleSliceMC.attachMovie("loading", "loadingMC", this.middleSliceMC.getNextHighestDepth(), {_x: this.middleSliceMC._width / 2, _y: this.backgroundMaskMC._height / 2, _width: 40, _height: 40});
        this.channelId = chnlId;
        if (isFavorites) 
        {
            this.parseFavoritesChannel();
            this.playingCategoryIdx = 0;
            this.currentCategoryIdx = 0;
            this.removeLoadingMC();
            this.displayTitle();
            this.displayChannelBar(this.playingChannelIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        else 
        {
            this.loadXML(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.liveItemsLink);
        }
        this.enabled = true;
        chnlId = null;
        isFavorites = null;
    }

    function displayTitle()
    {
        this.titleText.setHtmlText(this.categoryBarItems[this.currentCategoryIdx].name);
        this.titleText.enable(false, 2000);
        this.scrolLeftRightArrows();
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currentCategoryIdx < this.categoryBarItems.length - 1) 
            {
                this.middleSliceMC.selectorBaseMC._visible = false;
                this.resetChannelBar();
                ++this.currentCategoryIdx;
                if (this.categoryBarItems[this.currentCategoryIdx].popupType == "blocking") 
                {
                    ++this.currentCategoryIdx;
                }
                this.titleText.disable();
                this.displayTitle();
                if (this.currentCategoryIdx == this.playingCategoryIdx) 
                {
                    this.displayChannelBar(this.playingChannelIdx);
                }
                else 
                {
                    this.displayChannelBar(0);
                }
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currentCategoryIdx > 0) 
            {
                this.middleSliceMC.selectorBaseMC._visible = false;
                this.resetChannelBar();
                --this.currentCategoryIdx;
                if (this.categoryBarItems[this.currentCategoryIdx].popupType == "blocking") 
                {
                    --this.currentCategoryIdx;
                }
                this.titleText.disable();
                this.displayTitle();
                if (this.currentCategoryIdx == this.playingCategoryIdx) 
                {
                    this.displayChannelBar(this.playingChannelIdx);
                }
                else 
                {
                    this.displayChannelBar(0);
                }
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            if (this.currentChannelIdx < this.channelBarItems[this.currentCategoryIdx].length - 1) 
            {
                this.unHighlightChannel(this.currentChannelIdx);
                ++this.currentChannelIdx;
                if (this.currentChannelIdx == this.bottomItemIndex) 
                {
                    this.channelBarContainerMC._y = this.channelBarContainerMC._y - this.channelBarItemHeight;
                    this.channelNumberContainerMC._y = this.channelNumberContainerMC._y - this.channelBarItemHeight;
                    this.middleSliceMC.selectorBaseMC._y = this.middleSliceMC.selectorBaseMC._y - this.channelBarItemHeight;
                    ++this.topItemIndex;
                    ++this.bottomItemIndex;
                }
                this.highlightChannel(this.currentChannelIdx);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.currentChannelIdx > 0) 
            {
                if (this.currentChannelIdx == this.topItemIndex) 
                {
                    this.channelBarContainerMC._y = this.channelBarContainerMC._y + this.channelBarItemHeight;
                    this.channelNumberContainerMC._y = this.channelNumberContainerMC._y + this.channelBarItemHeight;
                    this.middleSliceMC.selectorBaseMC._y = this.middleSliceMC.selectorBaseMC._y + this.channelBarItemHeight;
                    --this.topItemIndex;
                    --this.bottomItemIndex;
                }
                this.unHighlightChannel(this.currentChannelIdx);
                --this.currentChannelIdx;
                this.highlightChannel(this.currentChannelIdx);
                this.setScrollArrows();
            }
            return;
        }
        else if (__reg0 === Key.BACK) 
        {
            this.disable();
            this.channelBarEvent.notify("deactivateChannelBar");
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.isFavorites) 
        {
            if ((this.currentCategoryIdx != this.playingCategoryIdx || this.currentChannelIdx != this.playingChannelIdx) && this.channelBarItems[this.currentCategoryIdx].length > 0) 
            {
                this.channelBarEvent.notify("channelChange", this.currentCategoryIdx, this.currentChannelIdx, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].id, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].name, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].type, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].link, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].responseLink, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].categoryId, this.categoryBarItems[this.currentCategoryIdx].popupType, this.categoryBarItems[this.currentCategoryIdx].popupMsg, this.categoryBarItems[this.currentCategoryIdx].popupBtns);
            }
        }
        else if ((this.currentCategoryIdx != this.playingCategoryIdx || this.currentChannelIdx != this.playingChannelIdx) && this.channelBarItems[this.currentCategoryIdx].length > 0) 
        {
            this.channelBarEvent.notify("channelChange", this.currentCategoryIdx, this.currentChannelIdx, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].id, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].name, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].type, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].link, this.channelBarItems[this.currentCategoryIdx][this.currentChannelIdx].responseLink, this.categoryBarItems[this.currentCategoryIdx].id, this.categoryBarItems[this.currentCategoryIdx].popupType, this.categoryBarItems[this.currentCategoryIdx].popupMsg, this.categoryBarItems[this.currentCategoryIdx].popupBtns);
        }
        return;
    }

    function scrolLeftRightArrows()
    {
        this.rightArrowMC._visible = true;
        this.leftArrowMC._visible = true;
        if (this.currentCategoryIdx == 0) 
        {
            this.leftArrowMC._visible = false;
        }
        else 
        {
            this.leftArrowMC._visible = true;
        }
        if (this.currentCategoryIdx == this.categoryBarItems.length - 1) 
        {
            this.rightArrowMC._visible = false;
            return;
        }
        this.rightArrowMC._visible = true;
    }

    function setScrollArrows()
    {
        this.downArrowMC._visible = true;
        this.upArrowMC._visible = true;
        if (this.bottomItemIndex > this.itemsOnPage) 
        {
            this.upArrowMC._visible = true;
        }
        else 
        {
            this.upArrowMC._visible = false;
        }
        if (this.currentChannelIdx == this.channelBarItems[this.currentCategoryIdx].length - 1 || this.channelBarItems[this.currentCategoryIdx].length < this.itemsOnPage || this.bottomItemIndex == this.channelBarItems[this.currentCategoryIdx].length && this.topItemIndex == this.channelBarItems[this.currentCategoryIdx].length - this.itemsOnPage) 
        {
            this.downArrowMC._visible = false;
            return;
        }
        this.downArrowMC._visible = true;
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function highlightChannel(channelIdx)
    {
        this.channelBarSelectorMC._y = channelIdx * this.channelBarItemHeight;
        this.channelNamesText[channelIdx].enable(false, 500);
        channelIdx = null;
    }

    function unHighlightChannel(channelIdx)
    {
        this.channelNamesText[channelIdx].disable();
        channelIdx = null;
    }

    function resetChannelBar()
    {
        this.destroyTextFields();
        this.channelBarContainerMC.removeMovieClip();
        this.channelBarContainerMC = null;
        this.channelNumberContainerMC.removeMovieClip();
        this.channelNumberContainerMC = null;
        this.errorText.htmlText = "";
        this.middleSliceMC.selectorBaseMC._y = 0;
        this.middleSliceMC.selectorBaseMC._visible = false;
        this.topItemIndex = 0;
        this.bottomItemIndex = this.itemsOnPage;
        this.backgroundMaskMC._height = this.channelBarItemHeight;
        this.bottomSliceMC._y = this.middleSliceMC._y + this.backgroundMaskMC._height;
    }

    function disable()
    {
        this.currentChannelIdx = this.playingChannelIdx;
        this.currentCategoryIdx = this.playingCategoryIdx;
        this.resetChannelBar();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.channelBarItems != null) 
        {
            delete this.channelBarItems;
            this.channelBarItems = null;
        }
        if (this.categoryBarItems != null) 
        {
            delete this.categoryBarItems;
            this.categoryBarItems = null;
        }
        this.titleText.setHtmlText("");
        this.channelBarBaseMC._visible = false;
        this.downArrowMC._visible = false;
        this.upArrowMC._visible = false;
        this.leftArrowMC._visible = false;
        this.rightArrowMC._visible = false;
        this.enabled = false;
    }

    function destroyTextFields()
    {
        if (this.channelNumbersText != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.channelNumbersText.length) 
            {
                this.channelNumbersText[__reg2].removeTextField();
                delete this.channelNumbersText[__reg2];
                this.channelNumbersText[__reg2] = null;
                ++__reg2;
            }
            delete this.channelNumbersText;
            this.channelNumbersText = null;
        }
        if (this.channelNamesText != null) 
        {
            __reg2 = 0;
            while (__reg2 < this.channelNamesText.length) 
            {
                this.channelNamesText[__reg2].removeTextField();
                delete this.channelNamesText[__reg2];
                this.channelNamesText[__reg2] = null;
                ++__reg2;
            }
            delete this.channelNamesText;
            this.channelNamesText = null;
        }
    }

}

//Sprite 681
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.OvertFingerprint
{
    static var fpBaseMC = null;
    static var durationTimerId: Number = -1;
    static var type = ["SIGNLE_COL", "SINGLE_ROW", "TWO_COL", "TWO_ROW"];
    static var backgroundColor = null;
    static var txtFormat = null;

    function OvertFingerprint()
    {
    }

    static function show(parentMC, duration)
    {
        _global.clearTimeout(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.durationTimerId);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.backgroundColor = com.jadoo.as2.JadooPlus.Utils.Utils.randRange(0, 16777215);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat = new TextFormat();
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat.font = "Arial";
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat.align = "left";
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat.size = 24;
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat.bold = false;
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat.color = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.backgroundColor ^ 4294967295;
        if (com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC != null) 
        {
            removeMovieClip(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC);
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC = null;
        }
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC = parentMC.createEmptyMovieClip("fpBaseMC", parentMC.getNextHighestDepth());
        var __reg2 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.type[com.jadoo.as2.JadooPlus.Utils.Utils.randRange(0, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.type.length - 1)];
        if ((__reg0 = __reg2) === "SIGNLE_COL") 
        {
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.showSingleCol();
        }
        else if (__reg0 === "SINGLE_ROW") 
        {
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.showSingleRow();
        }
        else if (__reg0 === "TWO_COL") 
        {
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.showTwoCol();
        }
        else if (__reg0 === "TWO_ROW") 
        {
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.showTwoRow();
        }
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._x = com.jadoo.as2.JadooPlus.Utils.Utils.randRange(90, 1190 - com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._width);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._y = com.jadoo.as2.JadooPlus.Utils.Utils.randRange(32, 688 - com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._height);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.beginFill(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.backgroundColor, 100);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.moveTo(0, 0);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.lineTo(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._width, 0);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.lineTo(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._width, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._height);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.lineTo(0, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._height);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.lineTo(0, 0);
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.endFill();
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.durationTimerId = _global.setTimeout(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.destroy, duration * 1000);
        __reg2 = null;
        parentMC = null;
    }

    static function showSingleCol()
    {
        var __reg3 = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId().toUpperCase();
        var __reg1 = null;
        var __reg4 = 0;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("charTextField" + __reg2, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
            __reg1.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
            __reg1.htmlText = __reg3.charAt(__reg2);
            __reg1.autoSize = true;
            __reg1._y = __reg4;
            __reg4 = __reg4 + __reg1._height;
            ++__reg2;
        }
        __reg3 = null;
        __reg1 = null;
    }

    static function showSingleRow()
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("fpTextField", com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg1.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
        __reg1.htmlText = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId().toUpperCase();
        __reg1.autoSize = true;
        __reg1 = null;
    }

    static function showTwoCol()
    {
        var __reg3 = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId().toUpperCase();
        var __reg1 = null;
        var __reg4 = 0;
        var __reg5 = 0;
        var __reg2 = 0;
        while (__reg2 < __reg3.length / 2) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("charTextField" + __reg2, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
            __reg1.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
            __reg1.htmlText = __reg3.charAt(__reg2);
            __reg1.autoSize = true;
            __reg1._y = __reg4;
            __reg4 = __reg4 + __reg1._height;
            ++__reg2;
        }
        __reg5 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC._width;
        __reg4 = 0;
        __reg2 = __reg3.length / 2;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("charTextField" + __reg2, com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
            __reg1.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
            __reg1.htmlText = __reg3.charAt(__reg2);
            __reg1.autoSize = true;
            __reg1._x = __reg5;
            __reg1._y = __reg4;
            __reg4 = __reg4 + __reg1._height;
            ++__reg2;
        }
        __reg3 = null;
        __reg1 = null;
    }

    static function showTwoRow()
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId().toUpperCase();
        var __reg2 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("fpTextField1", com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        var __reg3 = com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.createTextField("fpTextField2", com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg2.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
        __reg2.htmlText = __reg1.substr(0, __reg1.length / 2);
        __reg2.autoSize = true;
        __reg3.setNewTextFormat(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat);
        __reg3.htmlText = __reg1.substr(__reg1.length / 2, __reg1.length / 2);
        __reg3.autoSize = true;
        __reg3._y = __reg2.textHeight;
        __reg1 = null;
        __reg2 = null;
        __reg3 = null;
    }

    static function destroy()
    {
        if (com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC != null) 
        {
            removeMovieClip(com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC);
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.fpBaseMC = null;
        }
        if (com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat;
            com.jadoo.as2.JadooPlus.Features.OvertFingerprint.txtFormat = null;
        }
        com.jadoo.as2.JadooPlus.Features.OvertFingerprint.backgroundColor = null;
    }

}

//Sprite 682
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.WmvPlayer extends com.jadoo.as2.JadooPlus.Player.LivePlayer.LiveStreamPlayer
{
    var fn = null;
    var xmlStartVOD = null;
    var xmlStopVOD = null;
    var xmlVodInfo = null;
    var xmlDurationInfo = null;
    var stopVodLoadTimerId: Number = -1;
    var playbackTimerId: Number = -1;
    var durationTimerId: Number = -1;
    var wmvBufferTimerId: Number = -1;
    var errorString = null;
    var action = null;
    var errorCode = null;
    var stopBtnPressed: Boolean = false;
    var playerStarted: Boolean = false;
    var vodEventsRemoved: Boolean = false;
    var forStopVod: Boolean = false;
    var playbackStarted: Boolean = false;
    var playerTimeOut: Boolean = false;
    var currentVODTime;
    var liveItem;
    var maxDuration;
    var onPlayerEvent;
    var sendPlaybackResponse;

    function WmvPlayer()
    {
        super();
        this.fn = {onLoadXmlStartVOD: mx.utils.Delegate.create(this, this.onLoadXmlStartVOD), onLoadXmlVodInfo: mx.utils.Delegate.create(this, this.onLoadXmlVodInfo), onLoadStopVodXML: mx.utils.Delegate.create(this, this.onLoadStopVodXML), onLoadXmlDurationInfo: mx.utils.Delegate.create(this, this.onLoadXmlDurationInfo)};
    }

    function destroy()
    {
        clearInterval(this.playbackTimerId);
        clearInterval(this.stopVodLoadTimerId);
        clearInterval(this.durationTimerId);
        clearInterval(this.wmvBufferTimerId);
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.resetSocket();
        if (!this.vodEventsRemoved) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
        }
        if (this.fn != null) 
        {
            delete this.fn;
            this.fn = null;
        }
        if (this.xmlVodInfo != null) 
        {
            delete this.xmlVodInfo;
            this.xmlVodInfo = null;
        }
        if (this.xmlStopVOD != null) 
        {
            delete this.xmlStopVOD;
            this.xmlStopVOD = null;
        }
        if (this.xmlStartVOD != null) 
        {
            delete this.xmlStartVOD;
            this.xmlStartVOD = null;
        }
        if (this.xmlDurationInfo != null) 
        {
            delete this.xmlDurationInfo;
            this.xmlDurationInfo = null;
        }
        this.playbackTimerId = null;
        super.destroy();
    }

    function create(parentMC, liveItem, maxDuration)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("WMV_Player");
        }
        super.create(parentMC, liveItem, maxDuration);
        parentMC = null;
        liveItem = null;
        maxDuration = null;
    }

    function streamPlay()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Play_" + this.liveItem.streamLink);
        }
        if (com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.isSocketConnected()) 
        {
            var __reg2 = this.urlEncode(this.liveItem.streamLink);
            if (this.xmlStartVOD != null) 
            {
                delete this.xmlStartVOD;
                this.xmlStartVOD = null;
            }
            this.xmlStartVOD = new XML();
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("VodEvent", this, this.onVodEvent);
            this.xmlStartVOD.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=start_vod&arg1=0" + "&arg2=" + __reg2 + "&arg3=");
            this.xmlStartVOD.onLoad = this.fn.onLoadXmlStartVOD;
            __reg2 = null;
            return;
        }
        this.stopBtnPressed = true;
        this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_INITIALIZE_PLAYER;
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_EVENTS_SOCKET_NOT_CONNECTED);
        this.onPlayerEvent.notify("livePlayerError", this.errorString);
    }

    function onLoadXmlStartVOD(success)
    {
        var __reg3 = mx.xpath.XPathAPI.selectNodeList(this.xmlStartVOD.firstChild, "/theDavidBox");
        var __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(__reg3[0], "/theDavidBox/returnValue").firstChild.nodeValue);
        if (__reg2 == 0) 
        {
            this.playbackTimerId = setInterval(this, "checkPlayback", com.jadoo.as2.JadooPlus.Utils.Config.playerLoadTimeOut);
        }
        else 
        {
            this.action = "Error";
            this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT;
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_VOD_START_RETURNS_1);
            this.stopWmv();
        }
        success = null;
        __reg3 = null;
        __reg2 = null;
    }

    function checkPlayback()
    {
        clearInterval(this.playbackTimerId);
        if (this.playbackStarted) 
        {
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("WMV_Player_Timeout");
        }
        this.action = "Error";
        this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT;
        this.playerTimeOut = true;
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_REACHED_MAX_BUF_TIME);
        this.stopWmv();
    }

    function onVodEvent()
    {
        var __reg3 = arguments;
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("WMV_Event_" + __reg3[0]);
        }
        if ((__reg0 = __reg3[0]) === "playback start") 
        {
            this.onPlayerEvent.notify("loading");
            this.playerStarted = true;
            return;
        }
        else if (__reg0 === "buffering") 
        {
            this.onPlayerEvent.notify("buffering", null);
            clearInterval(this.wmvBufferTimerId);
            this.wmvBufferTimerId = setInterval(this, "checkBufferingState", com.jadoo.as2.JadooPlus.Utils.Config.playerBufferingTimeOut);
            return;
        }
        else if (__reg0 === "playing") 
        {
            if (__reg3[1] == true) 
            {
                this.sendPlaybackResponse("200");
                this.playbackStarted = true;
                if (this.maxDuration != null && this.maxDuration != undefined) 
                {
                    this.durationTimerId = setInterval(this, "getDurationInfo", this.maxDuration * 1000);
                }
            }
            clearInterval(this.wmvBufferTimerId);
            this.onPlayerEvent.notify("playing", null);
            return;
        }
        else if (__reg0 === "error") 
        {
            this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_UNKNOWN_ERROR;
            this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.VOD_ERROR_UNKNOWN;
            if ((__reg0 = __reg3[1]) === "INVALID_FILE") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_INVALID_FILE;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_FILE_NOT_FOUND;
            }
            else if (__reg0 === "OPEN_FILE_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_OPEN_FILE_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_FILE_OPEN_ERROR;
            }
            else if (__reg0 === "READ_FILE_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_READ_FILE_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_FILE_READ_ERROR;
            }
            else if (__reg0 === "CONNECTION_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_CONNECTION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_CONNECTION_ERROR;
            }
            else if (__reg0 === "DETECTION_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DETECTION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_DETECTION_ERROR;
            }
            else if (__reg0 === "DISC_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DISC_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_DISC_ERROR;
            }
            else if (__reg0 === "DISC_REGION_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_DISC_REGION_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_DISC_REGION_ERROR;
            }
            else if (__reg0 === "SYSTEM_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_SYSTEM_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_SYSTEM_ERROR;
            }
            else if (__reg0 === "NETWORK_ERROR") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_NETWORK_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_NETWORK_ERROR;
            }
            else if (__reg0 === "FORMAT_NOT_SUPPORTED") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_FORMAT_NOT_SUPPORTED;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_FORMAT_NOT_SUPPORTED;
            }
            else if (__reg0 === "ERROR_UNKNOWN") 
            {
                this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_UNKNOWN_ERROR;
                this.errorCode = com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_ERROR_UNKNOWN;
            }
            this.action = "Error";
            return;
        }
        else if (__reg0 === "terminated") 
        {
            if (!this.vodEventsRemoved) 
            {
                com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
                this.vodEventsRemoved = true;
            }
            if (this.stopBtnPressed) 
            {
                if (this.action == "Stop") 
                {
                    this.onPlayerEvent.notify("livePlayerStop");
                }
                else if (this.action == "Error") 
                {
                    if (this.playerTimeOut) 
                    {
                        this.onPlayerEvent.notify("livePlayerError", this.errorString);
                    }
                    else 
                    {
                        this.onPlayerEvent.notify("livePlayerStop");
                    }
                }
            }
            else 
            {
                if (!this.playbackStarted && this.errorCode == null) 
                {
                    this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_TERMINATE);
                }
                else 
                {
                    this.sendPlaybackResponse(this.errorCode);
                }
                this.onPlayerEvent.notify("livePlayerError", this.errorString);
            }
            return;
        }
        else if (__reg0 !== "stream_end") 
        {
            return;
        }
        return;
    }

    function checkBufferingState()
    {
        clearInterval(this.wmvBufferTimerId);
        this.playerTimeOut = true;
        this.action = "Error";
        this.errorString = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT;
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.WMV_BUFFER_TIMEOUT_30SECS);
        this.stopWmv();
    }

    function stopWmv()
    {
        this.onPlayerEvent.notify("stopping");
        if (!this.playerStarted || this.playerTimeOut) 
        {
            com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
            this.vodEventsRemoved = true;
        }
        this.stopVOD();
    }

    function streamStop()
    {
        if (this.stopBtnPressed) 
        {
            return;
        }
        this.stopBtnPressed = true;
        this.action = "Stop";
        this.stopWmv();
    }

    function stopVOD()
    {
        if (this.xmlStopVOD != null) 
        {
            delete this.xmlStopVOD;
            this.xmlStopVOD = null;
        }
        this.xmlStopVOD = new XML();
        this.xmlStopVOD.onLoad = this.fn.onLoadStopVodXML;
        this.xmlStopVOD.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=stop_vod");
    }

    function onLoadStopVodXML(success)
    {
        var __reg3 = null;
        var __reg2 = undefined;
        if (success) 
        {
            __reg3 = mx.xpath.XPathAPI.selectNodeList(this.xmlStopVOD.firstChild, "/theDavidBox");
            __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(__reg3[0], "/theDavidBox/returnValue").firstChild.nodeValue);
            if (__reg2 == 1) 
            {
                if (!this.vodEventsRemoved) 
                {
                    com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.removeListener("VodEvent", this, this.onVodEvent);
                    this.vodEventsRemoved = true;
                }
                this.forStopVod = true;
                this.getCurrentVodInfo();
            }
            else if (__reg2 == 0 && this.vodEventsRemoved) 
            {
                if (this.action == "Stop") 
                {
                    this.onPlayerEvent.notify("livePlayerStop");
                }
                else if (this.action == "Error") 
                {
                    this.onPlayerEvent.notify("livePlayerError", this.errorString);
                }
            }
        }
        success = null;
        __reg3 = null;
        __reg2 = null;
    }

    function getCurrentTime()
    {
        this.getCurrentVodInfo();
    }

    function getCurrentVodInfo()
    {
        if (this.xmlVodInfo != null) 
        {
            delete this.xmlVodInfo;
            this.xmlVodInfo = null;
        }
        this.xmlVodInfo = new XML();
        this.xmlVodInfo.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=get_current_vod_info");
        this.xmlVodInfo.onLoad = this.fn.onLoadXmlVodInfo;
    }

    function onLoadXmlVodInfo(success)
    {
        var __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlVodInfo.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
        if (this.forStopVod) 
        {
            if (__reg2 == 0) 
            {
                this.stopVodLoadTimerId = setInterval(this, "stopVOD", 500);
            }
            else if (this.action == "Stop") 
            {
                this.onPlayerEvent.notify("livePlayerStop");
            }
            else if (this.action == "Error") 
            {
                this.onPlayerEvent.notify("livePlayerError", this.errorString);
            }
        }
        else 
        {
            if (__reg2 == 0) 
            {
                this.currentVODTime = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlVodInfo.firstChild, "/theDavidBox/response/currentTime").firstChild.nodeValue);
            }
            this.onPlayerEvent.notify("onGetCurrentTime", this.currentVODTime);
        }
        success = null;
        __reg2 = null;
    }

    function getDurationInfo()
    {
        if (this.xmlDurationInfo != null) 
        {
            delete this.xmlDurationInfo;
            this.xmlDurationInfo = null;
        }
        this.xmlDurationInfo = new XML();
        this.xmlDurationInfo.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=get_current_vod_info");
        this.xmlDurationInfo.onLoad = this.fn.onLoadXmlDurationInfo;
    }

    function onLoadXmlDurationInfo(success)
    {
        var __reg3 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlDurationInfo.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue);
        var __reg2 = null;
        var __reg4 = null;
        if (__reg3 == 0) 
        {
            __reg2 = int(mx.xpath.XPathAPI.selectSingleNode(this.xmlDurationInfo.firstChild, "/theDavidBox/response/currentTime").firstChild.nodeValue);
        }
        if (__reg2 >= this.maxDuration) 
        {
            this.action = "Stop";
            this.stopWmv();
        }
        else 
        {
            clearInterval(this.durationTimerId);
            this.durationTimerId = -1;
            this.durationTimerId = setInterval(this, "getDurationInfo", (this.maxDuration - __reg2) * 1000);
        }
        success = null;
    }

    function scaleLivePlayer(x, y, width, height)
    {
        var __reg1 = new XML();
        __reg1.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/playback?arg0=set_scale_vod&arg1=" + x + "&arg2=" + y + "&arg3=" + width + "&arg4=" + height);
        __reg1 = null;
    }

    function urlEncode(encodedString)
    {
        encodedString = escape(encodedString);
        encodedString = this.replace(encodedString, "%2D", "-");
        encodedString = this.replace(encodedString, "%2E", ".");
        encodedString = this.replace(encodedString, "%5F", "_");
        encodedString = this.replace(encodedString, "%7E", "~");
        return encodedString;
    }

    function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

}

//Sprite 683
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpPlayer extends com.jadoo.as2.JadooPlus.Player.LivePlayer.LiveStreamPlayer
{
    var parentMC = null;
    var liveItem = null;
    var netStream = null;
    var playerBaseMC = null;
    var videoMC = null;
    var fn = null;
    var connectionStr: String = "";
    var streamName: String = "";
    var loadTimerId: Number = -1;
    var durationTimerId: Number = -1;
    var rtmpBufferingTimerId: Number = -1;
    var playerTimeOut: Boolean = false;
    var playbackStarted: Boolean = false;
    var playbackResponseSent: Boolean = false;
    var stopBtnPressed: Boolean = false;
    var timeInterval: Number = -1;
    var isBufferingTimerSet: Boolean = false;
    var bufferingPlayingTimerId: Number = -1;
    var isStreamUnpublished: Boolean = false;
    var maxDuration;
    var onPlayerEvent;
    var sendPlaybackResponse;

    function RtmpPlayer()
    {
        super();
        this.fn = {onNSStatus: mx.utils.Delegate.create(this, this.onNSStatus)};
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.addListener("onNCStatus", this, this.onNCStatus);
    }

    function destroy()
    {
        clearInterval(this.loadTimerId);
        clearInterval(this.durationTimerId);
        clearInterval(this.rtmpBufferingTimerId);
        this.rtmpBufferingTimerId = -1;
        this.destroyStreaming();
        if (this.fn != null) 
        {
            delete this.fn;
            this.fn = null;
        }
        this.connectionStr = null;
        this.streamName = null;
        removeMovieClip(this.videoMC);
        removeMovieClip(this.playerBaseMC);
        super.destroy();
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.removeListener("onNCStatus", this, this.onNCStatus);
    }

    function create(parentMC, liveItem, maxDuration)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("RTMP_Player");
        }
        this.playerBaseMC = parentMC.createEmptyMovieClip("playerBaseMC", parentMC.getNextHighestDepth());
        this.videoMC = this.playerBaseMC.attachMovie("videoContainer", "videoMC", this.playerBaseMC.getNextHighestDepth(), {_x: 0, _y: 0});
        super.create(parentMC, liveItem, maxDuration);
        parentMC = null;
        liveItem = null;
        maxDuration = null;
    }

    function streamPlay()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Play_" + this.liveItem.streamLink);
        }
        this.onPlayerEvent.notify("loading");
        this.initializeStreaming(this.liveItem.streamLink);
    }

    function initializeStreaming(itemLink)
    {
        this.parseUrl(itemLink);
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnect(this.connectionStr);
        itemLink = null;
    }

    function onNCStatus(Status)
    {
        if (Status == "Success" || Status == "Failed") 
        {
            this.netStream = new NetStream(com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection);
            this.netStream.setBufferTime(7);
            this.netStream.onStatus = this.fn.onNSStatus;
            this.rtmpPlay();
            return;
        }
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_NET_CONNECTION_FAILED);
        this.destroyStreaming();
        this.onPlayerEvent.notify("livePlayerError");
    }

    function parseUrl(streamUrl)
    {
        var __reg4 = null;
        __reg4 = streamUrl.split("//");
        if (__reg4.length == 2) 
        {
            var __reg3 = __reg4[1].split("/");
            this.connectionStr = __reg4[0] + "//" + __reg3[0];
            var __reg2 = 1;
            while (__reg2 < __reg3.length - 1) 
            {
                this.connectionStr = this.connectionStr + "/";
                this.connectionStr = this.connectionStr + __reg3[__reg2];
                ++__reg2;
            }
            this.streamName = __reg3[__reg3.length - 1];
            __reg3 = null;
        }
        else 
        {
            this.connectionStr = __reg4[0] + "//" + __reg4[1];
            this.streamName = __reg4[2];
        }
        __reg4 = null;
        streamUrl = null;
    }

    function rtmpPlay()
    {
        this.videoMC.videoObj.attachVideo(this.netStream);
        this.netStream.play(this.streamName);
        this.loadTimerId = setInterval(this, "checkPlaybackStart", com.jadoo.as2.JadooPlus.Utils.Config.playerLoadTimeOut);
    }

    function checkPlaybackStart()
    {
        clearInterval(this.loadTimerId);
        if (this.playbackStarted) 
        {
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("RTMP_Player_Timeout");
        }
        this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_REACHED_MAX_BUF_TIME);
        this.playerTimeOut = true;
        this.stopRTMP();
    }

    function onNSStatus(infoObject)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NSStatus_" + infoObject.code);
        }
        if (infoObject.code == "NetStream.Play.UnpublishNotify") 
        {
            this.isStreamUnpublished = true;
            if (this.rtmpBufferingTimerId == -1) 
            {
                clearInterval(this.rtmpBufferingTimerId);
                this.rtmpBufferingTimerId = -1;
                this.rtmpBufferingTimerId = setInterval(this, "checkBufferingState", com.jadoo.as2.JadooPlus.Utils.Config.playerBufferingTimeOut);
            }
        }
        else if (infoObject.code == "NetStream.Play.StreamNotFound") 
        {
            clearInterval(this.loadTimerId);
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_STREAM_NOT_FOUND);
            this.destroyStreaming();
            this.onPlayerEvent.notify("livePlayerError", com.jadoo.as2.JadooPlus.Utils.Messages.STREAM_NOT_FOUND);
        }
        else if (infoObject.code == "NetStream.Buffer.Full") 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NSBufferLength_" + this.netStream.bufferLength);
            }
            if (this.netStream.bufferLength > 1 || !this.playbackStarted) 
            {
                if (!this.playbackStarted) 
                {
                    this.playbackStarted = true;
                    if (this.maxDuration != null && this.maxDuration != undefined) 
                    {
                        this.durationTimerId = setInterval(this, "getDurationInfo", this.maxDuration * 1000);
                    }
                }
                if (this.playbackResponseSent == false) 
                {
                    clearInterval(this.loadTimerId);
                    this.sendPlaybackResponse("200");
                    this.playbackResponseSent = true;
                }
                clearInterval(this.rtmpBufferingTimerId);
                this.rtmpBufferingTimerId = -1;
                if (this.isStreamUnpublished) 
                {
                    this.isStreamUnpublished = false;
                }
                this.onPlayerEvent.notify("playing", int(this.netStream.time));
            }
        }
        else if (infoObject.code == "NetStream.Buffer.Empty") 
        {
            this.onPlayerEvent.notify("buffering", int(this.netStream.time));
            if (this.rtmpBufferingTimerId == -1) 
            {
                clearInterval(this.rtmpBufferingTimerId);
                this.rtmpBufferingTimerId = -1;
                this.rtmpBufferingTimerId = setInterval(this, "checkBufferingState", com.jadoo.as2.JadooPlus.Utils.Config.playerBufferingTimeOut);
            }
            var __reg3 = int(this.netStream.time);
            if (__reg3 == this.timeInterval) 
            {
                if (this.isBufferingTimerSet == false) 
                {
                    this.isBufferingTimerSet = true;
                    this.bufferingPlayingTimerId = setInterval(this, "bufferingPlayingTimeOut", 30000);
                }
            }
            else 
            {
                this.timeInterval = __reg3;
            }
            __reg3 = null;
        }
        else if (infoObject.code == "NetStream.Play.Stop") 
        {
            clearInterval(this.loadTimerId);
            this.destroyStreaming();
            this.onPlayerEvent.notify("livePlayerStop");
        }
        else if (infoObject.code == "NetStream.Failed") 
        {
            clearInterval(this.loadTimerId);
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_STREAM_CONNECTION_FAILED);
            this.destroyStreaming();
            this.onPlayerEvent.notify("livePlayerError");
        }
        infoObject = null;
    }

    function bufferingPlayingTimeOut()
    {
        clearInterval(this.bufferingPlayingTimerId);
        this.isBufferingTimerSet = false;
        var __reg2 = int(this.netStream.time);
        if (__reg2 == this.timeInterval) 
        {
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_INFINITE_BUFFER_PLAY_LOOP);
            this.destroyStreaming();
            this.onPlayerEvent.notify("livePlayerError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT);
        }
        __reg2 = null;
    }

    function checkBufferingState()
    {
        clearInterval(this.loadTimerId);
        clearInterval(this.rtmpBufferingTimerId);
        this.rtmpBufferingTimerId = -1;
        if (this.isStreamUnpublished) 
        {
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_UNPUBLISH_NOTIFY);
        }
        else 
        {
            this.sendPlaybackResponse(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.RTMP_BUFFER_TIMEOUT_30SECS);
        }
        this.destroyStreaming();
        this.onPlayerEvent.notify("livePlayerError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT);
    }

    function getCurrentTime()
    {
        var __reg2 = int(this.netStream.time);
        this.onPlayerEvent.notify("onGetCurrentTime", __reg2);
    }

    function streamStop()
    {
        if (this.stopBtnPressed) 
        {
            return;
        }
        this.stopBtnPressed = true;
        this.stopRTMP();
    }

    function destroyStreaming()
    {
        if (this.netStream != null) 
        {
            this.netStream.onStatus = null;
            this.netStream.play(false);
            this.netStream.close();
            delete this.netStream;
            this.netStream = null;
        }
    }

    function stopRTMP()
    {
        this.onPlayerEvent.notify("stopping");
        this.videoMC._visible = false;
        this.destroyStreaming();
        if (this.playerTimeOut) 
        {
            this.onPlayerEvent.notify("livePlayerError");
            return;
        }
        this.onPlayerEvent.notify("livePlayerStop");
    }

    function getDurationInfo()
    {
        var __reg2 = int(this.netStream.time);
        if (__reg2 >= this.maxDuration) 
        {
            this.stopRTMP();
            return;
        }
        clearInterval(this.durationTimerId);
        this.durationTimerId = -1;
        this.durationTimerId = setInterval(this, "getDurationInfo", (this.maxDuration - __reg2) * 1000);
    }

    function scaleLivePlayer(x, y, width, height)
    {
        this.videoMC._x = x;
        this.videoMC._y = y;
        this.videoMC._width = width;
        this.videoMC._height = height;
    }

}

//Sprite 684
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect
{
    static var netConnection = null;
    static var connectedToServer = null;
    static var connectionTimeOut: Boolean = false;
    static var onConnectionStatus = null;
    static var connectionStr: String = "";

    function RtmpNetConnect()
    {
    }

    static function destroyNetConnection()
    {
        if (com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection != null) 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.onStatus = null;
            delete com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection = null;
        }
    }

    static function netConnect(connectionStr)
    {
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionStr = connectionStr;
        if (com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionTimeOut == true) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NCTimedOut");
            }
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionTimeOut = false;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.destroyNetConnection();
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection = new NetConnection();
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.onStatus = mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect, com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onNCStatus);
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.connect(connectionStr);
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NC_isConnected_" + com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.isConnected);
        }
        if (connectionStr != com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectedToServer) 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.destroyNetConnection();
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection = new NetConnection();
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.onStatus = mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect, com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onNCStatus);
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.connect(connectionStr);
            return;
        }
        if (com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.isConnected) 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.notify("Success");
            return;
        }
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.destroyNetConnection();
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection = new NetConnection();
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.onStatus = mx.utils.Delegate.create(com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect, com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onNCStatus);
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.netConnection.connect(connectionStr);
    }

    static function onNCStatus(info)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("NCStatus_" + info.code);
        }
        if (info.code == "NetConnection.Connect.Success") 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectedToServer = com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionStr;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.notify("Success");
            return;
        }
        if (info.code == "NetConnection.Call.Failed") 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectedToServer = com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionStr;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.notify("Failed");
            return;
        }
        if (info.code == "NetConnection.Connect.IdleTimeOut") 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectionTimeOut = true;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.destroyNetConnection();
            return;
        }
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.connectedToServer = null;
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.destroyNetConnection();
        com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.notify("");
    }

    static function addListener(eventName, obj, method)
    {
        if (eventName == "onNCStatus") 
        {
            if (com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus != null) 
            {
                com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.removeListener(obj, method);
                delete com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus;
                com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus = null;
            }
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus = new com.BigRoom.Event();
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    static function removeListener(eventName, obj, method)
    {
        if (eventName == "onNCStatus") 
        {
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus.removeListener(obj, method);
            delete com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus;
            com.jadoo.as2.JadooPlus.Player.LivePlayer.RtmpNetConnect.onConnectionStatus = null;
        }
        eventName = null;
        obj = null;
        method = null;
    }

}

//Sprite 685
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Menu.MultiTierMenuHandler
{
    var mainMenuMC = null;
    var parentMC = null;
    var parentTier = null;
    var menuList = null;
    var keyListener = null;
    var fn = null;
    var onClose = null;
    var onEnter = null;
    var contextMenu = null;
    var numPages: Number = 1;
    var menuStartX = null;
    var menuStartY = null;

    function MultiTierMenuHandler()
    {
        this.keyListener = new Object();
        this.onClose = new com.BigRoom.Event();
        this.onEnter = new com.BigRoom.Event();
        this.menuList = new Array();
        this.contextMenu = new Array();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function create(parentMC, parentTier)
    {
        var __reg3 = parentTier.areaStartX;
        var __reg2 = parentTier.areaStartY;
        this.parentMC = parentMC;
        this.parentTier = parentTier;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (__reg3 == 0) 
        {
            __reg3 = 100;
        }
        if (__reg2 == 0) 
        {
            __reg2 = 100;
        }
        this.menuStartX = __reg3 + 50;
        this.menuStartY = __reg2 + 50;
        this.numPages = parentTier.getNumPages();
        this.createMainMenu();
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.menuList != null) 
        {
            while (this.menuList.length) 
            {
                var __reg2 = com.jadoo.as2.JadooPlus.Menu.Menu(this.menuList.pop());
                __reg2.removeListener("onClose", this, this.onCloseMenu);
                __reg2.removeListener("onEnterKey", this, this.onEnterKey);
                __reg2.destroy();
                false;
                __reg2 = null;
            }
            delete this.menuList;
            this.menuList = null;
        }
        delete this.contextMenu;
        this.contextMenu = null;
        delete this.onClose;
        this.onClose = null;
        delete this.onEnter;
        this.onEnter = null;
        this.fn = null;
        this.parentMC = null;
        this.parentTier = null;
        removeMovieClip(this.mainMenuMC);
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onKeyEnter") 
        {
            this.onEnter.addListener(obj, method);
            return;
        }
        if (eventName == "onClose") 
        {
            this.onClose.addListener(obj, method);
        }
    }

    function removeListener(eventName, object, method)
    {
        if (eventName == "onKeyEnter") 
        {
            this.onEnter.removeListener(object, method);
            return;
        }
        if (eventName == "onClose") 
        {
            this.onClose.removeListener(object, method);
        }
    }

    function createMainMenu()
    {
        var __reg3 = new com.jadoo.as2.JadooPlus.Menu.Menu();
        this.menuList.push(__reg3);
        this.mainMenuMC = this.parentMC.createEmptyMovieClip("mainMenuMC", this.parentMC.getNextHighestDepth());
        this.mainMenuMC._x = this.menuStartX;
        this.mainMenuMC._y = this.menuStartY;
        if (this.parentTier.getPageId() == 0) 
        {
            __reg3.addMenuItem("Password Settings", "menu");
            if (!com.jadoo.as2.JadooPlus.UserInfo.Passwords.isUserPasswrdNull()) 
            {
                if (this.parentTier.getItemProtectedStatus()) 
                {
                    if (this.parentTier.getItemProtectedStatus()) 
                    {
                        __reg3.addMenuItem("Unlock Item", "normal");
                    }
                }
                else 
                {
                    __reg3.addMenuItem("Lock Item", "normal");
                }
            }
        }
        if (_global.currentApplication == "MyJadoo") 
        {
            __reg3.addMenuItem("Unsubscribe Selected Item", "normal");
        }
        __reg3.addListener("onClose", this, this.onCloseMenu);
        __reg3.addListener("onEnterKey", this, this.onEnterKey);
        __reg3.create(this.mainMenuMC, "Menu");
        this.contextMenu.push("MainMenu");
        __reg3 = null;
    }

    function createPasswrdMenu()
    {
        var __reg2 = new com.jadoo.as2.JadooPlus.Menu.Menu();
        var __reg3 = this.menuList[this.menuList.length - 1];
        this.menuList.push(__reg2);
        var __reg4 = this.parentMC.createEmptyMovieClip("passwrdMenuMC", this.parentMC.getNextHighestDepth());
        __reg4._x = __reg3.getX() + __reg3.getWidth();
        __reg4._y = __reg3.getY();
        if (com.jadoo.as2.JadooPlus.UserInfo.Passwords.isUserPasswrdNull()) 
        {
            __reg2.addMenuItem("Set Password", "normal");
        }
        else 
        {
            __reg2.addMenuItem("Change Password", "normal");
            __reg2.addMenuItem("Remove Password", "normal");
        }
        __reg2.addListener("onClose", this, this.onCloseMenu);
        __reg2.addListener("onEnterKey", this, this.onEnterKey);
        __reg2.create(__reg4, "Password Settings");
        this.contextMenu.push("PasswrdMenu");
        __reg2 = null;
        __reg3 = null;
    }

    function onCloseMenu()
    {
        var __reg2 = com.jadoo.as2.JadooPlus.Menu.Menu(this.menuList.pop());
        __reg2.removeListener("onClose", this, this.onCloseMenu);
        __reg2.removeListener("onEnterKey", this, this.onEnterKey);
        __reg2.destroy();
        false;
        __reg2 = null;
        this.contextMenu.pop();
        if (this.menuList.length == 0) 
        {
            this.onClose.notify();
            return;
        }
        this.menuList[this.menuList.length - 1].enable();
    }

    function onEnterKey()
    {
        var __reg5 = arguments;
        if ((__reg0 = this.contextMenu[this.contextMenu.length - 1]) === "MainMenu") 
        {
            var __reg3 = __reg5[0];
            if (__reg3.name == "Unsubscribe Selected Item") 
            {
                this.onEnter.notify("MyJadoo", "Unsubscribe Selected Item");
            }
            if (__reg3.name == "Password Settings") 
            {
                this.menuList[this.menuList.length - 1].disable();
                this.createPasswrdMenu();
            }
            if (__reg3.name == "Lock Item") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onEnter.notify("Password", "Lock Item");
            }
            if (__reg3.name == "Unlock Item") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onEnter.notify("Password", "Unlock Item");
            }
            __reg3 = null;
        }
        else if (__reg0 === "PasswrdMenu") 
        {
            var __reg4 = __reg5[0];
            if (__reg4.name == "Set Password") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onEnter.notify("Password", "Set Password");
            }
            else if (__reg4.name == "Change Password") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onEnter.notify("Password", "Change Password");
            }
            else if (__reg4.name == "Remove Password") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onEnter.notify("Password", "Remove Password");
            }
        }
        __reg5 = null;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.MENU) 
        {
            if (_global.currentApplication == "MyJadoo") 
            {
                this.onClose.notify();
            }
            return;
        }
    }

}

//Sprite 686
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Menu.Menu
{
    var menuItems = null;
    var keyListener = null;
    var fn = null;
    var menuTitle = null;
    var menuBaseMC = null;
    var menuSelectorMC = null;
    var menuMaskMC = null;
    var menuListMC = null;
    var onEnter = null;
    var onClose = null;
    var itemMaskMC = null;
    var menuTopMC = null;
    var menuMiddleMC = null;
    var menuBottomMC = null;
    var middleMaskMC = null;
    var textFormat = null;
    var highlightIdx: Number = 0;
    var numGroups: Number = 0;
    var groupGap: Number = 10;
    var maxMenuItems: Number = 0;
    var itemTextOffset: Number = 10;
    var itemTextMC = null;
    var itemNames = null;
    var selectorWidth;

    function Menu()
    {
        this.keyListener = new Object();
        this.onEnter = new com.BigRoom.Event();
        this.onClose = new com.BigRoom.Event();
        this.menuItems = new Array();
        this.itemNames = new Array();
        this.textFormat = new TextFormat();
        this.keyListener = new Object();
    }

    function create(menuMC, menuTitle)
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        if (menuTitle != null && menuTitle != undefined) 
        {
            this.menuTitle = menuTitle;
        }
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.menuBaseMC = menuMC;
        this.createMenuBackGround();
        this.createMenuItems();
        this.displayItems();
        this.highlightItem(0);
    }

    function createMenuBackGround()
    {
        var __reg2 = this.menuBaseMC.createEmptyMovieClip("menuMiddleBaseMC", this.menuBaseMC.getNextHighestDepth());
        this.menuTopMC = this.menuBaseMC.attachMovie("channelBarBgTopSlice", "menuTopMC", this.menuBaseMC.getNextHighestDepth());
        this.menuMiddleMC = __reg2.attachMovie("channelBarBgMiddleSlice", "menuMiddleMC", __reg2.getNextHighestDepth());
        this.menuMiddleMC._x = this.menuTopMC._x;
        this.menuMiddleMC._y = this.menuTopMC._y + this.menuTopMC._height;
        this.middleMaskMC = __reg2.attachMovie("channelBarBgMiddleSlice", "middleMaskMC", __reg2.getNextHighestDepth(), {_width: this.menuMiddleMC._width, _height: 0});
        this.middleMaskMC._x = this.menuMiddleMC._x;
        this.middleMaskMC._y = this.menuMiddleMC._y;
        __reg2.setMask(this.middleMaskMC);
        this.menuBottomMC = this.menuBaseMC.attachMovie("channelBarBgBottomSlice", "menuBottomMC", this.menuBaseMC.getNextHighestDepth());
        this.menuBottomMC._x = this.menuTopMC._x;
        this.menuBottomMC._y = this.menuTopMC._y + this.menuTopMC._height + this.middleMaskMC._height;
        __reg2 = null;
    }

    function createMenuItems()
    {
        var __reg3 = this.menuBaseMC.createEmptyMovieClip("selectorBaseMC", this.menuBaseMC.getNextHighestDepth());
        this.menuSelectorMC = this.menuBaseMC.attachMovie("channelBarSelector", "menuSelectorMC", this.menuBaseMC.getNextHighestDepth());
        this.menuSelectorMC._x = (this.menuMiddleMC._width - this.menuSelectorMC._width) / 2;
        this.menuSelectorMC._y = this.menuMiddleMC._y;
        this.selectorWidth = this.menuSelectorMC._width;
        this.maxMenuItems = int(this.menuMiddleMC._height / this.menuSelectorMC._height);
        this.menuListMC = this.menuBaseMC.createEmptyMovieClip("menuListMC", this.menuBaseMC.getNextHighestDepth());
        this.menuListMC._y = this.menuMiddleMC._y;
        this.menuMaskMC = this.menuBaseMC.attachMovie("channelBarBgMiddleSlice", "menuMaskMC", this.menuBaseMC.getNextHighestDepth());
        this.menuListMC.setMask(this.menuMaskMC);
        this.menuMaskMC._x = this.menuSelectorMC._x;
        this.menuMaskMC._y = this.middleMaskMC._y;
        this.menuMaskMC._width = this.selectorWidth;
        this.menuMaskMC._height = this.middleMaskMC._height;
        var __reg2 = this.menuBaseMC.createTextField("menuTitleTxt", this.menuBaseMC.getNextHighestDepth(), this.menuSelectorMC._x, 15, this.selectorWidth, this.menuTopMC._height - 2);
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.bold = true;
        this.textFormat.color = 16777215;
        this.textFormat.size = 26;
        __reg2.setNewTextFormat(this.textFormat);
        __reg2.htmlText = this.menuTitle;
        __reg2._y = (this.menuTopMC._height - __reg2.textHeight) / 2;
        __reg2 = null;
        __reg3 = null;
    }

    function destroy()
    {
        var __reg2 = 0;
        while (__reg2 < this.itemNames.length) 
        {
            this.itemNames[__reg2].removeTextField();
            delete this.itemNames[__reg2];
            this.itemNames[__reg2] = null;
            ++__reg2;
        }
        if (this.itemNames != null) 
        {
            delete this.itemNames;
            this.itemNames = null;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        removeMovieClip(this.menuBaseMC);
        if (this.menuItems != null) 
        {
            delete this.menuItems;
            this.menuItems = null;
        }
        delete this.onEnter;
        this.onEnter = null;
        delete this.onClose;
        this.onClose = null;
        delete this.textFormat;
        this.textFormat = null;
        this.fn = null;
        this.menuTitle = null;
        this.menuListMC = null;
        this.menuMaskMC = null;
        this.menuBaseMC = null;
    }

    function createNewGroup()
    {
        ++this.numGroups;
        return this.numGroups - 1;
    }

    function addMenuItem(itemName, type)
    {
        this.menuItems.push({name: itemName, type: type});
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onEnterKey") 
        {
            this.onEnter.addListener(obj, method);
            return;
        }
        if (eventName == "onClose") 
        {
            this.onClose.addListener(obj, method);
        }
    }

    function removeListener(eventName, object, method)
    {
        if (eventName == "onEnterKey") 
        {
            this.onEnter.removeListener(object, method);
            return;
        }
        if (eventName == "onClose") 
        {
            this.onClose.removeListener(object, method);
        }
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.menuBaseMC._alpha = 90;
    }

    function enable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.menuBaseMC._alpha = 100;
    }

    function getWidth()
    {
        return this.menuBaseMC.menuTopMC._width;
    }

    function getHeight()
    {
        return this.menuBaseMC.menuBgMC._height;
    }

    function getX()
    {
        return this.menuBaseMC._x;
    }

    function getY()
    {
        return this.menuBaseMC._y;
    }

    function getItemY(itemIdx)
    {
        return this.itemNames[itemIdx].getY() + this.menuListMC._y;
    }

    function displayItems()
    {
        var __reg6 = 0;
        this.textFormat.align = "left";
        this.textFormat.bold = true;
        this.textFormat.color = 16777215;
        this.textFormat.size = 20;
        var __reg2 = 0;
        for (;;) 
        {
            if (__reg2 >= this.menuItems.length) 
            {
                return;
            }
            var __reg3 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            if (this.menuItems[__reg2].type == "normal") 
            {
                __reg3.createTextField(this.menuListMC, 0, 0, this.selectorWidth - this.itemTextOffset, this.menuSelectorMC._height, "false");
                __reg3.setX(this.menuSelectorMC._x + this.itemTextOffset);
            }
            else if (this.menuItems[__reg2].type == "menu") 
            {
                var __reg4 = this.menuListMC.attachMovie("arrowWhite", "arrowWhiteMC" + __reg2, this.menuListMC.getNextHighestDepth());
                __reg4._x = this.menuSelectorMC._x + this.selectorWidth - __reg4._width - 2;
                __reg4._y = this.menuSelectorMC._height * __reg2 + (this.menuSelectorMC._height - __reg4._height) / 2;
                var __reg5 = this.menuListMC.attachMovie("arrowBlack", "arrowBlackMC" + __reg2, this.menuListMC.getNextHighestDepth());
                __reg5._x = __reg4._x;
                __reg5._y = __reg4._y;
                __reg5._visible = false;
                __reg3.createTextField(this.menuListMC, 0, 0, __reg5._x - this.menuSelectorMC._x - 15, this.menuSelectorMC._height, "false");
                __reg3.setX(this.menuSelectorMC._x + this.itemTextOffset);
                __reg4 = null;
                __reg5 = null;
            }
            if (__reg2 < this.maxMenuItems) 
            {
                this.middleMaskMC._height = this.middleMaskMC._height + this.menuSelectorMC._height;
                this.menuBottomMC._y = this.middleMaskMC._y + this.middleMaskMC._height;
                this.menuMaskMC._height = this.middleMaskMC._height;
            }
            __reg3.setTextFormat(this.textFormat);
            __reg3.setHtmlText(this.menuItems[__reg2].name);
            __reg3.setY(this.menuSelectorMC._height * __reg2);
            this.itemNames[__reg2] = __reg3;
            __reg3 = null;
            ++__reg2;
        }
    }

    function highlightItem(itemIdx)
    {
        this.itemNames[itemIdx].enable(false, 2000);
        this.highlightIdx = itemIdx;
    }

    function unhighlightItem(itemIdx)
    {
        this.itemNames[itemIdx].disable();
    }

    function moveDown(itemIdx)
    {
        if (this.menuSelectorMC._y + this.menuSelectorMC._height >= this.menuMiddleMC._y + this.menuMiddleMC._height) 
        {
            this.menuListMC._y = this.menuListMC._y - this.menuSelectorMC._height;
        }
        if (this.menuSelectorMC._y < this.menuMiddleMC._y + this.menuMiddleMC._height - this.menuSelectorMC._height) 
        {
            this.menuSelectorMC._y = this.menuSelectorMC._y + this.menuSelectorMC._height;
        }
    }

    function moveUp()
    {
        if (this.menuListMC._y < this.menuMaskMC._y && this.menuSelectorMC._y == this.menuMaskMC._y) 
        {
            this.menuListMC._y = this.menuListMC._y + this.menuSelectorMC._height;
        }
        if (this.menuSelectorMC._y < this.menuMiddleMC._y + this.menuMiddleMC._height && this.menuSelectorMC._y > this.menuMiddleMC._y) 
        {
            this.menuSelectorMC._y = this.menuSelectorMC._y - this.menuSelectorMC._height;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 13) 
        {
            this.onEnter.notify(this.menuItems[this.highlightIdx], this.highlightIdx);
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.highlightIdx > 0) 
            {
                this.unhighlightItem(this.highlightIdx);
                this.highlightItem(this.highlightIdx - 1);
                this.moveUp();
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            if (this.highlightIdx < this.menuItems.length - 1) 
            {
                this.unhighlightItem(this.highlightIdx);
                this.highlightItem(this.highlightIdx + 1);
                this.moveDown(this.highlightIdx);
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.menuItems[this.highlightIdx].type == "menu") 
            {
                this.onEnter.notify(this.menuItems[this.highlightIdx], this.highlightIdx);
            }
            return;
        }
        else if (__reg0 !== 37) 
        {
            if (__reg0 !== Key.BACK) 
            {
                return;
            }
        }
        this.onClose.notify();
        return;
    }

}

//Sprite 687
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.UserInfo.Passwords
{
    static var passwordSharedObjectListener = new Object();
    static var userPasswords = null;
    static var lockItem: Boolean = true;

    function Passwords()
    {
    }

    static function init()
    {
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords = SharedObject.getLocal("Passwords");
    }

    static function setUserPassword(password)
    {
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data.userPassword = password;
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.flush();
    }

    static function isUserPasswrdNull()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data.userPassword == "" || com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data.userPassword == undefined) 
        {
            return true;
        }
        return false;
    }

    static function removePassword()
    {
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.clear();
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.flush();
        if (arguments[0] == "reset") 
        {
            var __reg2 = new XML();
            __reg2.load(com.jadoo.as2.JadooPlus.UserInfo.UserProfile.resetPaswrdAckUrl + "/" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId());
            false;
            __reg2 = null;
        }
    }

    static function getUserPassword()
    {
        return com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data.userPassword;
    }

    static function addMenuItem(itemId)
    {
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.lockItem = true;
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data["passwords" + itemId] = com.jadoo.as2.JadooPlus.UserInfo.Passwords.lockItem;
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.flush();
    }

    static function unlockItem(itemId)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data["passwords" + itemId]) 
        {
            delete com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data["passwords" + itemId];
        }
        com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.flush();
    }

    static function getItemProtectedStatus(itemId)
    {
        var __reg1 = false;
        if (com.jadoo.as2.JadooPlus.UserInfo.Passwords.userPasswords.data["passwords" + itemId]) 
        {
            __reg1 = true;
        }
        return __reg1;
    }

}

//Sprite 688
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.UserInfo.PasswordSettings
{
    var kBoardBaseMC = null;
    var minPasswrdLength: Number = 6;
    var maxPasswrdLength: Number = 10;
    var parentMC = null;
    var passwrdBaseMC = null;
    var keyListener = new Object();
    var fn = null;
    var textFormat = null;
    var inputTxtFormat = null;
    var currAction = null;
    var virtKeyBoard = null;
    var restrictLink = null;
    var xml = null;
    var fieldSelectorMC = null;
    var titleTxtFormat = null;
    var errorTxtFormat = null;
    var btnTextFormat = null;
    var txtFieldBaseMC = null;
    var txtFieldPosX: Number = 50;
    var txtFieldPosY: Number = 85;
    var txtFieldBoxX: Number = 200;
    var txtFieldBoxY: Number = 0;
    var btnPosY: Number = 215;
    var btnWidth: Number = 145;
    var btnHeight: Number = 32;
    var buttonOffset: Number = 15;
    var currField: Number = 0;
    var lastFieldIdx: Number = 0;
    var currBtn: Number = 0;
    var fieldStartIdx: Number = 0;
    var okBtnMC = null;
    var cancelBtnMC = null;
    var enableBtnMC = null;
    var onCancel = null;
    var onStatusOK = null;
    var onSwitchToBaseView = null;
    var itemId: String = "0";

    function PasswordSettings(parentMC)
    {
        this.parentMC = parentMC;
        this.passwrdBaseMC = parentMC.createEmptyMovieClip("passwrdBaseMC", parentMC.getNextHighestDepth());
        var __reg4 = this.passwrdBaseMC.attachMovie("passwrdBackgroundMC", "passwrdPopup", this.passwrdBaseMC.getNextHighestDepth());
        this.passwrdBaseMC._visible = false;
        this.passwrdBaseMC._x = (1280 - this.passwrdBaseMC._width) / 2;
        this.passwrdBaseMC._y = (720 - this.passwrdBaseMC._height) / 2;
        this.onCancel = new com.BigRoom.Event();
        this.onStatusOK = new com.BigRoom.Event();
        this.onSwitchToBaseView = new com.BigRoom.Event();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.textFormat = new TextFormat();
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.size = 22;
        this.textFormat.bold = true;
        this.textFormat.color = 16777215;
        this.inputTxtFormat = new TextFormat();
        this.inputTxtFormat.font = "Arial";
        this.inputTxtFormat.align = "left";
        this.inputTxtFormat.size = 22;
        this.inputTxtFormat.bold = true;
        this.inputTxtFormat.color = 16777215;
        this.titleTxtFormat = new TextFormat();
        this.titleTxtFormat.font = "Arial";
        this.titleTxtFormat.align = "center";
        this.titleTxtFormat.size = 26;
        this.titleTxtFormat.bold = true;
        this.titleTxtFormat.color = 16777215;
        this.errorTxtFormat = new TextFormat();
        this.errorTxtFormat.font = "Arial";
        this.errorTxtFormat.align = "left";
        this.errorTxtFormat.size = 22;
        this.errorTxtFormat.bold = true;
        this.errorTxtFormat.color = 16555008;
    }

    function destroy()
    {
        if (this.passwrdBaseMC != null) 
        {
            removeMovieClip(this.passwrdBaseMC);
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.onCancel != null) 
        {
            delete this.onCancel;
            this.onCancel = null;
        }
        if (this.onStatusOK != null) 
        {
            delete this.onStatusOK;
            this.onStatusOK = null;
        }
        if (this.onSwitchToBaseView != null) 
        {
            delete this.onSwitchToBaseView;
            this.onSwitchToBaseView = null;
        }
        if (this.fn != null) 
        {
            this.fn = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.inputTxtFormat != null) 
        {
            delete this.inputTxtFormat;
            this.inputTxtFormat = null;
        }
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.errorTxtFormat != null) 
        {
            delete this.errorTxtFormat;
            this.errorTxtFormat = null;
        }
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onCancel") 
        {
            this.onCancel.addListener(obj, method);
        }
        else if (eventName == "onStatusOK") 
        {
            this.onStatusOK.addListener(obj, method);
        }
        else if (eventName == "onSwitchToBaseView") 
        {
            this.onSwitchToBaseView.addListener(obj, method);
        }
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onCancel") 
        {
            this.onCancel.removeListener(obj, method);
        }
        else if (eventName == "onStatusOK") 
        {
            this.onStatusOK.removeListener(obj, method);
        }
        else if (eventName == "onSwitchToBaseView") 
        {
            this.onSwitchToBaseView.removeListener(obj, method);
        }
        obj = null;
        method = null;
    }

    function updateUserPasswrd(actionString)
    {
        this.currAction = actionString;
        this.passwrdBaseMC._visible = true;
        this.displayText(actionString);
        this.createButtons();
        this.createTitleTxtField(actionString, this.passwrdBaseMC._width, 100);
        this.createErrorMessageTxtField(this.passwrdBaseMC._width, 100);
    }

    function createButtons()
    {
        var __reg2 = this.passwrdBaseMC.createEmptyMovieClip("btnBaseMC", this.passwrdBaseMC.getNextHighestDepth());
        this.okBtnMC = __reg2.attachMovie("infoBtnDis", "okBtnMC", __reg2.getNextHighestDepth());
        this.okBtnMC._x = this.passwrdBaseMC._width / 2 - this.okBtnMC._width - this.buttonOffset;
        this.okBtnMC._y = this.btnPosY;
        this.cancelBtnMC = __reg2.attachMovie("infoBtnDis", "cancelBtnMC", __reg2.getNextHighestDepth());
        this.cancelBtnMC._x = this.passwrdBaseMC._width / 2 + this.buttonOffset;
        this.cancelBtnMC._y = this.btnPosY;
        this.enableBtnMC = __reg2.attachMovie("infoBtnEnb", "enableBtnMC", __reg2.getNextHighestDepth());
        this.enableBtnMC._x = this.cancelBtnMC._x;
        this.enableBtnMC._y = this.cancelBtnMC._y;
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        this.btnTextFormat = new TextFormat();
        this.btnTextFormat.font = "Arial";
        this.btnTextFormat.align = "center";
        this.btnTextFormat.size = 24;
        this.btnTextFormat.bold = true;
        var __reg6 = __reg2.createTextField("okBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg6.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg6.setNewTextFormat(this.btnTextFormat);
        __reg6.htmlText = "OK";
        __reg6._x = this.okBtnMC._x + (this.okBtnMC._width - __reg6._width) / 2;
        __reg6._y = this.okBtnMC._y + (this.okBtnMC._height - __reg6._height) / 2;
        var __reg4 = __reg2.createTextField("okBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg4.setNewTextFormat(this.btnTextFormat);
        __reg4.htmlText = "OK";
        __reg4._x = this.okBtnMC._x + (this.okBtnMC._width - __reg4._width) / 2;
        __reg4._y = this.okBtnMC._y + (this.okBtnMC._height - __reg4._height) / 2;
        __reg4._visible = false;
        var __reg5 = __reg2.createTextField("cancelBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg5.setNewTextFormat(this.btnTextFormat);
        __reg5.htmlText = "Cancel";
        __reg5._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg5._width) / 2;
        __reg5._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg5._height) / 2;
        var __reg3 = __reg2.createTextField("cancelBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg3.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg3.setNewTextFormat(this.btnTextFormat);
        __reg3.htmlText = "Cancel";
        __reg3._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg3._width) / 2;
        __reg3._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        this.unHighlightAllBtn();
        __reg2 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        __reg3 = null;
    }

    function createTitleTxtField(titleTxt, width, height)
    {
        var __reg2 = this.passwrdBaseMC.createTextField("titleTxtField", this.passwrdBaseMC.getNextHighestDepth(), 15, 0, width - 40, height);
        __reg2.setNewTextFormat(this.titleTxtFormat);
        __reg2.htmlText = titleTxt;
        __reg2.wordWrap = true;
        __reg2._y = (50 - __reg2.textHeight) / 2;
        __reg2 = null;
    }

    function createErrorMessageTxtField(width, height)
    {
        var __reg2 = this.txtFieldBaseMC.createTextField("errorMessageTxtField", this.txtFieldBaseMC.getNextHighestDepth(), this.txtFieldBaseMC._width / 2 - this.btnPosY, 0, width - 40, height);
        __reg2.autoSize = "center";
        __reg2.setNewTextFormat(this.errorTxtFormat);
        __reg2.htmlText = "";
        __reg2._y = 90;
        __reg2 = null;
    }

    function createTxtField(txtToDisplay, labelStartX, labelStartY, id)
    {
        var __reg3 = this.txtFieldBaseMC.createTextField("txtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), labelStartX, labelStartY, 200, 30);
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.htmlText = txtToDisplay;
        var __reg2 = this.txtFieldBaseMC.attachMovie("passwrdFieldMC", "txtBoxMC" + id, this.txtFieldBaseMC.getNextHighestDepth());
        __reg2._x = this.txtFieldBoxX;
        __reg2._y = __reg3._y - (__reg2._height - __reg3._height) / 2;
        var __reg4 = this.txtFieldBaseMC.createTextField("inputTxtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), __reg2._x + 5, __reg2._y + 2, __reg2._width - 10, __reg2._height);
        __reg4.autoSize = true;
        __reg4.setNewTextFormat(this.inputTxtFormat);
        __reg4.password = true;
        var __reg6 = this.txtFieldBaseMC.createTextField("boxMsgTxtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), __reg2._x + 5, __reg2._y + 2, __reg2._width - 10, __reg2._height);
        __reg6.setNewTextFormat(this.inputTxtFormat);
        this.lastFieldIdx = id;
        __reg3 = null;
        __reg2 = null;
        __reg4 = null;
        __reg6 = null;
    }

    function displayText(mainTxt)
    {
        this.txtFieldBaseMC = this.passwrdBaseMC.createEmptyMovieClip("txtFieldBaseMC", this.passwrdBaseMC.getNextHighestDepth());
        this.txtFieldBaseMC._x = this.txtFieldPosX;
        this.txtFieldBaseMC._y = this.txtFieldPosY;
        if (this.currAction == "Change Password" || this.currAction == "Set Password") 
        {
            if (this.currAction == "Set Password") 
            {
                this.createTxtField("Password", 0, 0, 0);
            }
            else 
            {
                this.createTxtField("Old Password", 0, 0, 0);
            }
            if (this.currAction == "Set Password") 
            {
                this.createTxtField("Confirm Password", 0, 50, 1);
            }
            else 
            {
                this.createTxtField("New Password", 0, 50, 1);
            }
        }
        else 
        {
            this.createTxtField("Password", 10, 0, 0);
        }
        this.fieldSelectorMC = this.txtFieldBaseMC.attachMovie("passwrdFieldSelectorMC", "fieldSelectorMC", this.txtFieldBaseMC.getNextHighestDepth());
        this.highlightField();
    }

    function highlightField()
    {
        var __reg2 = this.txtFieldBaseMC["txtBoxMC" + this.currField];
        var __reg3 = __reg2._x;
        var __reg4 = __reg2._y;
        this.fieldSelectorMC._x = __reg3 - (this.fieldSelectorMC._width - __reg2._width) / 2;
        this.fieldSelectorMC._y = __reg4 - (this.fieldSelectorMC._height - __reg2._height) / 2;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function verifyPasswrd()
    {
        var __reg4 = com.jadoo.as2.JadooPlus.UserInfo.Passwords.getUserPassword();
        var __reg2 = this.txtFieldBaseMC.inputTxtField0.htmlText;
        var __reg3 = this.checkPasswrdValidity(__reg2);
        if (this.isFieldEmpty(__reg2)) 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
            return;
        }
        if (__reg3 == "valid") 
        {
            if (__reg4 == __reg2) 
            {
                this.onStatusOK.notify();
            }
            else 
            {
                this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PASSWORD_ENTERED_IS_INCORRECT;
                this.txtFieldBaseMC.inputTxtField0.htmlText = "";
            }
            return;
        }
        if (__reg3 == "not valid") 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
            this.txtFieldBaseMC.inputTxtField0.htmlText = "";
        }
    }

    function setPasswrd()
    {
        var __reg4 = this.txtFieldBaseMC.inputTxtField0.htmlText;
        var __reg3 = this.txtFieldBaseMC.inputTxtField1.htmlText;
        var __reg2 = this.checkPasswrdValidity(__reg4);
        if (this.isFieldEmpty(__reg4)) 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
        }
        else if (__reg2 == "valid") 
        {
            __reg2 = this.checkPasswrdValidity(__reg3);
            if (this.isFieldEmpty(__reg3)) 
            {
                this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
            }
            else if (__reg2 == "valid") 
            {
                if (__reg4 == __reg3) 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.setUserPassword(__reg3);
                    this.onSwitchToBaseView.notify("yes", "Password Updated");
                }
                else 
                {
                    this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PASSWORD_SHOULD_BE_SAME;
                    this.txtFieldBaseMC.inputTxtField1.htmlText = "";
                }
            }
            else if (__reg2 == "not valid") 
            {
                this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
                this.txtFieldBaseMC.inputTxtField1.htmlText = "";
            }
        }
        else if (__reg2 == "not valid") 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
            this.txtFieldBaseMC.inputTxtField0.htmlText = "";
        }
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
    }

    function changePasswrd()
    {
        var __reg5 = com.jadoo.as2.JadooPlus.UserInfo.Passwords.getUserPassword();
        var __reg3 = this.txtFieldBaseMC.inputTxtField0.htmlText;
        var __reg4 = this.txtFieldBaseMC.inputTxtField1.htmlText;
        var __reg2 = this.checkPasswrdValidity(__reg3);
        if (this.isFieldEmpty(__reg3)) 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
        }
        else if (__reg2 == "valid") 
        {
            if (__reg5 == __reg3) 
            {
                __reg2 = this.checkPasswrdValidity(__reg4);
                if (this.isFieldEmpty(__reg4)) 
                {
                    this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
                }
                else if (__reg2 == "valid") 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.setUserPassword(__reg4);
                    this.onSwitchToBaseView.notify("yes", "Password updated");
                }
                else if (__reg2 == "not valid") 
                {
                    this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
                    this.txtFieldBaseMC.inputTxtField1.htmlText = "";
                }
            }
            else 
            {
                this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.OLD_PASSWORD_ENTERED_IS_INCORRECT;
                this.txtFieldBaseMC.inputTxtField0.htmlText = "";
            }
        }
        else if (__reg2 == "not valid") 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
            this.txtFieldBaseMC.inputTxtField0.htmlText = "";
        }
        __reg5 = null;
        __reg3 = null;
        __reg4 = null;
        __reg2 = null;
    }

    function removePasswrd()
    {
        var __reg4 = com.jadoo.as2.JadooPlus.UserInfo.Passwords.getUserPassword();
        var __reg2 = this.txtFieldBaseMC.inputTxtField0.htmlText;
        var __reg3 = this.checkPasswrdValidity(__reg2);
        if (this.isFieldEmpty(__reg2)) 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
        }
        else if (__reg3 == "valid") 
        {
            if (__reg4 == __reg2) 
            {
                if (this.currAction == "Remove Password") 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.setUserPassword("");
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.removePassword();
                    this.onSwitchToBaseView.notify("yes", "Password removed");
                }
                else if (this.currAction == "Remove item password") 
                {
                    com.jadoo.as2.JadooPlus.UserInfo.Passwords.unlockItem(this.itemId);
                    this.onSwitchToBaseView.notify("no", "Item unlocked");
                }
            }
            else 
            {
                this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PASSWORD_ENTERED_IS_INCORRECT;
                this.txtFieldBaseMC.inputTxtField0.htmlText = "";
            }
        }
        else if (__reg3 == "not valid") 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
            this.txtFieldBaseMC.inputTxtField0.htmlText = "";
        }
        __reg4 = null;
        __reg2 = null;
        __reg3 = null;
    }

    function btnHighlight(btnMC)
    {
        this.enableBtnMC._visible = true;
        if (this.currBtn == 0) 
        {
            this.passwrdBaseMC.btnBaseMC.cancelBtnTextDis._visible = true;
            this.passwrdBaseMC.btnBaseMC.cancelBtnTextEnb._visible = false;
            this.passwrdBaseMC.btnBaseMC.okBtnTextDis._visible = false;
            this.passwrdBaseMC.btnBaseMC.okBtnTextEnb._visible = true;
            this.enableBtnMC._x = this.okBtnMC._x;
            return;
        }
        if (this.currBtn == 1) 
        {
            this.passwrdBaseMC.btnBaseMC.cancelBtnTextDis._visible = false;
            this.passwrdBaseMC.btnBaseMC.cancelBtnTextEnb._visible = true;
            this.passwrdBaseMC.btnBaseMC.okBtnTextDis._visible = true;
            this.passwrdBaseMC.btnBaseMC.okBtnTextEnb._visible = false;
            this.enableBtnMC._x = this.cancelBtnMC._x;
        }
    }

    function unHighlightAllBtn()
    {
        this.passwrdBaseMC.btnBaseMC.cancelBtnTextDis._visible = true;
        this.passwrdBaseMC.btnBaseMC.cancelBtnTextEnb._visible = false;
        this.passwrdBaseMC.btnBaseMC.okBtnTextDis._visible = true;
        this.passwrdBaseMC.btnBaseMC.okBtnTextEnb._visible = false;
        this.enableBtnMC._visible = false;
    }

    function btnHighlighted()
    {
        if (this.fieldSelectorMC._visible) 
        {
            return false;
        }
        return true;
    }

    function onKeyDown()
    {
        this.txtFieldBaseMC.errorMessageTxtField.htmlText = "";
        if ((__reg0 = Key.getCode()) === 37) 
        {
            if (this.btnHighlighted()) 
            {
                if (this.currBtn == 1) 
                {
                    this.currBtn = 0;
                    this.btnHighlight(this.okBtnMC);
                }
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.btnHighlighted()) 
            {
                if (this.currBtn == 0) 
                {
                    this.currBtn = 1;
                    this.btnHighlight(this.cancelBtnMC);
                }
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.btnHighlighted()) 
            {
                this.unHighlightAllBtn();
                if (this.currBtn == 0 || this.currBtn == 1) 
                {
                    this.highlightField();
                }
                this.fieldSelectorMC._visible = true;
            }
            else if (this.currField > 0) 
            {
                --this.currField;
                if (this.currField >= 0) 
                {
                    this.highlightField();
                }
                else 
                {
                    ++this.currField;
                }
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            if (this.currField <= this.lastFieldIdx) 
            {
                ++this.currField;
                if (this.currField <= this.lastFieldIdx) 
                {
                    this.highlightField();
                }
                else 
                {
                    this.fieldSelectorMC._visible = false;
                    --this.currField;
                    this.currBtn = 0;
                    this.btnHighlight(this.okBtnMC);
                }
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.btnHighlighted()) 
        {
            if (this.currBtn == 0) 
            {
                if ((__reg0 = this.currAction) === "Set Password") 
                {
                    this.setPasswrd();
                }
                else if (__reg0 === "Enter Password") 
                {
                    this.verifyPasswrd();
                }
                else if (__reg0 === "Change Password") 
                {
                    this.changePasswrd();
                }
                else if (__reg0 === "Remove Password") 
                {
                    this.removePasswrd();
                }
                else if (__reg0 === "Remove item password") 
                {
                    this.removePasswrd();
                }
            }
            else if (this.currBtn == 1) 
            {
                this.currBtn = 0;
                this.onCancel.notify("", "");
            }
        }
        else 
        {
            this.getPasswrdFromUser();
        }
        return;
    }

    function getPasswrdFromUser()
    {
        var __reg2 = 683;
        var __reg3 = 483;
        this.kBoardBaseMC = this.parentMC.createEmptyMovieClip("kBoardBaseMC", this.parentMC.getNextHighestDepth());
        this.kBoardBaseMC._x = (1280 - __reg2) / 2;
        this.kBoardBaseMC._y = 150;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.virtKeyBoard != null) 
        {
            this.virtKeyBoard.destroy();
            delete this.virtKeyBoard;
            this.virtKeyBoard = null;
        }
        this.virtKeyBoard = new com.jadoo.as2.JadooPlus.Keyboard.VirtualKeyBoard();
        this.virtKeyBoard.onDoneBtnPressed.addListener(this, this.onDoneBtnPressed);
        this.virtKeyBoard.onCancelBtnPressed.addListener(this, this.onCancelBtnPressed);
        this.virtKeyBoard.onBackSpaceBtnPressed.addListener(this, this.onBackSpaceBtnPressed);
        this.virtKeyBoard.create(this.kBoardBaseMC, __reg2, __reg3, true);
        this.virtKeyBoard.display("", this.txtFieldBaseMC["txtField" + this.currField].htmlText);
        __reg2 = null;
        __reg3 = null;
    }

    function onDoneBtnPressed(inputPasswrd)
    {
        this.virtKeyBoard.destroy();
        delete this.virtKeyBoard;
        this.virtKeyBoard = null;
        removeMovieClip(this.kBoardBaseMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        var __reg2 = this.checkPasswrdValidity(inputPasswrd);
        if (this.isFieldEmpty(inputPasswrd)) 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ABOVE_FIELDS_REQUIRED;
        }
        else if (__reg2 == "valid") 
        {
            this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText = inputPasswrd;
        }
        else if (__reg2 == "not valid") 
        {
            this.txtFieldBaseMC.errorMessageTxtField.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_PASSWORD;
            this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText = "";
        }
        else 
        {
            this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText = "";
        }
        __reg2 = null;
    }

    function onCancelBtnPressed()
    {
        this.virtKeyBoard.destroy();
        delete this.virtKeyBoard;
        this.virtKeyBoard = null;
        removeMovieClip(this.kBoardBaseMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function onBackSpaceBtnPressed(posInString)
    {
        var __reg2 = this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText;
        if (posInString > 0) 
        {
            var __reg7 = 0;
            var __reg5 = null;
            var __reg4 = null;
            var __reg3 = null;
            __reg3 = __reg5 = __reg2.htmlText.slice(0, posInString - 1);
            if (posInString < __reg2.length) 
            {
                __reg4 = __reg2.htmlText.substring(posInString, __reg2.length);
                __reg3 = __reg5.concat(__reg4);
            }
            __reg2.htmlText = __reg3;
            __reg7 = null;
            __reg5 = null;
            __reg4 = null;
            __reg3 = null;
        }
        __reg2 = null;
    }

    function isFieldEmpty(inputText)
    {
        if (inputText.length == 0) 
        {
            return true;
        }
        return false;
    }

    function checkPasswrdValidity(inputPasswrd)
    {
        if (inputPasswrd.length >= this.minPasswrdLength && inputPasswrd.length <= this.maxPasswrdLength) 
        {
            return "valid";
        }
        return "not valid";
    }

    function addRemovePasswrdToItem(itemId, currAction)
    {
        this.currAction = currAction;
        this.itemId = itemId;
        if (currAction == "apply") 
        {
            com.jadoo.as2.JadooPlus.UserInfo.Passwords.addMenuItem(itemId);
            this.onSwitchToBaseView.notify("yes", "Item locked");
            return;
        }
        if (currAction == "remove") 
        {
            this.updateUserPasswrd("Remove item password");
        }
    }

}

//Sprite 689
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Keyboard.VirtualKeyBoard
{
    var keyPadX: Number = 35;
    var keyPadY: Number = 101;
    var alphabetBtnWidth: Number = 46;
    var alphabetBtnHeight: Number = 45;
    var gmailBtnWidth: Number = 133;
    var comBtnWidth: Number = 64;
    var btnGap: Number = 6;
    var currRow: Number = 0;
    var currCol: Number = 0;
    var inputTxtBoxWidth: Number = 620;
    var numCharsHideLeft: Number = 0;
    var maxRightCharIdx: Number = 0;
    var txtFieldOffset: Number = 50;
    var btnWidth: Number = 100;
    var btnHeight: Number = 40;
    var currBtn = null;
    var startIdx: Number = 0;
    var endIdx: Number = 0;
    var initialString = null;
    var prevTxtPos: Number = 0;
    var moveX: Number = 2;
    var moveY: Number = 2;
    var keypadTextFormat = null;
    var titleTextFormat = null;
    var inputBaseMC = null;
    var cursorBaseMC = null;
    var inputText = null;
    var inputTextTemp = null;
    var btnTextFormat = null;
    var doneBtnMC = null;
    var cancelBtnMC = null;
    var enableBtnMC = null;
    var btnBaseMC = null;
    var keyListener = null;
    var keyLetters = null;
    var keyLettersShift = null;
    var fn = null;
    var shifSelectMC = null;
    var shiftStatus: Boolean = false;
    var posInString: Number = 0;
    var cursorMC = null;
    var cursorPosition = null;
    var virtKeyPadBaseMC = null;
    var baseMC = null;
    var keyBoardtextFormat = null;
    var keyboardBaseMC = null;
    var typePassword: Boolean = false;
    var onDoneBtnPressed = null;
    var onCancelBtnPressed = null;
    var onBackSpaceBtnPressed = null;
    var currXPos;
    var cursorOrigPosX;
    var keyBoardHeight;
    var keyBoardWidth;

    function VirtualKeyBoard()
    {
        this.titleTextFormat = new TextFormat();
        this.titleTextFormat.font = "Arial";
        this.titleTextFormat.align = "center";
        this.titleTextFormat.size = 32;
        this.titleTextFormat.bold = false;
        this.titleTextFormat.color = 16750898;
        this.keypadTextFormat = new TextFormat();
        this.keypadTextFormat.font = "Arial";
        this.keypadTextFormat.align = "center";
        this.keypadTextFormat.size = 28;
        this.keypadTextFormat.bold = false;
        this.keypadTextFormat.color = 0;
        this.keyBoardtextFormat = new TextFormat();
        this.keyBoardtextFormat.font = "Arial";
        this.keyBoardtextFormat.align = "left";
        this.keyBoardtextFormat.size = 28;
        this.keyBoardtextFormat.bold = false;
        this.keyBoardtextFormat.color = 16777215;
        this.keyBoardtextFormat.letterSpacing = 6;
        this.keyLetters = new Array();
        this.keyLetters[0] = new Array("-", "_", "!", "@", "#", "$", "%", "&", "*", ".", "shift");
        this.keyLetters[1] = new Array("a", "b", "c", "d", "e", "f", "1", "2", "3", "left", "right");
        this.keyLetters[2] = new Array("g", "h", "i", "j", "k", "l", "4", "5", "6", "backspace");
        this.keyLetters[3] = new Array("m", "n", "o", "p", "q", "r", "7", "8", "9", "space");
        this.keyLetters[4] = new Array("s", "t", "u", "v", "w", "x", "y", "z", "0", "clear all");
        this.keyLetters[5] = new Array("@gmail", "@yahoo", "@hotmail", ".com", ".net", ".org");
        this.keyLettersShift = new Array();
        this.keyLettersShift[0] = new Array("-", "_", "!", "@", "#", "$", "%", "&", "*", ".", "shift");
        this.keyLettersShift[1] = new Array("A", "B", "C", "D", "E", "F", "1", "2", "3", "left", "right");
        this.keyLettersShift[2] = new Array("G", "H", "I", "J", "K", "L", "4", "5", "6", "backspace");
        this.keyLettersShift[3] = new Array("M", "N", "O", "P", "Q", "R", "7", "8", "9", "space");
        this.keyLettersShift[4] = new Array("S", "T", "U", "V", "W", "X", "Y", "Z", "0", "clear all");
        this.keyLettersShift[5] = new Array("@gmail", "@yahoo", "@hotmail", ".com", ".net", ".org");
        this.cursorPosition = new Array();
        this.onDoneBtnPressed = new com.BigRoom.Event();
        this.onCancelBtnPressed = new com.BigRoom.Event();
        this.onBackSpaceBtnPressed = new com.BigRoom.Event();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function destroy()
    {
        var __reg2 = 0;
        while (__reg2 < this.keyLetters.length) 
        {
            delete this.keyLetters[__reg2];
            this.keyLetters[__reg2] = null;
            ++__reg2;
        }
        delete this.keyLetters;
        this.keyLetters = null;
        this.fn = null;
        removeMovieClip(this.virtKeyPadBaseMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        delete this.onDoneBtnPressed;
        this.onDoneBtnPressed = null;
        delete this.onCancelBtnPressed;
        this.onCancelBtnPressed = null;
        delete this.onBackSpaceBtnPressed;
        this.onBackSpaceBtnPressed = null;
        delete this.cursorPosition;
        this.cursorPosition = null;
        if (this.keyBoardtextFormat != null) 
        {
            delete this.keyBoardtextFormat;
            this.keyBoardtextFormat = null;
        }
        if (this.keypadTextFormat != null) 
        {
            delete this.keypadTextFormat;
            this.keypadTextFormat = null;
        }
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        removeMovieClip(this.keyboardBaseMC);
    }

    function create(baseMC, keyBoardWidth, keyBoardHeight, typePassword)
    {
        this.baseMC = baseMC;
        this.keyBoardWidth = keyBoardWidth;
        this.keyBoardHeight = keyBoardHeight;
        this.typePassword = typePassword;
        this.initKeyBoard();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function display(initialString, txtFieldTitle)
    {
        this.initialString = initialString;
        this.writeString(initialString);
        this.buttonHighlight();
        this.displayTitle(txtFieldTitle);
    }

    function displayTitle(txtFieldTitle)
    {
        var __reg3 = this.keyboardBaseMC.createEmptyMovieClip("titleBaseMC", this.keyboardBaseMC.getNextHighestDepth());
        var __reg2 = __reg3.createTextField("titleTxtField", __reg3.getNextHighestDepth(), this.keyPadX, 5, 0, 40);
        __reg2.setNewTextFormat(this.titleTextFormat);
        __reg2.autoSize = true;
        __reg2.htmlText = txtFieldTitle;
        __reg3 = null;
        __reg2 = null;
    }

    function initKeyBoard()
    {
        this.createKeyBoard();
        this.initMainTxtField();
        this.displayButtons();
    }

    function displayButtons()
    {
        var __reg6 = this.keyboardBaseMC.createEmptyMovieClip("keyboardBtnBaseMC", this.keyboardBaseMC.getNextHighestDepth());
        this.btnBaseMC = __reg6.createEmptyMovieClip("btnBaseMC", __reg6.getNextHighestDepth());
        this.doneBtnMC = this.btnBaseMC.attachMovie("infoBtnDis", "okBtnMC", this.btnBaseMC.getNextHighestDepth());
        this.doneBtnMC._x = this.keyboardBaseMC._width / 2 - this.btnWidth - 25;
        this.doneBtnMC._y = this.keyboardBaseMC._height - 50;
        this.doneBtnMC._width = 100;
        this.doneBtnMC._height = 40;
        this.cancelBtnMC = this.btnBaseMC.attachMovie("infoBtnDis", "cancelBtnMC", this.btnBaseMC.getNextHighestDepth());
        this.cancelBtnMC._x = this.keyboardBaseMC._width / 2 + 25;
        this.cancelBtnMC._y = this.keyboardBaseMC._height - 50;
        this.cancelBtnMC._width = 100;
        this.cancelBtnMC._height = 40;
        this.enableBtnMC = this.btnBaseMC.attachMovie("infoBtnEnb", "enableBtnMC", this.btnBaseMC.getNextHighestDepth());
        this.enableBtnMC._x = this.cancelBtnMC._x;
        this.enableBtnMC._y = this.cancelBtnMC._y;
        this.enableBtnMC._width = 100;
        this.enableBtnMC._height = 40;
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        this.btnTextFormat = new TextFormat();
        this.btnTextFormat.font = "Arial";
        this.btnTextFormat.align = "center";
        this.btnTextFormat.size = 24;
        this.btnTextFormat.bold = true;
        var __reg5 = this.btnBaseMC.createTextField("doneBtnTextEnb", this.btnBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg5.setNewTextFormat(this.btnTextFormat);
        __reg5.htmlText = "OK";
        __reg5._x = this.doneBtnMC._x + (this.doneBtnMC._width - __reg5._width) / 2;
        __reg5._y = this.doneBtnMC._y + (this.doneBtnMC._height - __reg5._height) / 2;
        var __reg2 = this.btnBaseMC.createTextField("doneBtnTextDis", this.btnBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg2.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg2.setNewTextFormat(this.btnTextFormat);
        __reg2.htmlText = "OK";
        __reg2._x = this.doneBtnMC._x + (this.doneBtnMC._width - __reg2._width) / 2;
        __reg2._y = this.doneBtnMC._y + (this.doneBtnMC._height - __reg2._height) / 2;
        __reg2._visible = false;
        var __reg4 = this.btnBaseMC.createTextField("cancelBtnTextEnb", this.btnBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg4.setNewTextFormat(this.btnTextFormat);
        __reg4.htmlText = "Cancel";
        __reg4._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg4._width) / 2;
        __reg4._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg4._height) / 2;
        var __reg3 = this.btnBaseMC.createTextField("cancelBtnTextDis", this.btnBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg3.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg3.setNewTextFormat(this.btnTextFormat);
        __reg3.htmlText = "Cancel";
        __reg3._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg3._width) / 2;
        __reg3._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        this.unHighlightAllBtn();
        __reg6 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function createKeyBoard()
    {
        this.keyboardBaseMC = this.baseMC.createEmptyMovieClip("getUserInfoBaseMC", this.baseMC.getNextHighestDepth());
        var __reg2 = this.keyboardBaseMC.attachMovie("KBbackgroundMC", "keyboardBaseImgMC", this.keyboardBaseMC.getNextHighestDepth());
        this.createKeypad();
        __reg2 = null;
    }

    function createKeypad()
    {
        this.virtKeyPadBaseMC = this.keyboardBaseMC.createEmptyMovieClip("virtKeyPadBaseMC", this.keyboardBaseMC.getNextHighestDepth());
        this.virtKeyPadBaseMC._x = this.keyPadX;
        this.virtKeyPadBaseMC._y = this.keyPadY;
        var __reg4 = 0;
        for (;;) 
        {
            if (__reg4 >= this.keyLetters.length) 
            {
                return;
            }
            var __reg5 = 0;
            while (__reg5 < this.keyLetters[__reg4].length) 
            {
                var __reg2 = null;
                var __reg8 = null;
                var __reg3 = this.virtKeyPadBaseMC.createEmptyMovieClip("keypadBtnBaseMC" + __reg4 + __reg5, this.virtKeyPadBaseMC.getNextHighestDepth());
                if ((__reg0 = this.keyLetters[__reg4][__reg5]) === "shift") 
                {
                    __reg2 = __reg3.attachMovie("KBshiftBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    var __reg7 = __reg2.attachMovie("shiftSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "left") 
                {
                    __reg2 = __reg3.attachMovie("leftArrowMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("leftArrowSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    __reg7 = null;
                }
                else if (__reg0 === "right") 
                {
                    __reg2 = __reg3.attachMovie("rightArrowMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("rightArrowSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    __reg7 = null;
                }
                else if (__reg0 === "space") 
                {
                    __reg2 = __reg3.attachMovie("KBbackspaceMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("spaceSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "clear all") 
                {
                    __reg2 = __reg3.attachMovie("KBbackspaceMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("spaceSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "backspace") 
                {
                    __reg2 = __reg3.attachMovie("KBbackspaceMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("spaceSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "@gmail") 
                {
                    this.moveY = 4;
                    __reg2 = __reg3.attachMovie("KBgmaiBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.gmailBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("gmailSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "@yahoo") 
                {
                    this.moveY = 4;
                    __reg2 = __reg3.attachMovie("KBgmaiBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.gmailBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("gmailSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "@hotmail") 
                {
                    this.moveY = 4;
                    __reg2 = __reg3.attachMovie("KBgmaiBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.gmailBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("gmailSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === ".com") 
                {
                    __reg2 = __reg3.attachMovie("KBcomBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.keypadTextFormat.size = 24;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("comSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === ".net") 
                {
                    __reg2 = __reg3.attachMovie("KBcomBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.keypadTextFormat.size = 24;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("comSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === ".org") 
                {
                    __reg2 = __reg3.attachMovie("KBcomBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    this.keypadTextFormat.color = 16777215;
                    this.keypadTextFormat.size = 24;
                    this.currXPos = __reg2._x + __reg2._width + this.btnGap;
                    __reg7 = __reg2.attachMovie("comSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "0") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "1") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "2") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "3") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "4") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "5") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "6") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "7") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "8") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "9") 
                {
                    __reg2 = __reg3.attachMovie("KBgrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else 
                {
                    __reg2 = __reg3.attachMovie("KBwhiteBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: __reg5 * (this.alphabetBtnWidth + this.btnGap), _y: __reg4 * (this.alphabetBtnHeight + this.btnGap)});
                    __reg7 = __reg2.attachMovie("alphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                if (this.keyLetters[__reg4][__reg5] != "left" && this.keyLetters[__reg4][__reg5] != "right") 
                {
                    var __reg6 = __reg2.createTextField("keypadTxtField", __reg2.getNextHighestDepth(), 0, 0, __reg2._width, __reg2._height);
                    __reg6.autoSize = true;
                    __reg6.setNewTextFormat(this.keypadTextFormat);
                    __reg6.htmlText = this.keyLetters[__reg4][__reg5];
                    __reg6._x = __reg2._width / 2 - __reg6.textWidth / 2 - this.moveX;
                    __reg6._y = __reg2._height / 2 - __reg6.textHeight / 2 - this.moveY;
                    __reg6 = null;
                }
                __reg3 = null;
                __reg2 = null;
                __reg8 = null;
                ++__reg5;
            }
            ++__reg4;
        }
    }

    function buttonHighlight()
    {
        var __reg2 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.keypadTxtField;
        var __reg4 = __reg2.htmlText;
        var __reg3 = __reg2.getTextFormat();
        this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.selectorMC._visible = true;
        __reg3.color = 16777215;
        __reg2.setNewTextFormat(__reg3);
        __reg2.htmlText = "";
        __reg2.htmlText = __reg4;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function buttonUnHighlight()
    {
        var __reg2 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.keypadTxtField;
        var __reg4 = __reg2.htmlText;
        var __reg3 = __reg2.getTextFormat();
        this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.selectorMC._visible = false;
        if (this.checkStringForInt(__reg4)) 
        {
            __reg3.color = 16777215;
            __reg2.setNewTextFormat(__reg3);
        }
        else if (this.currRow < 5) 
        {
            __reg3.color = 0;
            __reg2.setNewTextFormat(__reg3);
        }
        __reg2.htmlText = "";
        __reg2.htmlText = __reg4;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function initMainTxtField()
    {
        var __reg2 = this.keyboardBaseMC.createEmptyMovieClip("inputTxtFieldBaseMC", this.keyboardBaseMC.getNextHighestDepth());
        __reg2._x = 39;
        __reg2._y = 48;
        this.inputBaseMC = __reg2.createEmptyMovieClip("inputBaseMC", __reg2.getNextHighestDepth());
        this.inputText = this.inputBaseMC.createTextField("inputText", this.inputBaseMC.getNextHighestDepth(), 0, 0, 0, 40);
        this.inputText.setNewTextFormat(this.keyBoardtextFormat);
        this.inputText.autoSize = true;
        this.inputText.password = this.typePassword;
        this.inputTextTemp = this.inputBaseMC.createTextField("inputText", this.inputBaseMC.getNextHighestDepth(), 0, 0, 0, 40);
        this.inputTextTemp.setNewTextFormat(this.keyBoardtextFormat);
        this.inputTextTemp.autoSize = true;
        this.inputTextTemp.password = this.typePassword;
        this.inputTextTemp._visible = false;
        this.cursorBaseMC = __reg2.createEmptyMovieClip("cursorBaseMC", __reg2.getNextHighestDepth());
        var __reg4 = this.keyboardBaseMC.attachMovie("maskMC", "inputTxtMaskMC", this.keyboardBaseMC.getNextHighestDepth(), {_x: 36, _y: 43, _width: this.inputTxtBoxWidth - 4, _height: 46});
        this.inputBaseMC.setMask(__reg4);
        this.cursorMC = this.inputBaseMC.attachMovie("CursorMC", "cursorMC", this.inputBaseMC.getNextHighestDepth());
        this.cursorMC._x = 0;
        this.cursorMC._y = 0;
        this.cursorPosition[this.posInString] = this.cursorMC._x;
        var __reg3 = {x: this.cursorMC._x, y: this.cursorMC._y};
        this.cursorMC.localToGlobal(__reg3);
        this.cursorOrigPosX = __reg3.x;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 37) 
        {
            if (this.currBtn == "cancel") 
            {
                this.currBtn = "done";
                this.btnHighlight();
            }
            if (this.currBtn == null) 
            {
                if (this.currCol > 0) 
                {
                    this.buttonUnHighlight();
                    --this.currCol;
                    this.buttonHighlight();
                }
                else if (this.currCol == 0) 
                {
                    this.buttonUnHighlight();
                    this.currCol = this.keyLetters[this.currRow].length - 1;
                    this.buttonHighlight();
                }
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.currBtn == "done") 
            {
                this.currBtn = "cancel";
                this.btnHighlight();
            }
            if (this.currBtn == null) 
            {
                if (this.currCol < this.keyLetters[this.currRow].length - 1) 
                {
                    this.buttonUnHighlight();
                    ++this.currCol;
                    this.buttonHighlight();
                }
                else if (this.currCol == this.keyLetters[this.currRow].length - 1) 
                {
                    this.buttonUnHighlight();
                    this.currCol = 0;
                    this.buttonHighlight();
                }
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.currBtn == "done") 
            {
                this.unHighlightAllBtn();
                this.currRow = 5;
                this.currCol = 1;
                this.buttonHighlight();
                this.currBtn = null;
            }
            else if (this.currBtn == "cancel") 
            {
                this.unHighlightAllBtn();
                this.currRow = 5;
                this.currCol = 2;
                this.buttonHighlight();
                this.currBtn = null;
            }
            else if (this.currRow > 0) 
            {
                this.buttonUnHighlight();
                if (this.currRow == 5) 
                {
                    if (this.currCol == 0) 
                    {
                        this.currCol = 1;
                    }
                    else if (this.currCol == 1) 
                    {
                        this.currCol = 3;
                    }
                    else if (this.currCol == 2) 
                    {
                        this.currCol = 6;
                    }
                    else if (this.currCol == 3) 
                    {
                        this.currCol = 8;
                    }
                    else if (this.currCol == 4 || this.currCol == 5) 
                    {
                        this.currCol = 9;
                    }
                }
                --this.currRow;
                this.buttonHighlight();
            }
            else if (this.currRow == 0) 
            {
                this.buttonUnHighlight();
                if (this.currCol < 6) 
                {
                    this.currBtn = "done";
                    this.btnHighlight();
                }
                else if (this.currCol > 5) 
                {
                    this.currBtn = "cancel";
                    this.btnHighlight();
                }
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            if (this.currBtn == "done") 
            {
                this.currRow = 0;
                this.currCol = 3;
                this.unHighlightAllBtn();
                this.currBtn = null;
                this.buttonHighlight();
            }
            else if (this.currBtn == "cancel") 
            {
                this.currRow = 0;
                this.currCol = 6;
                this.unHighlightAllBtn();
                this.currBtn = null;
                this.buttonHighlight();
            }
            else if (this.currRow < this.keyLetters.length - 1) 
            {
                this.buttonUnHighlight();
                if (this.currRow == 1 && (this.currCol == 9 || this.currCol == 10)) 
                {
                    this.currCol = 9;
                }
                else if (this.currRow == 4 && this.currCol == 9) 
                {
                    this.currCol = 5;
                }
                else if (this.currRow == 4 && (this.currCol >= 0 && this.currCol <= 2)) 
                {
                    this.currCol = 0;
                }
                else if (this.currRow == 4 && (this.currCol == 3 || this.currCol == 4)) 
                {
                    this.currCol = 1;
                }
                else if (this.currRow == 4 && (this.currCol >= 5 && this.currCol <= 7)) 
                {
                    this.currCol = 2;
                }
                else if (this.currRow == 4 && this.currCol == 8) 
                {
                    this.currCol = 3;
                }
                ++this.currRow;
                this.buttonHighlight();
            }
            else if (this.currRow == this.keyLetters.length - 1) 
            {
                this.buttonUnHighlight();
                if (this.currCol == 0 || this.currCol == 1) 
                {
                    this.currBtn = "done";
                    this.btnHighlight();
                }
                else if (this.currCol >= 2) 
                {
                    this.currBtn = "cancel";
                    this.btnHighlight();
                }
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.currBtn == "done") 
        {
            this.virtKeyPadBaseMC._visible = false;
            this.onDoneBtnPressed.notify(this.inputText.htmlText);
        }
        else if (this.currBtn == "cancel") 
        {
            this.virtKeyPadBaseMC._visible = false;
            this.onCancelBtnPressed.notify(this.initialString);
        }
        else 
        {
            this.keyBoardKeyPressed();
        }
        return;
    }

    function switchToShift()
    {
        var __reg2 = 0;
        for (;;) 
        {
            if (__reg2 >= this.keyLetters.length) 
            {
                return;
            }
            var __reg3 = 0;
            while (__reg3 < this.keyLetters[__reg2].length) 
            {
                var __reg4 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + __reg2 + __reg3].keypadBtnMC.keypadTxtField;
                __reg4.htmlText = this.keyLettersShift[__reg2][__reg3];
                if (!this.checkStringForInt(__reg4.htmlText) && __reg2 != 5 && __reg3 != this.keyLettersShift[__reg2].length - 1 && __reg2 != 0) 
                {
                    __reg4._x = __reg4._x - this.moveX;
                }
                ++__reg3;
            }
            ++__reg2;
        }
    }

    function switchToNormal()
    {
        var __reg2 = 0;
        for (;;) 
        {
            if (__reg2 >= this.keyLetters.length) 
            {
                return;
            }
            var __reg3 = 0;
            while (__reg3 < this.keyLetters[__reg2].length) 
            {
                var __reg4 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + __reg2 + __reg3].keypadBtnMC.keypadTxtField;
                __reg4.htmlText = this.keyLetters[__reg2][__reg3];
                if (!this.checkStringForInt(__reg4.htmlText) && __reg2 != 5 && __reg3 != this.keyLettersShift[__reg2].length - 1 && __reg2 != 0) 
                {
                    __reg4._x = __reg4._x + this.moveX;
                }
                ++__reg3;
            }
            ++__reg2;
        }
    }

    function keyBoardKeyPressed()
    {
        var __reg9 = null;
        if (this.shiftStatus) 
        {
            __reg9 = this.keyLettersShift[this.currRow][this.currCol];
        }
        else 
        {
            __reg9 = this.keyLetters[this.currRow][this.currCol];
        }
        if ((__reg0 = __reg9) === "shift") 
        {
            if (this.shiftStatus) 
            {
                this.switchToNormal();
                this.shiftStatus = false;
            }
            else 
            {
                this.switchToShift();
                this.shiftStatus = true;
            }
            return;
        }
        else if (__reg0 === "backspace") 
        {
            if (this.posInString > 0) 
            {
                var __reg5 = 0;
                var __reg8 = null;
                var __reg7 = null;
                var __reg6 = null;
                __reg6 = __reg8 = this.inputText.text.slice(0, this.posInString - 1);
                if (this.posInString < this.inputText.length) 
                {
                    __reg7 = this.inputText.text.substring(this.posInString, this.inputText.length);
                    __reg6 = __reg8.concat(__reg7);
                }
                this.inputText.text = __reg6;
                this.prevTxtPos = this.prevTxtPos + this.cursorPosition[this.posInString];
                this.cursorPosition.splice(this.posInString, 1);
                --this.posInString;
                var __reg3 = 0;
                while (__reg3 < this.posInString + 1) 
                {
                    __reg5 = __reg5 + this.cursorPosition[__reg3];
                    ++__reg3;
                }
                this.cursorMC._x = __reg5;
                this.onBackSpaceBtnPressed.notify(this.posInString + 1);
                if (this.posInString == 0) 
                {
                    this.inputBaseMC._x = 0;
                }
                else if (this.posInString <= this.startIdx) 
                {
                    var __reg4 = 0;
                    if (this.inputBaseMC._x < 0) 
                    {
                        this.inputBaseMC._x = this.inputBaseMC._x + this.cursorPosition[this.posInString];
                    }
                    if (this.inputBaseMC._x > 0) 
                    {
                        this.inputBaseMC._x = 0;
                    }
                    --this.startIdx;
                    var __reg2 = this.startIdx;
                    while (__reg2 <= this.endIdx) 
                    {
                        __reg4 = __reg4 + this.cursorPosition[__reg2];
                        if (__reg4 >= this.inputTxtBoxWidth - 50) 
                        {
                            this.endIdx = __reg2;
                            break;
                        }
                        ++__reg2;
                    }
                    __reg4 = null;
                }
            }
            __reg5 = null;
            __reg8 = null;
            __reg7 = null;
            __reg6 = null;
            return;
        }
        else if (__reg0 === "clear all") 
        {
            this.inputText.text = "";
            this.cursorMC._x = this.cursorPosition[0];
            this.posInString = 0;
            if (this.inputBaseMC._x < 0) 
            {
                this.inputBaseMC._x = 0;
            }
            return;
        }
        else if (__reg0 === "right") 
        {
            if (this.posInString < this.inputText.length) 
            {
                __reg4 = 0;
                __reg5 = 0;
                ++this.posInString;
                __reg3 = 0;
                while (__reg3 < this.posInString + 1) 
                {
                    __reg5 = __reg5 + this.cursorPosition[__reg3];
                    ++__reg3;
                }
                this.cursorMC._x = __reg5;
                if (this.posInString >= this.endIdx || this.posInString == this.inputText.length) 
                {
                    this.inputBaseMC._x = this.inputBaseMC._x - this.cursorPosition[this.posInString];
                    if (this.posInString == this.inputText.length) 
                    {
                        this.inputBaseMC._x = this.inputTxtBoxWidth - 15 - this.inputText.textWidth;
                    }
                    if (this.inputBaseMC._x > 0) 
                    {
                        this.inputBaseMC._x = 0;
                    }
                    ++this.endIdx;
                    if (this.endIdx >= this.inputText.htmlText.length) 
                    {
                        this.endIdx = this.inputText.htmlText.length - 1;
                    }
                    else 
                    {
                        __reg2 = this.endIdx;
                        while (__reg2 >= this.startIdx) 
                        {
                            __reg4 = __reg4 + this.cursorPosition[__reg2];
                            if (__reg4 >= this.inputTxtBoxWidth - 50) 
                            {
                                this.startIdx = __reg2;
                                break;
                            }
                            --__reg2;
                        }
                    }
                }
                __reg4 = null;
            }
            return;
        }
        else if (__reg0 === "left") 
        {
            if (this.posInString > 0) 
            {
                __reg5 = 0;
                --this.posInString;
                __reg3 = 0;
                while (__reg3 < this.posInString + 1) 
                {
                    __reg5 = __reg5 + this.cursorPosition[__reg3];
                    ++__reg3;
                }
                this.cursorMC._x = __reg5;
                if (this.posInString == 0) 
                {
                    this.inputBaseMC._x = 0;
                }
                else if (this.posInString <= this.startIdx) 
                {
                    __reg4 = 0;
                    if (this.inputBaseMC._x < 0) 
                    {
                        this.inputBaseMC._x = this.inputBaseMC._x + this.cursorPosition[this.posInString];
                    }
                    if (this.inputBaseMC._x > 0) 
                    {
                        this.inputBaseMC._x = 0;
                    }
                    --this.startIdx;
                    __reg2 = this.startIdx;
                    while (__reg2 <= this.endIdx) 
                    {
                        __reg4 = __reg4 + this.cursorPosition[__reg2];
                        if (__reg4 >= this.inputTxtBoxWidth - 50) 
                        {
                            this.endIdx = __reg2;
                            break;
                        }
                        ++__reg2;
                    }
                    __reg4 = null;
                }
            }
            return;
        }
        this.writeString(null);
        return;
    }

    function writeString(initialString)
    {
        var __reg8 = null;
        var __reg7 = null;
        var __reg11 = null;
        var __reg10 = initialString;
        if (initialString == null) 
        {
            if (this.shiftStatus) 
            {
                __reg10 = this.keyLettersShift[this.currRow][this.currCol];
            }
            else 
            {
                __reg10 = this.keyLetters[this.currRow][this.currCol];
            }
        }
        if (__reg10 == "space") 
        {
            __reg10 = " ";
        }
        var __reg5 = 0;
        while (__reg5 < __reg10.length) 
        {
            var __reg6 = 0;
            var __reg9 = 0;
            if (this.posInString == this.inputText.length) 
            {
                __reg11 = this.inputText.text.concat(__reg10.charAt(__reg5));
            }
            else if (this.posInString < this.inputText.length) 
            {
                var __reg13 = this.inputText.text.substring(0, this.posInString);
                var __reg12 = this.inputText.text.substring(this.posInString, this.inputText.length);
                __reg11 = __reg13.concat(__reg10.charAt(__reg5), __reg12);
            }
            __reg7 = this.inputText._width;
            this.inputText.text = __reg11;
            __reg8 = this.inputText._width;
            var __reg3 = 0;
            while (__reg3 < this.posInString + 1) 
            {
                __reg6 = __reg6 + this.cursorPosition[__reg3];
                ++__reg3;
            }
            __reg9 = __reg6 + (__reg8 - __reg7);
            this.cursorMC._x = __reg9;
            ++this.posInString;
            ++this.endIdx;
            if (this.posInString == this.inputText.length) 
            {
                this.cursorPosition[this.posInString] = __reg8 - __reg7;
            }
            else 
            {
                this.cursorPosition.splice(this.posInString, 0, __reg8 - __reg7);
            }
            if (this.inputText.textWidth >= this.inputTxtBoxWidth - 15) 
            {
                var __reg4 = 0;
                var __reg2 = this.endIdx;
                while (__reg2 >= 1) 
                {
                    __reg4 = __reg4 + this.cursorPosition[__reg2];
                    if (__reg4 >= this.inputTxtBoxWidth - 50) 
                    {
                        this.startIdx = __reg2;
                        break;
                    }
                    --__reg2;
                }
                this.inputBaseMC._x = this.inputBaseMC._x - (__reg8 - __reg7);
                if (this.inputBaseMC._x < this.prevTxtPos) 
                {
                    this.prevTxtPos = this.inputBaseMC._x;
                }
                __reg4 = null;
            }
            __reg6 = null;
            __reg9 = null;
            ++__reg5;
        }
        __reg8 = null;
        __reg7 = null;
        __reg11 = null;
        __reg10 = null;
    }

    function btnHighlight()
    {
        this.enableBtnMC._visible = true;
        if (this.currBtn == "done") 
        {
            this.btnBaseMC.cancelBtnTextDis._visible = true;
            this.btnBaseMC.cancelBtnTextEnb._visible = false;
            this.btnBaseMC.doneBtnTextDis._visible = false;
            this.btnBaseMC.doneBtnTextEnb._visible = true;
            this.enableBtnMC._x = this.doneBtnMC._x;
            return;
        }
        if (this.currBtn == "cancel") 
        {
            this.btnBaseMC.cancelBtnTextDis._visible = false;
            this.btnBaseMC.cancelBtnTextEnb._visible = true;
            this.btnBaseMC.doneBtnTextDis._visible = true;
            this.btnBaseMC.doneBtnTextEnb._visible = false;
            this.enableBtnMC._x = this.cancelBtnMC._x;
        }
    }

    function unHighlightAllBtn()
    {
        this.btnBaseMC.cancelBtnTextDis._visible = true;
        this.btnBaseMC.cancelBtnTextEnb._visible = false;
        this.btnBaseMC.doneBtnTextDis._visible = true;
        this.btnBaseMC.doneBtnTextEnb._visible = false;
        this.enableBtnMC._visible = false;
    }

    function checkStringForInt(inputStr)
    {
        var __reg4 = false;
        var __reg2 = 0;
        while (__reg2 < inputStr.length) 
        {
            if (this.isNumeric(inputStr.charAt(__reg2))) 
            {
                __reg4 = true;
                break;
            }
            ++__reg2;
        }
        return __reg4;
    }

    function isNumeric(num)
    {
        return !isNaN(parseInt(num));
    }

}

//Sprite 690
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.Search
{
    var searchBaseMC = null;
    var buttonBaseMC = null;
    var searchBgX: Number = 141;
    var searchBgY: Number = 90;
    var titleTxtX: Number = 142;
    var titleTxtY: Number = 46;
    var txtFieldX: Number = 155;
    var txtFieldY: Number = 106;
    var keyboardX: Number = 611;
    var keyboardY: Number = 160;
    var dropDownX: Number = 155;
    var dropDownY: Number = 160;
    var msgTextX: Number = 160;
    var msgTextY: Number = 535;
    var msgTextWidth = null;
    var btnBaseY: Number = 583;
    var btnIdx: Number = 0;
    var netStatus: String = "Up";
    var keyboard = null;
    var inputTextField = null;
    var msgText = null;
    var resultsLink = null;
    var inputTxt = null;
    var fn = null;
    var keyListener = null;
    var onSearchEvent = null;

    function Search()
    {
        this.keyboard = new com.jadoo.as2.JadooPlus.Keyboard.SearchKeyBoard();
        this.inputTextField = new com.jadoo.as2.JadooPlus.TextField.InputTextField();
        this.onSearchEvent = new com.BigRoom.Event();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyboard.addListener("onKeyboardEvent", this, this.onKeyboardEvent);
        this.inputTextField.addListener("onInputTextFieldEvent", this, this.onInputTextFieldEvent);
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function create(parentMC, searchPageTitle, helpLink, resultsLink, searchString)
    {
        this.resultsLink = resultsLink;
        this.searchBaseMC = parentMC.createEmptyMovieClip("searchBaseMC", parentMC.getNextHighestDepth());
        var __reg7 = this.searchBaseMC.attachMovie("MaskMC", "backGroundMC", this.searchBaseMC.getNextHighestDepth());
        __reg7._width = 1280;
        __reg7._height = 720;
        var __reg8 = this.searchBaseMC.attachMovie("searchBgMC", "searchBgMC", this.searchBaseMC.getNextHighestDepth());
        __reg8._x = this.searchBgX;
        __reg8._y = this.searchBgY;
        var __reg6 = this.searchBaseMC.createEmptyMovieClip("titleTxtContainerMC", this.searchBaseMC.getNextHighestDepth());
        __reg6._x = this.titleTxtX;
        __reg6._y = this.titleTxtY;
        var __reg4 = new TextFormat();
        __reg4.font = "Arial";
        __reg4.align = "left";
        __reg4.size = 36;
        __reg4.bold = true;
        __reg4.color = 16777215;
        var __reg5 = __reg6.createTextField("inputText", __reg6.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        __reg5.setNewTextFormat(__reg4);
        __reg5.htmlText = "Search : " + searchPageTitle;
        __reg5._y = (this.txtFieldY - this.searchBgY - __reg5._height) / 2;
        this.keyboard.create(this.searchBaseMC, this.keyboardX, this.keyboardY);
        this.inputTextField.create(this.searchBaseMC, this.dropDownX, this.dropDownY, this.txtFieldX, this.txtFieldY, helpLink);
        if (searchString != "") 
        {
            var __reg2 = 0;
            while (__reg2 < searchString.length) 
            {
                if (__reg2 == searchString.length - 1) 
                {
                    this.inputTextField.writeString(searchString.charAt(__reg2), true);
                }
                else 
                {
                    this.inputTextField.writeString(searchString.charAt(__reg2), false);
                }
                ++__reg2;
            }
        }
        this.createButtons();
        parentMC = null;
        searchPageTitle = null;
        __reg7 = null;
        __reg8 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        helpLink = null;
        resultsLink = null;
        searchString = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.keyboard.destroy();
        delete this.keyboard;
        this.keyboard = null;
        this.inputTextField.destroy();
        delete this.inputTextField;
        this.inputTextField = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.onSearchEvent != null) 
        {
            delete this.onSearchEvent;
            this.onSearchEvent = null;
        }
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        delete this.fn;
        this.fn = null;
        this.netStatus = null;
        this.buttonBaseMC = null;
        this.resultsLink = null;
        removeMovieClip(this.searchBaseMC);
        this.searchBaseMC = null;
    }

    function displayMsgText(messageToDisplay)
    {
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 16555008;
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        this.msgTextWidth = this.searchBaseMC.dropDownBaseMC.dropDownMC._width + this.searchBaseMC.keyboardBaseMC.keyboardBgMC._width + 5;
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.msgText.createTextField(this.searchBaseMC, this.msgTextX, this.msgTextY, this.msgTextWidth, 40, "false");
        this.msgText.setTextFormat(__reg2);
        this.msgText.setHtmlText(messageToDisplay);
        this.msgText.enable(false, 500);
        __reg2 = null;
    }

    function createButtons()
    {
        this.buttonBaseMC = this.searchBaseMC.createEmptyMovieClip("buttonBaseMC", this.searchBaseMC.getNextHighestDepth());
        this.buttonBaseMC._y = this.btnBaseY;
        var __reg8 = this.buttonBaseMC.attachMovie("btnActive", "searchBtnActMC", this.buttonBaseMC.getNextHighestDepth());
        var __reg6 = this.buttonBaseMC.attachMovie("btnInactive", "searchBtnInactMC", this.buttonBaseMC.getNextHighestDepth());
        var __reg7 = this.buttonBaseMC.attachMovie("btnActive", "cancelBtnActMC", this.buttonBaseMC.getNextHighestDepth());
        __reg7._x = __reg6._width + 10;
        var __reg5 = this.buttonBaseMC.attachMovie("btnInactive", "cancelBtnInactMC", this.buttonBaseMC.getNextHighestDepth());
        __reg5._x = __reg7._x;
        this.buttonBaseMC._x = (this.searchBaseMC.backGroundMC._width - (__reg7._width + __reg6._width + 10)) / 2;
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "left";
        __reg3.size = 22;
        __reg3.bold = false;
        __reg3.color = 16777215;
        var __reg4 = this.buttonBaseMC.createTextField("searchTextField", this.buttonBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4.autoSize = true;
        __reg4.setNewTextFormat(__reg3);
        __reg4.htmlText = "Search";
        __reg4._x = (__reg6._width - __reg4._width) / 2;
        __reg4._y = (__reg6._height - __reg4._height) / 2;
        var __reg2 = this.buttonBaseMC.createTextField("cancelTextField", this.buttonBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg2.autoSize = true;
        __reg2.setNewTextFormat(__reg3);
        __reg2.htmlText = "Cancel";
        __reg2._x = __reg5._x + (__reg5._width - __reg2._width) / 2;
        __reg2._y = (__reg5._height - __reg2._height) / 2;
        __reg3 = null;
        __reg8 = null;
        __reg6 = null;
        __reg7 = null;
        __reg5 = null;
        __reg4 = null;
        __reg2 = null;
    }

    function onNetStatusUpdate(netStatus)
    {
        this.netStatus = netStatus;
        netStatus = null;
    }

    function onKeyBoardKeyPressed(keyPressed)
    {
        if ((__reg0 = keyPressed) === "backspace") 
        {
            this.inputTextField.backspacePressed();
        }
        else if (__reg0 === "clear all") 
        {
            this.inputTextField.clearInputTxtField();
        }
        else if (__reg0 === "right") 
        {
            this.inputTextField.movetoRight();
        }
        else if (__reg0 === "left") 
        {
            this.inputTextField.movetoLeft();
        }
        else 
        {
            this.inputTextField.writeString(keyPressed, true);
        }
        keyPressed = null;
    }

    function buttonHighlight()
    {
        if (this.btnIdx == 0) 
        {
            this.buttonBaseMC.searchBtnActMC.swapDepths(this.buttonBaseMC.searchBtnInactMC);
            return;
        }
        this.buttonBaseMC.cancelBtnActMC.swapDepths(this.buttonBaseMC.cancelBtnInactMC);
    }

    function buttonUnhighlight()
    {
        if (this.btnIdx == 0) 
        {
            this.buttonBaseMC.searchBtnActMC.swapDepths(this.buttonBaseMC.searchBtnInactMC);
            return;
        }
        this.buttonBaseMC.cancelBtnActMC.swapDepths(this.buttonBaseMC.cancelBtnInactMC);
    }

    function onKeyDown()
    {
        this.displayMsgText("");
        if ((__reg0 = Key.getCode()) === 37) 
        {
            if (this.btnIdx > 0) 
            {
                this.buttonUnhighlight();
                --this.btnIdx;
                this.buttonHighlight();
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.btnIdx < 1) 
            {
                this.buttonUnhighlight();
                ++this.btnIdx;
                this.buttonHighlight();
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.btnIdx == 0) 
            {
                this.switchToDropDown();
            }
            else 
            {
                this.switchToKeypad();
            }
            return;
        }
        else if (__reg0 === Key.BACK) 
        {
            this.onSearchEvent.notify("onCancelPressed");
            return;
        }
        else if (__reg0 === 13) 
        {
            this.onEnterKey();
            return;
        }
        return;
    }

    function onEnterKey()
    {
        if (this.btnIdx == 0) 
        {
            if (this.netStatus == "Up") 
            {
                this.inputTxt = this.inputTextField.getInputText();
                var __reg3 = this.inputTextField.getSearchString();
                if (this.inputTxt != null && this.inputTxt != "" && this.inputTxt != undefined) 
                {
                    var __reg2 = null;
                    if (this.resultsLink.charAt(this.resultsLink.length - 1) != "/") 
                    {
                        this.resultsLink = this.resultsLink + "/";
                    }
                    __reg2 = this.resultsLink + __reg3;
                    this.disable();
                    this.onSearchEvent.notify("onSearchPressed", __reg2, this.inputTxt);
                    __reg2 = null;
                }
                else 
                {
                    this.displayMsgText("Please enter search keyword");
                }
                __reg3 = null;
            }
            else 
            {
                this.displayMsgText(com.jadoo.as2.JadooPlus.Utils.Messages.NETWORK_LINK_DOWN);
            }
            return;
        }
        if (this.btnIdx == 1) 
        {
            this.onSearchEvent.notify("onCancelPressed");
        }
    }

    function onKeyboardEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "onKeyPressed") 
        {
            this.onKeyBoardKeyPressed(arguments[1]);
        }
        else if (__reg0 === "onSwitchLeft") 
        {
            this.inputTextField.enable();
            this.inputTextField.hideCursor();
        }
        else if (__reg0 === "onSwitchDown") 
        {
            this.inputTextField.hideCursor();
            this.enable();
        }
        else if (__reg0 === "onBackPressed") 
        {
            this.onSearchEvent.notify("onCancelPressed");
        }
        __reg3 = null;
    }

    function onInputTextFieldEvent()
    {
        var __reg4 = arguments[0];
        if ((__reg0 = __reg4) === "onSwitchDown") 
        {
            this.enable();
        }
        else if (__reg0 === "onSwitchRight") 
        {
            this.keyboard.enableKeypad();
            this.inputTextField.showCursor();
        }
        else if (__reg0 === "onEnterPressed") 
        {
            var __reg3 = null;
            var __reg5 = arguments[1];
            this.inputTxt = arguments[2];
            if (this.resultsLink.charAt(this.resultsLink.length - 1) != "/") 
            {
                this.resultsLink = this.resultsLink + "/";
            }
            __reg3 = this.resultsLink + __reg5;
            this.onSearchEvent.notify("onSearchPressed", __reg3, this.inputTxt);
            __reg3 = null;
            __reg5 = null;
        }
        else if (__reg0 === "onSwitchBack") 
        {
            this.keyboard.enableKeypad();
            this.inputTextField.showCursor();
        }
        else if (__reg0 === "onBackPressed") 
        {
            this.onSearchEvent.notify("onCancelPressed");
        }
        __reg4 = null;
    }

    function switchToKeypad()
    {
        this.disable();
        this.keyboard.enableKeypad();
        this.inputTextField.showCursor();
    }

    function switchToDropDown()
    {
        this.disable();
        this.inputTextField.hideCursor();
        this.inputTextField.enable();
    }

    function enable()
    {
        this.buttonHighlight();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function disable()
    {
        this.buttonUnhighlight();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onSearchEvent") 
        {
            this.onSearchEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onSearchEvent") 
        {
            this.onSearchEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function searchResultsLoadingError(message)
    {
        this.displayMsgText(message);
        this.enable();
        this.inputTextField.disable();
        this.inputTextField.clearInputTxtField();
        var __reg2 = 0;
        while (__reg2 < this.inputTxt.length) 
        {
            if (__reg2 == this.inputTxt.length - 1) 
            {
                this.inputTextField.writeString(this.inputTxt.charAt(__reg2), true);
            }
            else 
            {
                this.inputTextField.writeString(this.inputTxt.charAt(__reg2), false);
            }
            ++__reg2;
        }
        message = null;
    }

}

//Sprite 691
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Keyboard.SearchKeyBoard
{
    var keyboardBaseMC = null;
    var virtKeyPadBaseMC = null;
    var btnGapX: Number = 4;
    var btnGapY: Number = 4;
    var moveX: Number = 2;
    var moveY: Number = 2;
    var currRow: Number = 0;
    var currCol: Number = 0;
    var alphabetBtnHeight: Number = 46;
    var fn = null;
    var keyListener = null;
    var keypadTextFormat = null;
    var keyboardEvent = null;
    var keyLetters = null;
    var currXPos;

    function SearchKeyBoard()
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyboardEvent = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.keypadTextFormat = new TextFormat();
        this.keypadTextFormat.font = "Arial";
        this.keypadTextFormat.align = "center";
        this.keypadTextFormat.size = 24;
        this.keypadTextFormat.bold = false;
        this.keypadTextFormat.color = 0;
        this.keyLetters = new Array();
        this.keyLetters[0] = new Array("a", "b", "c", "d", "e", "f", "1", "2", "3");
        this.keyLetters[1] = new Array("g", "h", "i", "j", "k", "l", "4", "5", "6");
        this.keyLetters[2] = new Array("m", "n", "o", "p", "q", "r", "7", "8", "9");
        this.keyLetters[3] = new Array("s", "t", "u", "v", "w", "x", "y", "z", "0");
        this.keyLetters[4] = new Array("left", "right", "space", "clear all", "backspace");
    }

    function create(searchBaseMC, keyboardX, keyboardY)
    {
        this.keyboardBaseMC = searchBaseMC.createEmptyMovieClip("keyboardBaseMC", searchBaseMC.getNextHighestDepth());
        this.keyboardBaseMC._x = keyboardX;
        this.keyboardBaseMC._y = keyboardY;
        var __reg3 = this.keyboardBaseMC.attachMovie("keyboardBgMC", "keyboardBgMC", this.keyboardBaseMC.getNextHighestDepth());
        this.displayKeyPad();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        __reg3 = null;
        searchBaseMC = null;
        keyboardX = null;
        keyboardY = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.keypadTextFormat != null) 
        {
            delete this.keypadTextFormat;
            this.keypadTextFormat = null;
        }
        delete this.fn;
        this.fn = null;
        var __reg2 = 0;
        while (__reg2 < this.keyLetters.length) 
        {
            delete this.keyLetters[__reg2];
            this.keyLetters[__reg2] = null;
            ++__reg2;
        }
        delete this.keyLetters;
        this.keyLetters = null;
        delete this.keyListener;
        this.keyListener = null;
        delete this.keyboardEvent;
        this.keyboardEvent = null;
        removeMovieClip(this.virtKeyPadBaseMC);
        removeMovieClip(this.keyboardBaseMC);
        this.keyboardBaseMC = null;
        this.virtKeyPadBaseMC = null;
    }

    function displayKeyPad()
    {
        this.virtKeyPadBaseMC = this.keyboardBaseMC.createEmptyMovieClip("virtKeyPadBaseMC", this.keyboardBaseMC.getNextHighestDepth());
        this.virtKeyPadBaseMC._x = 8;
        this.virtKeyPadBaseMC._y = 60;
        var __reg4 = 0;
        for (;;) 
        {
            if (__reg4 >= this.keyLetters.length) 
            {
                return;
            }
            var __reg6 = 0;
            while (__reg6 < this.keyLetters[__reg4].length) 
            {
                var __reg2 = null;
                var __reg8 = null;
                var __reg3 = this.virtKeyPadBaseMC.createEmptyMovieClip("keypadBtnBaseMC" + __reg4 + __reg6, this.virtKeyPadBaseMC.getNextHighestDepth());
                if (__reg6 == 0) 
                {
                    this.currXPos = 5;
                }
                if ((__reg0 = this.keyLetters[__reg4][__reg6]) === "left") 
                {
                    __reg2 = __reg3.attachMovie("searchLeftArrowMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    var __reg7 = __reg2.attachMovie("searchLeftSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    __reg7 = null;
                }
                else if (__reg0 === "right") 
                {
                    __reg2 = __reg3.attachMovie("searchRightArrowMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchRightSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    __reg7 = null;
                }
                else if (__reg0 === "space") 
                {
                    __reg2 = __reg3.attachMovie("searchSpaceBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchSpaceSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "clear all") 
                {
                    __reg2 = __reg3.attachMovie("searchClearBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchClearSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "backspace") 
                {
                    __reg2 = __reg3.attachMovie("searchBackspaceBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchBackspaceSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                else if (__reg0 === "0") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "1") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "2") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "3") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "4") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "5") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "6") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "7") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "8") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else if (__reg0 === "9") 
                {
                    __reg2 = __reg3.attachMovie("searchGrayBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 16777215;
                    __reg7 = null;
                }
                else 
                {
                    __reg2 = __reg3.attachMovie("searchWhiteBtnMC", "keypadBtnMC", __reg3.getNextHighestDepth(), {_x: this.currXPos, _y: __reg4 * (this.alphabetBtnHeight + this.btnGapY)});
                    this.currXPos = __reg2._x + __reg2._width + this.btnGapX;
                    __reg7 = __reg2.attachMovie("searchAlphaSelectorMC", "selectorMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0});
                    __reg7._visible = false;
                    this.keypadTextFormat.color = 0;
                    __reg7 = null;
                }
                if (this.keyLetters[__reg4][__reg6] != "left" && this.keyLetters[__reg4][__reg6] != "right") 
                {
                    var __reg5 = __reg2.createTextField("keypadTxtField", __reg2.getNextHighestDepth(), 0, 0, __reg2._width, __reg2._height);
                    __reg5.autoSize = true;
                    __reg5.setNewTextFormat(this.keypadTextFormat);
                    __reg5.htmlText = this.keyLetters[__reg4][__reg6];
                    __reg5._x = __reg2._width / 2 - __reg5.textWidth / 2 - this.moveX;
                    __reg5._y = __reg2._height / 2 - __reg5.textHeight / 2 - this.moveY;
                    __reg5 = null;
                }
                this.buttonHighlight();
                __reg3 = null;
                __reg2 = null;
                __reg8 = null;
                ++__reg6;
            }
            ++__reg4;
        }
    }

    function buttonHighlight()
    {
        var __reg2 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.keypadTxtField;
        var __reg4 = __reg2.htmlText;
        var __reg3 = __reg2.getTextFormat();
        this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.selectorMC._visible = true;
        __reg3.color = 16777215;
        __reg2.setNewTextFormat(__reg3);
        __reg2.htmlText = "";
        __reg2.htmlText = __reg4;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function buttonUnHighlight()
    {
        var __reg2 = this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.keypadTxtField;
        var __reg4 = __reg2.htmlText;
        var __reg3 = __reg2.getTextFormat();
        this.virtKeyPadBaseMC["keypadBtnBaseMC" + this.currRow + this.currCol].keypadBtnMC.selectorMC._visible = false;
        if (this.checkStringForInt(__reg4)) 
        {
            __reg3.color = 16777215;
            __reg2.setNewTextFormat(__reg3);
        }
        else 
        {
            __reg3.color = 0;
            __reg2.setNewTextFormat(__reg3);
        }
        __reg2.htmlText = "";
        __reg2.htmlText = __reg4;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function checkStringForInt(inputStr)
    {
        var __reg4 = false;
        var __reg2 = 0;
        while (__reg2 < inputStr.length) 
        {
            if (this.isNumeric(inputStr.charAt(__reg2))) 
            {
                __reg4 = true;
                break;
            }
            ++__reg2;
        }
        __reg2 = null;
        inputStr = null;
        return __reg4;
    }

    function isNumeric(num)
    {
        return !isNaN(parseInt(num));
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 37) 
        {
            this.buttonUnHighlight();
            if (this.currCol > 0) 
            {
                --this.currCol;
                this.buttonHighlight();
            }
            else if (this.currCol == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.keyboardEvent.notify("onSwitchLeft");
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            this.buttonUnHighlight();
            if (this.currCol < this.keyLetters[this.currRow].length - 1) 
            {
                ++this.currCol;
            }
            else if (this.currCol == this.keyLetters[this.currRow].length - 1) 
            {
                this.currCol = 0;
            }
            this.buttonHighlight();
            return;
        }
        else if (__reg0 === 38) 
        {
            this.buttonUnHighlight();
            if (this.currRow > 0) 
            {
                if (this.currRow == this.keyLetters.length - 1) 
                {
                    if (this.currCol == 2) 
                    {
                        this.currCol = 3;
                    }
                    else if (this.currCol == 3) 
                    {
                        this.currCol = 5;
                    }
                    else if (this.currCol == 4) 
                    {
                        this.currCol = 7;
                    }
                }
                --this.currRow;
            }
            this.buttonHighlight();
            return;
        }
        else if (__reg0 === 40) 
        {
            this.buttonUnHighlight();
            if (this.currRow == this.keyLetters.length - 1) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.keyboardEvent.notify("onSwitchDown");
            }
            else 
            {
                if (this.currRow == 3) 
                {
                    if (this.currCol == 0 || this.currCol == 1) 
                    {
                        this.currCol = 0;
                    }
                    else if (this.currCol == 2) 
                    {
                        this.currCol = 1;
                    }
                    if (this.currCol == 3 || this.currCol == 4) 
                    {
                        this.currCol = 2;
                    }
                    else if (this.currCol == 5 || this.currCol == 6) 
                    {
                        this.currCol = 3;
                    }
                    else if (this.currCol == 7 || this.currCol == 8) 
                    {
                        this.currCol = 4;
                    }
                }
                ++this.currRow;
                this.buttonHighlight();
            }
            return;
        }
        else if (__reg0 === 13) 
        {
            this.keyboardEvent.notify("onKeyPressed", this.keyLetters[this.currRow][this.currCol]);
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.keyboardEvent.notify("onBackPressed");
        return;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onKeyboardEvent") 
        {
            this.keyboardEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function enableKeypad()
    {
        this.buttonHighlight();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

}

//Sprite 692
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.TextField.InputTextField
{
    var searchBaseMC = null;
    var dropDownBaseMC = null;
    var dropDownMC = null;
    var txtFieldSelectorMC = null;
    var textFieldContainerMC = null;
    var inputBaseMC = null;
    var cursorMC = null;
    var inputText = null;
    var inputTextFormat = null;
    var textFormat = null;
    var resultTextFields = null;
    var cursorPosition = null;
    var searchedItems = null;
    var actualInputTxt = null;
    var netStatus: String = "Up";
    var searchLink = null;
    var searchString: String = "";
    var currentString: String = "";
    var xmlTimeOutId: Number = -1;
    var itemIdx: Number = 0;
    var selectorIdx: Number = 0;
    var maxItemsonPage: Number = 8;
    var bottomItemIdx: Number = 0;
    var topItemIdx: Number = 0;
    var txtFieldGapY: Number = 47;
    var txtMaskHeight: Number = 45;
    var maxResults: Number = 15;
    var inputTxtBoxWidth: Number = 440;
    var posInString: Number = 0;
    var prevTxtPos: Number = 0;
    var startIdx: Number = 0;
    var endIdx: Number = 0;
    var inputTextFieldEvent = null;
    var xml = null;
    var fn = null;
    var keyListener = null;
    var resultsAvailable: Boolean = false;

    function InputTextField()
    {
        this.bottomItemIdx = this.maxItemsonPage;
        this.resultTextFields = new Array();
        this.cursorPosition = new Array();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onXMLLoad: mx.utils.Delegate.create(this, this.onXMLLoad)};
        this.textFormat = new TextFormat();
        this.textFormat.font = "Arial";
        this.textFormat.align = "Left";
        this.textFormat.bold = false;
        this.textFormat.color = 16777215;
        this.textFormat.size = 28;
        this.inputTextFieldEvent = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function create(searchBaseMC, dropDownX, dropDownY, txtFieldX, txtFieldY, searchLink)
    {
        this.searchBaseMC = searchBaseMC;
        this.searchLink = searchLink;
        var __reg6 = searchBaseMC.attachMovie("searchTxtFieldMC", "textFieldMC", searchBaseMC.getNextHighestDepth());
        __reg6._x = txtFieldX;
        __reg6._y = txtFieldY;
        this.initInputTxtField(txtFieldX, txtFieldY);
        this.dropDownBaseMC = searchBaseMC.createEmptyMovieClip("dropDownBaseMC", searchBaseMC.getNextHighestDepth());
        this.dropDownBaseMC._x = dropDownX;
        this.dropDownBaseMC._y = dropDownY;
        this.dropDownMC = this.dropDownBaseMC.attachMovie("dropDownMC", "dropDownMC", this.dropDownBaseMC.getNextHighestDepth());
        this.txtFieldSelectorMC = this.dropDownBaseMC.attachMovie("dropDownSelectorMC", "txtFieldSelectorMC", this.dropDownBaseMC.getNextHighestDepth());
        this.txtFieldSelectorMC._visible = false;
        var __reg2 = this.dropDownBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.dropDownBaseMC.getNextHighestDepth());
        __reg2._x = this.dropDownMC._width - __reg2._width - 5;
        __reg2._y = this.dropDownMC._y + (this.txtFieldSelectorMC._height - __reg2._height) / 2;
        __reg2._visible = false;
        var __reg3 = this.dropDownBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.dropDownBaseMC.getNextHighestDepth());
        __reg3._x = __reg2._x;
        __reg3._y = (this.maxItemsonPage - 1) * this.txtFieldGapY + (this.txtFieldSelectorMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        var __reg5 = this.dropDownBaseMC.attachMovie("MaskMC", "dropDownMaskMC", this.dropDownBaseMC.getNextHighestDepth());
        __reg5._width = this.dropDownMC._width;
        __reg5._height = this.dropDownMC._height + 20;
        this.textFieldContainerMC = this.dropDownBaseMC.createEmptyMovieClip("textFieldContainerMC", this.dropDownBaseMC.getNextHighestDepth());
        this.textFieldContainerMC.setMask(__reg5);
        this.createTextFields();
        __reg6 = null;
        __reg5 = null;
        __reg2 = null;
        __reg3 = null;
        searchBaseMC = null;
        searchLink = null;
        dropDownX = null;
        dropDownY = null;
        txtFieldX = null;
        txtFieldY = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        var __reg2 = 0;
        while (__reg2 < this.maxResults) 
        {
            this.resultTextFields[__reg2].removeTextField();
            delete this.resultTextFields[__reg2];
            this.resultTextFields[__reg2] = null;
            ++__reg2;
        }
        delete this.resultTextFields;
        this.resultTextFields = null;
        delete this.searchedItems;
        this.searchedItems = null;
        delete this.cursorPosition;
        this.cursorPosition = null;
        if (this.xmlTimeOutId != -1) 
        {
            clearInterval(this.xmlTimeOutId);
            this.xmlTimeOutId = -1;
        }
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        if (this.searchedItems != null) 
        {
            delete this.searchedItems;
            this.searchedItems = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.inputTextFormat != null) 
        {
            delete this.inputTextFormat;
            this.inputTextFormat = null;
        }
        if (this.inputText != null) 
        {
            delete this.inputText;
            this.inputText = null;
        }
        delete this.fn;
        this.fn = null;
        delete this.keyListener;
        this.keyListener = null;
        delete this.inputTextFieldEvent;
        this.inputTextFieldEvent = null;
        this.netStatus = null;
        this.searchLink = null;
        this.dropDownMC = null;
        this.dropDownBaseMC = null;
        this.txtFieldSelectorMC = null;
        this.textFieldContainerMC = null;
        this.inputBaseMC = null;
        this.cursorMC = null;
        this.searchBaseMC = null;
    }

    function initInputTxtField(txtFieldX, txtFieldY)
    {
        var __reg2 = this.searchBaseMC.textFieldMC.createEmptyMovieClip("inputTxtFieldBaseMC", this.searchBaseMC.textFieldMC.getNextHighestDepth());
        __reg2._x = 10;
        __reg2._y = 5;
        this.inputBaseMC = __reg2.createEmptyMovieClip("inputBaseMC", __reg2.getNextHighestDepth());
        this.inputTextFormat = new TextFormat();
        this.inputTextFormat.font = "Arial";
        this.inputTextFormat.align = "left";
        this.inputTextFormat.size = 28;
        this.inputTextFormat.bold = false;
        this.inputTextFormat.color = 16777215;
        this.inputText = this.inputBaseMC.createTextField("inputText", this.inputBaseMC.getNextHighestDepth(), 0, 0, 0, 40);
        this.inputText.setNewTextFormat(this.inputTextFormat);
        this.inputText.autoSize = true;
        var __reg4 = __reg2.createEmptyMovieClip("cursorBaseMC", __reg2.getNextHighestDepth());
        var __reg3 = __reg2.attachMovie("maskMC", "inputTxtMaskMC", this.searchBaseMC.getNextHighestDepth(), {_x: 0, _y: 0, _width: this.inputTxtBoxWidth, _height: 42});
        this.inputBaseMC.setMask(__reg3);
        this.cursorMC = this.inputBaseMC.attachMovie("CursorMC", "cursorMC", this.inputBaseMC.getNextHighestDepth());
        this.cursorMC._x = 0;
        this.cursorMC._y = 0;
        this.cursorPosition[this.posInString] = this.cursorMC._x;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
        txtFieldX = null;
        txtFieldY = null;
    }

    function createTextFields()
    {
        var __reg2 = 0;
        for (;;) 
        {
            if (__reg2 >= this.maxResults) 
            {
                return;
            }
            var __reg3 = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            __reg3.createTextField(this.textFieldContainerMC, 10, __reg2 * this.txtFieldGapY, this.dropDownMC._width - this.dropDownBaseMC.upArrowMC._width - 25, this.txtMaskHeight, "false");
            this.resultTextFields[__reg2] = __reg3;
            __reg3 = null;
            ++__reg2;
        }
    }

    function writeString(initialString, searchEnable)
    {
        var __reg7 = null;
        var __reg6 = null;
        var __reg9 = null;
        var __reg8 = initialString;
        if (__reg8 == "space") 
        {
            __reg8 = " ";
        }
        var __reg5 = 0;
        var __reg10 = 0;
        if (this.posInString == this.inputText.length) 
        {
            __reg9 = this.inputText.htmlText.concat(__reg8);
        }
        else if (this.posInString < this.inputText.length) 
        {
            var __reg12 = this.inputText.htmlText.substring(0, this.posInString);
            var __reg11 = this.inputText.htmlText.substring(this.posInString, this.inputText.length);
            __reg9 = __reg12.concat(__reg8, __reg11);
            __reg12 = null;
            __reg11 = null;
        }
        __reg6 = this.inputText._width;
        this.inputText.htmlText = __reg9;
        __reg7 = this.inputText._width;
        if (searchEnable) 
        {
            this.searchWord();
        }
        var __reg3 = 0;
        while (__reg3 < this.posInString + 1) 
        {
            __reg5 = __reg5 + this.cursorPosition[__reg3];
            ++__reg3;
        }
        __reg10 = __reg5 + (__reg7 - __reg6);
        this.cursorMC._x = __reg10;
        ++this.posInString;
        ++this.endIdx;
        if (this.posInString == this.inputText.length) 
        {
            this.cursorPosition[this.posInString] = __reg7 - __reg6;
        }
        else 
        {
            this.cursorPosition.splice(this.posInString, 0, __reg7 - __reg6);
        }
        if (this.inputText.textWidth >= this.inputTxtBoxWidth - 15) 
        {
            var __reg4 = 0;
            var __reg2 = this.endIdx;
            while (__reg2 >= 1) 
            {
                __reg4 = __reg4 + this.cursorPosition[__reg2];
                if (__reg4 >= this.inputTxtBoxWidth - 50) 
                {
                    this.startIdx = __reg2;
                    break;
                }
                --__reg2;
            }
            this.inputBaseMC._x = this.inputBaseMC._x - (__reg7 - __reg6);
            if (this.inputBaseMC._x < this.prevTxtPos) 
            {
                this.prevTxtPos = this.inputBaseMC._x;
            }
            __reg4 = null;
        }
        __reg5 = null;
        __reg10 = null;
        __reg7 = null;
        __reg6 = null;
        __reg9 = null;
        __reg8 = null;
        searchEnable = null;
        initialString = null;
    }

    function backspacePressed()
    {
        if (this.posInString > 0) 
        {
            var __reg5 = 0;
            var __reg8 = null;
            var __reg7 = null;
            var __reg6 = null;
            __reg6 = __reg8 = this.inputText.htmlText.slice(0, this.posInString - 1);
            if (this.posInString < this.inputText.length) 
            {
                __reg7 = this.inputText.htmlText.substring(this.posInString, this.inputText.length);
                __reg6 = __reg8.concat(__reg7);
            }
            this.inputText.htmlText = __reg6;
            this.searchWord();
            this.prevTxtPos = this.prevTxtPos + this.cursorPosition[this.posInString];
            this.cursorPosition.splice(this.posInString, 1);
            --this.posInString;
            var __reg3 = 0;
            while (__reg3 < this.posInString + 1) 
            {
                __reg5 = __reg5 + this.cursorPosition[__reg3];
                ++__reg3;
            }
            this.cursorMC._x = __reg5;
            if (this.posInString == 0) 
            {
                this.inputBaseMC._x = 0;
            }
            else if (this.posInString <= this.startIdx) 
            {
                var __reg4 = 0;
                if (this.inputBaseMC._x < 0) 
                {
                    this.inputBaseMC._x = this.inputBaseMC._x + this.cursorPosition[this.posInString];
                }
                if (this.inputBaseMC._x > 0) 
                {
                    this.inputBaseMC._x = 0;
                }
                --this.startIdx;
                var __reg2 = this.startIdx;
                while (__reg2 <= this.endIdx) 
                {
                    __reg4 = __reg4 + this.cursorPosition[__reg2];
                    if (__reg4 >= this.inputTxtBoxWidth - 50) 
                    {
                        this.endIdx = __reg2;
                        break;
                    }
                    ++__reg2;
                }
                __reg4 = null;
            }
        }
        __reg5 = null;
        __reg8 = null;
        __reg7 = null;
        __reg6 = null;
    }

    function movetoRight()
    {
        if (this.posInString < this.inputText.length) 
        {
            var __reg4 = 0;
            var __reg5 = 0;
            ++this.posInString;
            var __reg3 = 0;
            while (__reg3 < this.posInString + 1) 
            {
                __reg5 = __reg5 + this.cursorPosition[__reg3];
                ++__reg3;
            }
            this.cursorMC._x = __reg5;
            if (this.posInString >= this.endIdx || this.posInString == this.inputText.length) 
            {
                this.inputBaseMC._x = this.inputBaseMC._x - this.cursorPosition[this.posInString];
                if (this.posInString == this.inputText.length) 
                {
                    this.inputBaseMC._x = this.inputTxtBoxWidth - 15 - this.inputText.textWidth;
                }
                if (this.inputBaseMC._x > 0) 
                {
                    this.inputBaseMC._x = 0;
                }
                ++this.endIdx;
                if (this.endIdx >= this.inputText.htmlText.length) 
                {
                    this.endIdx = this.inputText.htmlText.length - 1;
                }
                else 
                {
                    var __reg2 = this.endIdx;
                    while (__reg2 >= this.startIdx) 
                    {
                        __reg4 = __reg4 + this.cursorPosition[__reg2];
                        if (__reg4 >= this.inputTxtBoxWidth - 50) 
                        {
                            this.startIdx = __reg2;
                            break;
                        }
                        --__reg2;
                    }
                }
            }
            __reg5 = null;
            __reg4 = null;
        }
    }

    function movetoLeft()
    {
        if (this.posInString > 0) 
        {
            var __reg5 = 0;
            --this.posInString;
            var __reg3 = 0;
            while (__reg3 < this.posInString + 1) 
            {
                __reg5 = __reg5 + this.cursorPosition[__reg3];
                ++__reg3;
            }
            this.cursorMC._x = __reg5;
            if (this.posInString == 0) 
            {
                this.inputBaseMC._x = 0;
                return;
            }
            if (this.posInString <= this.startIdx) 
            {
                var __reg4 = 0;
                if (this.inputBaseMC._x < 0) 
                {
                    this.inputBaseMC._x = this.inputBaseMC._x + this.cursorPosition[this.posInString];
                }
                if (this.inputBaseMC._x > 0) 
                {
                    this.inputBaseMC._x = 0;
                }
                --this.startIdx;
                var __reg2 = this.startIdx;
                while (__reg2 <= this.endIdx) 
                {
                    __reg4 = __reg4 + this.cursorPosition[__reg2];
                    if (__reg4 >= this.inputTxtBoxWidth - 50) 
                    {
                        this.endIdx = __reg2;
                        break;
                    }
                    ++__reg2;
                }
                __reg5 = null;
                __reg4 = null;
            }
        }
    }

    function clearInputTxtField()
    {
        this.inputText.htmlText = "";
        this.cursorMC._x = this.cursorPosition[0];
        this.posInString = 0;
        this.searchWord();
        if (this.inputBaseMC._x < 0) 
        {
            this.inputBaseMC._x = 0;
        }
    }

    function displayResults()
    {
        this.resetDropDown();
        var __reg2 = 0;
        while (__reg2 < this.searchedItems.length && __reg2 < this.maxResults) 
        {
            this.resultTextFields[__reg2].setTextFormat(this.textFormat);
            this.resultTextFields[__reg2].setHtmlText(this.searchedItems[__reg2]);
            ++__reg2;
        }
        this.resultsAvailable = true;
        this.setScrollArrows();
    }

    function onNetStatusUpdate(netStatus)
    {
        this.netStatus = netStatus;
        netStatus = null;
    }

    function itemHighlight()
    {
        this.resultTextFields[this.itemIdx].enable(false, 500);
        this.txtFieldSelectorMC._y = this.selectorIdx * this.txtFieldGapY;
        this.setScrollArrows();
    }

    function itemUnhighlight()
    {
        this.resultTextFields[this.itemIdx].disable();
    }

    function searchWord()
    {
        if (this.xml != null) 
        {
            this.xml.onData = null;
            delete this.xml;
            this.xml = null;
        }
        if (this.searchedItems != null) 
        {
            delete this.searchedItems;
            this.searchedItems = null;
        }
        this.currentString = "";
        this.searchString = "";
        var __reg2 = 0;
        while (__reg2 < this.inputText.htmlText.length) 
        {
            if (this.inputText.htmlText.charAt(__reg2) == " ") 
            {
                if (this.currentString.charAt(this.currentString.length - 1) != " ") 
                {
                    this.currentString = this.currentString + " ";
                    this.searchString = this.searchString + "8912";
                }
            }
            else 
            {
                this.currentString = this.currentString + this.inputText.htmlText.charAt(__reg2);
                this.searchString = this.searchString + this.inputText.htmlText.charAt(__reg2);
            }
            ++__reg2;
        }
        if (this.inputText.htmlText == "") 
        {
            this.resetDropDown();
            return;
        }
        if (this.netStatus == "Up") 
        {
            this.resetDropDown();
            if (this.searchLink.charAt(this.searchLink.length - 1) != "/") 
            {
                this.searchLink = this.searchLink + "/";
            }
            var __reg3 = this.searchLink + this.searchString;
            __reg3 = __reg3 + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
            this.clearTimeOutId();
            this.xml = new XML();
            this.xml.onLoad = this.fn.onXMLLoad;
            this.xml.load(__reg3);
            this.xmlTimeOutId = setInterval(this, "xmlTimeOut", 1000);
            __reg3 = null;
            return;
        }
        this.resetDropDown();
    }

    function onXMLLoad(success)
    {
        this.clearTimeOutId();
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/xml/items");
            if (__reg2.hasChildNodes()) 
            {
                this.parseNames(__reg2);
            }
            else 
            {
                this.resetDropDown();
            }
            __reg2 = null;
        }
        else 
        {
            this.resetDropDown();
        }
        success = null;
    }

    function parseNames(itemsNode)
    {
        if (itemsNode != null) 
        {
            this.searchedItems = new Array();
            var __reg7 = itemsNode.childNodes;
            var __reg6 = null;
            var __reg5 = 0;
            while (__reg5 < __reg7.length) 
            {
                __reg6 = __reg7[__reg5];
                if (__reg6.nodeName == "item") 
                {
                    var __reg4 = __reg6.childNodes;
                    var __reg3 = null;
                    var __reg2 = 0;
                    while (__reg2 < __reg4.length) 
                    {
                        __reg3 = __reg4[__reg2];
                        if (__reg3.nodeName == "name") 
                        {
                            this.searchedItems[__reg5] = __reg3.firstChild.nodeValue;
                        }
                        ++__reg2;
                    }
                    __reg3 = null;
                    __reg4 = null;
                }
                ++__reg5;
            }
        }
        if (this.searchedItems.length >= 0) 
        {
            this.displayResults();
        }
        __reg7 = null;
        __reg6 = null;
    }

    function xmlTimeOut()
    {
        this.clearTimeOutId();
        this.resetDropDown();
    }

    function clearTimeOutId()
    {
        clearInterval(this.xmlTimeOutId);
        this.xmlTimeOutId = -1;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 40) 
        {
            this.itemUnhighlight();
            if (this.itemIdx < this.searchedItems.length - 1) 
            {
                ++this.itemIdx;
                if (this.selectorIdx < 7) 
                {
                    ++this.selectorIdx;
                }
                else 
                {
                    this.textFieldContainerMC._y = this.textFieldContainerMC._y - this.txtFieldGapY;
                    ++this.bottomItemIdx;
                    ++this.topItemIdx;
                }
                this.inputText.htmlText = this.searchedItems[this.itemIdx];
                this.itemHighlight();
            }
            else 
            {
                this.inputText.htmlText = this.actualInputTxt;
                this.disable();
                this.inputTextFieldEvent.notify("onSwitchDown");
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            this.itemUnhighlight();
            if (this.itemIdx > 0) 
            {
                --this.itemIdx;
                if (this.selectorIdx > 0) 
                {
                    --this.selectorIdx;
                }
                else 
                {
                    --this.topItemIdx;
                    --this.bottomItemIdx;
                    this.textFieldContainerMC._y = this.textFieldContainerMC._y + this.txtFieldGapY;
                }
                this.inputText.htmlText = this.searchedItems[this.itemIdx];
            }
            this.itemHighlight();
            return;
        }
        else if (__reg0 === 39) 
        {
            this.disable();
            this.inputText.htmlText = this.actualInputTxt;
            this.inputTextFieldEvent.notify("onSwitchRight");
            return;
        }
        else if (__reg0 === 13) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.inputTextFieldEvent.notify("onEnterPressed", this.removeSpaces(this.searchedItems[this.itemIdx]), this.searchedItems[this.itemIdx]);
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.inputTextFieldEvent.notify("onBackPressed");
        return;
    }

    function removeSpaces(inputString)
    {
        var __reg3 = "";
        var __reg4 = "";
        var __reg2 = 0;
        while (__reg2 < inputString.length) 
        {
            if (inputString.charAt(__reg2) == " ") 
            {
                if (__reg3.charAt(__reg3.length - 1) != " ") 
                {
                    __reg3 = __reg3 + " ";
                    __reg4 = __reg4 + "8912";
                }
            }
            else 
            {
                __reg3 = __reg3 + this.inputText.htmlText.charAt(__reg2);
                __reg4 = __reg4 + this.inputText.htmlText.charAt(__reg2);
            }
            ++__reg2;
        }
        return __reg4;
    }

    function getInputText()
    {
        return this.inputText.htmlText;
    }

    function getSearchString()
    {
        return this.searchString;
    }

    function enable()
    {
        if (!this.resultsAvailable) 
        {
            this.inputTextFieldEvent.notify("onSwitchBack");
            return;
        }
        this.itemHighlight();
        this.actualInputTxt = this.inputText.htmlText;
        this.inputText.htmlText = this.searchedItems[this.itemIdx];
        this.txtFieldSelectorMC._visible = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function disable()
    {
        this.itemUnhighlight();
        this.txtFieldSelectorMC._visible = false;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
    }

    function showCursor()
    {
        this.cursorMC._visible = true;
    }

    function hideCursor()
    {
        this.cursorMC._visible = false;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onInputTextFieldEvent") 
        {
            this.inputTextFieldEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function setScrollArrows()
    {
        this.dropDownBaseMC.upArrowMC._visible = true;
        this.dropDownBaseMC.downArrowMC._visible = true;
        if (this.searchedItems.length <= this.maxItemsonPage || (this.bottomItemIdx == this.searchedItems.length && this.topItemIdx == this.searchedItems.length - this.maxItemsonPage)) 
        {
            this.dropDownBaseMC.downArrowMC._visible = false;
        }
        if (this.textFieldContainerMC._y == 0) 
        {
            this.dropDownBaseMC.upArrowMC._visible = false;
        }
    }

    function resetDropDown()
    {
        this.itemIdx = 0;
        this.selectorIdx = 0;
        this.textFieldContainerMC._y = 0;
        this.txtFieldSelectorMC._y = 0;
        this.bottomItemIdx = this.maxItemsonPage;
        this.topItemIdx = 0;
        var __reg2 = 0;
        while (__reg2 < this.maxResults) 
        {
            this.resultTextFields[__reg2].setHtmlText("");
            ++__reg2;
        }
        this.resultsAvailable = false;
        this.dropDownBaseMC.upArrowMC._visible = false;
        this.dropDownBaseMC.downArrowMC._visible = false;
        __reg2 = null;
    }

}

//Sprite 693
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubeLinkParser
{
    var getYoutubeVideoInfo = null;
    var fn = null;
    var videoResponseTxt = null;
    var onLinkReady = null;
    var onLinkError = null;
    var onNetDown = null;
    var loadTimerId: Number = -1;

    function YoutubeLinkParser()
    {
        this.fn = {onGetYoutubeVideoInfo: mx.utils.Delegate.create(this, this.onGetYoutubeVideoInfo)};
        this.onLinkReady = new com.BigRoom.Event();
        this.onLinkError = new com.BigRoom.Event();
        this.onNetDown = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onLinkReady") 
        {
            this.onLinkReady.addListener(obj, method);
            return;
        }
        if (eventName == "onLinkError") 
        {
            this.onLinkError.addListener(obj, method);
            return;
        }
        if (eventName == "onNetDown") 
        {
            this.onNetDown.addListener(obj, method);
        }
    }

    function removeListener(eventName, object, method)
    {
        if (eventName == "onLinkReady") 
        {
            this.onLinkReady.removeListener(object, method);
            return;
        }
        if (eventName == "onLinkError") 
        {
            this.onLinkError.removeListener(object, method);
            return;
        }
        if (eventName == "onNetDown") 
        {
            this.onNetDown.removeListener(object, method);
        }
    }

    function destroy()
    {
        clearInterval(this.loadTimerId);
        this.loadTimerId = -1;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.onLinkError != null) 
        {
            delete this.onLinkError;
            this.onLinkError = null;
        }
        if (this.onLinkReady != null) 
        {
            delete this.onLinkReady;
            this.onLinkReady = null;
        }
        if (this.onNetDown != null) 
        {
            delete this.onNetDown;
            this.onNetDown = null;
        }
        this.fn = null;
    }

    function parsePlayableLink(streamLink)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Parsing_Playable_Link_" + streamLink);
        }
        this.calculateYoutubeURL(streamLink);
        streamLink = null;
    }

    function calculateYoutubeURL(streamLink)
    {
        var __reg2 = null;
        __reg2 = streamLink;
        if (__reg2 == "INVALID_VIDEO_ID") 
        {
            this.onLinkError.notify(null);
        }
        else 
        {
            this.getLinkInfo(__reg2);
        }
        __reg2 = null;
        streamLink = null;
    }

    function getVideoID(streamLink)
    {
        var __reg1 = undefined;
        var __reg2 = undefined;
        var __reg4 = undefined;
        var __reg3 = streamLink.split("&");
        __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg2 = __reg3[__reg1].indexOf("v=");
            if (__reg2 == -1) 
            {
                __reg2 = __reg3[__reg1].indexOf("v/");
            }
            if (__reg2 != -1) 
            {
                break;
            }
            ++__reg1;
        }
        if (__reg2 == -1) 
        {
            __reg4 = "INVALID_VIDEO_ID";
        }
        else 
        {
            __reg4 = __reg3[__reg1].slice(__reg2 + 2, __reg3[__reg1].length);
        }
        __reg1 = null;
        __reg2 = null;
        __reg3 = null;
        streamLink = null;
        return __reg4;
    }

    function getLinkInfo(youtubeVideoID)
    {
        var __reg2 = "http://www.youtube.com/watch?v=";
        if (this.getYoutubeVideoInfo != null) 
        {
            delete this.getYoutubeVideoInfo;
            this.getYoutubeVideoInfo = null;
        }
        this.getYoutubeVideoInfo = new LoadVars();
        this.getYoutubeVideoInfo.onData = this.fn.onGetYoutubeVideoInfo;
        this.getYoutubeVideoInfo.load(__reg2 + youtubeVideoID);
        this.loadTimerId = setInterval(this, "onLinkResponseTimeout", com.jadoo.as2.JadooPlus.Utils.Config.userProfileXmlTimeOutDuration);
        __reg2 = null;
        youtubeVideoID = null;
    }

    function onLinkResponseTimeout()
    {
        clearInterval(this.loadTimerId);
        this.loadTimerId = -1;
        this.onLinkError.notify("Unable to load requested content");
    }

    function onGetYoutubeVideoInfo(data)
    {
        var __reg2 = this.decodeVideoResponse(data);
        if (__reg2 == "INVALID_RESPONSE") 
        {
            var __reg3 = this.parseError();
            this.onLinkError.notify(__reg3);
            __reg3 = null;
        }
        else if (__reg2 == "VIDEO_NOT_AVAILABLE") 
        {
            this.onLinkError.notify("Content not available");
        }
        else 
        {
            this.onLinkReady.notify(__reg2);
        }
        __reg2 = null;
        data = null;
    }

    function parseError()
    {
        var __reg2 = this.videoResponseTxt.indexOf("<h1 id=\"unavailable-message\" class=\"message\">");
        if (__reg2 == -1) 
        {
            this.videoResponseTxt = "Video not available!";
        }
        else 
        {
            this.videoResponseTxt = this.videoResponseTxt.substring(__reg2 + 45);
            var __reg3 = this.videoResponseTxt.indexOf("<");
            this.videoResponseTxt = this.videoResponseTxt.substring(0, __reg3);
        }
        __reg2 = null;
        __reg3 = null;
        return this.videoResponseTxt;
    }

    function decodeVideoResponse(videoResponseTxt)
    {
        var __reg7 = undefined;
        var __reg21 = null;
        var __reg18 = new Array();
        var __reg22 = null;
        var __reg19 = new Array();
        var __reg13 = ["22", "18", "17", "36", "37"];
        var __reg10 = -1;
        var __reg14 = null;
        var __reg24 = new Array();
        var __reg23 = null;
        this.videoResponseTxt = videoResponseTxt;
        if (videoResponseTxt == null || videoResponseTxt == undefined) 
        {
            __reg14 = "VIDEO_NOT_AVAILABLE";
        }
        else 
        {
            var __reg20 = new Object();
            var __reg11 = new Array();
            var __reg17 = videoResponseTxt.indexOf("url_encoded_fmt_stream_map");
            if (__reg17 > 0) 
            {
                var __reg15 = videoResponseTxt.substring(__reg17 + 31);
                __reg15 = __reg15.substring(0, __reg15.indexOf("\""));
                __reg15 = com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubeLinkParser.replace(__reg15, "\\u0026", "&");
                __reg15 = com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubeLinkParser.replace(__reg15, "\\", "");
                var __reg12 = __reg15.split(",");
                if (__reg12.length > 0) 
                {
                    var __reg4 = null;
                    var __reg2 = null;
                    var __reg8 = null;
                    var __reg9 = null;
                    var __reg5 = null;
                    __reg7 = null;
                    var __reg6 = 0;
                    while (__reg6 < __reg12.length) 
                    {
                        __reg4 = __reg12[__reg6].split("&");
                        var __reg3 = 0;
                        while (__reg3 < __reg4.length) 
                        {
                            __reg2 = __reg4[__reg3].split("=");
                            if (__reg2.length == 2) 
                            {
                                if (__reg2[0] == "itag") 
                                {
                                    __reg8 = unescape(__reg2[1]);
                                }
                                else if (__reg2[0] == "url") 
                                {
                                    __reg9 = unescape(__reg2[1]);
                                }
                                else if (__reg2[0] == "sig") 
                                {
                                    __reg5 = unescape(__reg2[1]);
                                }
                                __reg2 = null;
                            }
                            ++__reg3;
                        }
                        if (__reg9 != null && __reg8 != null) 
                        {
                            if (__reg5 != null) 
                            {
                                __reg9 = __reg9 + "&signature=" + __reg5;
                            }
                            __reg11.push({itag: __reg8, url: __reg9});
                        }
                        else 
                        {
                            __reg14 = "VIDEO_NOT_AVAILABLE";
                        }
                        __reg8 = null;
                        __reg9 = null;
                        __reg5 = null;
                        __reg4 = null;
                        ++__reg6;
                    }
                    __reg4 = null;
                    __reg8 = null;
                    __reg9 = null;
                    __reg15 = null;
                    __reg7 = null;
                }
                else 
                {
                    __reg14 = "INVALID_RESPONSE";
                }
                __reg12 = null;
            }
            else 
            {
                __reg14 = "INVALID_RESPONSE";
            }
            if (__reg14 != "INVALID_RESPONSE") 
            {
                __reg7 = 0;
                while (__reg7 < __reg13.length) 
                {
                    __reg10 = this.searchFormatString(__reg11, __reg13[__reg7]);
                    if (__reg10 != -1) 
                    {
                        break;
                    }
                    ++__reg7;
                }
                if (__reg10 != -1) 
                {
                    __reg14 = __reg11[__reg10].url;
                }
            }
            false;
            __reg11 = null;
            false;
            __reg20 = null;
            __reg17 = null;
        }
        __reg7 = null;
        __reg21 = null;
        false;
        __reg18 = null;
        __reg22 = null;
        false;
        __reg19 = null;
        __reg10 = null;
        __reg13 = null;
        __reg24 = null;
        __reg23 = null;
        videoResponseTxt = null;
        return __reg14;
    }

    function searchFormatString(directLinks, formatId)
    {
        var __reg1 = undefined;
        var __reg3 = -1;
        __reg1 = 0;
        while (__reg1 < directLinks.length) 
        {
            if (directLinks[__reg1].itag == formatId) 
            {
                __reg3 = __reg1;
                break;
            }
            ++__reg1;
        }
        __reg1 = null;
        formatId = null;
        directLinks = null;
        return __reg3;
    }

    static function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        if (netStatus == "Down") 
        {
            this.onNetDown.notify(netErrorStr);
        }
    }

}

//Sprite 694
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser
{
    var getDailymotionVideoInfo = null;
    var fn = null;
    var videoResponseTxt = null;
    var onLinkReady = null;
    var onLinkError = null;
    var onNetDown = null;
    var responseData = null;
    var xml = null;
    var loadTimerId: Number = -1;

    function DailymotionLinkParser()
    {
        this.fn = {onGetDailymotionVideoInfo: mx.utils.Delegate.create(this, this.onGetDailymotionVideoInfo)};
        this.onLinkReady = new com.BigRoom.Event();
        this.onLinkError = new com.BigRoom.Event();
        this.onNetDown = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onLinkReady") 
        {
            this.onLinkReady.addListener(obj, method);
            return;
        }
        if (eventName == "onLinkError") 
        {
            this.onLinkError.addListener(obj, method);
            return;
        }
        if (eventName == "onNetDown") 
        {
            this.onNetDown.addListener(obj, method);
        }
    }

    function removeListener(eventName, object, method)
    {
        if (eventName == "onLinkReady") 
        {
            this.onLinkReady.removeListener(object, method);
            return;
        }
        if (eventName == "onLinkError") 
        {
            this.onLinkError.removeListener(object, method);
            return;
        }
        if (eventName == "onNetDown") 
        {
            this.onNetDown.removeListener(object, method);
        }
    }

    function destroy()
    {
        clearInterval(this.loadTimerId);
        this.loadTimerId = -1;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.onLinkError != null) 
        {
            delete this.onLinkError;
            this.onLinkError = null;
        }
        if (this.onLinkReady != null) 
        {
            delete this.onLinkReady;
            this.onLinkReady = null;
        }
        if (this.responseData != null) 
        {
            delete this.responseData;
            this.responseData = null;
        }
        if (this.onNetDown != null) 
        {
            delete this.onNetDown;
            this.onNetDown = null;
        }
        this.fn = null;
    }

    function parsePlayableLink(dailymotionVideoURL)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Parsing_Playable_Link_" + dailymotionVideoURL);
        }
        if (this.getDailymotionVideoInfo != null) 
        {
            delete this.getDailymotionVideoInfo;
            this.getDailymotionVideoInfo = null;
        }
        this.getDailymotionVideoInfo = new LoadVars();
        this.getDailymotionVideoInfo.onData = this.fn.onGetDailymotionVideoInfo;
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.getDailymotionVideoInfo.load(dailymotionVideoURL);
        this.loadTimerId = setInterval(this, "onLinkResponseTimeout", com.jadoo.as2.JadooPlus.Utils.Config.userProfileXmlTimeOutDuration);
        dailymotionVideoURL = null;
    }

    function onLinkResponseTimeout()
    {
        clearInterval(this.loadTimerId);
        this.loadTimerId = -1;
        this.onLinkError.notify("Unable to load requested content");
    }

    function onGetDailymotionVideoInfo(data)
    {
        if (data != undefined || data != null) 
        {
            var __reg2 = null;
            __reg2 = this.getDailymotionVideoUrlWithOldResponse(data);
            if (__reg2 == null || __reg2 == undefined) 
            {
                __reg2 = this.getDailymotionVideoUrlWithNewResponse(data);
            }
            __reg2 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(__reg2, "\\", "");
            if (__reg2 != null || __reg2 != undefined) 
            {
                this.onLinkReady.notify(__reg2);
            }
            else 
            {
                this.onLinkError.notify("Content not available");
            }
            __reg2 = null;
        }
        else 
        {
            this.onLinkError.notify("Unable to load requested content");
        }
        data = null;
        this.responseData = null;
    }

    function getDailymotionVideoUrlWithOldResponse(data)
    {
        var __reg8 = undefined;
        var __reg11 = undefined;
        var __reg9 = null;
        var __reg6 = null;
        var __reg5 = null;
        var __reg12 = null;
        var __reg4 = null;
        var __reg3 = null;
        __reg8 = data.indexOf("var info = ");
        if (__reg8 != -1) 
        {
            __reg11 = data.indexOf("fields", __reg8);
            __reg9 = unescape(data.slice(__reg8 + 12, __reg11));
            __reg6 = __reg9.split(",");
            this.responseData = new Object();
            var __reg2 = 0;
            while (__reg2 < __reg6.length) 
            {
                __reg5 = __reg6[__reg2].split(":\"");
                __reg4 = __reg5[0];
                __reg4 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(__reg4, "\"", "");
                __reg3 = __reg5[1];
                __reg3 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(__reg3, "\"", "");
                this.responseData[__reg4] = __reg3;
                ++__reg2;
            }
            var __reg7 = null;
            if (this.responseData.stream_h264_hd_url != null && this.responseData.stream_h264_hd_url != undefined) 
            {
                __reg7 = this.responseData.stream_h264_hd_url;
            }
            else if (this.responseData.stream_h264_hq_url != null && this.responseData.stream_h264_hq_url != undefined) 
            {
                __reg7 = this.responseData.stream_h264_hq_url;
            }
            else if (this.responseData.stream_h264_url != null && this.responseData.stream_h264_url != undefined) 
            {
                __reg7 = this.responseData.stream_h264_url;
            }
            else if (this.responseData.stream_h264_ld_url != null && this.responseData.stream_h264_ld_url != undefined) 
            {
                __reg7 = this.responseData.stream_h264_ld_url;
            }
            __reg7 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(__reg7, "\\", "");
            data = null;
            __reg8 = null;
            __reg11 = null;
            __reg9 = null;
            this.responseData = null;
            __reg6 = null;
            __reg5 = null;
            __reg12 = null;
            __reg4 = null;
            __reg3 = null;
            return __reg7;
        }
    }

    function getDailymotionVideoUrlWithNewResponse(data)
    {
        var __reg4 = undefined;
        var __reg7 = undefined;
        var __reg5 = null;
        __reg4 = data.indexOf("\"qualities\"");
        if (__reg4 != -1) 
        {
            __reg7 = data.indexOf("\"sharing\"", __reg4);
            __reg5 = unescape(data.slice(__reg4 + 12, __reg7 - 1));
            var __reg1 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg5);
            var __reg3 = null;
            var __reg2 = null;
            if (__reg1["720"] != null && __reg1["720"] != undefined) 
            {
                __reg2 = __reg1["720"];
                __reg3 = __reg2["0"].url;
            }
            else if (__reg1["480"] != null && __reg1["480"] != undefined) 
            {
                __reg2 = __reg1["480"];
                __reg3 = __reg2["0"].url;
            }
            else if (__reg1["380"] != null && __reg1["380"] != undefined) 
            {
                __reg2 = __reg1["380"];
                __reg3 = __reg2["0"].url;
            }
            else if (__reg1["240"] != null && __reg1["240"] != undefined) 
            {
                __reg2 = __reg1["240"];
                __reg3 = __reg2["0"].url;
            }
            data = null;
            __reg4 = null;
            __reg7 = null;
            __reg5 = null;
            __reg1 = null;
            __reg2 = null;
            return __reg3;
        }
    }

    function decodeLink(url)
    {
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%25", "%");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "http%3A%2F%2F", "http://");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%3F", "?");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%2F", "/");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%3D", "=");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%26", "&");
        url = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionLinkParser.replace(url, "%252C", "%2C");
        return url;
    }

    static function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        if (netStatus == "Down") 
        {
            this.onNetDown.notify(netErrorStr);
        }
    }

}

//Sprite 695
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Player.ContentPlayer.XmlPlaylist
{
    var parentMC = null;
    var loadingMC = null;
    var xml = null;
    var trackerXml = null;
    var ipResolverXml = null;
    var playContinuous = null;
    var currentCategoryTitle = null;
    var contentType = null;
    var epgLink = null;
    var pageTitle = null;
    var pageId = null;
    var isPrevious: Boolean = false;
    var isNext: Boolean = false;
    var resumeVod: Boolean = false;
    var nextPrevEnabled: Boolean = false;
    var forcedStop: Boolean = false;
    var isTrackerXmlLoaded: Boolean = false;
    var currentCategoryIdx = null;
    var currentChannelIdx = null;
    var trackerTimerId: Number = -1;
    var playlistItemIdx = null;
    var moviePartIdx = null;
    var adLoadVars = null;
    var playlistItems = null;
    var fn = null;
    var onXmlPlaylistEvent = null;
    var currentItem = null;
    var tempItem = null;
    var contentPlayer = null;
    var livePlayer = null;
    var xmlInvoker = null;
    var pingLink1: String = "/system?arg0=get_connection_status&arg1=ping&arg2=";
    var pingLink2: String = "&arg3=c2&arg4=w2";
    var destinationIP = null;
    var hostName = null;
    var isAdChannel: Boolean = false;

    function XmlPlaylist()
    {
        this.fn = {onLoadPlaylist: mx.utils.Delegate.create(this, this.onLoadPlaylist), onTrackerHttpResponse: mx.utils.Delegate.create(this, this.onTrackerHttpResponse), onPingResponse: mx.utils.Delegate.create(this, this.onPingResponse)};
        this.onXmlPlaylistEvent = new com.BigRoom.Event();
    }

    function destroy()
    {
        this.removeLoadingMC();
        clearInterval(this.trackerTimerId);
        delete this.onXmlPlaylistEvent;
        this.onXmlPlaylistEvent = null;
        delete this.fn;
        this.fn = null;
        this.forcedStop = null;
        this.isTrackerXmlLoaded = null;
        if (this.playlistItems != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.playlistItems.length) 
            {
                delete this.playlistItems[__reg2];
                this.playlistItems[__reg2] = null;
                ++__reg2;
            }
            delete this.playlistItems;
            this.playlistItems = null;
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onLoadPlaylist);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        if (this.tempItem != null) 
        {
            this.tempItem.destroy();
            delete this.tempItem;
            this.tempItem = null;
        }
        if (this.trackerXml != null) 
        {
            delete this.trackerXml;
            this.trackerXml = null;
        }
        this.playContinuous = null;
        this.parentMC = null;
    }

    function create(parentMC, currentItem, playContinuous, currentCategoryIdx, currentChannelIdx, nextPrevEnabled, contentType, resumeVod, epgLink, pageTitle, pageId, isAdChannel)
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("XML_Playlist_" + currentItem.streamLink);
        }
        this.parentMC = parentMC;
        this.currentItem = currentItem;
        this.playContinuous = playContinuous;
        this.currentCategoryIdx = currentCategoryIdx;
        this.currentChannelIdx = currentChannelIdx;
        this.contentType = contentType;
        this.resumeVod = resumeVod;
        this.nextPrevEnabled = nextPrevEnabled;
        this.epgLink = epgLink;
        this.pageTitle = pageTitle;
        this.pageId = pageId;
        this.isAdChannel = isAdChannel;
        this.displayLoadingMC();
        this.loadPlaylist();
        parentMC = null;
        currentItem = null;
        playContinuous = null;
        currentCategoryIdx = null;
        currentChannelIdx = null;
        nextPrevEnabled = null;
        contentType = null;
        resumeVod = null;
        epgLink = null;
        pageTitle = null;
        pageId = null;
        isAdChannel = null;
    }

    function loadPlaylist()
    {
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onLoadPlaylist);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.onLoadPlaylist);
        this.xmlInvoker.loadXML(this.currentItem.streamLink, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, false, true);
    }

    function onLoadPlaylist()
    {
        var __reg12 = arguments[0];
        var __reg13 = arguments[1];
        var __reg14 = arguments[2];
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            if (__reg12) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("XML_Playlist_Loaded_" + this.xmlInvoker.getXmlObject().toString());
            }
            else if (__reg13) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("XML_Playlist_Timeout");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("XML_Playlist_Error");
            }
        }
        if (__reg12) 
        {
            this.xml = this.xmlInvoker.getXmlObject();
            this.playlistItems = new Array();
            var __reg11 = 0;
            var __reg10 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/DAGPlaylist").childNodes;
            var __reg8 = null;
            var __reg6 = null;
            var __reg17 = null;
            var __reg16 = null;
            var __reg15 = null;
            var __reg5 = 0;
            while (__reg5 < __reg10.length) 
            {
                __reg6 = new Object();
                __reg8 = __reg10[__reg5];
                if (__reg8.nodeName == "Entry") 
                {
                    __reg6.type = __reg8.attributes.type;
                    var __reg7 = __reg8.childNodes;
                    var __reg3 = null;
                    var __reg4 = 0;
                    while (__reg4 < __reg7.length) 
                    {
                        __reg3 = __reg7[__reg4];
                        if (__reg3.nodeName == "Duration") 
                        {
                            __reg6.duration = __reg3.attributes.value;
                        }
                        else if (__reg3.nodeName == "Ref") 
                        {
                            __reg6.link = __reg3.firstChild.nodeValue;
                        }
                        ++__reg4;
                    }
                    this.playlistItems[__reg11] = __reg6;
                    ++__reg11;
                    __reg7 = null;
                    __reg3 = null;
                }
                ++__reg5;
            }
            if (this.playlistItems.length > 0) 
            {
                if (this.resumeVod) 
                {
                    var __reg9 = 0;
                    __reg5 = 0;
                    while (__reg5 < this.playlistItems.length) 
                    {
                        if (this.playlistItems[__reg5].type == "http-wmv" || this.playlistItems[__reg5].type == "http-flv" || this.playlistItems[__reg5].type == "hls-vod" || this.playlistItems[__reg5].type == "http-mp4") 
                        {
                            ++__reg9;
                            if (__reg9 == com.jadoo.as2.JadooPlus.Features.ResumeVOD.getResumeVODPartIdx(this.currentItem.itemId)) 
                            {
                                this.playlistItemIdx = __reg5;
                                this.moviePartIdx = __reg9;
                            }
                        }
                        ++__reg5;
                    }
                    __reg9 = null;
                    __reg5 = null;
                }
                else 
                {
                    this.playlistItemIdx = 0;
                }
            }
            this.startPlayback();
            __reg10 = null;
            __reg8 = null;
            __reg6 = null;
        }
        else if (__reg13) 
        {
            this.onXmlPlaylistEvent.notify("xmlPlaylistError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER);
        }
        else 
        {
            this.onXmlPlaylistEvent.notify("xmlPlaylistError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_INITIALIZE_PLAYER);
        }
        delete this.xml;
        this.xml = null;
        __reg12 = null;
        __reg13 = null;
        __reg14 = null;
    }

    function setTempItem()
    {
        if (this.tempItem != null) 
        {
            this.tempItem.destroy();
            delete this.tempItem;
            this.tempItem = null;
        }
        this.tempItem = new com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem();
        this.tempItem.itemLink = this.currentItem.itemLink;
        this.tempItem.itemId = this.currentItem.itemId;
        if ((__reg0 = this.playlistItems[this.playlistItemIdx].type) === "ad") 
        {
            this.tempItem.itemName = "ad";
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "ad-wmv") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "ad-wmv") 
        {
            this.tempItem.itemName = "ad";
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "ad-wmv") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "ad-mp4") 
        {
            this.tempItem.itemName = "ad";
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "ad-wmv") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "http-wmv") 
        {
            this.tempItem.itemName = this.currentItem.itemName;
            this.tempItem.responseLink = this.currentItem.responseLink;
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "http-wmv" || this.playlistItems[this.playlistItemIdx].type == "hls-vod") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "http-flv") 
        {
            this.tempItem.itemName = this.currentItem.itemName;
            this.tempItem.responseLink = this.currentItem.responseLink;
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "http-wmv" || this.playlistItems[this.playlistItemIdx].type == "hls-vod") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "http-mp4") 
        {
            this.tempItem.itemName = this.currentItem.itemName;
            this.tempItem.responseLink = this.currentItem.responseLink;
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "http-wmv" || this.playlistItems[this.playlistItemIdx].type == "hls-vod") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 === "hls-vod") 
        {
            this.tempItem.itemName = this.currentItem.itemName;
            this.tempItem.responseLink = this.currentItem.responseLink;
            this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
            if (this.playlistItems[this.playlistItemIdx].type == "http-wmv" || this.playlistItems[this.playlistItemIdx].type == "hls-vod") 
            {
                this.tempItem.itemType = "wmv";
            }
            else 
            {
                this.tempItem.itemType = "flv";
            }
            return;
        }
        else if (__reg0 !== "rtmp-live") 
        {
            if (__reg0 !== "hls-live") 
            {
                if (__reg0 !== "wms-live") 
                {
                    if (__reg0 !== "rtsp") 
                    {
                        if (__reg0 !== "http") 
                        {
                            return;
                        }
                    }
                }
            }
        }
        this.tempItem.itemName = this.currentItem.itemName;
        this.tempItem.categoryId = this.currentItem.categoryId;
        this.tempItem.responseLink = this.currentItem.responseLink;
        this.tempItem.ofpDuration = this.currentItem.ofpDuration;
        this.tempItem.ofpPingDelay = this.currentItem.ofpPingDelay;
        this.tempItem.ofpPingLink = this.currentItem.ofpPingLink;
        this.tempItem.ofpEnabled = this.currentItem.ofpEnabled;
        this.tempItem.streamLink = this.playlistItems[this.playlistItemIdx].link;
        if (this.playlistItems[this.playlistItemIdx].type == "rtmp-live") 
        {
            this.tempItem.itemType = "liveRTMP";
        }
        else 
        {
            this.tempItem.itemType = "liveWMV";
        }
        return;
    }

    function startPlayback()
    {
        var __reg2 = this.playlistItems[this.playlistItemIdx].type;
        if ((__reg0 = __reg2) === "ad") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "ad-wmv") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "ad-mp4") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "http-wmv") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "http-flv") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "http-mp4") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "hls-vod") 
        {
            this.setTempItem();
            this.contentPlayer = new com.jadoo.as2.JadooPlus.Player.ContentPlayer.ContentPlayer();
            this.contentPlayer.onError.addListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.addListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.addListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.addListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.addListener(this, this.onContentPlayerEndPlayback);
            this.removeLoadingMC();
            if (__reg2 == "ad" || __reg2 == "ad-mp4" || __reg2 == "ad-wmv") 
            {
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, "no", this.playlistItems[this.playlistItemIdx].duration, null, null, null);
            }
            else if (__reg2 == "http-wmv" || __reg2 == "http-flv" || __reg2 == "http-mp4" || __reg2 == "hls-vod") 
            {
                if (this.contentType == "movies" && this.moviePartIdx == null) 
                {
                    this.moviePartIdx = 1;
                }
                this.contentPlayer.create(this.parentMC.vodPlayerMC, this.tempItem, this.playContinuous, this.playlistItems[this.playlistItemIdx].duration, this.resumeVod, this.contentType, this.moviePartIdx);
                ++this.moviePartIdx;
            }
            this.contentPlayer.play();
            this.onXmlPlaylistEvent.notify("onStartPlayback");
        }
        else if (__reg0 === "tracker") 
        {
            var __reg3 = this.playlistItems[this.playlistItemIdx].link;
            this.displayLoadingMC();
            this.isTrackerXmlLoaded = false;
            if (this.trackerXml != null) 
            {
                this.trackerXml.onData = null;
                this.trackerXml.onHTTPStatus = null;
                this.trackerXml = null;
            }
            this.trackerXml = new XML();
            this.trackerXml.onHTTPStatus = this.fn.onTrackerHttpResponse;
            this.trackerXml.load(__reg3);
            this.trackerTimerId = setInterval(this, "onTrackerTimeOut", 5000);
            __reg3 = null;
        }
        else if (__reg0 === "rtmp-live") 
        {
            if (__reg2 == "hls-live") 
            {
                this.resolveIP(this.playlistItems[this.playlistItemIdx].link);
            }
            else 
            {
                this.initializeStreaming();
            }
        }
        else if (__reg0 === "hls-live") 
        {
            if (__reg2 == "hls-live") 
            {
                this.resolveIP(this.playlistItems[this.playlistItemIdx].link);
            }
            else 
            {
                this.initializeStreaming();
            }
        }
        else if (__reg0 === "wms-live") 
        {
            if (__reg2 == "hls-live") 
            {
                this.resolveIP(this.playlistItems[this.playlistItemIdx].link);
            }
            else 
            {
                this.initializeStreaming();
            }
        }
        else if (__reg0 === "rtsp") 
        {
            if (__reg2 == "hls-live") 
            {
                this.resolveIP(this.playlistItems[this.playlistItemIdx].link);
            }
            else 
            {
                this.initializeStreaming();
            }
        }
        else if (__reg0 === "http") 
        {
            if (__reg2 == "hls-live") 
            {
                this.resolveIP(this.playlistItems[this.playlistItemIdx].link);
            }
            else 
            {
                this.initializeStreaming();
            }
        }
        else 
        {
            this.onXmlPlaylistEvent.notify("xmlPlaylistError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT);
        }
        __reg2 = null;
    }

    function initializeStreaming()
    {
        this.setTempItem();
        this.livePlayer = new com.jadoo.as2.JadooPlus.Player.LivePlayer.LivePlayer();
        this.livePlayer.onPlayerEvent.addListener(this, this.onLivePlayerEvent);
        this.removeLoadingMC();
        this.livePlayer.create(this.parentMC, this.tempItem, this.currentCategoryIdx, this.currentChannelIdx, this.nextPrevEnabled, this.playlistItems[this.playlistItemIdx].duration, this.epgLink, this.pageTitle, this.pageId, this.isAdChannel);
        this.livePlayer.streamPlay();
        this.onXmlPlaylistEvent.notify("onStartPlayback");
    }

    function resolveIP(link)
    {
        var __reg3 = -1;
        var __reg2 = 0;
        while (__reg2 < link.length) 
        {
            __reg3 = link.indexOf("&host=");
            if (__reg3 != -1) 
            {
                break;
            }
            ++__reg2;
        }
        if (__reg3 == -1) 
        {
            this.initializeStreaming();
            return undefined;
        }
        this.hostName = link.slice(__reg3 + 6);
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("HostName_" + this.hostName);
        }
        if (this.ipResolverXml != null) 
        {
            delete this.ipResolverXml;
            this.ipResolverXml = null;
        }
        this.ipResolverXml = new XML();
        this.ipResolverXml.ignoreWhite = true;
        this.ipResolverXml.onLoad = this.fn.onPingResponse;
        this.ipResolverXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + this.pingLink1 + this.hostName + this.pingLink2);
        link = null;
        __reg3 = null;
    }

    function onPingResponse(success)
    {
        if (success) 
        {
            var __reg5 = -1;
            var __reg6 = -1;
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.ipResolverXml.firstChild, "/theDavidBox/response/result").firstChild.nodeValue;
            var __reg4 = 0;
            while (__reg4 < __reg2.length) 
            {
                __reg5 = __reg2.indexOf("(");
                if (__reg5 != -1) 
                {
                    break;
                }
                ++__reg4;
            }
            var __reg3 = 0;
            while (__reg3 < __reg2.length) 
            {
                __reg6 = __reg2.indexOf(")", __reg5 + 1);
                if (__reg6 != -1) 
                {
                    break;
                }
                ++__reg3;
            }
            this.destinationIP = __reg2.slice(__reg5 + 1, __reg6);
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Destination_IP_" + this.destinationIP);
            }
            var __reg7 = this.playlistItems[this.playlistItemIdx].link;
            __reg7 = com.jadoo.as2.JadooPlus.Player.ContentPlayer.XmlPlaylist.replace(__reg7, "/" + this.hostName + "/", "/" + this.destinationIP + "/");
            this.playlistItems[this.playlistItemIdx].link = __reg7;
            this.initializeStreaming();
            __reg4 = null;
            __reg3 = null;
            __reg5 = null;
            __reg6 = null;
            __reg2 = null;
            __reg7 = null;
            return;
        }
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_PLAYBACK) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Destination_IP_Resloution_Failed");
        }
        this.onXmlPlaylistEvent.notify("xmlPlaylistError", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_PLAY_REQUESTED_CONTENT);
    }

    function onTrackerHttpResponse(response)
    {
        clearInterval(this.trackerTimerId);
        this.trackerTimerId = -1;
        this.isTrackerXmlLoaded = true;
        delete this.trackerXml;
        this.trackerXml = null;
        this.checkPlaylist();
        response = null;
    }

    function onTrackerTimeOut()
    {
        if (this.isTrackerXmlLoaded) 
        {
            return;
        }
        clearInterval(this.trackerTimerId);
        this.trackerTimerId = -1;
        this.trackerXml.onHTTPStatus = null;
        this.trackerXml.onData = null;
        this.trackerXml = null;
        this.checkPlaylist();
    }

    function onContentPlayerError()
    {
        this.stopPlayback();
        if (this.playlistItems[this.playlistItemIdx].type == "ad" || this.playlistItems[this.playlistItemIdx].type == "ad-wmv" || this.playlistItems[this.playlistItemIdx].type == "ad-mp4") 
        {
            this.checkPlaylist();
            return;
        }
        this.onXmlPlaylistEvent.notify("onContentPlayerError", arguments[0]);
    }

    function onContentPlayerStop()
    {
        this.stopPlayback();
        if (this.forcedStop) 
        {
            this.onXmlPlaylistEvent.notify("endXmlPlaylist");
            return;
        }
        if (this.playlistItemIdx < this.playlistItems.length - 1 && !this.isPrevious && !this.isNext && !arguments[0]) 
        {
            this.checkPlaylist();
            return;
        }
        this.onXmlPlaylistEvent.notify("onContentPlayerStop");
    }

    function onContentPlayerNext()
    {
        this.isNext = true;
        this.onXmlPlaylistEvent.notify("onContentPlayerNext");
        this.contentPlayer.stopPlayer();
    }

    function onContentPlayerPrev()
    {
        this.isPrevious = true;
        this.onXmlPlaylistEvent.notify("onContentPlayerPrev");
        this.contentPlayer.stopPlayer();
    }

    function onContentPlayerEndPlayback()
    {
        this.stopPlayback();
        if (this.playlistItemIdx < this.playlistItems.length - 1) 
        {
            this.checkPlaylist();
            return;
        }
        this.onXmlPlaylistEvent.notify("onContentPlayerEndPlayback");
    }

    function checkPlaylist()
    {
        if (this.playlistItemIdx < this.playlistItems.length - 1) 
        {
            ++this.playlistItemIdx;
            this.startPlayback();
            return;
        }
        this.onXmlPlaylistEvent.notify("endXmlPlaylist");
    }

    function stopPlayback()
    {
        if (this.playlistItems[this.playlistItemIdx].type == "ad" || this.playlistItems[this.playlistItemIdx].type == "http-wmv" || this.playlistItems[this.playlistItemIdx].type == "http-flv" || this.playlistItems[this.playlistItemIdx].type == "ad-wmv" || this.playlistItems[this.playlistItemIdx].type == "ad-mp4" || this.playlistItems[this.playlistItemIdx].type == "http-mp4" || this.playlistItems[this.playlistItemIdx].type == "hls-vod") 
        {
            this.contentPlayer.onError.removeListener(this, this.onContentPlayerError);
            this.contentPlayer.onStop.removeListener(this, this.onContentPlayerStop);
            this.contentPlayer.onNext.removeListener(this, this.onContentPlayerNext);
            this.contentPlayer.onPrev.removeListener(this, this.onContentPlayerPrev);
            this.contentPlayer.onEndPlayback.removeListener(this, this.onContentPlayerEndPlayback);
            this.contentPlayer.destroy();
            delete this.contentPlayer;
            this.contentPlayer = null;
            return;
        }
        if (this.playlistItems[this.playlistItemIdx].type == "rtmp-live" || this.playlistItems[this.playlistItemIdx].type == "hls-live" || this.playlistItems[this.playlistItemIdx].type == "rtsp" || this.playlistItems[this.playlistItemIdx].type == "wms-live" || this.playlistItems[this.playlistItemIdx].type == "wms-live") 
        {
            this.livePlayer.onPlayerEvent.removeListener(this, this.onLivePlayerEvent);
            this.livePlayer.destroy();
            delete this.livePlayer;
            this.livePlayer = null;
        }
    }

    function onLivePlayerEvent()
    {
        if ((__reg0 = arguments[0]) === "livePlayerStop") 
        {
            this.stopPlayback();
            if (this.forcedStop) 
            {
                this.onXmlPlaylistEvent.notify("endXmlPlaylist");
            }
            else if (this.playlistItemIdx < this.playlistItems.length - 1 && !this.isPrevious && !this.isNext && !arguments[1]) 
            {
                this.checkPlaylist();
            }
            else 
            {
                this.onXmlPlaylistEvent.notify("livePlayerStop");
            }
            return;
        }
        else if (__reg0 === "livePlayerError") 
        {
            this.stopPlayback();
            this.onXmlPlaylistEvent.notify("livePlayerError", arguments[1]);
            return;
        }
        else if (__reg0 === "livePlayerNext") 
        {
            this.isNext = true;
            this.onXmlPlaylistEvent.notify("livePlayerNext");
            this.livePlayer.streamStop();
            return;
        }
        else if (__reg0 === "livePlayerPrev") 
        {
            this.isPrevious = true;
            this.onXmlPlaylistEvent.notify("livePlayerPrev");
            this.livePlayer.streamStop();
            return;
        }
        else if (__reg0 === "channelChange") 
        {
            this.onXmlPlaylistEvent.notify("channelChange", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
            this.livePlayer.streamStop();
            return;
        }
        else if (__reg0 !== "epgProgramPlay") 
        {
            return;
        }
        this.onXmlPlaylistEvent.notify("epgProgramPlay", arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
        this.livePlayer.streamStop();
        return;
    }

    function forceStop()
    {
        if (this.forcedStop) 
        {
            return;
        }
        this.forcedStop = true;
        if (this.contentPlayer != null) 
        {
            this.contentPlayer.stopPlayer();
        }
        if (this.livePlayer != null) 
        {
            this.livePlayer.streamStop();
        }
        if (this.xml != null || this.trackerXml != null) 
        {
            this.onXmlPlaylistEvent.notify("endXmlPlaylist");
        }
    }

    static function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.parentMC.attachMovie("loading", "loadingMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360, _width: 100, _height: 100});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

}

//Sprite 696
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.MyJadooSubscription
{
    static var subscribeXml = null;
    static var msgBox = null;
    static var baseMC = null;
    static var subscStatus = null;
    static var subscItemId = null;
    static var groupSubscription: Boolean = false;
    static var channelSubscription: Boolean = false;
    static var netStatus: String = "Up";
    static var buttons = null;
    static var onSubscriptionEvent = null;

    function MyJadooSubscription()
    {
    }

    static function create()
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent = new com.BigRoom.Event();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onNetStatusUpdate);
    }

    static function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onNetStatusUpdate);
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent != null) 
        {
            delete com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent = null;
        }
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml != null) 
        {
            delete com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = null;
        }
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox != null) 
        {
            com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.removeListener("onButtonPress", com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubChnMsgBoxBtnPress);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.destroy();
            delete com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox = null;
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.baseMC = null;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.channelSubscription = false;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.groupSubscription = false;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscStatus = null;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscItemId = null;
    }

    static function onNetStatusUpdate(netStatus)
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.netStatus = netStatus;
        netStatus = null;
    }

    static function addListener(eventName, obj, method)
    {
        if (eventName == "onSubscriptionEvent") 
        {
            com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    static function removeListener(eventName, obj, method)
    {
        if (eventName == "onSubscriptionEvent") 
        {
            com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    static function subscribeChannel(viewMC, itemName, itemId, subscriptionStatus)
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.baseMC = viewMC;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscItemId = itemId;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscStatus = subscriptionStatus;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.channelSubscription = true;
        var __reg2 = com.jadoo.as2.MyJadoo.MyJadooSubscription.baseMC.createEmptyMovieClip("msgBoxBaseMC", com.jadoo.as2.MyJadoo.MyJadooSubscription.baseMC.getNextHighestDepth());
        var __reg1 = null;
        if (subscriptionStatus == 0) 
        {
            __reg1 = "Are you sure you want to subscribe to " + itemName + " ?";
        }
        else 
        {
            __reg1 = "You are subscribed to " + itemName + ". Do you want to unsubscribe ?";
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.addListener("onButtonPress", com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubChnMsgBoxBtnPress);
        com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons = new Array("Yes", "No");
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.create(__reg2, "Confirmation", __reg1, true, com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons);
        viewMC = null;
        itemName = null;
        subscriptionStatus = null;
        __reg1 = null;
        __reg2 = null;
    }

    static function onSubChnMsgBoxBtnPress(button)
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.removeListener("onButtonPress", com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubChnMsgBoxBtnPress);
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox.destroy();
        delete com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.msgBox = null;
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons.length) 
        {
            com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons[__reg1] = null;
            ++__reg1;
        }
        delete com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.buttons = null;
        if (button == "Yes") 
        {
            if (com.jadoo.as2.MyJadoo.MyJadooSubscription.netStatus == "Up") 
            {
                com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeToChannel();
            }
            else 
            {
                com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify("NETWORK_LINK_DOWN");
            }
            return;
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify("cancel");
    }

    static function subscribeToChannel()
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify("message", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        var __reg1 = com.jadoo.as2.MyJadoo.MyJadooSubscription.getSubscriptionURL();
        if (__reg1.charAt(__reg1.length - 1) != "/") 
        {
            __reg1 = __reg1 + "/";
        }
        __reg1 = __reg1 + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml != null) 
        {
            delete com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = null;
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = new XML();
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = new XML();
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.ignoreWhite = true;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.onLoad = mx.utils.Delegate.create(com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscribe);
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.load(__reg1);
        __reg1 = null;
    }

    static function getSubscriptionURL()
    {
        var __reg1 = null;
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.groupSubscription) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getMJGroupSubscritpionURL();
        }
        else if (com.jadoo.as2.MyJadoo.MyJadooSubscription.channelSubscription) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getMJChannelSubscritpionURL();
        }
        if (__reg1.charAt(__reg1.length - 1) != "/") 
        {
            __reg1 = __reg1 + "/";
        }
        __reg1 = __reg1 + (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscItemId + "/");
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscStatus == 0) 
        {
            __reg1 = __reg1 + "subscribe/";
        }
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscStatus == 1) 
        {
            __reg1 = __reg1 + "unsubscribe/";
        }
        return __reg1;
    }

    static function subscribeToGroup(infoBaseMC, itemId, subscriptionStatus)
    {
        com.jadoo.as2.MyJadoo.MyJadooSubscription.baseMC = infoBaseMC;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscItemId = itemId;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscStatus = subscriptionStatus;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify("message", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        com.jadoo.as2.MyJadoo.MyJadooSubscription.groupSubscription = true;
        var __reg1 = com.jadoo.as2.MyJadoo.MyJadooSubscription.getSubscriptionURL();
        if (__reg1.charAt(__reg1.length - 1) != "/") 
        {
            __reg1 = __reg1 + "/";
        }
        __reg1 = __reg1 + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        if (com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml != null) 
        {
            delete com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = null;
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = new XML();
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml = new XML();
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.ignoreWhite = true;
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.onLoad = mx.utils.Delegate.create(com.jadoo.as2.MyJadoo.MyJadooSubscription, com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscribe);
        com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.load(__reg1);
        __reg1 = null;
    }

    static function onSubscribe(success)
    {
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.firstChild, "/xml/item/status").firstChild.nodeValue;
            var __reg1 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeXml.firstChild, "/xml/item/message").firstChild.nodeValue;
            com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify(__reg2, __reg1);
            __reg1 = null;
            __reg2 = null;
            return;
        }
        com.jadoo.as2.MyJadoo.MyJadooSubscription.onSubscriptionEvent.notify("XML_LOAD_ERROR");
    }

}

//Sprite 697
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.Tier1 extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var itemTxtX: Number = 0;
    var selectedTxtFormat = null;
    var unSelectedTxtFormat = null;
    var separatorPresent: Boolean = false;
    var bottomItemIndex: Number = 0;
    var topItemIndex: Number = 0;
    var previousTopItemIdx: Number = 0;
    var previousBottomItemIdx: Number = 0;
    var drawFullPage: Boolean = false;
    var lastHighlightedItem: Number = 0;
    var areaHeight;
    var areaStartX;
    var areaStartY;
    var areaWidth;
    var categoryId;
    var channelBarActive;
    var channelToJump;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var contentType;
    var currentCategoryTitle;
    var currentItemIdx;
    var epgLink;
    var errorLoadingTier;
    var fn;
    var getItemIndex;
    var initialItems;
    var isEnabled;
    var isFavoritesCategory;
    var isSubscriptionMsg;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var loadingMC;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parseTier;
    var parseTierItems;
    var popUpMsgBox;
    var previousItemIdx;
    var selectedItemIdx;
    var selectedVisible;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var subscriptionMsg;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;
    var viewBaseMC;
    var viewMC;

    function Tier1()
    {
        super();
        this.tierType = "Tier1";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier1XmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier1XmlParser.parseTierItems;
    }

    function getSelectedItemIdx()
    {
        return this.selectedItemIdx;
    }

    function setSelectedItemIdx(selectedItemId)
    {
        this.selectedItemIdx = selectedItemId;
    }

    function getItemGroupId()
    {
        return this.tierItems[this.getItemIndex(this.selectedItemIdx)].groupId;
    }

    function getItemSubscriptionStatus()
    {
        return this.tierItems[this.getItemIndex(this.selectedItemIdx)].subscriptionStatus;
    }

    function destroy()
    {
        if (this.selectedTxtFormat != null) 
        {
            delete this.selectedTxtFormat;
            this.selectedTxtFormat = null;
        }
        if (this.unSelectedTxtFormat != null) 
        {
            delete this.unSelectedTxtFormat;
            this.unSelectedTxtFormat = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onTier1PoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        this.contentType = contType;
        if (this.separatorPresent == true) 
        {
            var __reg5 = this.tierBaseMC.attachMovie("tierSeparator", "tierSeparatorMC", this.tierBaseMC.getNextHighestDepth());
            __reg5._x = this.areaStartX + this.areaWidth;
            __reg5._y = this.areaStartY + (this.areaHeight - __reg5._height) / 2;
        }
        var __reg3 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.containerStartX + (this.containerWidth - __reg3._width) / 2;
        __reg3._y = this.containerStartY - __reg3._height - 8;
        __reg3._visible = false;
        var __reg4 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = this.containerStartY + this.containerHeight + 8;
        __reg4._visible = false;
        var __reg6 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, __reg4._y + __reg4._height + 5, this.containerWidth, 35);
        this.setTxtFormat("Arial", "center", 26, false, 16777215);
        __reg6.setNewTextFormat(this.textFormat);
        this.loadSelector();
        __reg6 = null;
        __reg4 = null;
        __reg3 = null;
        viewMC = null;
        viewBaseMC = null;
        parentMC = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function draw(isBackPage, itemsStartIndex)
    {
        if (this.totalItems == 0) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_TotalItems_Zero");
            }
            this.tierBaseMC.listingText.htmlText = "";
            this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
            this.onTierEvent.notify("onDisplayMessage", "");
            this.tierBaseMC.selectorMC._visible = false;
            this.displayArrows();
            this.removeLoadingMC();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
        }
        else 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
            this.itemPool.addListener("onPoolEvent", this, this.onTier1PoolEvent);
            this.itemPool.initialize(this.itemsLink, itemsStartIndex, this.maxItems, this.totalItems, this.parseTierItems, isBackPage, this.isFavoritesCategory);
            if (this.itemContainerMC != null) 
            {
                removeMovieClip(this.itemContainerMC);
                this.itemContainerMC = null;
            }
            this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
            this.itemContainerMC._y = this.containerStartY;
            this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
            this.initialItems = true;
            this.itemPool.getPoolItems(this.currentItemIdx, -1, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
            }
        }
        isBackPage = null;
        itemsStartIndex = null;
    }

    function onTier1PoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.currentItemIdx > this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx - 1;
            }
            else if (this.currentItemIdx < this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx + 1;
            }
            this.bottomItemIndex = this.previousBottomItemIdx;
            this.topItemIndex = this.previousTopItemIdx;
            this.itemHighlight(this.currentItemIdx);
            if (this.initialItems) 
            {
                this.errorLoadingTier = true;
                this.tierBaseMC.listingText.htmlText = "";
            }
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            if (this.drawFullPage || this.channelBarActive) 
            {
                if (this.itemContainerMC != null) 
                {
                    removeMovieClip(this.itemContainerMC);
                    this.itemContainerMC = null;
                }
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
            }
            this.errorLoadingTier = false;
            this.topItemIndex = this.currentItemIdx;
            this.bottomItemIndex = this.topItemIndex + (this.maxItems - 1);
            if (this.bottomItemIndex > this.totalItems - 1) 
            {
                this.bottomItemIndex = this.totalItems - 1;
            }
            this.tierItems = null;
            this.tierItems = __reg3;
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentItemIdx > this.previousItemIdx) 
        {
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
        }
        else if (this.currentItemIdx < this.previousItemIdx) 
        {
            if (this.tierItems.length == this.maxItems) 
            {
                var __reg4 = 0;
                while (__reg4 < __reg3.length) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentItemIdx - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
        }
        this.displayItems();
        if (this.initialItems) 
        {
            if (this.channelBarActive && !this.errorLoadingTier) 
            {
                this.selectItem(this.currentItemIdx);
            }
            else if (this.drawFullPage) 
            {
                this.selectItem(this.selectedItemIdx);
                this.itemHighlight(this.currentItemIdx);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayItems");
            }
            this.initialItems = false;
            this.drawFullPage = false;
        }
        else 
        {
            this.itemHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        arguments = null;
        __reg3 = null;
        __reg4 = null;
    }

    function displayItems()
    {
        var __reg5 = undefined;
        var __reg4 = undefined;
        if (this.isSubscriptionMsg) 
        {
            this.onTierEvent.notify("onDisplayMessage", this.subscriptionMsg);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", "");
        }
        if (this.tierItems.length == 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        }
        else 
        {
            this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
            this.itemContainerMC._x = this.containerStartX;
            if (this.initialItems) 
            {
                var __reg2 = 0;
                while (__reg2 < this.tierItems.length) 
                {
                    this.drawTierItem(__reg2, this.currentItemIdx + __reg2, __reg2);
                    ++__reg2;
                }
            }
            else if (this.currentItemIdx > this.previousItemIdx) 
            {
                __reg5 = Math.abs(this.currentItemIdx - this.maxItems);
                this.itemContainerMC["itemBaseMC" + __reg5].removeMovieClip();
                this.drawTierItem(this.tierItems.length - 1, this.currentItemIdx, this.maxItems);
                __reg3 = 0;
                while (__reg3 < this.tierItems.length) 
                {
                    __reg4 = this.itemIndicies[0] + __reg3;
                    this.itemContainerMC["itemBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1));
                    ++__reg3;
                }
                if (this.currentItemIdx == this.selectedItemIdx) 
                {
                    this.selectedItemIdx = this.currentItemIdx;
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
                }
            }
            else if (this.currentItemIdx < this.previousItemIdx) 
            {
                __reg5 = Math.abs(this.currentItemIdx + this.maxItems);
                this.itemContainerMC["itemBaseMC" + __reg5].removeMovieClip();
                var __reg3 = 0;
                while (__reg3 < this.tierItems.length) 
                {
                    __reg4 = this.itemIndicies[0] + __reg3;
                    this.itemContainerMC["itemBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1));
                    ++__reg3;
                }
                this.drawTierItem(0, this.currentItemIdx, 0);
                if (this.currentItemIdx == this.selectedItemIdx) 
                {
                    this.selectedItemIdx = this.currentItemIdx;
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
                }
            }
            if (this.drawFullPage) 
            {
                this.currentItemIdx = this.lastHighlightedItem;
                if (this.currentItemIdx >= this.totalItems) 
                {
                    this.currentItemIdx = this.totalItems - 1;
                }
                this.topItemIndex = this.itemIndicies[0];
                this.bottomItemIndex = this.itemIndicies[this.itemIndicies.length - 1];
            }
            this.displayArrows();
        }
        __reg2 = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function drawTierItem(itemIndex, itemId, yPos)
    {
        var __reg3 = (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1);
        var __reg2 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + itemId, this.itemContainerMC.getNextHighestDepth());
        __reg2._x = (this.containerWidth - this.itemWidth) / 2;
        __reg2._y = yPos * (this.itemHeight + __reg3);
        this.tierItems[itemIndex].create(__reg2, this.itemWidth, this.itemHeight, this.itemTxtX, this.selectedTxtFormat, this.unSelectedTxtFormat, this.areaStartX - (this.itemContainerMC._x + __reg2._x), this.areaWidth);
        itemIndex = null;
        itemId = null;
        __reg3 = null;
        __reg2 = null;
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._x = this.areaStartX;
        this.selectorLoader.loadClip(filePath, __reg2);
        filePath = null;
        __reg2 = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER1_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.areaWidth;
        __reg2._height = this.itemHeight;
        this.onTierEvent.notify("onReady");
        __reg2 = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomItemIndex == this.totalItems - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topItemIndex > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        this.tierItems[this.getItemIndex(itemIdx)].itemHighlight();
        this.currentCategoryTitle = this.pageTitle;
        itemIdx = null;
    }

    function itemUnHighlight(itemIdx)
    {
        this.tierItems[this.getItemIndex(itemIdx)].itemUnHighlight();
        itemIdx = null;
    }

    function enable()
    {
        this.itemPool.addListener("onPoolEvent", this, this.onTier1PoolEvent);
        if (this.tierItems.length > 0) 
        {
            this.tierBaseMC.tierSelectorMC._visible = true;
        }
        this.itemHighlight(this.currentItemIdx);
        this.tierBaseMC.selectorMC._visible = true;
        super.enable();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.isEnabled = true;
    }

    function disable()
    {
        this.itemPool.removeListener("onPoolEvent", this, this.onTier1PoolEvent);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = false;
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.tierItems[this.getItemIndex(this.currentItemIdx)].itemUnHighlight();
        if (this.getItemIndex(this.selectedItemIdx) != -1) 
        {
            this.currentItemIdx = this.selectedItemIdx;
        }
        this.isEnabled = false;
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.topItemIndex = this.itemIndicies[0];
        this.bottomItemIndex = this.itemIndicies[this.itemIndicies.length - 1];
        currentItemId = null;
    }

    function setCurrentItemsStartIdx(itemsStartIdx)
    {
        this.tierItems[this.getItemIndex(this.currentItemIdx)].itemStartIdx = itemsStartIdx;
        itemsStartIdx = null;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.viewMC.attachMovie("loadingView", "loadingMC", this.viewMC.getNextHighestDepth(), {_x: 640, _y: 360});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function selectItem(selectedItemId)
    {
        this.updateListing(selectedItemId);
        this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnSelect();
        this.selectedItemIdx = selectedItemId;
        this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
        this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(selectedItemId)].itemId;
        this.categoryId = this.tierItems[this.getItemIndex(selectedItemId)].itemId;
        if (this.tierItems[this.getItemIndex(selectedItemId)].isItemPopUp) 
        {
            if (this.channelBarActive) 
            {
                this.viewBaseMC._visible = true;
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.popUpMsgBox(this.tierItems[this.getItemIndex(selectedItemId)]);
            this.onTierEvent.notify("onPopup");
        }
        else 
        {
            this.notifyViewToProceed(selectedItemId);
        }
        selectedItemId = null;
    }

    function unSelectItem(selectedItemId)
    {
        this.tierItems[this.getItemIndex(selectedItemId)].itemUnSelect();
        selectedItemId = null;
    }

    function getItemStartIdx()
    {
        return Math.floor(this.selectedItemIdx / this.maxItems) * this.maxItems;
    }

    function getItemsLink()
    {
        return this.itemsLink;
    }

    function drawPage()
    {
        this.previousItemIdx = this.currentItemIdx;
        this.previousBottomItemIdx = this.bottomItemIndex;
        this.previousTopItemIdx = this.topItemIndex;
        if (this.currentItemIdx == this.itemIndicies[this.itemIndicies.length - 1]) 
        {
            this.lastHighlightedItem = this.currentItemIdx - 1;
        }
        else 
        {
            this.lastHighlightedItem = this.currentItemIdx;
        }
        this.itemUnHighlight(this.currentItemIdx - 1);
        this.itemIndicies.pop();
        if (this.itemIndicies.length < this.maxItems) 
        {
            this.currentItemIdx = this.topItemIndex - 1;
        }
        if (this.currentItemIdx < 0) 
        {
            this.currentItemIdx = 0;
        }
        if (this.selectedItemIdx == this.totalItems) 
        {
            --this.selectedItemIdx;
        }
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.initialItems = true;
        this.drawFullPage = true;
        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
    }

    function notifyViewToProceed(selectedItemId)
    {
        var __reg2 = this.getItemIndex(selectedItemId);
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[__reg2].itemName);
        }
        if (this.channelBarActive) 
        {
            this.onTierEvent.notify("onHighlightItem", this.tierItems[__reg2].itemName, __reg2, this.tierItems[__reg2].itemStartIdx, this.tierItems[__reg2].totalItems, this.tierItems[__reg2].itemsLink, this.tierItems[__reg2].playContinuous, selectedItemId, this.tierItems[__reg2].playlistId, this.tierItems[__reg2].itemType, this.tierItems[__reg2].itemId, this.channelToJump, null);
            this.onTierEvent.notify("onLooseFocus");
        }
        else 
        {
            this.onTierEvent.notify("onHighlightItem", this.tierItems[__reg2].itemName, __reg2, this.tierItems[__reg2].itemStartIdx, this.tierItems[__reg2].totalItems, this.tierItems[__reg2].itemsLink, this.tierItems[__reg2].playContinuous, selectedItemId, this.tierItems[__reg2].playlistId, this.tierItems[__reg2].itemType, this.tierItems[__reg2].itemId, null, this.tierItems[__reg2].responseLink);
        }
        selectedItemId = null;
        __reg2 = null;
    }

    function onKeyDown()
    {
        if (this.isSubscriptionMsg) 
        {
            this.isSubscriptionMsg = false;
        }
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (!this.errorLoadingTier) 
            {
                if (this.currentItemIdx < this.totalItems - 1 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
                {
                    this.itemUnHighlight(this.currentItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    ++this.currentItemIdx;
                    if (this.currentItemIdx > this.bottomItemIndex) 
                    {
                        this.previousBottomItemIdx = this.bottomItemIndex;
                        this.previousTopItemIdx = this.topItemIndex;
                        ++this.bottomItemIndex;
                        ++this.topItemIndex;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                if (this.selectedItemIdx < this.topItemIndex) 
                {
                    this.selectedVisible = false;
                }
                else 
                {
                    this.selectedVisible = true;
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (!this.errorLoadingTier) 
            {
                if (this.currentItemIdx > 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
                {
                    this.itemUnHighlight(this.currentItemIdx);
                    this.previousItemIdx = this.currentItemIdx;
                    --this.currentItemIdx;
                    if (this.currentItemIdx == this.topItemIndex - 1) 
                    {
                        this.previousBottomItemIdx = this.bottomItemIndex;
                        this.previousTopItemIdx = this.topItemIndex;
                        if (this.tierItems.length == this.maxItems) 
                        {
                            --this.bottomItemIndex;
                        }
                        --this.topItemIndex;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                if (this.selectedItemIdx > this.bottomItemIndex) 
                {
                    this.selectedVisible = false;
                }
                else 
                {
                    this.selectedVisible = true;
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (!this.errorLoadingTier) 
            {
                if (this.netStatus == "Up") 
                {
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnSelect();
                    this.selectedItemIdx = this.currentItemIdx;
                    this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
                    this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemId;
                    this.categoryId = this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemId;
                    if (this.tierItems[this.getItemIndex(this.selectedItemIdx)].isItemPopUp) 
                    {
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.popUpMsgBox(this.tierItems[this.getItemIndex(this.selectedItemIdx)]);
                        this.onTierEvent.notify("onPopup");
                    }
                    else 
                    {
                        this.notifyViewToProceed(this.selectedItemIdx);
                    }
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                }
                this.selectedVisible = true;
            }
        }
        else if (__reg0 === 39) 
        {
            if (!this.errorLoadingTier) 
            {
                this.onTierEvent.notify("onLooseFocus");
            }
        }
        super.onKeyDown();
    }

}

//Sprite 698
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier1XmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser
{

    function Tier1XmlParser()
    {
        super();
    }

    static function parseTier(tier1, tier1Node)
    {
        var __reg5 = tier1Node.childNodes;
        var __reg1 = null;
        var __reg4 = 0;
        while (__reg4 < __reg5.length) 
        {
            __reg1 = __reg5[__reg4];
            if (__reg1.nodeName == "area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseAreaTag(tier1, __reg1);
            }
            else if (__reg1.nodeName == "item_container") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseItemContainerTag(tier1, __reg1);
            }
            else if (__reg1.nodeName == "item_properties") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier1XmlParser.parseItemPropertiesTag(tier1, __reg1);
            }
            else if (__reg1.nodeName == "total_items") 
            {
                tier1.totalItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "max_items") 
            {
                tier1.maxItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "items_link") 
            {
                tier1.itemsLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "separator") 
            {
                var __reg3 = Number(__reg1.firstChild.nodeValue);
                if (__reg3 == undefined || __reg3 == 0 || __reg3 == NaN) 
                {
                    tier1.separatorPresent = false;
                }
                else 
                {
                    tier1.separatorPresent = true;
                }
                __reg3 = null;
            }
            ++__reg4;
        }
        tier1 = null;
        tier1Node = null;
        __reg5 = null;
        __reg1 = null;
    }

    static function parseTierItems(tierXml, items)
    {
        var __reg8 = mx.xpath.XPathAPI.selectNodeList(tierXml.firstChild, "/xml/items/item");
        var __reg7 = null;
        var __reg6 = 0;
        while (__reg6 < __reg8.length) 
        {
            __reg7 = __reg8[__reg6];
            var __reg5 = __reg7.childNodes;
            var __reg1 = null;
            var __reg2 = new com.jadoo.as2.JadooPlus.Views.TierItems.Tier1Item();
            __reg2.itemType = "container";
            var __reg3 = 0;
            while (__reg3 < __reg5.length) 
            {
                __reg1 = __reg5[__reg3];
                if (__reg1.nodeName == "id") 
                {
                    __reg2.itemId = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "name") 
                {
                    __reg2.itemName = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "type") 
                {
                    __reg2.itemType = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "playlist_id") 
                {
                    var __reg4 = __reg1.firstChild.nodeValue;
                    __reg2.playlistId = __reg4.split(",");
                    __reg4 = null;
                }
                else if (__reg1.nodeName == "load_as2_ytplayer") 
                {
                    com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer = Boolean(Number(__reg1.firstChild.nodeValue));
                }
                else if (__reg1.nodeName == "link") 
                {
                    __reg2.itemLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "item_image") 
                {
                    __reg2.itemImage = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "protected") 
                {
                    __reg2.itemProtected = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "restrict_link") 
                {
                    __reg2.restrictLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "playcontinuous") 
                {
                    __reg2.playContinuous = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "total_items") 
                {
                    __reg2.totalItems = Number(__reg1.firstChild.nodeValue);
                }
                else if (__reg1.nodeName == "sub_status") 
                {
                    __reg2.subscriptionStatus = Number(__reg1.firstChild.nodeValue);
                }
                else if (__reg1.nodeName == "item_startidx") 
                {
                    __reg2.itemStartIdx = Number(__reg1.firstChild.nodeValue);
                }
                else if (__reg1.nodeName == "items_link") 
                {
                    __reg2.itemsLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "popup") 
                {
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parsePopupTag(__reg1, __reg2);
                }
                else if (__reg1.nodeName == "response_link") 
                {
                    __reg2.responseLink = __reg1.firstChild.nodeValue;
                }
                ++__reg3;
            }
            items[__reg6] = __reg2;
            __reg5 = null;
            __reg1 = null;
            __reg7 = null;
            __reg2 = null;
            ++__reg6;
        }
        __reg7 = null;
        items = null;
        __reg8 = null;
        tierXml = null;
    }

    static function parseItemPropertiesTag(tier1, itemPropertiesNode)
    {
        var __reg4 = itemPropertiesNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "width") 
            {
                tier1.itemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                tier1.itemHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_x") 
            {
                tier1.itemTxtX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "selected") 
            {
                if (__reg1.firstChild.nodeName == "text_format") 
                {
                    if (tier1.selectedTxtFormat == null) 
                    {
                        tier1.selectedTxtFormat = new TextFormat();
                    }
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(tier1.selectedTxtFormat, __reg1.firstChild);
                }
            }
            else if (__reg1.nodeName == "unselected") 
            {
                if (__reg1.firstChild.nodeName == "text_format") 
                {
                    if (tier1.unSelectedTxtFormat == null) 
                    {
                        tier1.unSelectedTxtFormat = new TextFormat();
                    }
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(tier1.unSelectedTxtFormat, __reg1.firstChild);
                }
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        tier1 = null;
        itemPropertiesNode = null;
    }

}

//Sprite 699
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.Tier1Item extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var totalItems: Number = 0;
    var itemStartIdx: Number = 0;
    var itemsLink = null;
    var playContinuous: String = "no";
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var itemNameText = null;
    var playlistId = null;
    var itemImage;
    var itemName;

    function Tier1Item()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
    }

    function destroy()
    {
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        this.itemsLink = null;
        this.itemBaseMC = null;
        super.destroy();
    }

    function create(itemBaseMC, width, height, itemTextX, selectedTxtFormat, unSelectedTxtFormat, itemSelectorX, itemSelectorWidth)
    {
        this.itemBaseMC = itemBaseMC;
        var __reg5 = itemBaseMC.attachMovie("tier1PlaceHolder", "itemDefBgMC", itemBaseMC.getNextHighestDepth());
        __reg5._width = width;
        __reg5._height = height;
        var __reg3 = itemBaseMC.attachMovie("itemSelect", "itemSelectMC", itemBaseMC.getNextHighestDepth());
        __reg3._x = itemSelectorX;
        __reg3._width = itemSelectorWidth;
        __reg3._height = height;
        __reg3._visible = false;
        var __reg7 = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = itemTextX;
        this.itemNameText.createTextField(__reg4, 0, 0, width - itemTextX - 20, height, "false");
        this.itemNameText.setTextFormat(unSelectedTxtFormat);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setY((height - this.itemNameText.getHeight()) / 2);
        this.itemImageLoader.loadClip(this.itemImage, itemBaseMC.itemImageMC);
        itemBaseMC = null;
        __reg5 = null;
        __reg3 = null;
        __reg7 = null;
        __reg4 = null;
        selectedTxtFormat = null;
        unSelectedTxtFormat = null;
    }

    function onLoadItemImage(targetMC)
    {
        targetMC._width = this.itemBaseMC.itemDefBgMC._width;
        targetMC._height = this.itemBaseMC.itemDefBgMC._height;
        removeMovieClip(this.itemBaseMC.itemDefBgMC);
        targetMC = null;
    }

    function itemHighlight()
    {
        this.itemNameText.enable(false, 2000);
    }

    function itemUnHighlight()
    {
        this.itemNameText.disable();
    }

    function itemSelect()
    {
        this.itemBaseMC.itemSelectMC._visible = true;
    }

    function itemUnSelect()
    {
        this.itemBaseMC.itemSelectMC._visible = false;
    }

}

//Sprite 700
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.Tier2 extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var itemTextFormat = null;
    var separatorPresent: Boolean = false;
    var selectedItemIdx: Number = 0;
    var percentResize: Number = 1.3;
    var bottomItemIndex: Number = 0;
    var topItemIndex: Number = 0;
    var previousTopItemIdx: Number = 0;
    var previousBottomItemIdx: Number = 0;
    var drawColorButtons: Boolean = true;
    var areaHeight;
    var areaStartX;
    var areaStartY;
    var areaWidth;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var currentItemIdx;
    var errorLoadingTier;
    var fn;
    var getItemIndex;
    var initialItems;
    var isEnabled;
    var isFavoritesCategory;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var loadingMC;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parseTier;
    var parseTierItems;
    var popUpMsgBox;
    var previousItemIdx;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;

    function Tier2()
    {
        super();
        this.tierType = "Tier2";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier2XmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier2XmlParser.parseTierItems;
    }

    function getSelectedItemIdx()
    {
        return this.selectedItemIdx;
    }

    function setSelectedItemIdx(selectedItemId)
    {
        this.selectedItemIdx = selectedItemId;
    }

    function destroy()
    {
        if (this.itemTextFormat != null) 
        {
            delete this.itemTextFormat;
            this.itemTextFormat = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onTier2PoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        if (this.separatorPresent == true) 
        {
            var __reg5 = this.tierBaseMC.attachMovie("tierSeparator", "tierSeparatorMC", this.tierBaseMC.getNextHighestDepth());
            __reg5._x = this.areaStartX + this.areaWidth;
            __reg5._y = this.areaStartY + (this.areaHeight - __reg5._height) / 2;
        }
        var __reg3 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.containerStartX + (this.containerWidth - __reg3._width) / 2;
        __reg3._y = this.containerStartY - __reg3._height - 13;
        __reg3._visible = false;
        var __reg4 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = this.containerStartY + this.containerHeight + 18;
        __reg4._visible = false;
        var __reg7 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, __reg4._y + __reg4._height + 5, this.containerWidth, 35);
        this.setTxtFormat("Arial", "center", 26, false, 16777215);
        __reg7.setNewTextFormat(this.textFormat);
        var __reg6 = this.tierBaseMC.createTextField("messageText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, this.containerStartY + this.containerHeight / 2, this.containerWidth, 30);
        __reg6.wordWrap = true;
        __reg6.autoSize = true;
        __reg6.setNewTextFormat(this.textFormat);
        this.loadSelector();
        __reg7 = null;
        __reg4 = null;
        __reg3 = null;
        viewMC = null;
        viewBaseMC = null;
        parentMC = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth * this.percentResize;
        __reg2._height = this.itemHeight * this.percentResize;
        this.onTierEvent.notify("onReady");
        __reg2 = null;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + itemIdx]._x - (this.itemWidth * this.percentResize - this.itemWidth) / 2;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y - (this.itemHeight * this.percentResize - this.itemHeight) / 2;
        this.tierItems[this.getItemIndex(itemIdx)].itemHighlight();
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._x = this.tierBaseMC.selectorMC._x - this.itemContainerMC._x;
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._y = this.tierBaseMC.selectorMC._y - this.itemContainerMC._y;
        itemIdx = null;
    }

    function onExitPopup()
    {
        this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemPopup.onExit.removeListener(this, this.onExitPopup);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function itemUnHighlight(itemIdx)
    {
        this.tierItems[this.getItemIndex(itemIdx)].itemUnHighlight();
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._x = this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._x + (this.itemWidth * this.percentResize - this.itemWidth) / 2;
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._y = this.itemContainerMC["favoriteIconBaseMC" + itemIdx]._y + (this.itemHeight * this.percentResize - this.itemHeight) / 2;
        itemIdx = null;
    }

    function enable()
    {
        this.itemPool.addListener("onPoolEvent", this, this.onTier2PoolEvent);
        this.tierBaseMC.tierSelectorMC._visible = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = true;
        this.itemHighlight(this.currentItemIdx);
        this.isEnabled = true;
        this.onTierEvent.notify("colorButtonEvent", "enable", "Yellow");
        super.enable();
    }

    function disable(focusOn, isRetrieving)
    {
        if (!isRetrieving) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
        }
        this.itemPool.removeListener("onPoolEvent", this, this.onTier2PoolEvent);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.tierBaseMC.selectorMC._visible = false;
        this.itemUnHighlight(this.currentItemIdx);
        if (this.getItemIndex(this.selectedItemIdx) != -1) 
        {
            this.currentItemIdx = this.selectedItemIdx;
        }
        this.isEnabled = false;
        focusOn = null;
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.topItemIndex = this.itemIndicies[0];
        this.bottomItemIndex = this.itemIndicies[this.itemIndicies.length - 1];
        currentItemId = null;
    }

    function draw(itemsStartIdx, totalItems, itemsLink, isBackPage)
    {
        var __reg3 = false;
        this.itemsStartIdx = itemsStartIdx;
        this.totalItems = totalItems;
        if (this.itemsLink != itemsLink || this.errorLoadingTier) 
        {
            __reg3 = true;
        }
        this.itemsLink = itemsLink;
        if (__reg3) 
        {
            this.bottomItemIndex = 0;
            this.topItemIndex = 0;
            this.previousTopItemIdx = 0;
            this.previousBottomItemIdx = 0;
            this.selectedItemIdx = 0;
            this.tierBaseMC.upArrowMC._visible = false;
            this.tierBaseMC.downArrowMC._visible = false;
            if (this.tierItems != null) 
            {
                this.tierItems = null;
            }
            if (this.itemPool != null) 
            {
                this.itemPool.removeListener("onPoolEvent", this, this.onTier2PoolEvent);
                this.itemPool.destroy();
                delete this.itemPool;
                this.itemPool = null;
            }
            if (this.itemContainerMC != null) 
            {
                removeMovieClip(this.itemContainerMC);
                this.itemContainerMC != null;
            }
            if (totalItems == 0) 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_TotalItems_Zero");
                }
                this.tierBaseMC.listingText.htmlText = "";
                this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
                this.tierBaseMC.selectorMC._visible = false;
                this.displayArrows();
                this.removeLoadingMC();
                this.onTierEvent.notify("onDisplayItems");
                this.onTierEvent.notify("onDisplayMessage", "");
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
            }
            else 
            {
                this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
                this.itemPool.addListener("onPoolEvent", this, this.onTier2PoolEvent);
                this.itemPool.initialize(itemsLink, itemsStartIdx, this.maxItems, totalItems, this.parseTierItems, isBackPage, this.isFavoritesCategory);
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
                this.removeLoadingMC();
                itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.initialItems = true;
                this.itemPool.getPoolItems(this.currentItemIdx, -1, itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
                this.updateListing(this.currentItemIdx);
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
                }
            }
        }
        else 
        {
            this.onTierEvent.notify("onDisplayItems");
        }
        itemsLink = null;
        itemsStartIdx = null;
        totalItems = null;
        isBackPage = null;
        __reg3 = null;
    }

    function onTier2PoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.currentItemIdx > this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx - 1;
            }
            else if (this.currentItemIdx < this.previousItemIdx) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx + 1;
            }
            this.bottomItemIndex = this.previousBottomItemIdx;
            this.topItemIndex = this.previousTopItemIdx;
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TIER2_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
            if (this.initialItems) 
            {
                this.errorLoadingTier = true;
                this.onTierEvent.notify("onErrorLoading");
                this.tierBaseMC.listingText.htmlText = "";
            }
            else 
            {
                this.updateListing(this.currentItemIdx);
            }
            this.onTierEvent.notify("onDisplayItems");
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            this.errorLoadingTier = false;
            this.topItemIndex = this.currentItemIdx;
            this.bottomItemIndex = this.topItemIndex + (this.maxItems - 1);
            this.tierItems = __reg3;
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentItemIdx > this.previousItemIdx) 
        {
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
        }
        else if (this.currentItemIdx < this.previousItemIdx) 
        {
            if (this.tierItems.length == this.maxItems) 
            {
                var __reg4 = 0;
                while (__reg4 < __reg3.length) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentItemIdx - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.onTierEvent.notify("onDisplayItems");
            this.initialItems = false;
        }
        else 
        {
            this.itemUnHighlight(this.previousItemIdx);
            this.itemHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        arguments = null;
        __reg3 = null;
        __reg4 = null;
    }

    function displayItems()
    {
        var __reg6 = undefined;
        var __reg3 = undefined;
        this.onTierEvent.notify("onDisplayMessage", "");
        this.tierBaseMC.messageText.htmlText = "";
        this.itemContainerMC._x = this.containerStartX;
        if (this.initialItems) 
        {
            var __reg4 = 0;
            while (__reg4 < this.tierItems.length) 
            {
                this.drawTierItem(__reg4, this.currentItemIdx + __reg4, __reg4);
                ++__reg4;
            }
        }
        else if (this.currentItemIdx > this.previousItemIdx) 
        {
            __reg6 = Math.abs(this.currentItemIdx - this.maxItems);
            this.itemContainerMC["itemBaseMC" + __reg6].removeMovieClip();
            this.itemContainerMC["favoriteIconBaseMC" + __reg6].removeMovieClip();
            this.drawTierItem(this.tierItems.length - 1, this.currentItemIdx, this.maxItems);
            if (this.currentItemIdx == this.selectedItemIdx) 
            {
                this.selectedItemIdx = this.currentItemIdx;
                this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
            }
            __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
        }
        else if (this.currentItemIdx < this.previousItemIdx) 
        {
            __reg6 = Math.abs(this.currentItemIdx + this.maxItems);
            this.itemContainerMC["itemBaseMC" + __reg6].removeMovieClip();
            this.itemContainerMC["favoriteIconBaseMC" + __reg6].removeMovieClip();
            var __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
            this.drawTierItem(0, this.currentItemIdx, 0);
            if (this.currentItemIdx == this.selectedItemIdx) 
            {
                this.selectedItemIdx = this.currentItemIdx;
                this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
            }
        }
        this.displayArrows();
        if (_global.currentApplication != "MyJadoo" && this.drawColorButtons) 
        {
            this.drawColorbuttons();
        }
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        __reg3 = null;
    }

    function drawColorbuttons()
    {
        this.onTierEvent.notify("colorButtonEvent", "draw", "Yellow", "Add to Favorites");
        this.drawColorButtons = false;
        this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
    }

    function drawTierItem(itemIndex, itemId, yPos)
    {
        var __reg6 = (this.containerHeight - this.itemHeight * this.maxItems) / (this.maxItems - 1);
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + itemId, this.itemContainerMC.getNextHighestDepth());
        __reg3._x = (this.containerWidth - this.itemWidth) / 2;
        __reg3._y = yPos * (this.itemHeight + __reg6);
        this.tierItems[itemIndex].create(__reg3, this.itemWidth, this.itemHeight, this.itemTextFormat, this.areaStartX - (this.itemContainerMC._x + __reg3._x), this.areaWidth);
        this.tierItems[itemIndex].loadImage();
        var __reg5 = -1;
        __reg5 = com.jadoo.as2.JadooPlus.Features.Favorites.searchFavorites(this.tierItems[itemIndex].itemId, this.tierItems[itemIndex].itemType, _global.currentApplication);
        if (__reg5 != -1) 
        {
            this.drawFavoriteIcon(itemId);
        }
        __reg5 = null;
        itemIndex = null;
        itemId = null;
        __reg6 = null;
        __reg3 = null;
        yPos = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomItemIndex == this.totalItems - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topItemIndex > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
    }

    function terminateDisplay()
    {
    }

    function setCurrentItemsStartIdx(itemsStartIdx)
    {
        this.tierItems[this.getItemIndex(this.currentItemIdx)].itemStartIdx = itemsStartIdx;
        itemsStartIdx == null;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.tierBaseMC.attachMovie("loadingView", "loadingMC", this.tierBaseMC.getNextHighestDepth(), {_x: this.areaStartX + this.areaWidth / 2, _y: this.areaStartY + this.areaHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function getItemStartIdx()
    {
        return Math.floor(this.selectedItemIdx / this.maxItems) * this.maxItems;
    }

    function selectItem(selectedItemId)
    {
        this.updateListing(selectedItemId);
        this.tierItems[this.getItemIndex(selectedItemId)].itemUnSelect();
        this.selectedItemIdx = selectedItemId;
        this.tierItems[this.getItemIndex(selectedItemId)].itemSelect();
        if (this.tierItems[selectedItemId].isItemPopUp) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            this.popUpMsgBox(this.tierItems[this.getItemIndex(selectedItemId)]);
            this.onTierEvent.notify("onPopup");
        }
        else 
        {
            this.notifyViewToProceed(selectedItemId);
        }
        selectedItemId = null;
    }

    function unSelectItem(selectedItemId)
    {
        this.tierItems[this.getItemIndex(selectedItemId)].itemUnSelect();
        selectedItemId = null;
    }

    function notifyViewToProceed(selectedItemId)
    {
        var __reg2 = this.getItemIndex(selectedItemId);
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[__reg2].itemName);
        }
        this.onTierEvent.notify("onHighlightItem", this.tierItems[__reg2].itemName, __reg2, this.tierItems[__reg2].itemStartIdx, this.tierItems[__reg2].totalItems, this.tierItems[__reg2].itemsLink, this.tierItems[__reg2].playContinuous, this.tierItems[__reg2].playlistId, this.tierItems[__reg2].itemType, this.tierItems[__reg2].responseLink);
        selectedItemId = null;
        __reg2 = null;
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentItemIdx < this.totalItems - 1 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.previousItemIdx = this.currentItemIdx;
                ++this.currentItemIdx;
                if (this.currentItemIdx <= this.bottomItemIndex) 
                {
                    this.itemUnHighlight(this.previousItemIdx);
                }
                if (this.currentItemIdx > this.bottomItemIndex) 
                {
                    this.previousBottomItemIdx = this.bottomItemIndex;
                    this.previousTopItemIdx = this.topItemIndex;
                    ++this.bottomItemIndex;
                    ++this.topItemIndex;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.currentItemIdx > 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.previousItemIdx = this.currentItemIdx;
                --this.currentItemIdx;
                if (this.currentItemIdx != this.topItemIndex - 1) 
                {
                    this.itemUnHighlight(this.previousItemIdx);
                }
                if (this.currentItemIdx == this.topItemIndex - 1) 
                {
                    this.previousBottomItemIdx = this.bottomItemIndex;
                    this.previousTopItemIdx = this.topItemIndex;
                    if (this.tierItems.length == this.maxItems) 
                    {
                        --this.bottomItemIndex;
                    }
                    --this.topItemIndex;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, 1, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 37) 
        {
            this.tierBaseMC.listingText.htmlText = "";
            this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnSelect();
            this.tierBaseMC.selectorMC._visible = false;
            this.onTierEvent.notify("onLooseFocus", 0);
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemUnSelect();
                this.selectedItemIdx = this.currentItemIdx;
                this.tierItems[this.getItemIndex(this.selectedItemIdx)].itemSelect();
                if (this.tierItems[this.getItemIndex(this.selectedItemIdx)].isItemPopUp) 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.popUpMsgBox(this.tierItems[this.getItemIndex(this.selectedItemIdx)]);
                    this.onTierEvent.notify("onPopup");
                }
                else 
                {
                    this.notifyViewToProceed(this.selectedItemIdx);
                }
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        else if (__reg0 === 39) 
        {
            this.onTierEvent.notify("onLooseFocus", 1);
        }
        super.onKeyDown();
    }

    function drawFavoriteIcon(itemIdx, newFavorite)
    {
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("favoriteIconBaseMC" + itemIdx, this.itemContainerMC.getNextHighestDepth());
        var __reg2 = __reg3.attachMovie("favoriteIcon", "favoriteIconMC", __reg3.getNextHighestDepth());
        __reg2._x = __reg2._x - __reg2._width / 2;
        __reg2._y = __reg2._y - __reg2._height / 2;
        if (newFavorite) 
        {
            __reg3._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x - (this.itemWidth * this.percentResize - this.itemWidth) / 2;
            __reg3._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y - (this.itemHeight * this.percentResize - this.itemHeight) / 2;
        }
        else 
        {
            __reg3._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x;
            __reg3._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        }
        __reg3 = null;
        __reg2 = null;
        itemIdx = null;
        newFavorite = null;
    }

}

//Sprite 701
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier2XmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser
{

    function Tier2XmlParser()
    {
        super();
    }

    static function parseTier(tier2, tier2Node)
    {
        var __reg5 = tier2Node.childNodes;
        var __reg1 = null;
        var __reg4 = 0;
        while (__reg4 < __reg5.length) 
        {
            __reg1 = __reg5[__reg4];
            if (__reg1.nodeName == "area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseAreaTag(tier2, __reg1);
            }
            else if (__reg1.nodeName == "item_container") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseItemContainerTag(tier2, __reg1);
            }
            else if (__reg1.nodeName == "item_properties") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.Tier2XmlParser.parseItemPropertiesTag(tier2, __reg1);
            }
            else if (__reg1.nodeName == "max_items") 
            {
                tier2.maxItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "separator") 
            {
                var __reg3 = Number(__reg1.firstChild.nodeValue);
                if (__reg3 == undefined || __reg3 == 0 || __reg3 == NaN) 
                {
                    tier2.separatorPresent = false;
                }
                else 
                {
                    tier2.separatorPresent = true;
                }
                __reg3 = null;
            }
            ++__reg4;
        }
        tier2 = null;
        tier2Node = null;
        __reg5 = null;
        __reg1 = null;
    }

    static function parseTierItems(tierXml, items)
    {
        var __reg7 = mx.xpath.XPathAPI.selectNodeList(tierXml.firstChild, "/xml/items/item");
        var __reg8 = null;
        var __reg6 = 0;
        while (__reg6 < __reg7.length) 
        {
            __reg8 = __reg7[__reg6];
            var __reg5 = __reg8.childNodes;
            var __reg1 = null;
            var __reg2 = new com.jadoo.as2.JadooPlus.Views.TierItems.Tier2Item();
            __reg2.itemType = "container";
            var __reg3 = 0;
            while (__reg3 < __reg5.length) 
            {
                __reg1 = __reg5[__reg3];
                if (__reg1.nodeName == "id") 
                {
                    __reg2.itemId = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "name") 
                {
                    __reg2.itemName = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "type") 
                {
                    __reg2.itemType = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "playlist_id") 
                {
                    var __reg4 = __reg1.firstChild.nodeValue;
                    __reg2.playlistId = __reg4.split(",");
                    __reg4 = null;
                }
                else if (__reg1.nodeName == "load_as2_ytplayer") 
                {
                    com.jadoo.as2.JadooPlus.Utils.Config.downloadYoutubePlayer = Boolean(Number(__reg1.firstChild.nodeValue));
                }
                else if (__reg1.nodeName == "link") 
                {
                    __reg2.itemLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "item_image") 
                {
                    __reg2.itemImage = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "protected") 
                {
                    __reg2.itemProtected = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "restrict_link") 
                {
                    __reg2.restrictLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "playcontinuous") 
                {
                    __reg2.playContinuous = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "total_items") 
                {
                    __reg2.totalItems = Number(__reg1.firstChild.nodeValue);
                }
                else if (__reg1.nodeName == "item_startidx") 
                {
                    __reg2.itemStartIdx = Number(__reg1.firstChild.nodeValue);
                }
                else if (__reg1.nodeName == "items_link") 
                {
                    __reg2.itemsLink = __reg1.firstChild.nodeValue;
                }
                else if (__reg1.nodeName == "popup") 
                {
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parsePopupTag(__reg1, __reg2);
                }
                else if (__reg1.nodeName == "response_link") 
                {
                    __reg2.responseLink = __reg1.firstChild.nodeValue;
                }
                ++__reg3;
            }
            items[__reg6] = __reg2;
            __reg2 = null;
            __reg5 = null;
            __reg1 = null;
            ++__reg6;
        }
        __reg7 = null;
        __reg8 = null;
        items = null;
        tierXml = null;
    }

    static function parseItemPropertiesTag(tier2, itemPropertiesNode)
    {
        var __reg4 = itemPropertiesNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "width") 
            {
                tier2.itemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                tier2.itemHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (tier2.itemTextFormat == null) 
                {
                    tier2.itemTextFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(tier2.itemTextFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        tier2 = null;
        itemPropertiesNode = null;
    }

}

//Sprite 702
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.Tier2Item extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var itemWidth = null;
    var itemHeight = null;
    var itemX = null;
    var itemY = null;
    var tempMC = null;
    var totalItems: Number = 0;
    var itemStartIdx: Number = 0;
    var itemsLink = null;
    var playContinuous: String = "no";
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var itemImageBaseMC = null;
    var fn = null;
    var percentResize: Number = 1.3;
    var itemNameText = null;
    var yOffset: Number = 0;
    var xOffset: Number = 0;
    var playlistId = null;
    var itemImage;
    var itemName;

    function Tier2Item()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function destroy()
    {
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        this.itemsLink = null;
        this.itemBaseMC = null;
        this.fn = null;
        super.destroy();
    }

    function create(itemBaseMC, width, height, textFormat, itemSelectorX, itemSelectorWidth)
    {
        this.itemWidth = width;
        this.itemHeight = height;
        this.itemBaseMC = itemBaseMC;
        var __reg3 = itemBaseMC.attachMovie("itemSelect", "itemSelectMC", itemBaseMC.getNextHighestDepth());
        __reg3._x = itemSelectorX;
        __reg3._width = itemSelectorWidth;
        __reg3._height = height;
        __reg3._visible = false;
        this.itemImageBaseMC = itemBaseMC.createEmptyMovieClip("itemImageBaseMC", itemBaseMC.getNextHighestDepth());
        this.itemX = this.itemImageBaseMC._x;
        this.itemY = this.itemImageBaseMC._y;
        var __reg6 = this.itemImageBaseMC.attachMovie("tier2PlaceHolder", "itemDefBgMC", this.itemImageBaseMC.getNextHighestDepth());
        __reg6._width = width;
        __reg6._height = height;
        var __reg9 = this.itemImageBaseMC.createEmptyMovieClip("itemImageMC", this.itemImageBaseMC.getNextHighestDepth());
        var __reg5 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        var __reg4 = __reg5.attachMovie("maskMC", "itemNameBgMC", __reg5.getNextHighestDepth());
        this.itemNameText.createTextField(itemBaseMC, 0, 0, 0, 0, "true");
        this.itemNameText.setTextFormat(textFormat);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setY(height - this.itemNameText.getHeight());
        this.itemNameText.setWidth(width);
        __reg4._width = width;
        __reg4._height = this.itemNameText.getHeight();
        __reg4._y = this.itemNameText.getY();
        __reg4._alpha = 60;
        this.yOffset = (this.itemHeight * this.percentResize - this.itemHeight) / 2;
        this.xOffset = (this.itemWidth * this.percentResize - this.itemWidth) / 2;
        itemBaseMC = null;
        __reg4 = null;
        __reg6 = null;
        __reg9 = null;
        __reg3 = null;
        __reg5 = null;
        textFormat = null;
    }

    function loadImage()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG", "VOD");
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemImageBaseMC.itemImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        targetMC._width = this.itemImageBaseMC.itemDefBgMC._width;
        targetMC._height = this.itemImageBaseMC.itemDefBgMC._height;
        removeMovieClip(this.itemImageBaseMC.itemDefBgMC);
        targetMC = null;
    }

    function itemHighlight()
    {
        if (this.itemNameText.getWidth() != this.itemWidth * this.percentResize) 
        {
            this.itemNameText.setX(this.itemNameText.getX() - this.xOffset);
            this.itemNameText.setY(this.itemNameText.getY() + this.yOffset);
            this.itemNameText.setWidth(this.itemWidth * this.percentResize);
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._y = this.itemNameText.getY();
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._x = this.itemBaseMC.itemNameBaseMC.itemNameBgMC._x - this.xOffset;
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._width = this.itemWidth * this.percentResize;
            this.tempMC = this.itemBaseMC._parent.createEmptyMovieClip("itemImageMC", this.itemBaseMC._parent.getNextHighestDepth());
            this.itemBaseMC.swapDepths(this.tempMC);
            this.itemImageBaseMC._x = this.itemX - this.xOffset;
            this.itemImageBaseMC._y = this.itemY - this.yOffset;
            this.itemImageBaseMC._width = this.itemWidth * this.percentResize;
            this.itemImageBaseMC._height = this.itemHeight * this.percentResize;
            this.itemNameText.enable(false, 2000);
        }
    }

    function itemUnHighlight()
    {
        if (this.itemNameText.getWidth() == this.itemWidth * this.percentResize) 
        {
            this.itemNameText.setX(this.itemNameText.getX() + this.xOffset);
            this.itemNameText.setY(this.itemNameText.getY() - this.yOffset);
            this.tempMC.swapDepths(this.itemBaseMC);
            this.itemNameText.setWidth(this.itemWidth);
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._y = this.itemNameText.getY();
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._x = this.itemBaseMC.itemNameBaseMC.itemNameBgMC._x + this.xOffset;
            this.itemBaseMC.itemNameBaseMC.itemNameBgMC._width = this.itemWidth;
            this.itemImageBaseMC._x = this.itemX;
            this.itemImageBaseMC._y = this.itemY;
            this.itemImageBaseMC._width = this.itemWidth;
            this.itemImageBaseMC._height = this.itemHeight;
            removeMovieClip(this.tempMC);
            this.itemNameText.disable();
        }
    }

    function itemSelect()
    {
        this.itemBaseMC.itemSelectMC._visible = true;
    }

    function itemUnSelect()
    {
        this.itemBaseMC.itemSelectMC._visible = false;
    }

}

//Sprite 703
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.GridTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var titleX = null;
    var titleY = null;
    var titleWidth = null;
    var titleHeight = null;
    var titleTxtFormat = null;
    var rows: Number = 0;
    var columns: Number = 0;
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var descriptionX = null;
    var descriptionY = null;
    var descriptionWidth = null;
    var descriptionHeight = null;
    var descriptionTxtFormat = null;
    var currentItemsLink = null;
    var previousItemsLink = null;
    var itemImgLoadTimeout: Number = 2000;
    var itemImgLoadTimeoutId: Number = -1;
    var currentImgIdx: Number = 0;
    var loadCount: Number = 0;
    var infoOffset: Number = 10;
    var drawColorButtons: Boolean = true;
    var programListing = null;
    var itemNameText = null;
    var itemInfoText = null;
    var bottomRowIdx: Number = 0;
    var topRowIdx: Number = 0;
    var previousTopRowIdx: Number = 0;
    var previousBottomRowIdx: Number = 0;
    var currentRowIdx: Number = 0;
    var previousRowIdx: Number = 0;
    var drawFullPage: Boolean = false;
    var lastHighlightedItem: Number = 0;
    var xml = null;
    var isBackPage = null;
    var playlistId = null;
    var itemType = null;
    var isNext: Boolean = false;
    var isPrevious: Boolean = false;
    var playlistIds = null;
    var validPlaylistIds = null;
    var playlistNumber: Number = 0;
    var totalItemsArray = null;
    var areaHeight;
    var areaStartX;
    var areaStartY;
    var areaWidth;
    var categoryId;
    var channelBarActive;
    var channelEpgLink;
    var channelToJump;
    var chnlBarPgeChng;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var contentType;
    var currentCategoryTitle;
    var currentItemIdx;
    var disableView;
    var displayLoadingSign;
    var enableView;
    var epgEnabled;
    var epgItem;
    var epgLink;
    var errorLoadingTier;
    var fetchItemDirectLink;
    var fn;
    var getItemIndex;
    var grandParentIdx;
    var initialItems;
    var isEnabled;
    var isFavoriteDeleted;
    var isFavoritesCategory;
    var isViewVisible;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var loadingMC;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onEnterKey;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parentCurrentItemIdx;
    var parentId;
    var parentIdx;
    var parentMC;
    var parseTier;
    var parseTierItems;
    var playContinuous;
    var prePreviousItemIdx;
    var previousItemIdx;
    var previousItemStartIdx;
    var selectedItem;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var startPlayback;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;
    var vodResponseLink;
    var wasPopupEnabled;

    function GridTier()
    {
        super();
        this.tierType = "MatrixTier";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.fn.onLoadTotItemsAPI = mx.utils.Delegate.create(this, this.onLoadTotItemsAPI);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemInfoText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTierItems;
    }

    function getItemStartIdx()
    {
        if (this.itemType == "dailymotionplaylist") 
        {
            return 0;
        }
        return Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
    }

    function getCurrentItemIdx()
    {
        if (this.itemType == "dailymotionplaylist") 
        {
            return 0;
        }
        return this.currentItemIdx;
    }

    function destroy()
    {
        _global.clearTimeout(this.itemImgLoadTimeout);
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.descriptionTxtFormat != null) 
        {
            delete this.descriptionTxtFormat;
            this.descriptionTxtFormat = null;
        }
        if (this.itemInfoText != null) 
        {
            this.itemInfoText.removeTextField();
            delete this.itemInfoText;
            this.itemInfoText = null;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        if (this.xml != null) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        if (this.totalItemsArray != null) 
        {
            delete this.totalItemsArray;
            this.totalItemsArray = null;
        }
        if (this.playlistIds != null) 
        {
            delete this.playlistIds;
            this.playlistIds = null;
        }
        if (this.validPlaylistIds != null) 
        {
            delete this.validPlaylistIds;
            this.validPlaylistIds = null;
        }
        this.previousItemsLink = null;
        this.currentItemsLink = null;
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        if (pageTitle == "Favorites") 
        {
            this.isFavoritesCategory = true;
        }
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        var __reg3 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.containerStartX + this.containerWidth - __reg3._width;
        __reg3._y = this.containerStartY - __reg3._height - 15;
        __reg3._visible = false;
        var __reg4 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = this.containerStartY + this.containerHeight + 15;
        __reg4._visible = false;
        var __reg6 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.tierBaseMC.listingText._y = this.descriptionY;
        __reg6.autoSize = true;
        this.setTxtFormat("Arial", "right", 26, false, 16777215);
        __reg6.setNewTextFormat(this.textFormat);
        var __reg5 = this.tierBaseMC.createTextField("messageText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, this.containerStartY + this.containerHeight / 2, this.containerWidth, 30);
        __reg5.wordWrap = true;
        __reg5.autoSize = true;
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        __reg5.setNewTextFormat(this.textFormat);
        if (this.titleTxtFormat != null) 
        {
            var __reg7 = this.tierBaseMC.createTextField("titleText", this.tierBaseMC.getNextHighestDepth(), this.titleX, this.titleY, this.titleWidth, this.titleHeight);
            __reg7.setNewTextFormat(this.titleTxtFormat);
            __reg7 = null;
        }
        this.displayItemInfo();
        this.loadSelector();
        __reg6 = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        viewBaseMC = null;
        viewMC = null;
        parentMC = null;
        pageTitle = null;
        pageId = null;
        contType = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function createPlaceHolders(startPos, lenght, rowNo, colNo)
    {
        this.itemContainerMC._x = this.containerStartX;
        var __reg10 = (this.containerWidth - this.itemWidth * this.columns) / (this.columns - 1);
        var __reg9 = (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1);
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        var __reg5 = startPos;
        while (__reg5 < startPos + lenght) 
        {
            var __reg2 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + __reg5, this.itemContainerMC.getNextHighestDepth());
            __reg2._x = colNo * (this.itemWidth + __reg10);
            __reg2._y = rowNo * (this.itemHeight + __reg9);
            var __reg3 = null;
            if (this.contentType == "live" || this.isFavoritesCategory) 
            {
                __reg3 = __reg2.attachMovie("liveChannelPlaceHolder", "itemDefBgMC", __reg2.getNextHighestDepth());
            }
            else 
            {
                __reg3 = __reg2.attachMovie("contentPlaceHolder", "itemDefBgMC", __reg2.getNextHighestDepth());
            }
            __reg3._width = this.itemWidth;
            __reg3._height = this.itemHeight;
            __reg3._visible = false;
            var __reg4 = __reg2.createTextField("itemNameTxt", __reg2.getNextHighestDepth(), 0, 5, this.itemWidth, this.itemHeight - 10);
            __reg4.setNewTextFormat(this.textFormat);
            __reg4.wordWrap = true;
            ++colNo;
            if (colNo == this.columns) 
            {
                colNo = 0;
                ++rowNo;
            }
            __reg2 = null;
            __reg3 = null;
            __reg4 = null;
            ++__reg5;
        }
        __reg10 = null;
        __reg9 = null;
        startPos = null;
        lenght = null;
        rowNo = null;
        colNo = null;
    }

    function drawColorbuttons()
    {
        this.drawColorButtons = false;
        if (this.contentType == "live" || this.isFavoritesCategory) 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Red", "EPG");
            if (this.isFavoritesCategory) 
            {
                this.onTierEvent.notify("colorButtonEvent", "disable", "Red");
            }
            else 
            {
                this.onTierEvent.notify("colorButtonEvent", "draw", "Green", "Program Listing");
                this.onTierEvent.notify("colorButtonEvent", "disable", "Green");
            }
        }
        if (this.isFavoritesCategory) 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Yellow", "Delete from Favorites");
        }
        else 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Yellow", "Add to Favorites");
        }
        if (this.grandParentIdx == -1) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
        }
    }

    function displayItemInfo()
    {
        var __reg3 = 0;
        this.itemNameText.createTextField(this.tierBaseMC, this.descriptionX, this.descriptionY, this.descriptionWidth, this.descriptionHeight, "false");
        this.itemNameText.setTextFormat(this.descriptionTxtFormat);
        if (this.contentType != "live" && this.contentType != "subscribe_channels" && this.contentType != "live_groups" && !this.isFavoritesCategory) 
        {
            this.setTxtFormat(this.descriptionTxtFormat.font, this.descriptionTxtFormat.align, this.descriptionTxtFormat.size, this.descriptionTxtFormat.bold, 15978335);
            var __reg2 = this.tierBaseMC.createTextField("itemText", this.tierBaseMC.getNextHighestDepth(), this.descriptionX, this.descriptionY + this.descriptionHeight, 0, 0);
            __reg2.autoSize = true;
            __reg2.setNewTextFormat(this.textFormat);
            if (this.contentType == "movies") 
            {
                __reg2.htmlText = "Cast:";
            }
            else 
            {
                __reg2.htmlText = "Views:";
            }
            this.setTxtFormat(this.descriptionTxtFormat.font, this.descriptionTxtFormat.align, this.descriptionTxtFormat.size, this.descriptionTxtFormat.bold, 16777215);
            __reg3 = this.containerWidth - (__reg2._width + this.infoOffset);
            this.itemInfoText.createTextField(this.tierBaseMC, 0, 0, __reg3, __reg2.textHeight, "false");
            this.itemInfoText.setTextFormat(this.textFormat);
            this.itemInfoText.setX(this.descriptionX + __reg2._width + this.infoOffset);
            this.itemInfoText.setY(this.descriptionY + this.descriptionHeight);
            __reg2._visible = false;
            __reg2 == null;
        }
        __reg3 = null;
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth;
        __reg2._height = this.itemHeight;
        this.createPlaceHolders();
        this.onTierEvent.notify("onReady");
        __reg2 = null;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.listingText._x = this.tierBaseMC.downArrowMC._x - this.tierBaseMC.listingText._width - 15;
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        itemIdx = this.getItemIndex(itemIdx);
        if (this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
        {
            this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[itemIdx].categoryId;
            this.categoryId = this.tierItems[itemIdx].categoryId;
        }
        else 
        {
            this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.parentId;
            this.categoryId = this.parentId;
        }
        if (this.contentType == "movies") 
        {
            if (this.tierItems[itemIdx].itemInfo.cast != null && this.tierItems[itemIdx].itemInfo.cast != undefined) 
            {
                this.itemInfoText.setHtmlText(this.tierItems[itemIdx].itemInfo.cast);
            }
            else 
            {
                this.itemInfoText.setHtmlText("");
            }
        }
        else if (this.tierItems[itemIdx].itemViews != null && this.tierItems[itemIdx].itemViews != undefined) 
        {
            this.itemInfoText.setHtmlText(this.tierItems[itemIdx].itemViews);
        }
        else 
        {
            this.itemInfoText.setHtmlText("");
        }
        this.itemNameText.disable();
        this.itemNameText.setHtmlText(this.tierItems[itemIdx].itemName);
        this.tierBaseMC.itemText._visible = true;
        this.itemNameText.enable(false, 2000);
        this.itemInfoText.enable(false, 2000);
        itemIdx = null;
    }

    function itemUnHighlight(itemIdx)
    {
        this.itemNameText.disable();
        this.itemInfoText.disable();
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
        this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
        this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
        this.displayArrows();
        currentItemId = null;
    }

    function enable()
    {
        this.onTierEvent.notify("colorButtonEvent", "enable", "Green");
        this.onTierEvent.notify("colorButtonEvent", "enable", "Yellow");
        if (this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
        {
            this.onTierEvent.notify("colorButtonEvent", "enable", "Red");
        }
        this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
        this.tierBaseMC.greenButtonMC._visible = true;
        this.tierBaseMC.greenButtonText._visible = true;
        if (this.parentIdx != -1) 
        {
            this.tierBaseMC.tierSelectorMC._visible = true;
        }
        this.isEnabled = true;
        super.enable();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = true;
        this.itemHighlight(this.currentItemIdx);
    }

    function disable(isRetrieving)
    {
        if (!isRetrieving) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Green");
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
            if (this.isFavoritesCategory) 
            {
                this.onTierEvent.notify("colorButtonEvent", "disable", "Red");
            }
        }
        this.tierBaseMC.listingText.htmlText = "";
        this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.tierBaseMC.selectorMC._visible = false;
        this.itemNameText.disable();
        this.itemInfoText.disable();
        this.itemInfoText.setHtmlText("");
        this.itemNameText.setHtmlText("");
        this.tierBaseMC.itemText._visible = false;
        this.isEnabled = false;
    }

    function findTotalItems()
    {
        var __reg2 = null;
        if (this.xml != null) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.xml.ignoreWhite = true;
        this.xml.onLoad = this.fn.onLoadTotItemsAPI;
        if (this.itemType == "youtubeplaylist") 
        {
            __reg2 = "https://www.googleapis.com/youtube/v3/playlistItems?part=id&playlistId=" + this.playlistId + "&maxResults=0&key=" + com.jadoo.as2.JadooPlus.Utils.Config.YOUTUBE_DEVELOPER_KEY;
        }
        else if (this.itemType == "dailymotionplaylist") 
        {
            __reg2 = "https://api.dailymotion.com/playlist/" + this.playlistId + "?fields=videos_total";
        }
        this.xml.load(__reg2);
        __reg2 = null;
    }

    function onLoadTotItemsAPI(success)
    {
        if (success) 
        {
            if (this.itemType == "youtubeplaylist") 
            {
                __reg5 = this.xml.toString();
                __reg5 = unescape(__reg5);
                __reg5 = this.replaceString(__reg5, "&quot;", "\"");
                __reg3 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg5);
                for (__reg6 in __reg3) 
                {
                    if (__reg6 == "pageInfo") 
                    {
                        var __reg2 = __reg3[__reg6];
                        for (var __reg4 in __reg2) 
                        {
                            if (__reg4 == "totalResults") 
                            {
                                this.totalItems = this.totalItems + Number(__reg2[__reg4]);
                                this.totalItemsArray.push(Number(__reg2[__reg4]));
                                this.validPlaylistIds.push(this.playlistId);
                            }
                        }
                    }
                }
                ++this.playlistNumber;
                __reg5 = null;
                __reg3 = null;
                __reg6 = null;
            }
            else if (this.itemType == "dailymotionplaylist") 
            {
                var __reg5 = this.xml.toString();
                __reg5 = unescape(__reg5);
                __reg5 = this.replaceString(__reg5, "&quot;", "\"");
                var __reg3 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg5);
                for (var __reg6 in __reg3) 
                {
                    if (__reg6 == "videos_total") 
                    {
                        this.totalItems = this.totalItems + Number(__reg3[__reg6]);
                        this.totalItemsArray.push(Number(__reg3[__reg6]));
                        this.validPlaylistIds.push(this.playlistId);
                    }
                }
                ++this.playlistNumber;
                __reg5 = null;
                __reg3 = null;
                __reg6 = null;
            }
            if (this.playlistNumber <= this.playlistIds.length - 1 && this.playlistIds.length > 1) 
            {
                this.playlistId = this.playlistIds[this.playlistNumber];
                this.findTotalItems();
                return undefined;
            }
        }
        this.proceedDrawing();
        success = null;
    }

    function replaceString(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function proceedDrawing()
    {
        if (this.totalItems == 0 || this.totalItems == undefined || this.totalItems == NaN) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_TotalItems_Zero");
            }
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
            this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
            this.tierBaseMC.selectorMC._visible = false;
            this.displayArrows();
            this.removeLoadingMC();
            this.onTierEvent.notify("onDisplayMessage", "");
            if (this.grandParentIdx == -1 && this.parentIdx == -1) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            }
            this.onTierEvent.notify("onDisplayItems", "zeroItems");
            return;
        }
        this.tierBaseMC.messageText.htmlText = "";
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.playlistIds.length > 1 && this.itemType == "youtubeplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.YoutubeMutiplePlaylistItemsPool();
        }
        else if (this.playlistIds.length > 1 && this.itemType == "dailymotionplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.DailymotionMutiplePlaylistItemsPool();
        }
        else 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
        }
        this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
        this.itemPool.initialize(this.itemsLink, this.itemsStartIdx, this.maxItems, this.totalItems, this.parseTierItems, this.isBackPage, this.isFavoritesCategory, this.validPlaylistIds, this.itemType, this.totalItemsArray);
        this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
        this.itemContainerMC._y = this.containerStartY;
        this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        this.initialItems = true;
        this.itemPool.getPoolItems(this.currentItemIdx, -1, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems, this.parentIdx);
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
        }
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage, parentCurrentItemIdx, playlists, itemType, parentId, vodResponseLink)
    {
        this.playlistNumber = 0;
        if (this.playlistIds != null) 
        {
            delete this.playlistIds;
            this.playlistIds = null;
        }
        this.playlistIds = new Array();
        this.playlistIds = playlists.slice();
        var __reg5 = false;
        this.playlistId = this.playlistIds[this.playlistNumber];
        this.itemType = itemType;
        this.isBackPage = isBackPage;
        this.vodResponseLink = vodResponseLink;
        if (parentIdx == -1 && grandParentIdx == -1) 
        {
            this.parentId = Number(this.pageId);
        }
        else 
        {
            this.parentId = parentId;
        }
        super.setParentIdx(parentIdx);
        super.setParentCurrentItemIdx(parentCurrentItemIdx);
        if (this.itemsLink != itemsLink || this.errorLoadingTier) 
        {
            __reg5 = true;
        }
        this.itemsLink = itemsLink;
        this.playContinuous = playContinuous;
        this.currentCategoryTitle = title;
        this.currentItemsLink = this.previousItemsLink = itemsLink;
        if (parentIdx != -1 && this.titleTxtFormat != null) 
        {
            this.tierBaseMC.titleText.htmlText = title;
        }
        _global.clearTimeout(this.itemImgLoadTimeout);
        if (__reg5) 
        {
            this.bottomRowIdx = 0;
            this.topRowIdx = 0;
            this.previousTopRowIdx = 0;
            this.previousBottomRowIdx = 0;
            this.currentRowIdx = 0;
            this.previousRowIdx = 0;
            this.tierBaseMC.upArrowMC._visible = false;
            this.tierBaseMC.downArrowMC._visible = false;
            this.grandParentIdx = grandParentIdx;
            this.parentIdx = parentIdx;
            if (this.tierItems != null) 
            {
                this.tierItems = null;
            }
            if (this.itemPool != null) 
            {
                this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.destroy();
                delete this.itemPool;
                this.itemPool = null;
            }
            if (this.itemContainerMC != null) 
            {
                this.itemContainerMC.removeMovieClip();
                this.itemContainerMC = null;
            }
            if (itemType == "dailymotionplaylist" || itemType == "youtubeplaylist") 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                if (this.validPlaylistIds != null) 
                {
                    delete this.validPlaylistIds;
                    this.validPlaylistIds = null;
                }
                this.totalItemsArray = new Array();
                this.validPlaylistIds = new Array();
                this.totalItems = 0;
                this.findTotalItems();
            }
            else 
            {
                if (this.isFavoritesCategory) 
                {
                    this.totalItems = com.jadoo.as2.JadooPlus.Features.Favorites.getFavoritesLength(parentIdx);
                }
                else 
                {
                    this.totalItems = totalItems;
                }
                this.proceedDrawing();
            }
        }
        else 
        {
            this.currentItemIdx = this.currentRowIdx * this.columns;
            this.onTierEvent.notify("onDisplayItems");
        }
        title = null;
        grandParentIdx = null;
        parentIdx = null;
        itemsStartIdx = null;
        totalItems = null;
        itemsLink = null;
        playContinuous = null;
        isBackPage = null;
        __reg5 = null;
        parentCurrentItemIdx = null;
        playlists = null;
        itemType = null;
        parentId = null;
        vodResponseLink = null;
    }

    function onGridTierPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.channelBarActive) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.prePreviousItemIdx;
                this.itemsStartIdx = this.previousItemStartIdx;
                this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
                this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
                this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            }
            else 
            {
                if (this.currentRowIdx > this.previousRowIdx) 
                {
                    --this.currentRowIdx;
                    --this.previousRowIdx;
                }
                else if (this.currentRowIdx < this.previousRowIdx) 
                {
                    ++this.currentRowIdx;
                    ++this.previousRowIdx;
                }
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.prePreviousItemIdx;
                this.bottomRowIdx = this.previousBottomRowIdx;
                this.topRowIdx = this.previousTopRowIdx;
            }
            this.itemHighlight(this.currentItemIdx);
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GRIDTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
            if (this.initialItems && !this.channelBarActive) 
            {
                this.errorLoadingTier = true;
                this.onTierEvent.notify("onErrorLoading");
                this.tierBaseMC.listingText.htmlText = "";
            }
            if (!this.isViewVisible || this.channelBarActive) 
            {
                if (this.initialItems && !this.chnlBarPgeChng) 
                {
                    this.errorLoadingTier = true;
                    this.onTierEvent.notify("onErrorLoading");
                }
                this.chnlBarPgeChng = false;
                this.isNext = false;
                this.isPrevious = false;
                this.initialItems = false;
                this.enableView();
            }
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            if (this.channelBarActive || this.drawFullPage) 
            {
                this.chnlBarPgeChng = false;
                if (this.itemContainerMC != null) 
                {
                    this.itemContainerMC.removeMovieClip();
                    this.itemContainerMC = null;
                }
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
            }
            this.errorLoadingTier = false;
            this.tierItems = __reg3;
            this.currentRowIdx = this.topRowIdx = this.currentItemIdx / this.columns;
            this.bottomRowIdx = this.topRowIdx + (this.rows - 1);
            this.createPlaceHolders(this.currentRowIdx * this.columns, this.maxItems, 0, 0);
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentRowIdx * this.columns + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
            this.createPlaceHolders(this.currentRowIdx * this.columns, __reg3.length, this.rows, 0);
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            if (this.tierItems.length > (this.rows - 1) * this.columns) 
            {
                var __reg5 = this.tierItems.length - (this.rows - 1) * this.columns;
                var __reg4 = 0;
                while (__reg4 < __reg5) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
                __reg5 = null;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentRowIdx * this.columns + (this.columns - 1) - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
            this.createPlaceHolders(this.currentRowIdx * this.columns, __reg3.length, -1, 0);
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.onTierEvent.notify("onDisplayItems");
            this.initialItems = false;
        }
        __reg3 = null;
        __reg4 = null;
        arguments = null;
    }

    function displayItems()
    {
        var __reg7 = undefined;
        var __reg3 = undefined;
        var __reg6 = 0;
        this.onTierEvent.notify("onDisplayMessage", "");
        this.currentImgIdx = 0;
        this.loadCount = 0;
        this.tierBaseMC.messageText.htmlText = "";
        if (this.initialItems) 
        {
            __reg4 = 0;
            while (__reg4 < this.tierItems.length) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg7 = Math.abs((this.currentRowIdx - this.rows) * this.columns);
            this.removeTierItems(__reg7);
            __reg4 = (this.rows - 1) * this.columns;
            while (__reg4 < this.tierItems.length) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg6);
                ++__reg6;
                ++__reg4;
            }
            __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            __reg7 = Math.abs((this.currentRowIdx + this.rows) * this.columns);
            this.removeTierItems(__reg7);
            var __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg4);
                ++__reg4;
            }
            var __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
        }
        if (_global.currentApplication != "MyJadoo" && this.drawColorButtons) 
        {
            this.drawColorbuttons();
        }
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._y;
        if (!this.isViewVisible || this.channelBarActive) 
        {
            if (this.channelBarActive) 
            {
                this.currentItemIdx = this.channelToJump;
                this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
                this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
                this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
                this.displayLoadingSign();
            }
            if (this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
            {
                this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
                this.categoryId = this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
                this.isNext = false;
                this.isPrevious = false;
                this.onEnterKey();
            }
            else if (this.isFavoritesCategory && this.parentCurrentItemIdx == 2) 
            {
                if (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "container" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "dailymotionplaylist" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "youtubeplaylist") 
                {
                    if (this.isNext) 
                    {
                        this.isNext = false;
                        if (this.currentItemIdx >= this.totalItems - 1) 
                        {
                            this.enableView();
                        }
                        else 
                        {
                            this.loadNextItem();
                        }
                    }
                    else if (this.isPrevious) 
                    {
                        this.isPrevious = false;
                        this.loadPreviousItem();
                    }
                }
                else 
                {
                    this.onEnterKey();
                    this.isNext = false;
                    this.isPrevious = false;
                }
            }
            else 
            {
                this.onEnterKey();
                this.isNext = false;
                this.isPrevious = false;
            }
        }
        else if (this.isEnabled == true) 
        {
            this.itemHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.tierBaseMC.selectorMC._visible = true;
        }
        if (this.drawFullPage) 
        {
            this.currentItemIdx = this.lastHighlightedItem;
            this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
            this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
            this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            this.drawFullPage = false;
            this.itemHighlight(this.currentItemIdx);
        }
        if (this.isFavoriteDeleted) 
        {
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.ITEM_REMOVED_FROM_FAVORITES);
            this.isFavoriteDeleted = false;
            if (this.totalItems == 0) 
            {
                this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
                this.onTierEvent.notify("onLooseFocus");
            }
        }
        this.displayArrows();
        __reg5 = null;
        __reg7 = null;
        __reg3 = null;
        __reg6 = null;
        __reg4 = null;
    }

    function removeTierItems(clearItemId)
    {
        var __reg2 = 0;
        while (__reg2 < this.columns) 
        {
            this.itemContainerMC["itemBaseMC" + clearItemId].removeMovieClip();
            this.itemContainerMC["favoriteIconBaseMC" + clearItemId].removeMovieClip();
            ++clearItemId;
            ++__reg2;
        }
        clearItemId = null;
        __reg2 = null;
    }

    function drawTierItem(itemIndex, yIndex)
    {
        this.tierItems[itemIndex].createIconItem(this.itemContainerMC["itemBaseMC" + yIndex], this.itemWidth, this.itemHeight);
        this.tierItems[itemIndex].loadImage(itemIndex, this.fn.onLoadItemImage);
        if (!this.isFavoritesCategory) 
        {
            var __reg4 = -1;
            __reg4 = com.jadoo.as2.JadooPlus.Features.Favorites.searchFavorites(this.tierItems[itemIndex].itemId, this.tierItems[itemIndex].itemType, _global.currentApplication);
            if (__reg4 != -1) 
            {
                this.drawFavoriteIcon(yIndex);
            }
            __reg4 = null;
        }
        itemIndex = null;
        yIndex = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomRowIdx == Math.ceil(this.totalItems / this.columns) - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topRowIdx > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
        this.tierBaseMC.listingText.htmlText = "";
    }

    function terminateDisplay()
    {
    }

    function onExitProgramListing()
    {
        this.isEnabled = true;
        this.enableView();
        this.programListing.destroy();
        delete this.programListing;
        this.programListing = null;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.tierBaseMC.attachMovie("loadingView", "loadingMC", this.tierBaseMC.getNextHighestDepth(), {_x: this.areaStartX + this.areaWidth / 2, _y: this.areaStartY + this.areaHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function loadNextItem()
    {
        this.isViewVisible = false;
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        ++this.currentItemIdx;
        if (this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
        {
            this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
            this.categoryId = this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
        }
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx % this.columns == 0) 
        {
            ++this.currentRowIdx;
            if (this.currentRowIdx > this.bottomRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                this.isNext = true;
                ++this.bottomRowIdx;
                ++this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "dailymotion") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else if (this.selectedItem.itemType == "youtube") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemId;
                    this.startPlayback();
                }
                else if (this.selectedItem.itemType == "container" || this.selectedItem.itemType == "dailymotionplaylist" || this.selectedItem.itemType == "youtubeplaylist") 
                {
                    if (this.currentItemIdx >= this.totalItems - 1) 
                    {
                        this.enableView();
                    }
                    else 
                    {
                        this.loadNextItem();
                    }
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "dailymotion") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else if (this.selectedItem.itemType == "youtube") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemId;
                this.startPlayback();
            }
            else if (this.selectedItem.itemType == "container" || this.selectedItem.itemType == "dailymotionplaylist" || this.selectedItem.itemType == "youtubeplaylist") 
            {
                if (this.currentItemIdx >= this.totalItems - 1) 
                {
                    this.enableView();
                }
                else 
                {
                    this.loadNextItem();
                }
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function loadPreviousItem()
    {
        this.isViewVisible = false;
        this.itemUnHighlight(this.currentItemIdx);
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        --this.currentItemIdx;
        if (this.isFavoritesCategory && this.parentCurrentItemIdx == 0) 
        {
            this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
            this.categoryId = this.tierItems[this.getItemIndex(this.currentItemIdx)].categoryId;
        }
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
        {
            --this.currentRowIdx;
            if (this.currentRowIdx < this.topRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                this.isPrevious = true;
                if (this.tierItems.length > (this.rows - 1) * this.columns) 
                {
                    --this.bottomRowIdx;
                }
                --this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "dailymotion") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else if (this.selectedItem.itemType == "youtube") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemId;
                    this.startPlayback();
                }
                else if (this.selectedItem.itemType == "container" || this.selectedItem.itemType == "dailymotionplaylist" || this.selectedItem.itemType == "youtubeplaylist") 
                {
                    if (this.currentItemIdx == 0) 
                    {
                        this.enableView();
                    }
                    else 
                    {
                        this.loadPreviousItem();
                    }
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "dailymotion") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else if (this.selectedItem.itemType == "youtube") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemId;
                this.startPlayback();
            }
            else if (this.selectedItem.itemType == "container" || this.selectedItem.itemType == "dailymotionplaylist" || this.selectedItem.itemType == "youtubeplaylist") 
            {
                if (this.currentItemIdx == 0) 
                {
                    this.enableView();
                }
                else 
                {
                    this.loadPreviousItem();
                }
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function channelBarPageChange(channelNumber)
    {
        this.prePreviousItemIdx = this.previousItemIdx;
        this.previousItemIdx = this.currentItemIdx;
        this.channelBarActive = true;
        if (channelNumber >= this.itemIndicies[0] && channelNumber <= this.itemIndicies[this.itemIndicies.length - 1]) 
        {
            this.currentItemIdx = channelNumber;
            this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
            this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
            this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            this.onEnterKey();
        }
        else 
        {
            this.channelToJump = channelNumber;
            this.itemsStartIdx = Math.floor(channelNumber / this.maxItems) * this.maxItems;
            this.currentItemIdx = this.itemsStartIdx;
            this.initialItems = true;
            this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems, this.parentIdx);
        }
        channelNumber = null;
    }

    function drawPage()
    {
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        this.previousBottomRowIdx = this.bottomRowIdx;
        this.previousTopRowIdx = this.topRowIdx;
        if (this.currentItemIdx == this.itemIndicies[this.itemIndicies.length - 1]) 
        {
            this.lastHighlightedItem = this.currentItemIdx - 1;
        }
        else 
        {
            this.lastHighlightedItem = this.currentItemIdx;
        }
        this.itemIndicies.pop();
        if (this.itemIndicies.length <= (this.rows - 1) * this.columns) 
        {
            this.currentItemIdx = (this.topRowIdx - 1) * this.columns;
        }
        else 
        {
            this.currentItemIdx = this.topRowIdx * this.columns;
        }
        if (this.currentItemIdx < 0) 
        {
            this.currentItemIdx = 0;
        }
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.initialItems = true;
        this.drawFullPage = true;
        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        if (this.isFavoritesCategory) 
        {
            this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.currentItemIdx, this.maxItems, this.fn.onGetPoolItems, this.parentIdx);
            return;
        }
        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems, this.parentIdx);
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentRowIdx < Math.ceil(this.totalItems / this.columns) - 1 && this.currentRowIdx != null && this.currentRowIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentRowIdx;
                if (this.currentItemIdx + this.columns > this.totalItems - 1) 
                {
                    this.currentItemIdx = this.totalItems - 1;
                }
                else 
                {
                    this.currentItemIdx = this.currentItemIdx + this.columns;
                }
                if (this.currentRowIdx > this.bottomRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    ++this.bottomRowIdx;
                    ++this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.currentItemIdx - this.columns >= 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentRowIdx;
                this.currentItemIdx = this.currentItemIdx - this.columns;
                if (this.currentRowIdx < this.topRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    if (this.tierItems.length > (this.rows - 1) * this.columns) 
                    {
                        --this.bottomRowIdx;
                    }
                    --this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentItemIdx % this.columns == 0 && this.parentIdx != -1) 
            {
                this.onTierEvent.notify("onLooseFocus");
            }
            else if (this.currentItemIdx > 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentItemIdx;
                if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
                {
                    --this.currentRowIdx;
                    if (this.currentRowIdx < this.topRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        if (this.tierItems.length > (this.rows - 1) * this.columns) 
                        {
                            --this.bottomRowIdx;
                        }
                        --this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.currentItemIdx < this.totalItems - 1 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentItemIdx;
                if (this.currentItemIdx % this.columns == 0) 
                {
                    ++this.currentRowIdx;
                    if (this.currentRowIdx > this.bottomRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        ++this.bottomRowIdx;
                        ++this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems, this.parentIdx);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName);
                }
                this.onEnterKey();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        else if (__reg0 === Key.GREEN) 
        {
            if (_global.currentApplication != "MyJadoo" && this.pageTitle != "Favorites" && this.pageTitle != "Search Results") 
            {
                if (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveRTMP" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveWMV" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "livePlaylist") 
                {
                    if (this.netStatus == "Up") 
                    {
                        if (this.programListing == null) 
                        {
                            this.programListing = new com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing();
                        }
                        this.disableView();
                        this.isEnabled = false;
                        this.programListing.onExit.addListener(this, this.onExitProgramListing);
                        this.programListing.display(this.parentMC, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemProgramListing);
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                    }
                }
            }
        }
        super.onKeyDown();
    }

    function notifyViewToProceed(selectedItemId)
    {
        this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(selectedItemId)].itemLink, null, false, "", this.wasPopupEnabled);
        selectedItemId = null;
    }

    function drawFavoriteIcon(itemIdx)
    {
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("favoriteIconBaseMC" + itemIdx, this.itemContainerMC.getNextHighestDepth());
        __reg3._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        __reg3._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        var __reg2 = __reg3.attachMovie("favoriteIcon", "favoriteIconMC", __reg3.getNextHighestDepth());
        __reg2._x = __reg2._x - __reg2._width / 2;
        __reg2._y = __reg2._y - __reg2._height / 2;
        __reg3 = null;
        __reg2 = null;
        itemIdx = null;
    }

    function removeFavoriteIcon(itemIdx)
    {
        removeMovieClip(this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC);
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC = null;
        itemIdx = null;
    }

}

//Sprite 704
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing
{
    var programList = null;
    var xml = null;
    var link = null;
    var channelName = null;
    var keyListener = new Object();
    var fn = null;
    var parentMC = null;
    var listBaseMC = null;
    var programListMC = null;
    var programListMaskMC = null;
    var textFormat = null;
    var programLogoWidth: Number = 320;
    var programLogoHeight: Number = 180;
    var programListIdx: Number = 0;
    var onExit = null;
    var weekDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var programListX: Number = 441;
    var programListY: Number = 147;
    var programListHeight: Number = 0;
    var listItemGap: Number = 5;
    var listItemWidth: Number = 710;
    var listItemHeight: Number = 46;
    var timeFieldWidth: Number = 170;
    var programFieldWidth = com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing.prototype.listItemWidth - com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing.prototype.timeFieldWidth;
    var numEntries: Number = 9;
    var programHlIdx: Number = 0;
    var listHlIdx: Number = 0;
    var programHlMC = null;
    var programImageLoader = null;
    var programImageLoaderListener = new Object();
    var programImageMC = null;
    var programInfoText = null;
    var xmlInvoker = null;

    function ProgramListing()
    {
        this.onExit = new com.BigRoom.Event();
        this.textFormat = new TextFormat();
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        this.programImageLoader.removeListener(this.programImageLoaderListener);
        delete this.programImageLoaderListener;
        this.programImageLoaderListener = null;
        delete this.programImageLoader;
        this.programImageLoader = null;
        this.xml = null;
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onProgramListingXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.programList != null) 
        {
            var __reg5 = 0;
            while (__reg5 < this.programList.length) 
            {
                var __reg4 = this.programList[__reg5].programs;
                var __reg2 = 0;
                while (__reg2 < __reg4.length) 
                {
                    var __reg3 = __reg4[__reg2].dateTime;
                    false;
                    __reg3 = null;
                    ++__reg2;
                }
                false;
                __reg4 = null;
                ++__reg5;
            }
            delete this.programList;
            this.programList = null;
        }
        this.parentMC = null;
        this.programHlMC = null;
        this.programImageMC = null;
        this.fn = null;
        this.listBaseMC = null;
        delete this.onExit;
        this.onExit = null;
        delete this.textFormat;
        this.textFormat = null;
    }

    function display(parentMC, channelName, link)
    {
        this.programImageLoader = new MovieClipLoader();
        this.textFormat = new TextFormat();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onLoadXml: mx.utils.Delegate.create(this, this.onLoadXml), onLoadProgramImage: mx.utils.Delegate.create(this, this.onLoadProgramImage)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.programImageLoaderListener.onLoadInit = this.fn.onLoadProgramImage;
        this.programImageLoader.addListener(this.programImageLoaderListener);
        this.parentMC = parentMC;
        this.link = link;
        this.channelName = channelName;
        this.listBaseMC = parentMC.createEmptyMovieClip("listBaseMC", parentMC.getNextHighestDepth());
        this.listBaseMC.attachMovie("loading", "loadingMC", this.listBaseMC.getNextHighestDepth());
        this.listBaseMC.loadingMC._x = 640;
        this.listBaseMC.loadingMC._y = 360;
        var __reg3 = this.listBaseMC.createTextField("errorText", this.listBaseMC.getNextHighestDepth(), 0, 360, 1280, 60);
        this.textFormat.font = "Arial";
        this.textFormat.align = "center";
        this.textFormat.bold = false;
        this.textFormat.size = 30;
        this.textFormat.color = 16777215;
        __reg3.setNewTextFormat(this.textFormat);
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onProgramListingXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.addListener("onXmlResponse", this, this.onProgramListingXmlResponse);
        link = this.attachDateSting(link);
        this.xmlInvoker.loadXML(link, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, true, false);
    }

    function attachDateSting(link)
    {
        var __reg4 = new Date();
        var __reg8 = null;
        var __reg2 = null;
        var __reg9 = undefined;
        var __reg1 = undefined;
        var __reg10 = undefined;
        var __reg5 = String(__reg4.getDate());
        var __reg11 = String(__reg4.getFullYear());
        var __reg6 = String(__reg4.getMonth() + 1);
        if (__reg5.length == 1) 
        {
            __reg5 = "0" + __reg5;
        }
        if (__reg6.length == 1) 
        {
            __reg6 = "0" + __reg6;
        }
        if (link.charAt(link.length - 1) != "/") 
        {
            link = link + "/";
        }
        __reg8 = __reg11 + "" + __reg6 + "" + __reg5;
        link = link + __reg8;
        __reg9 = __reg4.getTimezoneOffset();
        __reg1 = Math.floor(__reg9 / 60);
        __reg10 = Math.abs(__reg9 - __reg1 * 60);
        __reg1 = __reg1 * -1;
        __reg2 = String(__reg1);
        if (__reg2 >= 0) 
        {
            if (__reg1 < 10) 
            {
                __reg2 = "0" + __reg2;
            }
        }
        else 
        {
            __reg1 = Math.abs(__reg1);
            var __reg7 = String(__reg1);
            if (__reg1 > 9) 
            {
                __reg2 = "-" + __reg7;
            }
            else 
            {
                __reg2 = "-0" + __reg7;
            }
            __reg7 = null;
        }
        if (link.charAt(link.length - 1) != "/") 
        {
            link = link + "/";
        }
        link = link + (__reg2 + "/" + __reg10 + "/" + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode);
        if (__reg4 != null) 
        {
            false;
            __reg4 = null;
        }
        __reg5 = null;
        __reg11 = null;
        __reg6 = null;
        __reg8 = null;
        __reg2 = null;
        __reg9 = null;
        __reg1 = null;
        __reg10 = null;
        return link;
    }

    function onProgramListingXmlResponse()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            this.xml = this.xmlInvoker.getXmlObject();
        }
        this.onLoadXml(__reg3, __reg4);
        __reg3 = null;
        __reg4 = null;
    }

    function displayTitle()
    {
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.bold = true;
        this.textFormat.size = 40;
        this.textFormat.color = 16557312;
        var __reg2 = this.listBaseMC.createTextField("titleText", this.listBaseMC.getNextHighestDepth(), 108, 57, 1000, 60);
        __reg2.setNewTextFormat(this.textFormat);
        __reg2.htmlText = "Program Listing: " + this.channelName;
    }

    function createDateArea()
    {
        var __reg6 = 370;
        var __reg8 = this.programListX + this.listItemWidth - __reg6 - 15;
        var __reg7 = this.programListY - 35;
        var __reg9 = this.listBaseMC.createTextField("dayText", this.listBaseMC.getNextHighestDepth(), __reg8, __reg7, __reg6, 35);
        this.textFormat.font = "Arial";
        this.textFormat.align = "center";
        this.textFormat.bold = false;
        this.textFormat.size = 28;
        this.textFormat.color = 16622592;
        __reg9.setNewTextFormat(this.textFormat);
        var __reg2 = this.listBaseMC.attachMovie("dateArrowEnb", "rightArrowEnbMC", this.listBaseMC.getNextHighestDepth());
        __reg2._rotation = 180;
        var __reg4 = this.listBaseMC.attachMovie("dateArrowDis", "rightArrowDisMC", this.listBaseMC.getNextHighestDepth());
        __reg4._rotation = 180;
        var __reg3 = this.listBaseMC.attachMovie("dateArrowEnb", "leftArrowEnbMC", this.listBaseMC.getNextHighestDepth());
        var __reg5 = this.listBaseMC.attachMovie("dateArrowDis", "leftArrowDisMC", this.listBaseMC.getNextHighestDepth());
        __reg3._x = __reg8 - __reg3._width;
        __reg3._y = __reg7 + 10;
        __reg5._x = __reg3._x;
        __reg5._y = __reg3._y;
        __reg2._x = __reg8 + __reg6 + __reg2._width;
        __reg2._y = __reg7 + __reg2._height + 10;
        __reg4._x = __reg2._x;
        __reg4._y = __reg2._y;
        __reg3._visible = false;
        __reg5._visible = false;
        __reg2._visible = false;
        __reg4._visible = false;
        __reg3 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function onLoadXml()
    {
        var __reg5 = arguments[0];
        var __reg6 = arguments[1];
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        removeMovieClip(this.listBaseMC.loadingMC);
        if (__reg5) 
        {
            this.parseProgramListing();
            if (this.programList.length == 0) 
            {
                this.listBaseMC.errorText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PROGRAME_LISTING_NOT_AVAILABLE;
            }
            else 
            {
                var __reg4 = new Date();
                var __reg3 = 0;
                while (__reg3 < this.programList.length) 
                {
                    if (this.dateCompare(this.programList[__reg3].date, __reg4) == true) 
                    {
                        this.programListIdx = __reg3;
                        break;
                    }
                    ++__reg3;
                }
                false;
                __reg4 = null;
                this.setupPage();
                this.displayPrograms();
            }
        }
        else 
        {
            if (__reg6) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.PROGRAMLISTING_ITEMS_XML_TIMEOUT, "Program Listing", "Live", "NA");
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.PROGRAMLISTING_ITEMS_XML_NOT_LOADED, "Program Listing", "Live", "NA");
            }
            this.listBaseMC.errorText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_FETCH_PROGRAME_LISTING_FROM_SERVER_CHECK_CONNECTION;
        }
        __reg5 = null;
        __reg6 = null;
    }

    function parseProgramListing()
    {
        var __reg7 = null;
        this.programList = new Array();
        var __reg14 = new Date();
        var __reg13 = null;
        var __reg11 = null;
        var __reg4 = null;
        var __reg15 = null;
        var __reg16 = mx.xpath.XPathAPI.selectNodeList(this.xml.firstChild, "/xml/program_listings/program_listing");
        var __reg12 = 0;
        while (__reg12 < __reg16.length) 
        {
            __reg15 = __reg16[__reg12];
            __reg11 = mx.xpath.XPathAPI.selectSingleNode(__reg15, "/program_listing/date").firstChild.nodeValue.split("/");
            __reg14.setFullYear(Number(__reg11[2]), Number(__reg11[0]) - 1, Number(__reg11[1]));
            __reg14.setHours(0, 0, 0, 0);
            var __reg2 = null;
            var __reg5 = mx.xpath.XPathAPI.selectNodeList(__reg15, "/program_listing/programs/program");
            var __reg3 = 0;
            while (__reg3 < __reg5.length) 
            {
                var __reg6 = new Date();
                __reg6.setFullYear(__reg14.getFullYear(), __reg14.getMonth(), __reg14.getDate());
                __reg2 = __reg5[__reg3];
                __reg4 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/program/time").firstChild.nodeValue.split(":");
                __reg6.setHours(Number(__reg4[0]), Number(__reg4[1]), 0, 0);
                if (this.dateCompare(__reg13, __reg6) == false) 
                {
                    __reg7 = new Array();
                    this.programList.push({date: __reg6, programs: __reg7});
                    __reg13 = __reg6;
                }
                var __reg9 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/program/title").firstChild.nodeValue;
                var __reg10 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/program/image").firstChild.nodeValue;
                var __reg8 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/program/info").firstChild.nodeValue;
                __reg7.push({dateTime: __reg6, title: __reg9, image: __reg10, info: __reg8});
                __reg6 = null;
                __reg4 = null;
                __reg9 = null;
                __reg10 = null;
                __reg8 = null;
                ++__reg3;
            }
            __reg2 = null;
            __reg5 = null;
            __reg11 = null;
            ++__reg12;
        }
        __reg15 = null;
        __reg16 = null;
        __reg6 = null;
        __reg13 = null;
        __reg7 = null;
        false;
        __reg14 = null;
    }

    function setupPage()
    {
        var __reg5 = [1055268, 868182];
        var __reg4 = this.programListY + this.listItemHeight + this.listItemGap;
        this.displayTitle();
        this.createDateArea();
        var __reg9 = this.listBaseMC.attachMovie("separator", "horSeparatorMC", this.listBaseMC.getNextHighestDepth());
        __reg9._x = this.programListX;
        __reg9._y = this.programListY;
        this.textFormat.align = "left";
        this.textFormat.size = 28;
        this.textFormat.color = 16622592;
        var __reg8 = this.listBaseMC.createTextField("programTimeTitleText", this.listBaseMC.getNextHighestDepth(), this.programListX + 20, this.programListY + 7, this.timeFieldWidth, this.listItemHeight);
        __reg8.setNewTextFormat(this.textFormat);
        __reg8.htmlText = "Time";
        var __reg7 = this.listBaseMC.createTextField("programNameTitleText", this.listBaseMC.getNextHighestDepth(), this.programListX + this.timeFieldWidth, this.programListY + 7, this.programFieldWidth, this.listItemHeight);
        __reg7.setNewTextFormat(this.textFormat);
        __reg7.htmlText = "Program Name";
        var __reg2 = 0;
        while (__reg2 < this.numEntries) 
        {
            var __reg3 = this.listBaseMC.createTextField("programBgText" + __reg2, this.listBaseMC.getNextHighestDepth(), this.programListX, __reg2 * (this.listItemHeight + this.listItemGap) + __reg4, this.listItemWidth, this.listItemHeight);
            __reg3.background = true;
            __reg3.backgroundColor = __reg5[__reg2 % 2];
            __reg3 = null;
            ++__reg2;
        }
        if (this.programInfoText == null) 
        {
            var __reg10 = this.numEntries * (this.listItemHeight + this.listItemGap) - this.listItemGap + __reg4 - (this.programListY + this.programLogoHeight + 10);
            this.programInfoText = this.listBaseMC.createTextField("programInfoText", this.listBaseMC.getNextHighestDepth(), this.listBaseMC.titleText._x, this.programListY + this.programLogoHeight + 10, this.programLogoWidth, __reg10);
            this.textFormat.size = 22;
            this.textFormat.color = 16777215;
            this.programInfoText.background = true;
            this.programInfoText.backgroundColor = 789516;
            this.programInfoText.wordWrap = true;
            this.programInfoText.setNewTextFormat(this.textFormat);
        }
        this.displayArrows();
        this.programHlMC = this.listBaseMC.attachMovie("programSelector", "programHlMC", this.listBaseMC.getNextHighestDepth());
        var __reg6 = this.listBaseMC.attachMovie("separator", "verSeparatorMC", this.listBaseMC.getNextHighestDepth());
        __reg6._width = (this.numEntries + 1) * (this.listItemHeight + this.listItemGap) - this.listItemGap;
        __reg6._x = this.programListX + this.timeFieldWidth - 20;
        __reg6._y = this.programListY;
        __reg6._rotation = 90;
        __reg5 = null;
        __reg6 = null;
        __reg8 = null;
        __reg7 = null;
    }

    function displayArrows()
    {
        var __reg2 = this.listBaseMC.attachMovie("upArrowEnb", "upArrowEnbMC", this.listBaseMC.getNextHighestDepth());
        var __reg4 = this.listBaseMC.attachMovie("upArrowDis", "upArrowDisMC", this.listBaseMC.getNextHighestDepth());
        var __reg3 = this.listBaseMC.attachMovie("downArrowEnb", "downArrowEnbMC", this.listBaseMC.getNextHighestDepth());
        var __reg5 = this.listBaseMC.attachMovie("downArrowDis", "downArrowDisMC", this.listBaseMC.getNextHighestDepth());
        __reg2._x = this.programListX + this.listItemWidth + 10;
        __reg2._y = this.programListY + this.listItemHeight + this.listItemGap;
        __reg4._x = __reg2._x;
        __reg4._y = __reg2._y;
        __reg3._x = __reg2._x;
        __reg3._y = __reg2._y + this.numEntries * (this.listItemHeight + this.listItemGap) - this.listItemGap - __reg3._height;
        __reg5._x = __reg3._x;
        __reg5._y = __reg3._y;
        __reg2._visible = false;
        __reg4._visible = false;
        __reg3._visible = false;
        __reg5._visible = false;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function adjustArrows()
    {
        if (this.programListMC._y < this.programListMaskMC._y) 
        {
            this.listBaseMC.upArrowEnbMC._visible = true;
            this.listBaseMC.upArrowDisMC._visible = false;
        }
        else 
        {
            this.listBaseMC.upArrowEnbMC._visible = false;
            this.listBaseMC.upArrowDisMC._visible = true;
        }
        if (this.programListMC._y + this.programListHeight > this.programListMaskMC._y + this.programListMaskMC._height) 
        {
            this.listBaseMC.downArrowEnbMC._visible = true;
            this.listBaseMC.downArrowDisMC._visible = false;
            return;
        }
        this.listBaseMC.downArrowEnbMC._visible = false;
        this.listBaseMC.downArrowDisMC._visible = true;
    }

    function displayPrograms()
    {
        var __reg6 = this.programList[this.programListIdx].programs;
        this.listHlIdx = 0;
        this.showDate();
        if (this.programListMC != null) 
        {
            removeMovieClip(this.programListMaskMC);
            removeMovieClip(this.programListMC);
            removeMovieClip(this.programImageMC);
        }
        this.programImageMC = this.listBaseMC.createEmptyMovieClip("programImageMC", this.listBaseMC.getNextHighestDepth());
        this.programImageMC._x = this.listBaseMC.titleText._x;
        this.programImageMC._y = this.programListY;
        this.programListMC = this.listBaseMC.createEmptyMovieClip("programListMC", this.listBaseMC.getNextHighestDepth());
        this.programListMC._x = this.programListX;
        this.programListMC._y = this.programListY + this.listItemHeight + this.listItemGap;
        this.programListMaskMC = this.listBaseMC.attachMovie("infoPaneMask", "programListMaskMC", this.listBaseMC.getNextHighestDepth());
        this.programListMaskMC._x = this.programListMC._x;
        this.programListMaskMC._y = this.programListMC._y;
        this.programListMaskMC._width = this.listItemWidth;
        this.programListMaskMC._height = this.numEntries * (this.listItemHeight + this.listItemGap) - this.listItemGap;
        this.programListMC.setMask(this.programListMaskMC);
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.bold = true;
        this.textFormat.size = 26;
        this.textFormat.color = 16777215;
        var __reg2 = 0;
        while (__reg2 < __reg6.length) 
        {
            var __reg5 = this.programImageMC.createEmptyMovieClip("programLogoMC" + __reg2, this.programImageMC.getNextHighestDepth());
            __reg5._visible = false;
            var __reg4 = this.programListMC.createTextField("programTimeText" + __reg2, this.programListMC.getNextHighestDepth(), 20, __reg2 * (this.listItemHeight + this.listItemGap) + 7, this.timeFieldWidth, this.listItemHeight);
            __reg4.setNewTextFormat(this.textFormat);
            __reg4.htmlText = this.get24HrTimeStr(__reg6[__reg2].dateTime);
            var __reg3 = this.programListMC.createTextField("programNameText" + __reg2, this.programListMC.getNextHighestDepth(), this.timeFieldWidth, __reg2 * (this.listItemHeight + this.listItemGap) + 7, this.programFieldWidth, this.listItemHeight);
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.htmlText = __reg6[__reg2].title;
            __reg4 = null;
            __reg3 = null;
            __reg5 = null;
            ++__reg2;
        }
        this.programHighlight(0);
        this.programListHeight = __reg6.length * (this.listItemHeight + this.listItemGap) - this.listItemGap;
        this.adjustArrows();
        __reg6 = null;
    }

    function onLoadProgramImage(targetMC)
    {
        targetMC._width = this.programLogoWidth;
        targetMC._height = this.programLogoHeight;
    }

    function programHighlight(hlIndex)
    {
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.bold = true;
        this.textFormat.size = 26;
        this.textFormat.color = 16777215;
        this.programListMC["programTimeText" + this.programHlIdx].setTextFormat(this.textFormat);
        this.programListMC["programNameText" + this.programHlIdx].setTextFormat(this.textFormat);
        this.textFormat.color = 0;
        this.programListMC["programTimeText" + hlIndex].setTextFormat(this.textFormat);
        this.programListMC["programNameText" + hlIndex].setTextFormat(this.textFormat);
        this.programHlMC._x = this.listBaseMC["programBgText" + this.listHlIdx]._x;
        this.programHlMC._y = this.listBaseMC["programBgText" + this.listHlIdx]._y;
        this.programImageMC["programLogoMC" + this.programHlIdx]._visible = false;
        this.programImageMC["programLogoMC" + hlIndex]._visible = true;
        if (this.programImageMC["programLogoMC" + hlIndex].getBytesTotal() < 100) 
        {
            this.programImageLoader.loadClip(this.programList[this.programListIdx].programs[hlIndex].image, this.programImageMC["programLogoMC" + hlIndex]);
        }
        this.programHlIdx = hlIndex;
        if (this.programList[this.programListIdx].programs[this.programHlIdx].info != undefined && this.programList[this.programListIdx].programs[this.programHlIdx].info != null && this.programList[this.programListIdx].programs[this.programHlIdx].info != "") 
        {
            this.programInfoText.htmlText = this.programList[this.programListIdx].programs[this.programHlIdx].info;
            return;
        }
        this.programInfoText.htmlText = "";
    }

    function programLowlight()
    {
        this.textFormat.font = "Arial";
        this.textFormat.align = "left";
        this.textFormat.bold = false;
        this.textFormat.size = 24;
        this.textFormat.color = 16777215;
        this.programListMC["programTimeText" + this.programHlIdx].setTextFormat(this.textFormat);
        this.programListMC["programNameText" + this.programHlIdx].setTextFormat(this.textFormat);
    }

    function showDate()
    {
        var __reg2 = this.programList[this.programListIdx].date;
        this.listBaseMC.dayText.htmlText = this.weekDays[__reg2.getDay()] + ", " + this.months[__reg2.getMonth()] + " " + __reg2.getDate().toString() + ", " + __reg2.getFullYear().toString();
        if (this.programListIdx > 0) 
        {
            this.listBaseMC.leftArrowEnbMC._visible = true;
            this.listBaseMC.leftArrowDisMC._visible = false;
        }
        else 
        {
            this.listBaseMC.leftArrowEnbMC._visible = false;
            this.listBaseMC.leftArrowDisMC._visible = true;
        }
        if (this.programListIdx < this.programList.length - 1) 
        {
            this.listBaseMC.rightArrowEnbMC._visible = true;
            this.listBaseMC.rightArrowDisMC._visible = false;
        }
        else 
        {
            this.listBaseMC.rightArrowEnbMC._visible = false;
            this.listBaseMC.rightArrowDisMC._visible = true;
        }
        __reg2 = null;
    }

    function get24HrTimeStr(time)
    {
        var __reg2 = new String();
        var __reg3 = time.getHours().toString();
        var __reg1 = time.getMinutes().toString();
        if (__reg3.length == 1) 
        {
            __reg2 = __reg2 + "0";
        }
        __reg2 = __reg2 + __reg3;
        if (__reg1.length == 1) 
        {
            __reg1 = "0" + __reg1;
        }
        __reg2 = __reg2 + (":" + __reg1);
        __reg3 = null;
        __reg1 = null;
        return __reg2;
    }

    function moveProgramListUp()
    {
        if (this.programListMC._y < this.programListMaskMC._y) 
        {
            this.programListMC._y = this.programListMC._y + (this.listItemHeight + this.listItemGap);
            if (this.programListMC._y > this.programListMaskMC._y) 
            {
                this.programListMC._y = this.programListMaskMC._y;
            }
        }
    }

    function moveProgramListDown()
    {
        if (this.programListMC._y + this.programListMC._height > this.programListMaskMC._y + this.programListMaskMC._height) 
        {
            this.programListMC._y = this.programListMC._y - (this.listItemHeight + this.listItemGap);
            if (this.programListMC._y + this.programListHeight < this.programListMaskMC._y + this.programListMaskMC._height) 
            {
                this.programListMC._y = this.programListMaskMC._y + this.programListMaskMC._height - this.programListHeight;
            }
        }
    }

    function dateCompare(date1, date2)
    {
        if (date1 == null || date2 == null) 
        {
            return false;
        }
        if (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate()) 
        {
            return true;
        }
        return false;
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            removeMovieClip(this.parentMC.listBaseMC);
            this.onExit.notify();
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.programListIdx > 0) 
            {
                --this.programListIdx;
                this.displayPrograms();
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.programListIdx < this.programList.length - 1) 
            {
                ++this.programListIdx;
                this.displayPrograms();
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.programHlIdx > 0) 
            {
                if (this.listHlIdx == 0) 
                {
                    this.moveProgramListUp();
                }
                else 
                {
                    --this.listHlIdx;
                }
                this.programHighlight(this.programHlIdx - 1);
                this.adjustArrows();
            }
            return;
        }
        else if (__reg0 !== 40) 
        {
            return;
        }
        if (this.programHlIdx < this.programList[this.programListIdx].programs.length - 1) 
        {
            if (this.listHlIdx == this.numEntries - 1) 
            {
                this.moveProgramListDown();
            }
            else 
            {
                ++this.listHlIdx;
            }
            this.programHighlight(this.programHlIdx + 1);
            this.adjustArrows();
        }
        return;
    }

}

//Sprite 705
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.CardTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var titleX = null;
    var titleY = null;
    var titleWidth = null;
    var titleHeight = null;
    var titleTxtFormat = null;
    var itemImageX = null;
    var itemImageY = null;
    var itemImageWidth = null;
    var itemImageHeight = null;
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var rows: Number = 0;
    var columns: Number = 0;
    var descriptionX = null;
    var descriptionY = null;
    var descriptionWidth = null;
    var descriptionHeight = null;
    var descriptionTxtFormat = null;
    var currentItemsLink = null;
    var previousItemsLink = null;
    var drawColorButtons: Boolean = true;
    var programListing = null;
    var bottomRowIdx: Number = 0;
    var topRowIdx: Number = 0;
    var previousTopRowIdx: Number = 0;
    var previousBottomRowIdx: Number = 0;
    var currentRowIdx: Number = 0;
    var previousRowIdx: Number = 0;
    var channelToJump: Number = 0;
    var xml = null;
    var isBackPage = null;
    var playlistId = null;
    var itemType = null;
    var playlistIds = null;
    var validPlaylistIds = null;
    var playlistNumber: Number = 0;
    var totalItemsArray = null;
    var areaHeight;
    var areaStartX;
    var areaStartY;
    var areaWidth;
    var categoryId;
    var channelBarActive;
    var channelEpgLink;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var currentCategoryTitle;
    var currentItemIdx;
    var disableView;
    var displayLoadingSign;
    var enableView;
    var epgEnabled;
    var epgItem;
    var epgLink;
    var errorLoadingTier;
    var fetchItemDirectLink;
    var fn;
    var getItemIndex;
    var grandParentIdx;
    var initialItems;
    var isEnabled;
    var isFavoritesCategory;
    var isViewVisible;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var loadingMC;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onEnterKey;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parentIdx;
    var parentMC;
    var parseTier;
    var parseTierItems;
    var playContinuous;
    var prePreviousItemIdx;
    var previousItemIdx;
    var previousItemStartIdx;
    var selectedItem;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var startPlayback;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;
    var vodResponseLink;
    var wasPopupEnabled;

    function CardTier()
    {
        super();
        this.tierType = "DetailedMatrixTier";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.fn.onLoadTotItemsAPI = mx.utils.Delegate.create(this, this.onLoadTotItemsAPI);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTierItems;
    }

    function getItemStartIdx()
    {
        if (this.itemType == "dailymotionplaylist") 
        {
            return 0;
        }
        return Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
    }

    function getCurrentItemIdx()
    {
        if (this.itemType == "dailymotionplaylist") 
        {
            return 0;
        }
        return this.currentItemIdx;
    }

    function destroy()
    {
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.descriptionTxtFormat != null) 
        {
            delete this.descriptionTxtFormat;
            this.descriptionTxtFormat = null;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        if (this.xml != null) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        if (this.totalItemsArray != null) 
        {
            delete this.totalItemsArray;
            this.totalItemsArray = null;
        }
        if (this.playlistIds != null) 
        {
            delete this.playlistIds;
            this.playlistIds = null;
        }
        if (this.validPlaylistIds != null) 
        {
            delete this.validPlaylistIds;
            this.validPlaylistIds = null;
        }
        this.previousItemsLink = null;
        this.currentItemsLink = null;
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        var __reg4 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = this.containerStartX + this.containerWidth + 5;
        __reg4._y = this.containerStartY;
        __reg4._visible = false;
        var __reg3 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = __reg4._x;
        __reg3._y = this.containerStartY + this.containerHeight - __reg3._height;
        __reg3._visible = false;
        var __reg6 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.tierBaseMC.listingText._y = __reg3._y + __reg3._height;
        __reg6.autoSize = true;
        this.setTxtFormat("Arial", "right", 26, false, 16777215);
        __reg6.setNewTextFormat(this.textFormat);
        var __reg5 = this.tierBaseMC.createTextField("messageText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, this.containerStartY + this.containerHeight / 2, this.containerWidth, 30);
        __reg5.wordWrap = true;
        __reg5.autoSize = true;
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        __reg5.setNewTextFormat(this.textFormat);
        var __reg7 = this.tierBaseMC.createTextField("titleText", this.tierBaseMC.getNextHighestDepth(), this.titleX, this.titleY, this.titleWidth, this.titleHeight);
        __reg7.setNewTextFormat(this.titleTxtFormat);
        this.loadSelector();
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
        __reg3 = null;
        __reg4 = null;
        viewBaseMC = null;
        viewMC = null;
        parentMC = null;
        pageTitle = null;
        searchHelpLink = null;
        searchResultsLink = null;
        pageId = null;
        contType = null;
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CARDTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth;
        __reg2._height = this.itemHeight;
        this.onTierEvent.notify("onReady");
        __reg2 = null;
    }

    function drawColorbuttons()
    {
        if (this.pageTitle == "Search Results") 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Red", "EPG");
            this.onTierEvent.notify("colorButtonEvent", "disable", "Red");
        }
        else 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Yellow", "Add to Favorites");
            if (this.grandParentIdx == -1) 
            {
                this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
            }
        }
        this.drawColorButtons = false;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.listingText._x = this.tierBaseMC.downArrowMC._x - this.tierBaseMC.listingText._width - 15;
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        this.tierItems[this.getItemIndex(itemIdx)].itemHighlight();
        this.channelEpgLink = this.epgLink = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.epgBaseUrl + this.tierItems[this.getItemIndex(itemIdx)].categoryId;
        this.categoryId = this.tierItems[this.getItemIndex(itemIdx)].categoryId;
        if ((this.tierItems[this.getItemIndex(itemIdx)].itemType == "liveRTMP" || this.tierItems[this.getItemIndex(itemIdx)].itemType == "liveWMV" || this.tierItems[this.getItemIndex(itemIdx)].itemType == "livePlaylist") && !this.drawColorButtons && this.pageTitle == "Search Results") 
        {
            this.onTierEvent.notify("colorButtonEvent", "enable", "Red");
        }
        else 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Red");
        }
        itemIdx = null;
    }

    function itemUnHighlight(itemIdx)
    {
        this.tierItems[this.getItemIndex(itemIdx)].itemUnHighlight();
        itemIdx = null;
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
        this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
        this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
        this.displayArrows();
        currentItemId = null;
    }

    function enable()
    {
        this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
        this.onTierEvent.notify("colorButtonEvent", "enable", "Yellow");
        if (this.parentIdx != -1) 
        {
            this.tierBaseMC.tierSelectorMC._visible = true;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = true;
        this.itemHighlight(this.currentItemIdx);
        this.isEnabled = true;
        super.enable();
    }

    function disable(isRetrieving)
    {
        this.tierBaseMC.listingText.htmlText = "";
        this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
        if (!isRetrieving) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.tierBaseMC.selectorMC._visible = false;
        this.isEnabled = false;
        this.itemUnHighlight(this.currentItemIdx);
    }

    function findTotalItems()
    {
        var __reg2 = null;
        if (this.xml != null) 
        {
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.xml.ignoreWhite = true;
        this.xml.onLoad = this.fn.onLoadTotItemsAPI;
        if (this.itemType == "youtubeplaylist") 
        {
            __reg2 = "http://gdata.youtube.com/feeds/api/playlists/" + this.playlistId + "?max-results=0";
        }
        else if (this.itemType == "dailymotionplaylist") 
        {
            __reg2 = "https://api.dailymotion.com/playlist/" + this.playlistId + "?fields=videos_total";
        }
        this.xml.load(__reg2);
        __reg2 = null;
    }

    function onLoadTotItemsAPI(success)
    {
        if (success) 
        {
            if (this.itemType == "youtubeplaylist") 
            {
                var __reg5 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/feed/openSearch:totalResults").firstChild.nodeValue;
                var __reg6 = 0;
                if (__reg5 != null && __reg5 != undefined && __reg5 != "0") 
                {
                    __reg6 = Number(__reg5);
                    this.totalItemsArray.push(__reg6);
                    this.validPlaylistIds.push(this.playlistId);
                    this.totalItems = this.totalItems + __reg6;
                }
                ++this.playlistNumber;
                __reg6 = null;
                __reg5 = null;
            }
            else if (this.itemType == "dailymotionplaylist") 
            {
                var __reg3 = this.xml.toString();
                __reg3 = unescape(__reg3);
                __reg3 = this.replaceString(__reg3, "&quot;", "\"");
                var __reg2 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg3);
                for (var __reg4 in __reg2) 
                {
                    if (__reg4 == "videos_total") 
                    {
                        this.totalItems = this.totalItems + Number(__reg2[__reg4]);
                        this.totalItemsArray.push(Number(__reg2[__reg4]));
                        this.validPlaylistIds.push(this.playlistId);
                    }
                }
                ++this.playlistNumber;
                __reg3 = null;
                __reg2 = null;
                __reg4 = null;
            }
            if (this.playlistNumber <= this.playlistIds.length - 1 && this.playlistIds.length > 1) 
            {
                this.playlistId = this.playlistIds[this.playlistNumber];
                this.findTotalItems();
                return undefined;
            }
        }
        this.proceedDrawing();
        success = null;
    }

    function replaceString(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

    function proceedDrawing()
    {
        if (this.totalItems == 0 || this.totalItems == undefined || this.totalItems == NaN) 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_TotalItems_Zero");
            }
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CARDTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
            this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
            this.tierBaseMC.selectorMC._visible = false;
            this.displayArrows();
            this.removeLoadingMC();
            this.onTierEvent.notify("onDisplayMessage", "");
            if (this.grandParentIdx == -1 && this.parentIdx == -1) 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            }
            this.onTierEvent.notify("onDisplayItems", "zeroItems");
            return;
        }
        this.tierBaseMC.messageText.htmlText = "";
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.playlistIds.length > 1 && this.itemType == "youtubeplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.YoutubeMutiplePlaylistItemsPool();
        }
        else if (this.playlistIds.length > 1 && this.itemType == "dailymotionplaylist") 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.DailymotionMutiplePlaylistItemsPool();
        }
        else 
        {
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
        }
        this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
        this.itemPool.initialize(this.itemsLink, this.itemsStartIdx, this.maxItems, this.totalItems, this.parseTierItems, this.isBackPage, this.isFavoritesCategory, this.validPlaylistIds, this.itemType, this.totalItemsArray);
        this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
        this.itemContainerMC._y = this.containerStartY;
        this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        this.initialItems = true;
        this.itemPool.getPoolItems(this.currentItemIdx, -1, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
        }
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage, parentCurrentItemIdx, playlists, itemType, vodResponseLink)
    {
        this.playlistNumber = 0;
        if (this.playlistIds != null) 
        {
            delete this.playlistIds;
            this.playlistIds = null;
        }
        this.playlistIds = new Array();
        this.playlistIds = playlists.slice();
        var __reg2 = false;
        this.itemsStartIdx = itemsStartIdx;
        this.playlistId = this.playlistIds[this.playlistNumber];
        this.itemType = itemType;
        this.isBackPage = isBackPage;
        this.vodResponseLink = vodResponseLink;
        if (this.itemsLink != itemsLink) 
        {
            __reg2 = true;
        }
        this.itemsLink = itemsLink;
        this.playContinuous = playContinuous;
        this.currentCategoryTitle = this.tierBaseMC.titleText.htmlText = title;
        this.currentItemsLink = this.previousItemsLink = itemsLink;
        this.tierBaseMC.selectorMC._width = this.itemWidth;
        this.tierBaseMC.selectorMC._height = this.itemHeight;
        if (__reg2) 
        {
            this.bottomRowIdx = 0;
            this.topRowIdx = 0;
            this.previousTopRowIdx = 0;
            this.previousBottomRowIdx = 0;
            this.currentRowIdx = 0;
            this.previousRowIdx = 0;
            this.tierBaseMC.upArrowMC._visible = false;
            this.tierBaseMC.downArrowMC._visible = false;
            this.grandParentIdx = grandParentIdx;
            this.parentIdx = parentIdx;
            if (this.tierItems != null) 
            {
                this.tierItems = null;
            }
            if (this.itemPool != null) 
            {
                this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.destroy();
                delete this.itemPool;
                this.itemPool = null;
            }
            if (this.itemContainerMC != null) 
            {
                this.itemContainerMC.removeMovieClip();
                this.itemContainerMC = null;
            }
            if (itemType == "dailymotionplaylist" || itemType == "youtubeplaylist") 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                if (this.validPlaylistIds != null) 
                {
                    delete this.validPlaylistIds;
                    this.validPlaylistIds = null;
                }
                this.totalItemsArray = new Array();
                this.validPlaylistIds = new Array();
                this.totalItems = 0;
                this.findTotalItems();
            }
            else 
            {
                this.totalItems = totalItems;
                this.proceedDrawing();
            }
        }
        else 
        {
            this.currentItemIdx = this.currentRowIdx * this.columns;
            this.onTierEvent.notify("onDisplayItems");
        }
        title = null;
        grandParentIdx = null;
        parentIdx = null;
        itemsStartIdx = null;
        totalItems = null;
        itemsLink = null;
        playContinuous = null;
        isBackPage = null;
        __reg2 = null;
        playlists = null;
        itemType = null;
        vodResponseLink = null;
    }

    function onGridTierPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.channelBarActive) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.prePreviousItemIdx;
                this.itemsStartIdx = this.previousItemStartIdx;
                this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
                this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
                this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            }
            else 
            {
                if (this.currentRowIdx > this.previousRowIdx) 
                {
                    --this.currentRowIdx;
                    --this.previousRowIdx;
                }
                else if (this.currentRowIdx < this.previousRowIdx) 
                {
                    ++this.currentRowIdx;
                    ++this.previousRowIdx;
                }
                this.currentItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.prePreviousItemIdx;
                this.bottomRowIdx = this.previousBottomRowIdx;
                this.topRowIdx = this.previousTopRowIdx;
            }
            this.itemHighlight(this.currentItemIdx);
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CARDTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CARDTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CARDTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
            if (this.initialItems && !this.channelBarActive) 
            {
                this.errorLoadingTier = true;
                this.onTierEvent.notify("onErrorLoading");
                this.tierBaseMC.listingText.htmlText = "";
            }
            if (!this.isViewVisible) 
            {
                this.initialItems = false;
                this.enableView();
            }
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            this.errorLoadingTier = false;
            this.tierItems = __reg3;
            this.currentRowIdx = this.topRowIdx = this.currentItemIdx / this.columns;
            this.bottomRowIdx = this.topRowIdx + (this.rows - 1);
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentRowIdx * this.columns + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            if (this.tierItems.length > (this.rows - 1) * this.columns) 
            {
                var __reg5 = this.tierItems.length - (this.rows - 1) * this.columns;
                var __reg4 = 0;
                while (__reg4 < __reg5) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
                __reg5 = null;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentRowIdx * this.columns + (this.columns - 1) - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.onTierEvent.notify("onDisplayItems");
            this.initialItems = false;
        }
        __reg3 = null;
        __reg4 = null;
        arguments = null;
    }

    function displayItems()
    {
        var __reg9 = undefined;
        var __reg4 = undefined;
        var __reg8 = 0;
        var __reg3 = 0;
        this.onTierEvent.notify("onDisplayMessage", "");
        this.tierBaseMC.messageText.htmlText = "";
        this.itemContainerMC._x = this.containerStartX;
        if (this.initialItems) 
        {
            var __reg7 = 0;
            __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                this.drawTierItem(__reg5, this.currentRowIdx * this.columns + __reg5, __reg7, __reg3);
                ++__reg3;
                if (__reg3 == this.columns) 
                {
                    __reg3 = 0;
                    ++__reg7;
                }
                ++__reg5;
            }
            __reg7 = null;
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg9 = Math.abs((this.currentRowIdx - this.rows) * this.columns);
            this.removeTierItems(__reg9);
            __reg5 = (this.rows - 1) * this.columns;
            while (__reg5 < this.tierItems.length) 
            {
                this.drawTierItem(__reg5, this.currentRowIdx * this.columns + __reg8, this.rows, __reg3);
                ++__reg8;
                ++__reg3;
                ++__reg5;
            }
            __reg6 = 0;
            while (__reg6 < this.tierItems.length) 
            {
                __reg4 = this.itemIndicies[0] + __reg6;
                this.itemContainerMC["itemBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y;
                ++__reg6;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            __reg9 = Math.abs((this.currentRowIdx + this.rows) * this.columns);
            this.removeTierItems(__reg9);
            var __reg5 = 0;
            while (__reg5 < this.columns) 
            {
                this.drawTierItem(__reg5, this.currentRowIdx * this.columns + __reg5, -1, __reg3);
                ++__reg3;
                ++__reg5;
            }
            var __reg6 = 0;
            while (__reg6 < this.tierItems.length) 
            {
                __reg4 = this.itemIndicies[0] + __reg6;
                this.itemContainerMC["itemBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg4]._y = this.itemContainerMC["itemBaseMC" + __reg4]._y;
                ++__reg6;
            }
        }
        this.displayArrows();
        if (_global.currentApplication != "MyJadoo" && this.drawColorButtons) 
        {
            this.drawColorbuttons();
        }
        this.removeLoadingMC();
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._y;
        if (this.isViewVisible) 
        {
            if (this.isEnabled == true) 
            {
                this.itemHighlight(this.currentItemIdx);
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.tierBaseMC.selectorMC._visible = true;
            }
        }
        else 
        {
            this.onEnterKey();
        }
        __reg6 = null;
        __reg5 = null;
        __reg9 = null;
        __reg4 = null;
        __reg8 = null;
        __reg3 = null;
    }

    function removeTierItems(clearItemId)
    {
        var __reg2 = 0;
        while (__reg2 < this.columns) 
        {
            this.itemContainerMC["itemBaseMC" + clearItemId].removeMovieClip();
            this.itemContainerMC["favoriteIconBaseMC" + clearItemId].removeMovieClip();
            ++clearItemId;
            ++__reg2;
        }
        __reg2 = null;
        clearItemId = null;
    }

    function drawTierItem(itemIndex, yIndex, rowNo, colNo)
    {
        var __reg7 = (this.containerWidth - this.itemWidth * this.columns) / (this.columns - 1);
        var __reg6 = (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1);
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + yIndex, this.itemContainerMC.getNextHighestDepth());
        __reg3._x = colNo * (this.itemWidth + __reg7);
        __reg3._y = rowNo * (this.itemHeight + __reg6);
        this.tierItems[itemIndex].createCardItem(__reg3, this.itemWidth, this.itemHeight, this.pageTitle);
        var __reg4 = -1;
        __reg4 = com.jadoo.as2.JadooPlus.Features.Favorites.searchFavorites(this.tierItems[itemIndex].itemId, this.tierItems[itemIndex].itemType, _global.currentApplication);
        if (__reg4 != -1) 
        {
            this.drawFavoriteIcon(yIndex);
        }
        __reg4 = null;
        __reg7 = null;
        __reg6 = null;
        __reg3 = null;
        colNo = null;
        rowNo = null;
        itemIndex = null;
        yIndex = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomRowIdx == Math.ceil(this.totalItems / this.columns) - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topRowIdx > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
        this.tierBaseMC.listingText.htmlText = "";
    }

    function terminateDisplay()
    {
    }

    function onExitProgramListing()
    {
        this.enableView();
        this.programListing.destroy();
        delete this.programListing;
        this.programListing = null;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.tierBaseMC.attachMovie("loadingView", "loadingMC", this.tierBaseMC.getNextHighestDepth(), {_x: this.areaStartX + this.areaWidth / 2, _y: this.areaStartY + this.areaHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function loadNextItem()
    {
        this.isViewVisible = false;
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        ++this.currentItemIdx;
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx % this.columns == 0) 
        {
            ++this.currentRowIdx;
            if (this.currentRowIdx > this.bottomRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                ++this.bottomRowIdx;
                ++this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "youtube" || this.selectedItem.itemType == "dailymotion") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "youtube" || this.selectedItem.itemType == "dailymotion") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function loadPreviousItem()
    {
        this.isViewVisible = false;
        this.itemUnHighlight(this.currentItemIdx);
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        --this.currentItemIdx;
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
        {
            --this.currentRowIdx;
            if (this.currentRowIdx < this.topRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                if (this.tierItems.length > (this.rows - 1) * this.columns) 
                {
                    --this.bottomRowIdx;
                }
                --this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "youtube" || this.selectedItem.itemType == "dailymotion") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "youtube" || this.selectedItem.itemType == "dailymotion") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentRowIdx < Math.ceil(this.totalItems / this.columns) - 1 && this.currentRowIdx != null && this.currentRowIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentRowIdx;
                if (this.currentItemIdx + this.columns > this.totalItems - 1) 
                {
                    this.currentItemIdx = this.totalItems - 1;
                }
                else 
                {
                    this.currentItemIdx = this.currentItemIdx + this.columns;
                }
                if (this.currentRowIdx > this.bottomRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    ++this.bottomRowIdx;
                    ++this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.currentItemIdx - this.columns >= 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentRowIdx;
                this.currentItemIdx = this.currentItemIdx - this.columns;
                if (this.currentRowIdx < this.topRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    if (this.tierItems.length > (this.rows - 1) * this.columns) 
                    {
                        --this.bottomRowIdx;
                    }
                    --this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentItemIdx % this.columns == 0 && this.parentIdx != -1) 
            {
                this.onTierEvent.notify("onLooseFocus");
            }
            else if (this.currentItemIdx > 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentItemIdx;
                if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
                {
                    --this.currentRowIdx;
                    if (this.currentRowIdx < this.topRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        if (this.tierItems.length > (this.rows - 1) * this.columns) 
                        {
                            --this.bottomRowIdx;
                        }
                        --this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.currentItemIdx < this.totalItems - 1 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentItemIdx;
                if (this.currentItemIdx % this.columns == 0) 
                {
                    ++this.currentRowIdx;
                    if (this.currentRowIdx > this.bottomRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        ++this.bottomRowIdx;
                        ++this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName);
                }
                this.onEnterKey();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        else if (__reg0 === Key.GREEN) 
        {
            if (this.pageTitle != "Search Results" && (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveRTMP" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveWMV" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "livePlaylist")) 
            {
                if (this.netStatus == "Up") 
                {
                    if (this.programListing == null) 
                    {
                        this.programListing = new com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing();
                    }
                    this.disableView();
                    this.programListing.onExit.addListener(this, this.onExitProgramListing);
                    this.programListing.display(this.parentMC, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemProgramListing);
                }
                else 
                {
                    this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                }
            }
        }
        super.onKeyDown();
    }

    function notifyViewToProceed(selectedItemId)
    {
        this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(selectedItemId)].itemLink, null, false, "", this.wasPopupEnabled);
        selectedItemId = null;
    }

    function drawFavoriteIcon(itemIdx)
    {
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("favoriteIconBaseMC" + itemIdx, this.itemContainerMC.getNextHighestDepth());
        __reg3._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        __reg3._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        var __reg2 = __reg3.attachMovie("favoriteIcon", "favoriteIconMC", __reg3.getNextHighestDepth());
        __reg2._x = __reg2._x - __reg2._width / 2;
        __reg2._y = __reg2._y - __reg2._height / 2;
        __reg3 = null;
        __reg2 = null;
        itemIdx = null;
    }

    function removeFavoriteIcon(itemIdx)
    {
        removeMovieClip(this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC);
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC = null;
        itemIdx = null;
    }

}

//Sprite 706
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.GroupSubTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var titleX = null;
    var titleY = null;
    var titleWidth = null;
    var titleHeight = null;
    var titleTxtFormat = null;
    var rows: Number = 0;
    var columns: Number = 0;
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var groupImageWidth: Number = 0;
    var groupImageHeight: Number = 0;
    var grandParentIdx = null;
    var parentIdx = null;
    var tweenStartTimerId: Number = -1;
    var itemNameText = null;
    var itemImgLoaderTimerId: Number = -1;
    var loadInterval: Number = 500;
    var initialItems: Boolean = true;
    var groupInfo = null;
    var bottomRowIdx: Number = 0;
    var topRowIdx: Number = 0;
    var previousTopRowIdx: Number = 0;
    var previousBottomRowIdx: Number = 0;
    var currentRowIdx: Number = 0;
    var previousRowIdx: Number = 0;
    var areaStartX;
    var channelBarActive;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var currentItemIdx;
    var enableView;
    var errorLoadingTier;
    var fn;
    var getItemIndex;
    var isEnabled;
    var isViewVisible;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parseTier;
    var parseTierItems;
    var previousItemIdx;
    var previousItemStartIdx;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;
    var viewBaseMC;

    function GroupSubTier()
    {
        super();
        this.tierType = "GroupSubTier";
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onGetPoolItems: mx.utils.Delegate.create(this, this.onGetPoolItems), onGetCachedSelector: mx.utils.Delegate.create(this, this.onGetCachedSelector)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parseTier = com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseTierItems;
        this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
    }

    function getItemStartIdx()
    {
        return Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
    }

    function destroy()
    {
        if (this.groupInfo != null) 
        {
            this.groupInfo.removeListener("onBack", this, this.onGroupInfoBack);
            this.groupInfo.destroy();
            delete this.groupInfo;
            this.groupInfo = null;
        }
        if (this.itemImgLoaderTimerId != -1) 
        {
            clearInterval(this.itemImgLoaderTimerId);
            this.itemImgLoaderTimerId = -1;
        }
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        this.itemContainerMC = null;
        this.itemNameText = null;
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, null);
        var __reg3 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.containerStartX + this.containerWidth - __reg3._width;
        __reg3._y = this.containerStartY - __reg3._height - 10;
        __reg3._visible = false;
        var __reg4 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = this.containerStartY + this.containerHeight + 10;
        __reg4._visible = false;
        var __reg6 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.tierBaseMC.listingText._y = __reg4._y - 5;
        __reg6.autoSize = true;
        this.setTxtFormat("Arial", "right", 22, false, 16777215);
        __reg6.setNewTextFormat(this.textFormat);
        var __reg5 = this.tierBaseMC.createTextField("messageText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, this.containerStartY + this.containerHeight / 2, this.containerWidth, 30);
        __reg5.wordWrap = true;
        __reg5.autoSize = true;
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        __reg5.setNewTextFormat(this.textFormat);
        var __reg7 = this.tierBaseMC.createTextField("titleText", this.tierBaseMC.getNextHighestDepth(), this.titleX, this.titleY, this.titleWidth, this.titleHeight);
        __reg7.setNewTextFormat(this.titleTxtFormat);
        this.loadSelector();
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        viewBaseMC = null;
        viewMC = null;
        parentMC = null;
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "IMG");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        filePath = null;
        __reg2 = null;
    }

    function onLoadItemSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadItemSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GROUPSUBTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth;
        __reg2._height = this.itemHeight;
        this.onTierEvent.notify("onReady");
        targetMC = null;
        __reg2 = null;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.listingText._x = this.tierBaseMC.downArrowMC._x - this.tierBaseMC.listingText._width - 15;
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        this.tierItems[this.getItemIndex(itemIdx)].itemHighlight();
    }

    function itemUnHighlight(itemIdx)
    {
        this.tierItems[this.getItemIndex(itemIdx)].itemUnHighlight();
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
        this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
        this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
        this.displayArrows();
        currentItemId = null;
    }

    function enable()
    {
        this.tierBaseMC.tierSelectorMC._visible = true;
        if (this.itemImgLoaderTimerId == -1) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.tierBaseMC.selectorMC._visible = true;
            this.itemHighlight(this.currentItemIdx);
        }
        this.isEnabled = true;
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.itemUnHighlight(this.currentItemIdx);
        this.tierBaseMC.selectorMC._visible = false;
        this.tierBaseMC.itemInfoText.htmlText = "";
        this.itemNameText.htmlText = "";
        this.tierBaseMC.listingText.htmlText = "";
        this.isEnabled = false;
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage, channelListLink, epgLink)
    {
        var __reg3 = false;
        this.itemsStartIdx = itemsStartIdx;
        this.totalItems = totalItems;
        if (this.itemsLink != itemsLink || this.errorLoadingTier) 
        {
            __reg3 = true;
        }
        this.itemsLink = itemsLink;
        this.tierBaseMC.titleText.htmlText = title;
        if (__reg3) 
        {
            this.grandParentIdx = grandParentIdx;
            this.parentIdx = parentIdx;
            this.bottomRowIdx = 0;
            this.topRowIdx = 0;
            this.previousTopRowIdx = 0;
            this.previousBottomRowIdx = 0;
            this.currentRowIdx = 0;
            this.previousRowIdx = 0;
            this.tierBaseMC.upArrowMC._visible = false;
            this.tierBaseMC.downArrowMC._visible = false;
            this.grandParentIdx = grandParentIdx;
            this.parentIdx = parentIdx;
            if (this.tierItems != null) 
            {
                this.tierItems = null;
            }
            if (this.itemPool != null) 
            {
                this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.destroy();
                delete this.itemPool;
                this.itemPool = null;
            }
            if (this.itemContainerMC != null) 
            {
                this.itemContainerMC.removeMovieClip();
                this.itemContainerMC = null;
            }
            if (totalItems == 0) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GROUPSUBTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
                this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
                this.tierBaseMC.selectorMC._visible = false;
                this.displayArrows();
                this.onTierEvent.notify("onDisplayMessage", "");
                this.onTierEvent.notify("onDisplayItems");
            }
            else 
            {
                this.tierBaseMC.messageText.htmlText = "";
                this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
                this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.initialize(itemsLink, itemsStartIdx, this.maxItems, totalItems, this.parseTierItems, isBackPage);
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
                itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                this.onTierEvent.notify("onDisplayMessage", "Retrieving ...");
                this.itemPool.getPoolItems(this.currentItemIdx, -1, itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
                this.initialItems = true;
            }
        }
        else 
        {
            this.currentItemIdx = this.currentRowIdx * this.columns;
            this.onTierEvent.notify("onDisplayItems");
        }
        title = null;
        grandParentIdx = null;
        parentIdx = null;
        itemsStartIdx = null;
        totalItems = null;
        itemsLink = null;
        playContinuous = null;
        isBackPage = null;
        channelListLink = null;
        epgLink = null;
        __reg3 = null;
    }

    function onGridTierPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.channelBarActive) 
            {
                this.currentItemIdx = this.previousItemIdx;
                this.itemsStartIdx = this.previousItemStartIdx;
                this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
                this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
                this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            }
            else 
            {
                if (this.currentRowIdx > this.previousRowIdx) 
                {
                    --this.currentRowIdx;
                    --this.previousRowIdx;
                    if (Math.abs(this.currentItemIdx - this.previousItemIdx) == this.columns) 
                    {
                        this.currentItemIdx = this.previousItemIdx;
                        this.previousItemIdx = this.currentItemIdx - this.columns;
                    }
                    else if (Math.abs(this.currentItemIdx - this.previousItemIdx) == 1) 
                    {
                        this.currentItemIdx = this.previousItemIdx;
                        this.previousItemIdx = this.currentItemIdx - 1;
                    }
                }
                else if (this.currentRowIdx < this.previousRowIdx) 
                {
                    ++this.currentRowIdx;
                    ++this.previousRowIdx;
                    if (Math.abs(this.currentItemIdx - this.previousItemIdx) == this.columns) 
                    {
                        this.currentItemIdx = this.previousItemIdx;
                        this.previousItemIdx = this.currentItemIdx + this.columns;
                    }
                    else if (Math.abs(this.currentItemIdx - this.previousItemIdx) == 1) 
                    {
                        this.currentItemIdx = this.previousItemIdx;
                        this.previousItemIdx = this.currentItemIdx + 1;
                    }
                }
                this.bottomRowIdx = this.previousBottomRowIdx;
                this.topRowIdx = this.previousTopRowIdx;
            }
            this.itemHighlight(this.currentItemIdx);
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GROUPSUBTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GROUPSUBTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.GROUPSUBTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (this.initialItems && !this.channelBarActive) 
            {
                this.errorLoadingTier = true;
                this.onTierEvent.notify("onErrorLoading");
                this.tierBaseMC.listingText.htmlText = "";
            }
            if (!this.isViewVisible) 
            {
                this.initialItems = false;
                this.enableView();
            }
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            if (this.channelBarActive) 
            {
                if (this.itemContainerMC != null) 
                {
                    this.itemContainerMC.removeMovieClip();
                    this.itemContainerMC = null;
                }
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
            }
            this.errorLoadingTier = false;
            this.tierItems = __reg3;
            this.currentRowIdx = this.topRowIdx = this.currentItemIdx / this.columns;
            this.bottomRowIdx = this.topRowIdx + (this.rows - 1);
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentRowIdx * this.columns + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            if (this.tierItems.length > (this.rows - 1) * this.columns) 
            {
                var __reg5 = this.tierItems.length - (this.rows - 1) * this.columns;
                var __reg4 = 0;
                while (__reg4 < __reg5) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
                __reg5 = null;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentRowIdx * this.columns + (this.columns - 1) - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.onTierEvent.notify("onDisplayItems");
            this.initialItems = false;
        }
        else 
        {
            this.itemHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        __reg3 = null;
        __reg4 = null;
        arguments = null;
    }

    function displayItems()
    {
        var __reg8 = undefined;
        var __reg5 = undefined;
        var __reg7 = 0;
        var __reg2 = 0;
        this.onTierEvent.notify("onDisplayMessage", "");
        this.tierBaseMC.messageText.htmlText = "";
        this.itemContainerMC._x = this.containerStartX;
        if (this.initialItems) 
        {
            var __reg6 = 0;
            __reg3 = 0;
            while (__reg3 < this.tierItems.length) 
            {
                this.drawTierItem(__reg3, this.currentRowIdx * this.columns + __reg3, __reg6, __reg2);
                ++__reg2;
                if (__reg2 == this.columns) 
                {
                    __reg2 = 0;
                    ++__reg6;
                }
                ++__reg3;
            }
            __reg6 = null;
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg8 = Math.abs((this.currentRowIdx - this.rows) * this.columns);
            this.removeTierItems(__reg8);
            __reg3 = (this.rows - 1) * this.columns;
            while (__reg3 < this.tierItems.length) 
            {
                this.drawTierItem(__reg3, this.currentRowIdx * this.columns + __reg7, this.rows, __reg2);
                ++__reg7;
                ++__reg2;
                ++__reg3;
            }
            __reg4 = 0;
            while (__reg4 < this.tierItems.length) 
            {
                __reg5 = this.itemIndicies[0] + __reg4;
                this.itemContainerMC["itemBaseMC" + __reg5]._y = this.itemContainerMC["itemBaseMC" + __reg5]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                ++__reg4;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            __reg8 = Math.abs((this.currentRowIdx + this.rows) * this.columns);
            this.removeTierItems(__reg8);
            var __reg3 = 0;
            while (__reg3 < this.columns) 
            {
                this.drawTierItem(__reg3, this.currentRowIdx * this.columns + __reg3, -1, __reg2);
                ++__reg2;
                ++__reg3;
            }
            var __reg4 = 0;
            while (__reg4 < this.tierItems.length) 
            {
                __reg5 = this.itemIndicies[0] + __reg4;
                this.itemContainerMC["itemBaseMC" + __reg5]._y = this.itemContainerMC["itemBaseMC" + __reg5]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                ++__reg4;
            }
        }
        this.displayArrows();
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._y;
        if (this.isEnabled == true) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.tierBaseMC.selectorMC._visible = true;
        }
    }

    function removeTierItems(clearItemId)
    {
        var __reg2 = 0;
        while (__reg2 < this.columns) 
        {
            this.itemContainerMC["itemBaseMC" + clearItemId].removeMovieClip();
            ++clearItemId;
            ++__reg2;
        }
        __reg2 = null;
        clearItemId = null;
    }

    function drawTierItem(itemIndex, yIndex, rowNo, colNo)
    {
        var __reg4 = (this.containerWidth - this.itemWidth * this.columns) / (this.columns - 1);
        var __reg3 = (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1);
        var __reg2 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + yIndex, this.itemContainerMC.getNextHighestDepth());
        __reg2._x = colNo * (this.itemWidth + __reg4);
        __reg2._y = rowNo * (this.itemHeight + __reg3);
        this.tierItems[itemIndex].create(__reg2, this.itemWidth, this.itemHeight, this.groupImageWidth, this.groupImageHeight);
        __reg4 = null;
        __reg3 = null;
        __reg2 = null;
        colNo = null;
        rowNo = null;
        itemIndex = null;
        yIndex = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomRowIdx == Math.ceil(this.totalItems / this.columns) - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topRowIdx > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
        this.tierBaseMC.listingText.htmlText = "";
    }

    function terminateDisplay()
    {
        if (this.itemImgLoaderTimerId != -1) 
        {
            clearInterval(this.itemImgLoaderTimerId);
            this.itemImgLoaderTimerId = -1;
        }
    }

    function onGroupInfoBack()
    {
        this.groupInfo.removeListener("onBack", this, this.onGroupInfoBack);
        this.groupInfo.destroy();
        delete this.groupInfo;
        this.groupInfo = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentRowIdx < Math.ceil(this.totalItems / this.columns) - 1) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentRowIdx;
                if (this.currentItemIdx + this.columns > this.totalItems - 1) 
                {
                    this.currentItemIdx = this.totalItems - 1;
                }
                else 
                {
                    this.currentItemIdx = this.currentItemIdx + this.columns;
                }
                if (this.currentRowIdx > this.bottomRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    ++this.bottomRowIdx;
                    ++this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.currentItemIdx - this.columns >= 0) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentRowIdx;
                this.currentItemIdx = this.currentItemIdx - this.columns;
                if (this.currentRowIdx < this.topRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    if (this.tierItems.length > (this.rows - 1) * this.columns) 
                    {
                        --this.bottomRowIdx;
                    }
                    --this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentItemIdx % this.columns == 0 && this.parentIdx != -1) 
            {
                this.onTierEvent.notify("onLooseFocus");
            }
            else if (this.currentItemIdx > 0) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentItemIdx;
                if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
                {
                    --this.currentRowIdx;
                    if (this.currentRowIdx < this.topRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        if (this.tierItems.length > (this.rows - 1) * this.columns) 
                        {
                            --this.bottomRowIdx;
                        }
                        --this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.currentItemIdx < this.totalItems - 1) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentItemIdx;
                if (this.currentItemIdx % this.columns == 0) 
                {
                    ++this.currentRowIdx;
                    if (this.currentRowIdx > this.bottomRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        ++this.bottomRowIdx;
                        ++this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                if (this.groupInfo != null) 
                {
                    this.groupInfo.removeListener("onBack", this, this.onGroupInfoBack);
                    this.groupInfo.destroy();
                    delete this.groupInfo;
                    this.groupInfo = null;
                }
                this.groupInfo = new com.jadoo.as2.MyJadoo.GroupInfo();
                this.groupInfo.addListener("onBack", this, this.onGroupInfoBack);
                this.groupInfo.create(this.viewBaseMC, this.tierItems[this.getItemIndex(this.currentItemIdx)]);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        super.onKeyDown();
    }

}

//Sprite 707
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.GroupInfo
{
    var groupItem = null;
    var infoBaseMC = null;
    var onBack = null;
    var keyListener = null;
    var groupImageLoader = null;
    var groupImageLoaderListener = null;
    var btnIdx: Number = 0;
    var buttonCount: Number = 2;
    var subscribeXml = null;
    var textFormat = null;
    var channelRows: Number = 5;
    var channelCols: Number = 4;
    var channelXml = null;
    var channelsList = null;
    var channelContainerMC = null;
    var channelContainerStartX: Number = 155;
    var channelContainerStartY: Number = 335;
    var channelWidth: Number = 240;
    var channelHeight: Number = 39;
    var pageIdx: Number = 0;
    var fn = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var xmlInvoker = null;
    var detailXmlInvoker = null;
    var detailXml = null;

    function GroupInfo()
    {
        this.onBack = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.groupImageLoader = new MovieClipLoader();
        this.groupImageLoaderListener = new Object();
        this.groupImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadGroupImage);
        this.groupImageLoader.addListener(this.groupImageLoaderListener);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function create(parentMC, groupItem)
    {
        this.groupItem = groupItem;
        this.infoBaseMC = parentMC.createEmptyMovieClip("infoBaseMC", parentMC.getNextHighestDepth());
        var __reg11 = this.infoBaseMC.attachMovie("groupInfoBg", "infoBgMC", this.infoBaseMC.getNextHighestDepth());
        __reg11._width = 1280;
        __reg11._height = 720;
        var __reg12 = this.infoBaseMC.createEmptyMovieClip("titleContainerMC", this.infoBaseMC.getNextHighestDepth());
        var __reg3 = __reg12.createTextField("groupTitleText", __reg12.getNextHighestDepth(), 140, 55, __reg11._width - 280, 0);
        this.setTxtFormat("Arial", "left", 30, false, 15441692);
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.htmlText = groupItem.groupName;
        var __reg7 = __reg12.attachMovie("MaskMC", "TitleMaskMC", __reg12.getNextHighestDepth());
        __reg7._x = __reg3._x;
        __reg7._y = __reg3._y;
        __reg7._width = __reg3._width;
        __reg7._height = __reg3._height;
        __reg12.setMask(__reg7);
        var __reg15 = this.infoBaseMC.createEmptyMovieClip("groupImageMC", this.infoBaseMC.getNextHighestDepth());
        __reg15._x = 151;
        __reg15._y = 111;
        var __reg5 = this.infoBaseMC.createTextField("creationDateText", this.infoBaseMC.getNextHighestDepth(), 270, 103, 0, 0);
        this.setTxtFormat("Arial", "left", 26, false, 16777215);
        __reg5.autoSize = true;
        __reg5.setNewTextFormat(this.textFormat);
        __reg5.htmlText = "Date Created  :  " + groupItem.creationDate;
        var __reg13 = this.infoBaseMC.createTextField("modifyDateText", this.infoBaseMC.getNextHighestDepth(), __reg5._x, __reg5._y + 40, 0, 0);
        __reg13.autoSize = true;
        __reg13.setNewTextFormat(this.textFormat);
        __reg13.htmlText = "Date Modified :  " + groupItem.modificationDate;
        var __reg8 = this.infoBaseMC.createTextField("membersText", this.infoBaseMC.getNextHighestDepth(), 1120, __reg5._y, 0, 0);
        this.setTxtFormat("Arial", "right", 26, false, 16777215);
        __reg8.autoSize = "right";
        __reg8.setNewTextFormat(this.textFormat);
        if (isNaN(groupItem.members)) 
        {
            __reg8.htmlText = "Members : -";
        }
        else 
        {
            __reg8.htmlText = "Members : " + String(groupItem.members);
        }
        var __reg6 = this.infoBaseMC.createTextField("descrTitleText", this.infoBaseMC.getNextHighestDepth(), __reg3._x, 210, 0, 0);
        this.setTxtFormat("Arial", "left", 27, false, 15441692);
        __reg6.autoSize = true;
        __reg6.setNewTextFormat(this.textFormat);
        __reg6.htmlText = "Description";
        if (groupItem.description != null && groupItem.description != undefined) 
        {
            var __reg9 = this.infoBaseMC.createEmptyMovieClip("descrTxtContainerMC", this.infoBaseMC.getNextHighestDepth());
            var __reg2 = __reg9.createTextField("descriptionText", __reg9.getNextHighestDepth(), __reg6._x, __reg6._y + 25, __reg11._width - 280, __reg8.textHeight * 2);
            this.setTxtFormat("Arial", "left", 26, false, 16777215);
            __reg2.autoSize = true;
            __reg2.multiline = true;
            __reg2.setNewTextFormat(this.textFormat);
            __reg2.wordWrap = true;
            __reg2.htmlText = groupItem.description;
            var __reg10 = __reg9.attachMovie("MaskMC", "descrTxtMaskMC", __reg9.getNextHighestDepth());
            __reg10._x = __reg2._x;
            __reg10._y = __reg2._y;
            __reg10._width = __reg2._width;
            __reg10._height = 64;
            __reg9.setMask(__reg10);
            __reg9 = null;
            __reg2 = null;
            __reg10 = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(groupItem.groupImage, this.fn.onGetCachedFile);
        this.loadGroupDetails();
        var __reg14 = this.infoBaseMC.createTextField("messageText", this.infoBaseMC.getNextHighestDepth(), this.channelContainerStartX, 550, 850, 70);
        this.setTxtFormat("Arial", "left", 25, false, 15441692);
        __reg14.setNewTextFormat(this.textFormat);
        __reg14.wordWrap = true;
        __reg14.htmlText = "";
        parentMC = null;
        groupItem = null;
        __reg11 = null;
        __reg14 = null;
        __reg3 = null;
        __reg15 = null;
        __reg5 = null;
        __reg13 = null;
        __reg8 = null;
        __reg6 = null;
        __reg7 = null;
    }

    function loadGroupDetails()
    {
        if (this.detailXmlInvoker != null) 
        {
            this.detailXmlInvoker.xmlResponse.removeListener(this, this.onLoadGroupDetails);
            this.detailXmlInvoker.destroy();
            delete this.detailXmlInvoker;
            this.detailXmlInvoker = null;
        }
        this.detailXmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.detailXmlInvoker.xmlResponse.addListener(this, this.onLoadGroupDetails);
        this.detailXmlInvoker.loadXML(this.groupItem.groupDetailLink, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, true, false);
    }

    function onLoadGroupDetails(success)
    {
        if (success) 
        {
            this.detailXml = this.detailXmlInvoker.getXmlObject();
            this.parseGroupDetailXml();
            this.createButtons();
            this.displayArrows();
            if (this.groupItem.hideDetails == 0) 
            {
                this.loadChannelsList();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            }
            if (this.groupItem.subscriptionStatus == 2) 
            {
                this.highlightBtn(1);
                this.infoBaseMC.messageText.htmlText = "Your request for group subscription is in process.";
            }
            else 
            {
                this.highlightBtn(0);
            }
        }
        else 
        {
            var __reg2 = this.infoBaseMC.createTextField("detailErrorText", this.infoBaseMC.getNextHighestDepth(), 0, 435, 1280, 35);
            this.setTxtFormat("Arial", "center", 24, false, 16777215);
            __reg2.setNewTextFormat(this.textFormat);
            __reg2.htmlText = "Unable to load Group Details, Please try again";
            this.createButtons();
            this.infoBaseMC.subscribeBtnMC._visible = false;
            this.infoBaseMC.subBtnText._visible = false;
            this.infoBaseMC.backBtnMC._x = (1280 - this.infoBaseMC.backBtnMC._width) / 2;
            this.infoBaseMC.backBtnText._x = (1280 - this.infoBaseMC.backBtnText._width) / 2;
            this.buttonCount = 1;
            this.highlightBtn(1);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            __reg2 = null;
        }
        success = null;
        if (this.detailXmlInvoker != null) 
        {
            this.detailXmlInvoker.xmlResponse.removeListener(this, this.onLoadGroupDetails);
            this.detailXmlInvoker.destroy();
            delete this.detailXmlInvoker;
            this.detailXmlInvoker = null;
        }
    }

    function parseGroupDetailXml()
    {
        var __reg7 = mx.xpath.XPathAPI.selectNodeList(this.detailXml.firstChild, "/xml/item");
        var __reg2 = null;
        var __reg5 = 0;
        while (__reg5 < __reg7.length) 
        {
            var __reg4 = __reg7[__reg5].childNodes;
            var __reg6 = __reg4.length;
            var __reg3 = 0;
            while (__reg3 < __reg6) 
            {
                __reg2 = __reg4[__reg3];
                if (__reg2.nodeName == "sub_status") 
                {
                    this.groupItem.subscriptionStatus = Number(__reg2.firstChild.nodeValue);
                }
                else if (__reg2.nodeName == "hide_details") 
                {
                    this.groupItem.hideDetails = Number(__reg2.firstChild.nodeValue);
                }
                else if (__reg2.nodeName == "members") 
                {
                    this.groupItem.members = Number(__reg2.firstChild.nodeValue);
                }
                ++__reg3;
            }
            __reg3 = null;
            __reg4 = null;
            __reg6 = null;
            ++__reg5;
        }
        __reg5 = null;
        __reg7 = null;
        __reg2 = null;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        removeMovieClip(this.infoBaseMC);
        delete this.onBack;
        this.onBack = null;
        if (this.subscribeXml != null) 
        {
            delete this.subscribeXml;
            this.subscribeXml = null;
        }
        if (this.channelXml != null) 
        {
            delete this.channelXml;
            this.channelXml = null;
        }
        if (this.channelsList != null) 
        {
            delete this.channelsList;
            this.channelsList = null;
        }
        if (this.detailXml != null) 
        {
            delete this.detailXml;
            this.detailXml = null;
        }
        if (this.detailXmlInvoker != null) 
        {
            this.detailXmlInvoker.xmlResponse.removeListener(this, this.onLoadGroupDetails);
            this.detailXmlInvoker.destroy();
            delete this.detailXmlInvoker;
            this.detailXmlInvoker = null;
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.xmlResponse.removeListener(this, this.onLoadChannelList);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        if (this.groupImageLoader != null) 
        {
            this.groupImageLoader.removeListener(this.groupImageLoaderListener);
            delete this.groupImageLoader;
            this.groupImageLoader = null;
        }
        if (this.groupImageLoaderListener != null) 
        {
            delete this.groupImageLoaderListener;
            this.groupImageLoaderListener = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.groupItem = null;
        this.infoBaseMC = null;
        this.channelContainerMC = null;
        this.fn = null;
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function addListener(eventName, obj, method)
    {
        if (eventName == "onBack") 
        {
            this.onBack.addListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function removeListener(eventName, obj, method)
    {
        if (eventName == "onBack") 
        {
            this.onBack.removeListener(obj, method);
        }
        eventName = null;
        obj = null;
        method = null;
    }

    function onGetCachedFile(filePath)
    {
        this.groupImageLoader.loadClip(filePath, this.infoBaseMC.groupImageMC);
        filePath = null;
    }

    function onLoadGroupImage(targetMC)
    {
        targetMC._width = 85;
        targetMC._height = 85;
        targetMC = null;
    }

    function loadChannelsList()
    {
        var __reg2 = this.infoBaseMC.attachMovie("loadingView", "chnLoadingMC", this.infoBaseMC.getNextHighestDepth(), {_x: 640, _y: 443, _width: 50, _height: 50});
        if (this.groupItem.channelsLink.charAt(this.groupItem.channelsLink.length - 1) != "/") 
        {
            this.groupItem.channelsLink = this.groupItem.channelsLink + "/";
        }
        this.groupItem.channelsLink = this.groupItem.channelsLink + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.xmlResponse.removeListener(this, this.onLoadChannelList);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        this.xmlInvoker.xmlResponse.addListener(this, this.onLoadChannelList);
        this.xmlInvoker.loadXML(this.groupItem.channelsLink, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, true, true, false);
        __reg2 = null;
    }

    function onLoadChannelList(success)
    {
        removeMovieClip(this.infoBaseMC.chnLoadingMC);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (success) 
        {
            this.channelXml = this.xmlInvoker.getXmlObject();
            this.parseChannelsXml();
            if (this.channelsList.length > 0) 
            {
                this.displayChannels(this.pageIdx);
            }
            else 
            {
                var __reg2 = this.infoBaseMC.createTextField("chnErrorText", this.infoBaseMC.getNextHighestDepth(), 0, 435, 1280, 35);
                this.setTxtFormat("Arial", "center", 24, false, 16777215);
                __reg2.setNewTextFormat(this.textFormat);
                __reg2.htmlText = "No channels in this group";
                __reg2 = null;
            }
            return;
        }
        __reg2 = this.infoBaseMC.createTextField("chnErrorText", this.infoBaseMC.getNextHighestDepth(), 0, 435, 1280, 35);
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        __reg2.setNewTextFormat(this.textFormat);
        __reg2.htmlText = "Unable to load channels list";
        __reg2 = null;
    }

    function parseChannelsXml()
    {
        var __reg4 = mx.xpath.XPathAPI.selectNodeList(this.channelXml.firstChild, "/xml/channels/channel");
        var __reg3 = null;
        this.channelsList = new Array();
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg3 = __reg4[__reg2];
            this.channelsList[__reg2] = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/channel/name").firstChild.nodeValue;
            ++__reg2;
        }
        __reg3 = null;
        __reg4 = null;
    }

    function displayChannels(pageIdx)
    {
        this.pageIdx = pageIdx;
        var __reg12 = this.channelRows * this.channelCols;
        var __reg8 = pageIdx * __reg12;
        var __reg10 = 0;
        var __reg9 = 0;
        var __reg14 = 4;
        var __reg13 = 4;
        if (this.channelContainerMC != null) 
        {
            removeMovieClip(this.channelContainerMC);
        }
        this.channelContainerMC = this.infoBaseMC.createEmptyMovieClip("channelContainerMC", this.infoBaseMC.getNextHighestDepth());
        this.channelContainerMC._x = this.channelContainerStartX;
        this.channelContainerMC._y = this.channelContainerStartY;
        var __reg4 = __reg8;
        while (__reg4 < this.channelsList.length && __reg4 - __reg8 < __reg12) 
        {
            var __reg2 = this.channelContainerMC.createEmptyMovieClip("channelBaseMC" + (__reg4 - __reg8), this.channelContainerMC.getNextHighestDepth());
            __reg2._x = __reg9 * (this.channelWidth + __reg14);
            __reg2._y = __reg10 * (this.channelHeight + __reg13);
            var __reg7 = __reg2.attachMovie("channelBg", "channelBgMC", __reg2.getNextHighestDepth());
            var __reg6 = __reg2.createEmptyMovieClip("channelNameBaseMC" + (__reg4 - __reg8), __reg2.getNextHighestDepth());
            var __reg3 = __reg6.createTextField("channelText", __reg6.getNextHighestDepth(), 0, 0, 0, 0);
            this.setTxtFormat("Arial", "left", 24, false, 16777215);
            __reg3.autoSize = true;
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.htmlText = this.channelsList[__reg4];
            __reg3._x = 10;
            __reg3._y = (__reg7._height - __reg3._height) / 2;
            var __reg5 = __reg2.attachMovie("menuMask", "channelMaskMC", __reg2.getNextHighestDepth());
            __reg5._x = 10;
            __reg5._width = __reg7._width - 20;
            __reg5._height = __reg7._height;
            __reg6.setMask(__reg5);
            ++__reg9;
            if (__reg9 == this.channelCols) 
            {
                __reg9 = 0;
                ++__reg10;
            }
            __reg7 = null;
            __reg3 = null;
            __reg5 = null;
            __reg2 = null;
            __reg6 = null;
            ++__reg4;
        }
        var __reg15 = this.infoBaseMC.createEmptyMovieClip("channelTitleMC", this.infoBaseMC.getNextHighestDepth());
        var __reg11 = __reg15.createTextField("channelTitleTxtField", __reg15.getNextHighestDepth(), 0, 0, 0, 0);
        this.setTxtFormat("Arial", "left", 30, false, 15441692);
        __reg11.autoSize = true;
        __reg11.setNewTextFormat(this.textFormat);
        __reg11.htmlText = "Channels In This Group";
        __reg11._x = (1280 - __reg11._width) / 2;
        __reg11._y = this.channelContainerStartY - __reg11._height;
        this.adjustArrows();
        __reg15 = null;
        __reg11 = null;
    }

    function createButtons()
    {
        var __reg2 = this.infoBaseMC.attachMovie("infoBtnDis", "subscribeBtnMC", this.infoBaseMC.getNextHighestDepth());
        __reg2._x = 475;
        __reg2._y = 620;
        var __reg4 = this.infoBaseMC.attachMovie("infoBtnDis", "backBtnMC", this.infoBaseMC.getNextHighestDepth());
        __reg4._x = 645;
        __reg4._y = __reg2._y;
        var __reg6 = this.infoBaseMC.attachMovie("infoBtnEnb", "btnHighlightMC", this.infoBaseMC.getNextHighestDepth());
        __reg6._x = __reg2._x;
        __reg6._y = __reg2._y;
        var __reg3 = this.infoBaseMC.createTextField("subBtnText", this.infoBaseMC.getNextHighestDepth(), __reg2._x, __reg2._y, 0, 0);
        this.setTxtFormat("Arial", "center", 23, false, 0);
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.autoSize = true;
        if (this.groupItem.subscriptionStatus == 0) 
        {
            __reg3.htmlText = "Subscribe";
        }
        else 
        {
            __reg3.htmlText = "Unsubscribe";
        }
        __reg3._x = __reg2._x + (__reg2._width - __reg3._width) / 2;
        __reg3._y = __reg2._y + (__reg2._height - __reg3._height) / 2;
        var __reg5 = this.infoBaseMC.createTextField("backBtnText", this.infoBaseMC.getNextHighestDepth(), __reg4._x, __reg4._y, 0, 0);
        __reg5.setNewTextFormat(this.textFormat);
        __reg5.autoSize = true;
        __reg5.htmlText = "Back";
        __reg5._x = __reg4._x + (__reg4._width - __reg5._width) / 2;
        __reg5._y = __reg4._y + (__reg4._height - __reg5._height) / 2;
        if (this.groupItem.subscriptionStatus == 2) 
        {
            this.infoBaseMC.subscribeBtnMC._visible = false;
            this.infoBaseMC.subBtnText._visible = false;
            this.infoBaseMC.backBtnMC._x = (1280 - this.infoBaseMC.backBtnMC._width) / 2;
            this.infoBaseMC.backBtnText._x = (1280 - this.infoBaseMC.backBtnText._width) / 2;
            this.buttonCount = 1;
        }
        __reg2 = null;
        __reg4 = null;
        __reg6 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function displayArrows()
    {
        var __reg3 = this.infoBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.infoBaseMC.getNextHighestDepth());
        __reg3._x = 1140;
        __reg3._y = 312;
        __reg3._visible = false;
        var __reg2 = this.infoBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.infoBaseMC.getNextHighestDepth());
        __reg2._x = __reg3._x;
        __reg2._y = 560;
        __reg2._visible = false;
        var __reg4 = this.infoBaseMC.createTextField("listingText", this.infoBaseMC.getNextHighestDepth(), 1125, __reg2._y - 6, 0, 0);
        this.setTxtFormat("Arial", "right", 23, false, 16777215);
        __reg4.setNewTextFormat(this.textFormat);
        __reg4.autoSize = "right";
        __reg3 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function adjustArrows()
    {
        var __reg4 = Math.ceil(this.channelsList.length / (this.channelRows * this.channelCols));
        if (this.pageIdx > 0) 
        {
            this.infoBaseMC.upArrowMC._visible = true;
        }
        else 
        {
            this.infoBaseMC.upArrowMC._visible = false;
        }
        if (this.pageIdx < __reg4 - 1) 
        {
            this.infoBaseMC.downArrowMC._visible = true;
        }
        else 
        {
            this.infoBaseMC.downArrowMC._visible = false;
        }
        var __reg3 = this.pageIdx * this.channelRows * this.channelCols + 1;
        var __reg2 = __reg3 - 1;
        if (this.pageIdx == __reg4 - 1) 
        {
            __reg2 = this.channelsList.length;
        }
        else 
        {
            __reg2 = __reg2 + this.channelRows * this.channelCols;
        }
        this.infoBaseMC.listingText.htmlText = "" + __reg3 + " to " + __reg2 + " of " + this.channelsList.length;
    }

    function highlightBtn(btnIdx)
    {
        if (btnIdx == 0) 
        {
            this.infoBaseMC.btnHighlightMC._x = this.infoBaseMC.subscribeBtnMC._x;
            this.infoBaseMC.btnHighlightMC._y = this.infoBaseMC.subscribeBtnMC._y;
        }
        else if (btnIdx == 1) 
        {
            this.infoBaseMC.btnHighlightMC._x = this.infoBaseMC.backBtnMC._x;
            this.infoBaseMC.btnHighlightMC._y = this.infoBaseMC.backBtnMC._y;
        }
        this.btnIdx = btnIdx;
    }

    function onSubscriptionEvent()
    {
        var __reg3 = arguments;
        if (__reg3[0] == "message") 
        {
            this.infoBaseMC.messageText.htmlText = __reg3[1];
        }
        else 
        {
            if (__reg3[0] == "XML_LOAD_ERROR") 
            {
                this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER;
            }
            else if (__reg3[0] == "success") 
            {
                if (this.groupItem.subscriptionStatus == 0) 
                {
                    if (this.groupItem.isPrivate == 1) 
                    {
                        this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PRIVATE_GROUP_REQUEST_SENT;
                        this.groupItem.subscriptionStatus = 2;
                    }
                    else 
                    {
                        this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_SUBSCRIBED_TO_GROUP;
                        this.groupItem.subscriptionStatus = 1;
                        this.groupItem.members = this.groupItem.members + 1;
                    }
                    this.infoBaseMC.subscribeBtnMC._visible = false;
                    this.infoBaseMC.subBtnText._visible = false;
                    this.infoBaseMC.backBtnMC._x = (1280 - this.infoBaseMC.backBtnMC._width) / 2;
                    this.infoBaseMC.backBtnText._x = (1280 - this.infoBaseMC.backBtnText._width) / 2;
                    this.buttonCount = 1;
                    if (isNaN(this.groupItem.members)) 
                    {
                        this.infoBaseMC.membersText.htmlText = "Members : -";
                    }
                    else 
                    {
                        this.infoBaseMC.membersText.htmlText = "Members : " + String(this.groupItem.members);
                    }
                    this.highlightBtn(1);
                }
                else 
                {
                    this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.SUCCESSFULLY_UNSUBSCRIBED_FROM_GROUP;
                    this.groupItem.subscriptionStatus = 0;
                    this.groupItem.members = this.groupItem.members - 1;
                    this.infoBaseMC.subscribeBtnMC._visible = false;
                    this.infoBaseMC.subBtnText._visible = false;
                    this.infoBaseMC.backBtnMC._x = (1280 - this.infoBaseMC.backBtnMC._width) / 2;
                    this.infoBaseMC.backBtnText._x = (1280 - this.infoBaseMC.backBtnText._width) / 2;
                    this.buttonCount = 1;
                    if (isNaN(this.groupItem.members)) 
                    {
                        this.infoBaseMC.membersText.htmlText = "Members : -";
                    }
                    else 
                    {
                        this.infoBaseMC.membersText.htmlText = "Members : " + this.groupItem.members;
                    }
                    this.highlightBtn(1);
                }
            }
            else if (this.groupItem.subscriptionStatus == 0) 
            {
                this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_SUBSCRIBE_TO_GROUP + __reg3[1];
            }
            else 
            {
                this.infoBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_UNSUBSCRIBE_FROM_GROUP + __reg3[1];
            }
            com.jadoo.as2.MyJadoo.MyJadooSubscription.removeListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
            com.jadoo.as2.MyJadoo.MyJadooSubscription.destroy();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        __reg3 = null;
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function onKeyDown()
    {
        this.infoBaseMC.messageText.htmlText = "";
        if ((__reg0 = Key.getCode()) === 37) 
        {
            if (this.btnIdx == 1 && this.buttonCount == 2) 
            {
                this.highlightBtn(0);
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.btnIdx == 0 && this.buttonCount == 2) 
            {
                this.highlightBtn(1);
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            var __reg2 = Math.ceil(this.channelsList.length / (this.channelRows * this.channelCols));
            if (this.pageIdx + 1 < __reg2) 
            {
                this.displayChannels(this.pageIdx + 1);
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.pageIdx > 0) 
            {
                this.displayChannels(this.pageIdx - 1);
            }
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.btnIdx == 0) 
            {
                if (this.netStatus == "Up") 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    com.jadoo.as2.MyJadoo.MyJadooSubscription.create();
                    com.jadoo.as2.MyJadoo.MyJadooSubscription.addListener("onSubscriptionEvent", this, this.onSubscriptionEvent);
                    com.jadoo.as2.MyJadoo.MyJadooSubscription.subscribeToGroup(this.infoBaseMC, this.groupItem.itemId, this.groupItem.subscriptionStatus);
                }
                else 
                {
                    this.infoBaseMC.messageText.htmlText = this.netErrorStr;
                }
            }
            else if (this.btnIdx == 1) 
            {
                this.onBack.notify();
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.onBack.notify();
        return;
    }

}

//Sprite 708
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.GroupSubItem extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var groupName = null;
    var subscriptionLink = null;
    var groupImage = null;
    var subscriptionStatus: Number = 0;
    var isPrivate: Number = 0;
    var creationDate = null;
    var modificationDate = null;
    var members = null;
    var description = null;
    var channelsLink = null;
    var groupDetailLink = null;
    var hideDetails = null;
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var imageWidth: Number = 0;
    var imageHeight: Number = 0;
    var itemHeight: Number = 40;
    var groupNameText = null;
    var textFormat = null;
    var fn = null;

    function GroupSubItem()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.groupNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function destroy()
    {
        if (this.groupNameText != null) 
        {
            this.groupNameText.removeTextField();
            delete this.groupNameText;
            this.groupNameText = null;
        }
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.unloadClip(this.itemBaseMC.itemImageMC);
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.groupName = null;
        this.subscriptionLink = null;
        this.groupImage = null;
        this.creationDate = null;
        this.modificationDate = null;
        this.description = null;
        this.channelsLink = null;
        this.fn = null;
        this.itemBaseMC = null;
    }

    function create(itemBaseMC, itemWidth, itemHeight, imageWidth, imageHeight)
    {
        this.itemBaseMC = itemBaseMC;
        this.imageWidth = imageWidth;
        this.imageHeight = imageHeight;
        var __reg6 = itemBaseMC.attachMovie("groupInfoBox", "groupItemBgMC", itemBaseMC.getNextHighestDepth());
        __reg6._width = itemWidth;
        __reg6._height = itemHeight;
        var __reg7 = itemBaseMC.createEmptyMovieClip("groupImageMC", itemBaseMC.getNextHighestDepth());
        __reg7._x = 10;
        __reg7._y = (itemHeight - imageHeight) / 2;
        this.setTxtFormat("Arial", "left", 25, false, 16555008);
        this.groupNameText.createTextField(itemBaseMC, 0, 0, 0, 0, "true");
        this.groupNameText.setTextFormat(this.textFormat);
        this.groupNameText.setHtmlText(this.groupName);
        this.groupNameText.setWidth(itemWidth - imageWidth - 30);
        this.groupNameText.setX(imageWidth + 20);
        if (this.description != null && this.description != undefined) 
        {
            var __reg5 = itemBaseMC.createEmptyMovieClip("descrTxtContainerMC", itemBaseMC.getNextHighestDepth());
            var __reg3 = __reg5.createTextField("descriptionText", __reg5.getNextHighestDepth(), this.groupNameText.getX(), this.groupNameText.getY() + this.groupNameText.getTextHeight(), this.groupNameText.getWidth(), itemHeight - this.groupNameText.getY() + this.groupNameText.getHeight());
            this.setTxtFormat("Arial", "left", 22, false, 16777215);
            __reg3.autoSize = true;
            __reg3.multiline = true;
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.wordWrap = true;
            __reg3.htmlText = this.description;
            var __reg4 = itemBaseMC.attachMovie("MaskMC", "descrTxtMaskMC", itemBaseMC.getNextHighestDepth());
            __reg4._x = __reg3._x;
            __reg4._y = __reg3._y;
            __reg4._width = __reg3._width;
            __reg4._height = itemHeight - this.groupNameText.getTextHeight() - 25;
            __reg5.setMask(__reg4);
            __reg5 = null;
            __reg3 = null;
            __reg4 = null;
        }
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.groupImage, this.fn.onGetCachedFile, "IMG");
        __reg6 = null;
        itemBaseMC = null;
        __reg7 = null;
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemBaseMC.groupImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        targetMC._width = this.imageWidth;
        targetMC._height = this.imageHeight;
        targetMC = null;
    }

    function itemHighlight()
    {
        this.groupNameText.enable(false, 500);
    }

    function itemUnHighlight()
    {
        this.groupNameText.disable();
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

}

//Sprite 709
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.GroupTierXmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser
{

    function GroupTierXmlParser()
    {
        super();
    }

    static function parseTier(groupTier, groupTierNode)
    {
        var __reg4 = groupTierNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "title") 
            {
                com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseTitleTag(groupTier, __reg1);
            }
            else if (__reg1.nodeName == "area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseAreaTag(groupTier, __reg1);
            }
            else if (__reg1.nodeName == "item_container") 
            {
                com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseItemContainerTag(groupTier, __reg1);
            }
            else if (__reg1.nodeName == "item_properties") 
            {
                com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseItemPropertiesTag(groupTier, __reg1);
            }
            else if (__reg1.nodeName == "max_items") 
            {
                groupTier.maxItems = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        groupTierNode = null;
        groupTier = null;
    }

    static function parseTitleTag(groupTier, titleNode)
    {
        var __reg4 = titleNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        for (;;) 
        {
            if (__reg3 >= __reg4.length) 
            {
                return;
            }
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                groupTier.titleX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                groupTier.titleY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                groupTier.titleWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                groupTier.titleHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (groupTier.titleTxtFormat == null) 
                {
                    groupTier.titleTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(groupTier.titleTxtFormat, __reg1);
            }
            ++__reg3;
        }
    }

    static function parseItemContainerTag(groupTier, itemContainerNode)
    {
        var __reg4 = itemContainerNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                groupTier.containerStartX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                groupTier.containerStartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                groupTier.containerWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                groupTier.containerHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "rows") 
            {
                groupTier.rows = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "cols") 
            {
                groupTier.columns = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_selector") 
            {
                groupTier.selectorUrl = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        groupTier = null;
        itemContainerNode = null;
    }

    static function parseItemPropertiesTag(groupTier, itemPropertiesNode)
    {
        var __reg4 = itemPropertiesNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "width") 
            {
                groupTier.itemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                groupTier.itemHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "image_width") 
            {
                groupTier.groupImageWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "image_height") 
            {
                groupTier.groupImageHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg4 = null;
        __reg1 = null;
        groupTier = null;
        itemPropertiesNode = null;
    }

    static function parseTierItems(tierXml, items)
    {
        var __reg5 = null;
        __reg5 = mx.xpath.XPathAPI.selectNodeList(tierXml.firstChild, "/xml/items/item");
        var __reg3 = null;
        var __reg1 = 0;
        while (__reg1 < __reg5.length) 
        {
            __reg3 = __reg5[__reg1];
            var __reg4 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/item/type").firstChild.nodeValue;
            if (__reg4 == "group") 
            {
                var __reg2 = new com.jadoo.as2.MyJadoo.GroupSubItem();
                com.jadoo.as2.MyJadoo.GroupTierXmlParser.parseGroupSubItem(__reg2, __reg3);
                items[__reg1] = __reg2;
                __reg2 = null;
            }
            ++__reg1;
        }
        __reg5 = null;
        __reg3 = null;
        items = null;
        tierXml = null;
    }

    static function parseGroupSubItem(groupSubItem, groupNode)
    {
        var __reg4 = groupNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                groupSubItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                groupSubItem.groupName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                groupSubItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                groupSubItem.subscriptionLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                groupSubItem.groupImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "date_added") 
            {
                groupSubItem.creationDate = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "date_updated") 
            {
                groupSubItem.modificationDate = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "members") 
            {
                groupSubItem.members = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "description") 
            {
                groupSubItem.description = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sub_type") 
            {
                groupSubItem.isPrivate = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "channels_link") 
            {
                groupSubItem.channelsLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "group_detail_link") 
            {
                groupSubItem.groupDetailLink = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        groupNode = null;
        groupSubItem = null;
        __reg4 = null;
        __reg1 = null;
        __reg5 = null;
    }

}

//Sprite 710
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var titleX = null;
    var titleY = null;
    var titleWidth = null;
    var titleHeight = null;
    var titleTxtFormat = null;
    var rows: Number = 0;
    var columns: Number = 0;
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var descriptionX = null;
    var descriptionY = null;
    var descriptionWidth = null;
    var descriptionHeight = null;
    var descriptionTxtFormat = null;
    var itemImgLoadTimeout: Number = 2000;
    var itemImgLoadTimeoutId: Number = -1;
    var currentImgIdx: Number = 0;
    var loadCount: Number = 0;
    var drawColorButtons: Boolean = true;
    var programListing = null;
    var bottomRowIdx: Number = 0;
    var topRowIdx: Number = 0;
    var previousTopRowIdx: Number = 0;
    var previousBottomRowIdx: Number = 0;
    var currentRowIdx: Number = 0;
    var previousRowIdx: Number = 0;
    var drawFullPage: Boolean = false;
    var lastHighlightedItem: Number = 0;
    var areaHeight;
    var areaStartX;
    var areaStartY;
    var areaWidth;
    var channelBarActive;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var contentType;
    var currentCategoryTitle;
    var currentItemIdx;
    var disableView;
    var displayLoadingSign;
    var enableView;
    var epgEnabled;
    var epgItem;
    var errorLoadingTier;
    var fetchItemDirectLink;
    var fn;
    var getItemIndex;
    var grandParentIdx;
    var initialItems;
    var isEnabled;
    var isFavoritesCategory;
    var isSubscriptionMsg;
    var isViewVisible;
    var itemContainerMC;
    var itemIndicies;
    var itemPool;
    var itemsLink;
    var itemsStartIdx;
    var keyListener;
    var listingIdxX;
    var listingIdxY;
    var loadingMC;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onEnterKey;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parentIdx;
    var parentMC;
    var parseTier;
    var parseTierItems;
    var playContinuous;
    var prePreviousItemIdx;
    var previousItemIdx;
    var selectedItem;
    var selectorLoader;
    var selectorUrl;
    var setTxtFormat;
    var startPlayback;
    var subscriptionMsg;
    var textFormat;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var updateListing;
    var vodResponseLink;
    var wasPopupEnabled;

    function CategoryTier()
    {
        super();
        this.tierType = "CategoryTier";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTierItems;
    }

    function getItemGroupId()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].groupId;
    }

    function getItemSubscriptionStatus()
    {
        return this.tierItems[this.getItemIndex(this.currentItemIdx)].subscriptionStatus;
    }

    function destroy()
    {
        _global.clearTimeout(this.itemImgLoadTimeoutId);
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.descriptionTxtFormat != null) 
        {
            delete this.descriptionTxtFormat;
            this.descriptionTxtFormat = null;
        }
        if (this.itemPool != null) 
        {
            this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.destroy();
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        var __reg3 = this.tierBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.containerStartX + this.containerWidth + 10;
        __reg3._y = this.containerStartY - __reg3._height - 15;
        __reg3._visible = false;
        var __reg4 = this.tierBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg4._x = __reg3._x;
        __reg4._y = this.containerStartY + this.containerHeight;
        __reg4._visible = false;
        var __reg6 = this.tierBaseMC.createTextField("listingText", this.tierBaseMC.getNextHighestDepth(), 0, 0, 0, 0);
        this.tierBaseMC.listingText._y = this.descriptionY;
        __reg6.autoSize = true;
        this.setTxtFormat("Arial", "right", 26, false, 16777215);
        __reg6.setNewTextFormat(this.textFormat);
        var __reg5 = this.tierBaseMC.createTextField("messageText", this.tierBaseMC.getNextHighestDepth(), this.containerStartX, this.containerStartY + this.containerHeight / 2, this.containerWidth, 30);
        __reg5.wordWrap = true;
        __reg5.autoSize = true;
        this.setTxtFormat("Arial", "center", 24, false, 16777215);
        __reg5.setNewTextFormat(this.textFormat);
        if (this.titleTxtFormat != null) 
        {
            var __reg7 = this.tierBaseMC.createTextField("titleText", this.tierBaseMC.getNextHighestDepth(), this.titleX, this.titleY, this.titleWidth, this.titleHeight);
            __reg7.setNewTextFormat(this.titleTxtFormat);
            __reg7 = null;
        }
        this.loadSelector();
        __reg6 = null;
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        viewBaseMC = null;
        viewMC = null;
        parentMC = null;
        pageTitle = null;
        pageId = null;
        contType = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function createPlaceHolders(startPos, length, rowNo, colNo)
    {
        this.itemContainerMC._x = this.containerStartX;
        var __reg9 = (this.containerWidth - this.itemWidth * this.columns) / (this.columns - 1);
        var __reg8 = (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1);
        var __reg4 = startPos;
        while (__reg4 < startPos + length) 
        {
            var __reg2 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + __reg4, this.itemContainerMC.getNextHighestDepth());
            __reg2._x = colNo * (this.itemWidth + __reg9);
            __reg2._y = rowNo * (this.itemHeight + __reg8);
            var __reg3 = null;
            __reg3 = __reg2.attachMovie("contentPlaceHolder", "itemDefBgMC", __reg2.getNextHighestDepth());
            __reg3._width = this.itemWidth;
            __reg3._height = this.itemHeight;
            __reg3._visible = false;
            ++colNo;
            if (colNo == this.columns) 
            {
                colNo = 0;
                ++rowNo;
            }
            __reg2 = null;
            __reg3 = null;
            ++__reg4;
        }
        __reg9 = null;
        __reg8 = null;
        startPos = null;
        length = null;
        rowNo = null;
        colNo = null;
    }

    function drawColorbuttons()
    {
        this.drawColorButtons = false;
        if (this.contentType == "live") 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Red", "EPG");
            this.onTierEvent.notify("colorButtonEvent", "draw", "Green", "Program Listing");
            this.onTierEvent.notify("colorButtonEvent", "disable", "Green");
        }
        this.onTierEvent.notify("colorButtonEvent", "draw", "Yellow", "Add to Favorites");
        if (this.grandParentIdx == -1) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
        }
    }

    function loadSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth;
        __reg2._height = this.itemHeight;
        this.createPlaceHolders();
        this.onTierEvent.notify("onReady");
        __reg2 = null;
    }

    function itemHighlight(itemIdx)
    {
        this.updateListing(itemIdx);
        this.tierBaseMC.listingText._x = this.listingIdxX;
        this.tierBaseMC.listingText._y = this.listingIdxY;
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        itemIdx = this.getItemIndex(this.currentItemIdx);
        this.tierItems[itemIdx].itemHighlight();
        itemIdx = null;
    }

    function itemUnHighlight(itemIdx)
    {
        itemIdx = this.getItemIndex(this.currentItemIdx);
        this.tierItems[itemIdx].itemUnHighlight();
        itemIdx = null;
    }

    function enable()
    {
        this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
        this.onTierEvent.notify("colorButtonEvent", "enable", "Green");
        this.onTierEvent.notify("colorButtonEvent", "enable", "Yellow");
        if (this.parentIdx != -1 && this.titleTxtFormat != null) 
        {
            this.tierBaseMC.tierSelectorMC._visible = true;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = true;
        this.itemHighlight(this.currentItemIdx);
        this.isEnabled = true;
        super.enable();
    }

    function disable(isRetrieving)
    {
        this.tierBaseMC.listingText.htmlText = "";
        this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
        if (!isRetrieving) 
        {
            this.onTierEvent.notify("colorButtonEvent", "disable", "Green");
            this.onTierEvent.notify("colorButtonEvent", "disable", "Yellow");
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.tierBaseMC.tierSelectorMC._visible = false;
        this.tierBaseMC.selectorMC._visible = false;
        this.isEnabled = false;
        this.itemUnHighlight(this.currentItemIdx);
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage, vodResponseLink)
    {
        var __reg5 = false;
        this.itemsStartIdx = itemsStartIdx;
        this.totalItems = totalItems;
        if (this.itemsLink != itemsLink || this.errorLoadingTier) 
        {
            __reg5 = true;
        }
        this.itemsLink = itemsLink;
        this.playContinuous = playContinuous;
        this.vodResponseLink = vodResponseLink;
        this.currentCategoryTitle = title;
        if (parentIdx != -1) 
        {
            this.tierBaseMC.titleText.htmlText = title;
        }
        _global.clearTimeout(this.itemImgLoadTimeoutId);
        if (__reg5) 
        {
            this.bottomRowIdx = 0;
            this.topRowIdx = 0;
            this.previousTopRowIdx = 0;
            this.previousBottomRowIdx = 0;
            this.currentRowIdx = 0;
            this.previousRowIdx = 0;
            this.tierBaseMC.upArrowMC._visible = false;
            this.tierBaseMC.downArrowMC._visible = false;
            this.grandParentIdx = grandParentIdx;
            this.parentIdx = parentIdx;
            if (this.tierItems != null) 
            {
                this.tierItems = null;
            }
            if (this.itemPool != null) 
            {
                this.itemPool.removeListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.destroy();
                delete this.itemPool;
                this.itemPool = null;
            }
            if (this.itemContainerMC != null) 
            {
                this.itemContainerMC.removeMovieClip();
                this.itemContainerMC = null;
            }
            if (totalItems == 0 || totalItems == undefined) 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_TotalItems_Zero");
                }
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
                this.tierBaseMC.messageText.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW;
                this.tierBaseMC.selectorMC._visible = false;
                this.displayArrows();
                this.removeLoadingMC();
                this.onTierEvent.notify("onDisplayMessage", "");
                if (grandParentIdx == -1 && parentIdx == -1) 
                {
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                }
                this.onTierEvent.notify("onDisplayItems", "zeroItems");
            }
            else 
            {
                this.tierBaseMC.messageText.htmlText = "";
                this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
                this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
                this.itemPool.initialize(itemsLink, itemsStartIdx, this.maxItems, totalItems, this.parseTierItems, isBackPage, this.isFavoritesCategory);
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
                itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.initialItems = true;
                this.itemPool.getPoolItems(this.currentItemIdx, -1, itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
                }
            }
        }
        else 
        {
            this.onTierEvent.notify("onDisplayItems");
        }
        title = null;
        grandParentIdx = null;
        parentIdx = null;
        itemsStartIdx = null;
        totalItems = null;
        itemsLink = null;
        playContinuous = null;
        isBackPage = null;
        __reg5 = null;
        vodResponseLink = null;
    }

    function onGridTierPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (this.currentRowIdx > this.previousRowIdx) 
            {
                --this.currentRowIdx;
                --this.previousRowIdx;
            }
            else if (this.currentRowIdx < this.previousRowIdx) 
            {
                ++this.currentRowIdx;
                ++this.previousRowIdx;
            }
            this.currentItemIdx = this.previousItemIdx;
            this.previousItemIdx = this.prePreviousItemIdx;
            this.bottomRowIdx = this.previousBottomRowIdx;
            this.topRowIdx = this.previousTopRowIdx;
            this.itemHighlight(this.currentItemIdx);
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
            if (this.initialItems) 
            {
                this.errorLoadingTier = true;
                this.onTierEvent.notify("onErrorLoading");
                this.tierBaseMC.listingText.htmlText = "";
            }
            if (!this.isViewVisible) 
            {
                this.initialItems = false;
                this.enableView();
            }
        }
        arguments = null;
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function onGetPoolItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        var __reg3 = arguments[0];
        if (this.initialItems) 
        {
            if (this.drawFullPage) 
            {
                if (this.itemContainerMC != null) 
                {
                    this.itemContainerMC.removeMovieClip();
                    this.itemContainerMC = null;
                }
                this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
                this.itemContainerMC._y = this.containerStartY;
                this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
                this.tierItems = null;
            }
            this.errorLoadingTier = false;
            this.tierItems = __reg3;
            if (this.itemIndicies != null) 
            {
                delete this.itemIndicies;
                this.itemIndicies = null;
            }
            this.itemIndicies = new Array();
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentItemIdx + __reg4);
                ++__reg4;
            }
            this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
            this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
            this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            this.createPlaceHolders(this.currentRowIdx * this.columns, this.maxItems, 0, 0);
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.itemIndicies.shift();
                this.tierItems.shift();
                ++__reg4;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.push(this.currentRowIdx * this.columns + __reg4);
                this.tierItems.push(__reg3[__reg4]);
                ++__reg4;
            }
            this.createPlaceHolders(this.currentRowIdx * this.columns, __reg3.length, this.rows, 0);
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            if (this.tierItems.length > (this.rows - 1) * this.columns) 
            {
                var __reg5 = this.tierItems.length - (this.rows - 1) * this.columns;
                var __reg4 = 0;
                while (__reg4 < __reg5) 
                {
                    this.itemIndicies.pop();
                    this.tierItems.pop();
                    ++__reg4;
                }
                __reg5 = null;
            }
            __reg4 = 0;
            while (__reg4 < __reg3.length) 
            {
                this.itemIndicies.unshift(this.currentRowIdx * this.columns + (this.columns - 1) - __reg4);
                this.tierItems.unshift(__reg3[__reg3.length - 1 - __reg4]);
                ++__reg4;
            }
            this.createPlaceHolders(this.currentRowIdx * this.columns, __reg3.length, -1, 0);
        }
        this.displayItems();
        if (this.initialItems) 
        {
            this.onTierEvent.notify("onDisplayItems");
            this.initialItems = false;
        }
        else 
        {
            this.itemHighlight(this.currentItemIdx);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        __reg3 = null;
        __reg4 = null;
        arguments = null;
    }

    function displayItems()
    {
        var __reg7 = undefined;
        var __reg6 = 0;
        var __reg3 = undefined;
        if (this.isSubscriptionMsg) 
        {
            this.onTierEvent.notify("onDisplayMessage", this.subscriptionMsg);
        }
        else 
        {
            this.onTierEvent.notify("onDisplayMessage", "");
        }
        this.currentImgIdx = 0;
        this.loadCount = 0;
        if (this.initialItems) 
        {
            __reg4 = 0;
            while (__reg4 < this.tierItems.length) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg4);
                ++__reg4;
            }
        }
        else if (this.currentRowIdx > this.previousRowIdx) 
        {
            __reg7 = Math.abs((this.currentRowIdx - this.rows) * this.columns);
            this.removeTierItems(__reg7);
            __reg4 = (this.rows - 1) * this.columns;
            while (__reg4 < this.tierItems.length) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg6);
                ++__reg6;
                ++__reg4;
            }
            __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y - (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
        }
        else if (this.currentRowIdx < this.previousRowIdx) 
        {
            __reg7 = Math.abs((this.currentRowIdx + this.rows) * this.columns);
            this.removeTierItems(__reg7);
            var __reg4 = 0;
            while (__reg4 < this.columns) 
            {
                this.drawTierItem(__reg4, this.currentRowIdx * this.columns + __reg4);
                ++__reg4;
            }
            var __reg5 = 0;
            while (__reg5 < this.tierItems.length) 
            {
                __reg3 = this.itemIndicies[0] + __reg5;
                this.itemContainerMC["itemBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y + (this.itemHeight + (this.containerHeight - this.itemHeight * this.rows) / (this.rows - 1));
                this.itemContainerMC["favoriteIconBaseMC" + __reg3]._y = this.itemContainerMC["itemBaseMC" + __reg3]._y;
                ++__reg5;
            }
        }
        if (!this.isViewVisible || this.channelBarActive) 
        {
            this.onEnterKey();
        }
        else if (this.isEnabled == true) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.tierBaseMC.selectorMC._visible = true;
        }
        if (this.drawFullPage) 
        {
            this.currentItemIdx = this.lastHighlightedItem;
            this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
            this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
            this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
            this.drawFullPage = false;
        }
        this.displayArrows();
        if (this.drawColorButtons && ((_global.currentApplication == "MyJadoo" && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isFavoriteEnabled && this.contentType != "subscribe_channels") || _global.currentApplication != "MyJadoo")) 
        {
            this.drawColorbuttons();
        }
        this.tierBaseMC.selectorMC._x = this.itemContainerMC._x + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._x;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC._y + this.itemContainerMC["itemBaseMC" + this.currentItemIdx]._y;
        __reg5 = null;
        __reg7 = null;
        __reg6 = null;
        __reg3 = null;
    }

    function drawTierItem(itemIndex, yIndex)
    {
        this.tierItems[itemIndex].createCategoryItem(this.itemContainerMC["itemBaseMC" + yIndex], this.itemWidth, this.itemHeight);
        this.tierItems[itemIndex].loadImage(itemIndex, this.fn.onLoadItemImage);
        var __reg4 = -1;
        __reg4 = com.jadoo.as2.JadooPlus.Features.Favorites.searchFavorites(this.tierItems[itemIndex].itemId, this.tierItems[itemIndex].itemType, _global.currentApplication);
        if (__reg4 != -1) 
        {
            this.drawFavoriteIcon(yIndex);
        }
        __reg4 = null;
        itemIndex = null;
        yIndex = null;
    }

    function removeTierItems(clearItemId)
    {
        var __reg2 = 0;
        while (__reg2 < this.columns) 
        {
            this.itemContainerMC["itemBaseMC" + clearItemId].removeMovieClip();
            this.itemContainerMC["favoriteIconBaseMC" + clearItemId].removeMovieClip();
            ++clearItemId;
            ++__reg2;
        }
        __reg2 = null;
        clearItemId = null;
    }

    function displayArrows()
    {
        if (this.totalItems > 0) 
        {
            if (this.bottomRowIdx == Math.ceil(this.totalItems / this.columns) - 1) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            else 
            {
                this.tierBaseMC.downArrowMC._visible = true;
            }
            if (this.totalItems < this.maxItems) 
            {
                this.tierBaseMC.downArrowMC._visible = false;
            }
            if (this.topRowIdx > 0) 
            {
                this.tierBaseMC.upArrowMC._visible = true;
            }
            else 
            {
                this.tierBaseMC.upArrowMC._visible = false;
            }
            return;
        }
        this.tierBaseMC.upArrowMC._visible = false;
        this.tierBaseMC.downArrowMC._visible = false;
        this.tierBaseMC.listingText.htmlText = "";
    }

    function terminateDisplay()
    {
    }

    function onExitProgramListing()
    {
        this.enableView();
        this.programListing.destroy();
        delete this.programListing;
        this.programListing = null;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.tierBaseMC.attachMovie("loadingView", "loadingMC", this.tierBaseMC.getNextHighestDepth(), {_x: this.areaStartX + this.areaWidth / 2, _y: this.areaStartY + this.areaHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function getItemStartIdx()
    {
        return Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
    }

    function setCurrentItemIdx(currentItemId)
    {
        this.currentItemIdx = currentItemId;
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.currentRowIdx = Math.floor(this.currentItemIdx / this.columns);
        this.topRowIdx = Math.floor(this.itemIndicies[0] / this.columns);
        this.bottomRowIdx = Math.floor(this.itemIndicies[this.itemIndicies.length - 1] / this.columns);
        this.displayArrows();
        currentItemId = null;
    }

    function drawPage()
    {
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        this.previousBottomRowIdx = this.bottomRowIdx;
        this.previousTopRowIdx = this.topRowIdx;
        if (this.currentItemIdx == this.itemIndicies[this.itemIndicies.length - 1]) 
        {
            this.lastHighlightedItem = this.currentItemIdx - 1;
        }
        else 
        {
            this.lastHighlightedItem = this.currentItemIdx;
        }
        this.itemIndicies.pop();
        if (this.itemIndicies.length <= (this.rows - 1) * this.columns) 
        {
            this.currentItemIdx = (this.topRowIdx - 1) * this.columns;
        }
        else 
        {
            this.currentItemIdx = this.topRowIdx * this.columns;
        }
        if (this.currentItemIdx < 0) 
        {
            this.currentItemIdx = 0;
        }
        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
        this.initialItems = true;
        this.drawFullPage = true;
        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
        this.itemPool.getPoolItems(this.currentItemIdx, this.previousItemIdx, this.itemsStartIdx, this.maxItems, this.fn.onGetPoolItems);
    }

    function loadNextItem()
    {
        this.isViewVisible = false;
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        ++this.currentItemIdx;
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx % this.columns == 0) 
        {
            ++this.currentRowIdx;
            if (this.currentRowIdx > this.bottomRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                ++this.bottomRowIdx;
                ++this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "youtube") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "youtube") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchNextItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function loadPreviousItem()
    {
        this.isViewVisible = false;
        this.itemUnHighlight(this.currentItemIdx);
        this.previousItemIdx = this.currentItemIdx;
        this.previousRowIdx = this.currentRowIdx;
        --this.currentItemIdx;
        this.displayLoadingSign();
        if (this.epgEnabled) 
        {
            this.selectedItem = this.epgItem;
        }
        else 
        {
            this.selectedItem = this.tierItems[this.getItemIndex(this.currentItemIdx)];
        }
        if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
        {
            --this.currentRowIdx;
            if (this.currentRowIdx < this.topRowIdx) 
            {
                this.previousBottomRowIdx = this.bottomRowIdx;
                this.previousTopRowIdx = this.topRowIdx;
                if (this.tierItems.length > (this.rows - 1) * this.columns) 
                {
                    --this.bottomRowIdx;
                }
                --this.topRowIdx;
                this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
            }
            else if (!this.isViewVisible) 
            {
                if (this.selectedItem.itemType == "youtube") 
                {
                    this.selectedItem.streamLink = this.selectedItem.itemLink;
                    this.startPlayback();
                }
                else 
                {
                    this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
                }
            }
        }
        else if (!this.isViewVisible) 
        {
            if (this.selectedItem.itemType == "youtube") 
            {
                this.selectedItem.streamLink = this.selectedItem.itemLink;
                this.startPlayback();
            }
            else 
            {
                this.fetchItemDirectLink(this.fn.onFetchPrevItemDirectLink);
            }
        }
        this.selectedItem = null;
    }

    function onKeyDown()
    {
        if (this.isSubscriptionMsg) 
        {
            this.isSubscriptionMsg = false;
        }
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.currentRowIdx < Math.ceil(this.totalItems / this.columns) - 1 && this.currentRowIdx != null && this.currentRowIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentRowIdx;
                if (this.currentItemIdx + this.columns > this.totalItems - 1) 
                {
                    this.currentItemIdx = this.totalItems - 1;
                }
                else 
                {
                    this.currentItemIdx = this.currentItemIdx + this.columns;
                }
                if (this.currentRowIdx > this.bottomRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    ++this.bottomRowIdx;
                    ++this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.currentItemIdx - this.columns >= 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentRowIdx;
                this.currentItemIdx = this.currentItemIdx - this.columns;
                if (this.currentRowIdx < this.topRowIdx) 
                {
                    this.previousBottomRowIdx = this.bottomRowIdx;
                    this.previousTopRowIdx = this.topRowIdx;
                    if (this.tierItems.length > (this.rows - 1) * this.columns) 
                    {
                        --this.bottomRowIdx;
                    }
                    --this.topRowIdx;
                    this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentItemIdx % this.columns == 0 && this.parentIdx != -1) 
            {
                this.onTierEvent.notify("onLooseFocus");
            }
            else if (this.currentItemIdx > 0 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                --this.currentItemIdx;
                if (this.currentItemIdx == this.currentRowIdx * this.columns - 1) 
                {
                    --this.currentRowIdx;
                    if (this.currentRowIdx < this.topRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        if (this.tierItems.length > (this.rows - 1) * this.columns) 
                        {
                            --this.bottomRowIdx;
                        }
                        --this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.currentItemIdx < this.totalItems - 1 && this.currentItemIdx != null && this.currentItemIdx != undefined) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.prePreviousItemIdx = this.previousItemIdx;
                this.previousItemIdx = this.currentItemIdx;
                this.previousRowIdx = this.currentRowIdx;
                ++this.currentItemIdx;
                if (this.currentItemIdx % this.columns == 0) 
                {
                    ++this.currentRowIdx;
                    if (this.currentRowIdx > this.bottomRowIdx) 
                    {
                        this.previousBottomRowIdx = this.bottomRowIdx;
                        this.previousTopRowIdx = this.topRowIdx;
                        ++this.bottomRowIdx;
                        ++this.topRowIdx;
                        this.itemsStartIdx = Math.floor(this.currentItemIdx / this.maxItems) * this.maxItems;
                        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                        this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                        this.itemPool.getPoolItems(this.currentRowIdx * this.columns, this.previousItemIdx, this.itemsStartIdx, this.columns, this.fn.onGetPoolItems);
                    }
                    else 
                    {
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName);
                }
                this.onEnterKey();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        else if (__reg0 === Key.GREEN) 
        {
            if (_global.currentApplication != "MyJadoo") 
            {
                if (this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveRTMP" || this.tierItems[this.getItemIndex(this.currentItemIdx)].itemType == "liveWMV") 
                {
                    if (this.netStatus == "Up") 
                    {
                        if (this.programListing == null) 
                        {
                            this.programListing = new com.jadoo.as2.JadooPlus.Features.EPG.ProgramListing();
                        }
                        this.disableView();
                        this.programListing.onExit.addListener(this, this.onExitProgramListing);
                        this.programListing.display(this.parentMC, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemName, this.tierItems[this.getItemIndex(this.currentItemIdx)].itemProgramListing);
                    }
                    else 
                    {
                        this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
                    }
                }
            }
        }
        super.onKeyDown();
    }

    function notifyViewToProceed(selectedItemId)
    {
        this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(selectedItemId)].itemLink, null, false, "", this.wasPopupEnabled);
        selectedItemId = null;
    }

    function drawFavoriteIcon(itemIdx)
    {
        var __reg3 = this.itemContainerMC.createEmptyMovieClip("favoriteIconBaseMC" + itemIdx, this.itemContainerMC.getNextHighestDepth());
        __reg3._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x;
        __reg3._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y;
        var __reg2 = __reg3.attachMovie("favoriteIcon", "favoriteIconMC", __reg3.getNextHighestDepth());
        __reg2._x = __reg2._x - __reg2._width / 2;
        __reg2._y = __reg2._y - __reg2._height / 2;
        __reg3 = null;
        __reg2 = null;
        itemIdx = null;
    }

    function removeFavoriteIcon(itemIdx)
    {
        removeMovieClip(this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC);
        this.itemContainerMC["favoriteIconBaseMC" + itemIdx].favoriteIconMC = null;
        itemIdx = null;
    }

}

//Sprite 711
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Page.TwoTierPage extends com.jadoo.as2.JadooPlus.Views.Page.ParentPage
{
    var tier1 = null;
    var tier2 = null;

    function TwoTierPage()
    {
        super();
        var __reg4 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier1Type();
        var __reg3 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier2Type();
        if ((__reg0 = __reg4) === "Tier_1") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
        }
        else if (__reg0 === "GroupTier") 
        {
            this.tier1 = new com.jadoo.as2.MyJadoo.GroupSubTier();
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
        }
        if ((__reg0 = __reg3) === "Tier_1") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
        }
        else if (__reg0 === "GroupTier") 
        {
            this.tier2 = new com.jadoo.as2.MyJadoo.GroupSubTier();
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier2 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
        }
        __reg4 = null;
        __reg3 = null;
    }

    function destroy()
    {
        if (this.tier1 != null) 
        {
            this.tier1.destroy();
            delete this.tier1;
            this.tier1 = null;
        }
        if (this.tier2 != null) 
        {
            this.tier2.destroy();
            delete this.tier2;
            this.tier2 = null;
        }
        super.destroy();
    }

}

//Sprite 712
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Page.SingleTierPage extends com.jadoo.as2.JadooPlus.Views.Page.ParentPage
{
    var tier1 = null;
    var totalItems = null;
    var itemsLink = null;
    var type = null;
    var playlistId = null;

    function SingleTierPage()
    {
        super();
        var __reg3 = com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.getTier1Type();
        if ((__reg0 = __reg3) === "Tier_1") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier1();
            return;
        }
        else if (__reg0 === "Tier_2") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.Tier2();
            return;
        }
        else if (__reg0 === "MatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.GridTier();
            return;
        }
        else if (__reg0 === "DetailedMatrixTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CardTier();
            return;
        }
        else if (__reg0 === "CategoryTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.CategoryTier();
            return;
        }
        else if (__reg0 === "RotationTier") 
        {
            this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.RotationTier();
            return;
        }
        else if (__reg0 !== "MultiRowTier") 
        {
            return;
        }
        this.tier1 = new com.jadoo.as2.JadooPlus.Views.Tier.MultiRowTier();
        return;
    }

    function destroy()
    {
        if (this.tier1 != null) 
        {
            this.tier1.destroy();
            delete this.tier1;
            this.tier1 = null;
        }
        this.itemsLink = null;
        super.destroy();
    }

}

//Sprite 713
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.RotationTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var itemContainerBaseMC = null;
    var itemContainerMC = null;
    var imageLoader = null;
    var imageLoaderListener = null;
    var horizontalSpacing: Number = 0;
    var tweenTime: Number = 0.5;
    var itemWidth: Number = 0;
    var itemHeight: Number = 0;
    var descriptionX = null;
    var descriptionY = null;
    var descriptionWidth = null;
    var descriptionHeight = null;
    var descriptionTxtFormat = null;
    var visibleItems = null;
    var rows: Number = 0;
    var columns: Number = 0;
    var areaStartX;
    var containerHeight;
    var containerStartX;
    var containerStartY;
    var containerWidth;
    var currentItemIdx;
    var fn;
    var getItemIndex;
    var grandParentIdx;
    var isFavoritesCategory;
    var itemIndicies;
    var itemPool;
    var keyListener;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onEnterKey;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parentIdx;
    var parseTier;
    var parseTierItems;
    var previousItemIdx;
    var selectorLoader;
    var selectorUrl;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var wasPopupEnabled;

    function RotationTier()
    {
        super();
        this.tierType = "RotationTier";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onGetPoolItems = mx.utils.Delegate.create(this, this.onGetPoolItems);
        this.fn.onGetCachedSelector = mx.utils.Delegate.create(this, this.onGetCachedSelector);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTierItems;
        com.caurina.transitions.properties.CurveModifiers.init();
    }

    function destroy()
    {
        this.imageLoader.removeListener(this.imageLoaderListener);
        delete this.imageLoader;
        delete this.imageLoaderListener;
        this.itemContainerBaseMC = null;
        this.imageLoader = null;
        this.imageLoaderListener = null;
        this.itemContainerMC = null;
        if (com.jadoo.as2.JadooPlus.Utils.Config.isHomePage == true) 
        {
            com.jadoo.as2.JadooPlus.Utils.Config.isHomePage = false;
        }
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        pageTitle = pageTitle;
        this.visibleItems = this.rows * this.columns;
        this.loadItemSelector();
        parentMC = null;
        viewBaseMC = null;
        viewMC = null;
        pageTitle = null;
        pageId = null;
        contType = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage)
    {
        this.grandParentIdx = grandParentIdx;
        this.parentIdx = parentIdx;
        if (totalItems == 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
        }
        else 
        {
            if (this.itemPool != null) 
            {
                delete this.itemPool;
                this.itemPool = null;
            }
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
            com.jadoo.as2.JadooPlus.Utils.Config.isHomePage = true;
            this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.initialize(itemsLink, 0, this.maxItems, totalItems, this.parseTierItems, isBackPage, this.isFavoritesCategory);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
            this.itemPool.getPoolItems(0, -1, 0, totalItems, this.fn.onGetPoolItems);
        }
        title = null;
        grandParentIdx = null;
        parentIdx = null;
        itemsStartIdx = null;
        totalItems = null;
        itemsLink = null;
        playContinuous = null;
        isBackPage = null;
    }

    function onGetPoolItems()
    {
        this.tierItems = null;
        this.tierItems = arguments[0];
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        this.itemIndicies = new Array();
        var __reg3 = 0;
        while (__reg3 < this.tierItems.length) 
        {
            this.itemIndicies.push(__reg3);
            ++__reg3;
        }
        com.jadoo.as2.JadooPlus.Utils.Config.isHomePage = false;
        this.displayItems();
        this.onTierEvent.notify("onDisplayItems");
        arguments = null;
    }

    function displayItems()
    {
        this.onTierEvent.notify("onDisplayMessage", "");
        var __reg6 = 0;
        if (this.itemContainerMC != null) 
        {
            removeMovieClip(this.itemContainerMC);
            this.itemContainerMC = null;
        }
        this.itemContainerMC = this.tierBaseMC.createEmptyMovieClip("itemContainerMC", this.tierBaseMC.getNextHighestDepth());
        this.itemContainerMC.swapDepths(this.tierBaseMC.selectorMC);
        this.itemContainerMC._x = this.containerStartX;
        this.itemContainerMC._y = this.containerStartY;
        this.horizontalSpacing = (this.containerWidth - this.itemWidth * this.visibleItems) / (this.visibleItems - 1);
        var __reg5 = (this.containerHeight - this.itemHeight) / 2;
        var __reg2 = 0;
        while (__reg2 < this.tierItems.length) 
        {
            var __reg3 = this.itemContainerMC.createEmptyMovieClip("itemBaseMC" + __reg2, this.itemContainerMC.getNextHighestDepth());
            __reg3._x = __reg2 * (this.itemWidth + this.horizontalSpacing);
            __reg3._y = __reg5;
            var __reg4 = this.tierBaseMC.createEmptyMovieClip("itemInfoMC" + __reg2, this.tierBaseMC.getNextHighestDepth());
            __reg4._x = this.descriptionX;
            __reg4._y = this.descriptionY;
            this.tierItems[__reg2].createRotationItem(__reg3, this.itemWidth, this.itemHeight, __reg4, this.descriptionWidth, this.descriptionHeight);
            __reg3 = null;
            __reg4 = null;
            ++__reg2;
        }
        this.tierBaseMC.selectorMC._visible = true;
        this.itemHighlight(this.currentItemIdx);
    }

    function onGridTierPoolEvent()
    {
        com.jadoo.as2.JadooPlus.Utils.Config.isHomePage = false;
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        var __reg5 = arguments[2];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (__reg3 == "internetDown") 
            {
                this.onTierEvent.notify("onDisplayMessage", __reg5);
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            }
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.currentItemIdx = this.previousItemIdx;
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ROTATIONTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ROTATIONTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ROTATIONTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            this.onTierEvent.notify("onErrorLoading");
        }
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function loadItemSelector()
    {
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.selectorUrl, this.fn.onGetCachedSelector, "SELECTOR");
    }

    function onGetCachedSelector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("selectorMC", this.tierBaseMC.getNextHighestDepth());
        this.selectorLoader.loadClip(filePath, __reg2);
        filePath = null;
        __reg2 = null;
    }

    function onLoadItemSelector(targetMC)
    {
        targetMC._visible = false;
        this.onTierEvent.notify("onReady");
        targetMC = null;
    }

    function onLoadItemSelectorError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ROTATIONTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "selectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._x = this.areaStartX;
        __reg2._width = this.itemWidth;
        __reg2._height = this.itemHeight;
        this.onTierEvent.notify("onReady");
        targetMC = null;
        __reg2 = null;
    }

    function enable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.tierBaseMC.selectorMC._visible = true;
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
    }

    function itemHighlight(itemIdx)
    {
        this.tierBaseMC.selectorMC._x = this.itemContainerMC["itemBaseMC" + itemIdx]._x + this.containerStartX;
        this.tierBaseMC.selectorMC._y = this.itemContainerMC["itemBaseMC" + itemIdx]._y + this.containerStartY;
        this.tierItems[this.getItemIndex(itemIdx)].itemHighlight();
        this.currentItemIdx = itemIdx;
        itemIdx = null;
    }

    function itemUnHighlight(itemIdx)
    {
        this.tierItems[this.getItemIndex(itemIdx)].itemUnHighlight();
        itemIdx = null;
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "onKeyDown");
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currentItemIdx + 1 < this.tierItems.length) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.itemHighlight((this.currentItemIdx + 1) % this.tierItems.length);
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentItemIdx > 0) 
            {
                this.itemUnHighlight(this.currentItemIdx);
                this.itemHighlight((this.currentItemIdx - 1 + this.tierItems.length) % this.tierItems.length);
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                this.onEnterKey();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        super.onKeyDown();
    }

    function notifyViewToProceed(selectedItemId)
    {
        this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(selectedItemId)].itemLink, null, false, "", this.wasPopupEnabled);
        selectedItemId = null;
    }

}

//Sprite 714
//  InitClip
dynamic class com.caurina.transitions.properties.CurveModifiers
{

    function CurveModifiers()
    {
        trace("This is an static class and should not be instantiated.");
    }

    static function init()
    {
        com.caurina.transitions.Tweener.registerSpecialPropertyModifier("_bezier", com.caurina.transitions.properties.CurveModifiers._bezier_modifier, com.caurina.transitions.properties.CurveModifiers._bezier_get);
    }

    static function _bezier_modifier(p_obj)
    {
        var __reg7 = [];
        var __reg4 = undefined;
        if (p_obj instanceof Array) 
        {
            __reg4 = p_obj.concat();
        }
        else 
        {
            __reg4 = [p_obj];
        }
        var __reg3 = undefined;
        var __reg1 = undefined;
        var __reg2 = {};
        __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            for (__reg1 in __reg4[__reg3]) 
            {
                if (__reg2[__reg1] == undefined) 
                {
                    __reg2[__reg1] = [];
                }
                __reg2[__reg1].push(__reg4[__reg3][__reg1]);
            }
            ++__reg3;
        }
        for (__reg1 in __reg2) 
        {
            __reg7.push({name: __reg1, parameters: __reg2[__reg1]});
        }
        return __reg7;
    }

    static function _bezier_get(b, e, t, p)
    {
        if (p.length == 1) 
        {
            return b + t * (2 * (1 - t) * (p[0] - b) + t * (e - b));
        }
        var __reg2 = Math.floor(t * p.length);
        var __reg5 = (t - __reg2 * (1 / p.length)) * p.length;
        var __reg3 = undefined;
        var __reg6 = undefined;
        if (__reg2 == 0) 
        {
            __reg3 = b;
            __reg6 = (p[0] + p[1]) / 2;
        }
        else if (__reg2 == p.length - 1) 
        {
            __reg3 = (p[__reg2 - 1] + p[__reg2]) / 2;
            __reg6 = e;
        }
        else 
        {
            __reg3 = (p[__reg2 - 1] + p[__reg2]) / 2;
            __reg6 = (p[__reg2] + p[__reg2 + 1]) / 2;
        }
        return __reg3 + __reg5 * (2 * (1 - __reg5) * (p[__reg2] - __reg3) + __reg5 * (__reg6 - __reg3));
    }

}

//Sprite 715
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.Tier.MultiRowTier extends com.jadoo.as2.JadooPlus.Views.Tier.ParentTier
{
    var row1StartY = null;
    var row1Height = null;
    var row1NumItems = null;
    var row1VisibleItems = null;
    var row1ItemSpacing = null;
    var row1ItemWidth = null;
    var row1ItemHeight = null;
    var row1Selector = null;
    var row2Title = null;
    var row2TitleX = null;
    var row2TitleY = null;
    var row2TitleWidth = null;
    var row2TitleHeight = null;
    var row2TitleTextFormat = null;
    var row2StartY = null;
    var row2Height = null;
    var row2VisibleItems = null;
    var row2ItemSpacing = null;
    var row2ItemWidth = null;
    var row2ItemHeight = null;
    var row2Selector = null;
    var row1SelectorLoader = null;
    var row1SelectorLoaderListener = null;
    var row2SelectorLoader = null;
    var row2SelectorLoaderListener = null;
    var selectorLoadCount: Number = 0;
    var row1ContainerMC = null;
    var row2ContainerMC = null;
    var itemImgLoadTimeout: Number = 2000;
    var itemImgLoadTimeoutId: Number = -1;
    var currentImgIdx: Number = 0;
    var loadCount: Number = 0;
    var rowIdx: Number = 0;
    var row1ItemIdx: Number = 0;
    var row2ItemIdx: Number = 0;
    var row2NumItems: Number = 0;
    var currentItemIdx;
    var epgLink;
    var fn;
    var getItemIndex;
    var isEnabled;
    var isFavoritesCategory;
    var itemIndicies;
    var itemPool;
    var itemsStartIdx;
    var keyListener;
    var maxItems;
    var netErrorStr;
    var netStatus;
    var onEnterKey;
    var onTierEvent;
    var pageId;
    var pageTitle;
    var parseTier;
    var parseTierItems;
    var tierBaseMC;
    var tierItems;
    var tierType;
    var totalItems;
    var wasPopupEnabled;

    function MultiRowTier()
    {
        super();
        this.tierType = "MultiRowTier";
        this.fn.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
        this.fn.onLoadItemImage = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.fn.onGetCachedRow1Selector = mx.utils.Delegate.create(this, this.onGetCachedRow1Selector);
        this.fn.onGetCachedRow2Selector = mx.utils.Delegate.create(this, this.onGetCachedRow2Selector);
        this.fn.onGetInitialItems = mx.utils.Delegate.create(this, this.onGetInitialItems);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.parseTier = com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseTier;
        this.parseTierItems = com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseTierItems;
        this.row1SelectorLoader = new MovieClipLoader();
        this.row1SelectorLoaderListener = new Object();
        this.row1SelectorLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadRow1Selector);
        this.row1SelectorLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadRow1SelectorError);
        this.row1SelectorLoader.addListener(this.row1SelectorLoaderListener);
        this.row2SelectorLoader = new MovieClipLoader();
        this.row2SelectorLoaderListener = new Object();
        this.row2SelectorLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadRow2Selector);
        this.row2SelectorLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadRow2SelectorError);
        this.row2SelectorLoader.addListener(this.row2SelectorLoaderListener);
    }

    function destroy()
    {
        if (this.row2TitleTextFormat != null) 
        {
            delete this.row2TitleTextFormat;
            this.row2TitleTextFormat = null;
        }
        if (this.row1SelectorLoader != null) 
        {
            this.row1SelectorLoader.removeListener(this.row1SelectorLoaderListener);
            delete this.row1SelectorLoader;
            this.row1SelectorLoader = null;
        }
        if (this.row1SelectorLoaderListener != null) 
        {
            delete this.row1SelectorLoaderListener;
            this.row1SelectorLoaderListener = null;
        }
        if (this.row2SelectorLoader != null) 
        {
            this.row2SelectorLoader.removeListener(this.row2SelectorLoaderListener);
            delete this.row2SelectorLoader;
            this.row2SelectorLoader = null;
        }
        if (this.row2SelectorLoaderListener != null) 
        {
            delete this.row2SelectorLoaderListener;
            this.row2SelectorLoaderListener = null;
        }
        this.itemPool.destroy();
        if (this.itemPool != null) 
        {
            delete this.itemPool;
            this.itemPool = null;
        }
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        this.row2Selector = null;
        this.row2Selector = null;
        super.destroy();
    }

    function create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, contType, searchHelpLink, searchResultsLink)
    {
        super.create(parentMC, viewBaseMC, viewMC, pageTitle, pageId, null, searchHelpLink, searchResultsLink);
        this.loadSelectors();
        viewBaseMC = null;
        viewMC = null;
        parentMC = null;
        pageTitle = null;
        pageId = null;
        contType = null;
        searchHelpLink = null;
        searchResultsLink = null;
    }

    function loadSelectors()
    {
        if (this.row1NumItems > 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.row1Selector, this.fn.onGetCachedRow1Selector, "SELECTOR");
        }
        if (this.row2NumItems > 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.row2Selector, this.fn.onGetCachedRow2Selector, "SELECTOR");
        }
    }

    function onGetCachedRow1Selector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("row1SelectorMC", this.tierBaseMC.getNextHighestDepth());
        this.row1SelectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadRow1Selector(targetMC)
    {
        ++this.selectorLoadCount;
        targetMC._visible = false;
        if (this.row2NumItems < 1) 
        {
            this.onTierEvent.notify("onReady");
        }
        else if (this.selectorLoadCount == 2) 
        {
            this.onTierEvent.notify("onReady");
        }
        targetMC = null;
    }

    function onLoadRow1SelectorError(targetMC, errorCode, httpStatus)
    {
        ++this.selectorLoadCount;
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "row1SelectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._width = this.row1ItemWidth;
        __reg2._height = this.row1ItemHeight;
        if (this.row2NumItems < 1) 
        {
            this.onTierEvent.notify("onReady");
        }
        else if (this.selectorLoadCount == 2) 
        {
            this.onTierEvent.notify("onReady");
        }
        __reg2 = null;
    }

    function onGetCachedRow2Selector(filePath)
    {
        var __reg2 = this.tierBaseMC.createEmptyMovieClip("row2SelectorMC", this.tierBaseMC.getNextHighestDepth());
        this.row2SelectorLoader.loadClip(filePath, __reg2);
        __reg2 = null;
    }

    function onLoadRow2Selector(targetMC)
    {
        ++this.selectorLoadCount;
        targetMC._visible = false;
        if (this.row1NumItems < 1) 
        {
            this.onTierEvent.notify("onReady");
        }
        else if (this.selectorLoadCount == 2) 
        {
            this.onTierEvent.notify("onReady");
        }
        targetMC = null;
    }

    function onLoadRow2SelectorError(targetMC, errorCode, httpStatus)
    {
        ++this.selectorLoadCount;
        removeMovieClip(targetMC);
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_SELECTOR_NOT_LOADED, "Page", this.pageTitle, this.pageId);
        var __reg2 = this.tierBaseMC.attachMovie("defaultSelector", "row2SelectorMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._visible = false;
        __reg2._width = this.row2ItemWidth;
        __reg2._height = this.row2ItemHeight;
        if (this.row1NumItems < 1) 
        {
            this.onTierEvent.notify("onReady");
        }
        else if (this.selectorLoadCount == 2) 
        {
            this.onTierEvent.notify("onReady");
        }
        __reg2 = null;
    }

    function enable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.itemHighlight(this.currentItemIdx);
        this.isEnabled = true;
        super.enable();
    }

    function disable()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.isEnabled = false;
    }

    function draw(title, grandParentIdx, parentIdx, itemsStartIdx, totalItems, itemsLink, playContinuous, isBackPage)
    {
        this.itemsStartIdx = itemsStartIdx;
        this.totalItems = totalItems;
        if (totalItems == 0) 
        {
            com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEM_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.pageTitle, this.pageId);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
        }
        else 
        {
            if (this.itemPool != null) 
            {
                delete this.itemPool;
                this.itemPool = null;
            }
            this.itemPool = new com.jadoo.as2.JadooPlus.Parser.XmlParser.TierItemsPool();
            this.itemPool.addListener("onPoolEvent", this, this.onGridTierPoolEvent);
            this.itemPool.initialize(itemsLink, 0, this.maxItems, totalItems, this.parseTierItems, isBackPage, this.isFavoritesCategory);
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Requested_From_Pool");
            }
            this.itemPool.getPoolItems(0, -1, 0, this.maxItems, this.fn.onGetInitialItems);
        }
        title = null;
        itemsLink = null;
        playContinuous = null;
        this.epgLink = null;
        isBackPage = null;
    }

    function displayItems()
    {
        this.onTierEvent.notify("onDisplayMessage", "");
        this.row1ContainerMC = this.tierBaseMC.createEmptyMovieClip("row1ContainerMC", this.tierBaseMC.getNextHighestDepth());
        var __reg6 = this.tierBaseMC.attachMovie("maskMC", "row1MaskMC", this.tierBaseMC.getNextHighestDepth());
        __reg6._width = this.row1VisibleItems * (this.row1ItemWidth + this.row1ItemSpacing);
        __reg6._height = this.row1Height;
        __reg6._x = (1280 - (__reg6._width - this.row1ItemSpacing)) / 2;
        __reg6._y = this.row1StartY;
        this.row1ContainerMC.setMask(__reg6);
        this.row1ContainerMC.swapDepths(this.tierBaseMC.row1SelectorMC);
        this.row1ContainerMC._x = __reg6._x;
        this.row1ContainerMC._y = __reg6._y;
        var __reg3 = 0;
        while (__reg3 < this.row1NumItems) 
        {
            var __reg4 = this.row1ContainerMC.createEmptyMovieClip("itemBaseMC" + __reg3, this.row1ContainerMC.getNextHighestDepth());
            __reg4._x = __reg3 * (this.row1ItemWidth + this.row1ItemSpacing);
            var __reg5 = __reg4.attachMovie("row1PlaceHolder", "itemDefBgMC", __reg4.getNextHighestDepth());
            __reg5._width = this.row1ItemWidth;
            __reg5._height = this.row1ItemHeight;
            __reg5._visible = false;
            this.tierItems[__reg3].createCategoryItem(__reg4, this.row1ItemWidth, this.row1ItemHeight);
            this.tierItems[__reg3].loadImage(__reg3, this.fn.onLoadItemImage, this.tierType);
            __reg4 = null;
            __reg5 = null;
            ++__reg3;
        }
        this.createRow1Arrows();
        if (this.row2NumItems > 0) 
        {
            var __reg8 = this.tierBaseMC.createTextField("row2TitleText", this.tierBaseMC.getNextHighestDepth(), this.row2TitleX, this.row2TitleY, this.row2TitleWidth, this.row2TitleHeight);
            __reg8.setNewTextFormat(this.row2TitleTextFormat);
            __reg8.htmlText = this.row2Title;
            this.row2ContainerMC = this.tierBaseMC.createEmptyMovieClip("row2ContainerMC", this.tierBaseMC.getNextHighestDepth());
            var __reg7 = this.tierBaseMC.attachMovie("maskMC", "row2MaskMC", this.tierBaseMC.getNextHighestDepth());
            __reg7._width = this.row2VisibleItems * (this.row2ItemWidth + this.row2ItemSpacing);
            __reg7._height = this.row2Height;
            __reg7._x = (1280 - (__reg7._width - this.row2ItemSpacing)) / 2;
            __reg7._y = this.row2StartY;
            this.row2ContainerMC.setMask(__reg7);
            this.row2ContainerMC.swapDepths(this.tierBaseMC.row2SelectorMC);
            this.row2ContainerMC._x = __reg7._x;
            this.row2ContainerMC._y = __reg7._y;
            __reg3 = 0;
            while (__reg3 < this.row2NumItems) 
            {
                __reg4 = this.row2ContainerMC.createEmptyMovieClip("itemBaseMC" + __reg3, this.row2ContainerMC.getNextHighestDepth());
                __reg4._x = __reg3 * (this.row2ItemWidth + this.row2ItemSpacing);
                __reg5 = __reg4.attachMovie("row2PlaceHolder", "itemDefBgMC", __reg4.getNextHighestDepth());
                __reg5._width = this.row2ItemWidth;
                __reg5._height = this.row2ItemHeight;
                __reg5._visible = false;
                this.tierItems[__reg3 + this.row1NumItems].createCategoryItem(__reg4, this.row2ItemWidth, this.row2ItemHeight);
                this.tierItems[__reg3 + this.row1NumItems].loadImage(__reg3 + this.row1NumItems, this.fn.onLoadItemImage, this.tierType);
                __reg4 = null;
                __reg5 = null;
                ++__reg3;
            }
            this.createRow2Arrows();
        }
        this.itemImgLoadTimeoutId = _global.setTimeout(this, "displayItemImage", this.itemImgLoadTimeout, 0);
        __reg6 = null;
        __reg7 = null;
        __reg8 = null;
    }

    function onGetInitialItems()
    {
        if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
        {
            com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Items_Acquired_From_Pool");
        }
        this.tierItems = null;
        this.tierItems = arguments[0];
        if (this.itemIndicies != null) 
        {
            delete this.itemIndicies;
            this.itemIndicies = null;
        }
        this.itemIndicies = new Array();
        var __reg4 = 0;
        while (__reg4 < this.tierItems.length) 
        {
            this.itemIndicies.push(__reg4);
            ++__reg4;
        }
        this.displayItems();
        this.onTierEvent.notify("onDisplayItems");
        if (_global.currentApplication != "MyJadoo" && this.pageId == 0) 
        {
            this.onTierEvent.notify("colorButtonEvent", "draw", "Red", "Password Settings");
        }
        arguments = null;
    }

    function onGridTierPoolEvent()
    {
        var __reg4 = arguments[0];
        var __reg3 = arguments[1];
        if ((__reg0 = __reg4) === "xmlLoadError") 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData(this.tierType + "_Pool_Error_" + __reg3);
            }
            this.onTierEvent.notify("onDisplayMessage", com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_DATA_FROM_SERVER_CHECK_CONNECTION);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            if (__reg3 == "zeroItemsLoaded") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "timeOut") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_XML_TIMEOUT, "Page", this.pageTitle, this.pageId);
            }
            else if (__reg3 == "loadingError") 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.CATEGORYTIER_ITEMS_XML_NOT_LOADED, "Page", this.pageTitle, this.pageId);
            }
            this.onTierEvent.notify("onErrorLoading");
        }
        __reg4 = null;
    }

    function createRow1Arrows()
    {
        var __reg2 = this.tierBaseMC.attachMovie("leftArrow", "row1LeftArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._x = this.tierBaseMC.row1MaskMC._x - __reg2._width - this.row1ItemSpacing;
        __reg2._y = this.tierBaseMC.row1MaskMC._y + (this.tierBaseMC.row1MaskMC._height - __reg2._height) / 2;
        __reg2._visible = false;
        var __reg3 = this.tierBaseMC.attachMovie("rightArrow", "row1RightArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width;
        __reg3._y = this.tierBaseMC.row1MaskMC._y + (this.tierBaseMC.row1MaskMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        __reg2 = null;
        __reg3 = null;
    }

    function createRow2Arrows()
    {
        var __reg2 = this.tierBaseMC.attachMovie("leftArrow", "row2LeftArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg2._x = this.tierBaseMC.row2MaskMC._x - __reg2._width - this.row2ItemSpacing;
        __reg2._y = this.tierBaseMC.row2MaskMC._y + (this.row2ItemHeight - __reg2._height) / 2;
        __reg2._visible = false;
        var __reg3 = this.tierBaseMC.attachMovie("rightArrow", "row2RightArrowMC", this.tierBaseMC.getNextHighestDepth());
        __reg3._x = this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width;
        __reg3._y = this.tierBaseMC.row2MaskMC._y + (this.row2ItemHeight - __reg3._height) / 2;
        __reg3._visible = false;
        __reg2 = null;
        __reg3 = null;
    }

    function adjustArrows()
    {
        if (this.row1ContainerMC._x < this.tierBaseMC.row1MaskMC._x) 
        {
            this.tierBaseMC.row1LeftArrowMC._visible = true;
        }
        else 
        {
            this.tierBaseMC.row1LeftArrowMC._visible = false;
        }
        if (this.row2ContainerMC._x < this.tierBaseMC.row2MaskMC._x) 
        {
            this.tierBaseMC.row2LeftArrowMC._visible = true;
        }
        else 
        {
            this.tierBaseMC.row2LeftArrowMC._visible = false;
        }
        if (this.row1ContainerMC._x + this.row1ContainerMC._width > this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width) 
        {
            this.tierBaseMC.row1RightArrowMC._visible = true;
        }
        else 
        {
            this.tierBaseMC.row1RightArrowMC._visible = false;
        }
        if (this.row2ContainerMC._x + this.row2ContainerMC._width > this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width) 
        {
            this.tierBaseMC.row2RightArrowMC._visible = true;
            return;
        }
        this.tierBaseMC.row2RightArrowMC._visible = false;
    }

    function displayItemImage(itemIdx)
    {
        ++this.currentImgIdx;
        if (this.currentImgIdx < this.tierItems.length) 
        {
            for (;;) 
            {
                if (false) 
                {
                    return;
                }
                if (this.tierItems[this.currentImgIdx].isImageLoaded()) 
                {
                    this.tierItems[this.currentImgIdx].displayImage();
                    ++this.currentImgIdx;
                }
                else 
                {
                    this.itemImgLoadTimeoutId = _global.setTimeout(this, "displayItemImage", this.itemImgLoadTimeout, this.currentImgIdx);
                    return;
                }
            }
        }
    }

    function onLoadItemImage(itemIdx, success)
    {
        ++this.loadCount;
        if (this.currentImgIdx == itemIdx || this.tierItems[this.currentImgIdx].isImageLoaded()) 
        {
            _global.clearTimeout(this.itemImgLoadTimeoutId);
            this.tierItems[this.currentImgIdx].displayImage();
            ++this.currentImgIdx;
            this.itemImgLoadTimeoutId = _global.setTimeout(this, "displayItemImage", this.itemImgLoadTimeout, this.currentImgIdx);
        }
        if (itemIdx < this.currentImgIdx) 
        {
            this.tierItems[itemIdx].displayImage();
        }
        if (this.loadCount == this.tierItems.length) 
        {
            _global.clearTimeout(this.itemImgLoadTimeoutId);
            var __reg3 = 0;
            for (;;) 
            {
                if (__reg3 >= this.tierItems.length) 
                {
                    return;
                }
                this.tierItems[__reg3].displayImage();
                ++__reg3;
            }
        }
    }

    function itemHighlight(itemIdx)
    {
        this.rowIdx = itemIdx >= this.row1NumItems ? 1 : 0;
        if (this.rowIdx == 0) 
        {
            this.row1ItemIdx = itemIdx;
        }
        else if (this.rowIdx == 1) 
        {
            this.row2ItemIdx = itemIdx - this.row1NumItems;
        }
        if (this.rowIdx == 0) 
        {
            this.tierBaseMC.row1SelectorMC._visible = true;
            this.tierBaseMC.row2SelectorMC._visible = false;
            __reg2 = this.row1ContainerMC._x + this.row1ContainerMC["itemBaseMC" + this.row1ItemIdx]._x;
            __reg3 = this.row1ContainerMC._y + this.row1ContainerMC["itemBaseMC" + this.row1ItemIdx]._y;
            if (__reg2 >= this.tierBaseMC.row1MaskMC._x && __reg2 + this.row1ItemWidth <= this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width) 
            {
                this.tierBaseMC.row1SelectorMC._x = __reg2;
                this.tierBaseMC.row1SelectorMC._y = __reg3;
            }
            else if (__reg2 < this.tierBaseMC.row1MaskMC._x) 
            {
                this.tierBaseMC.row1SelectorMC._x = this.tierBaseMC.row1MaskMC._x;
                this.tierBaseMC.row1SelectorMC._y = __reg3;
            }
            else if (__reg2 + this.row1ItemWidth > this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width) 
            {
                this.tierBaseMC.row1SelectorMC._x = this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width - this.row1ItemWidth - this.row1ItemSpacing;
                this.tierBaseMC.row1SelectorMC._y = __reg3;
            }
            if (__reg2 + this.row1ItemWidth > this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width) 
            {
                this.row1ContainerMC._x = this.tierBaseMC.row1MaskMC._x + this.tierBaseMC.row1MaskMC._width - (this.row1ContainerMC["itemBaseMC" + this.row1ItemIdx]._x + this.row1ItemWidth + this.row1ItemSpacing);
            }
            else if (__reg2 < this.tierBaseMC.row1MaskMC._x) 
            {
                this.row1ContainerMC._x = this.tierBaseMC.row1MaskMC._x - this.row1ContainerMC["itemBaseMC" + this.row1ItemIdx]._x;
            }
            __reg2 = null;
            __reg3 = null;
        }
        else if (this.rowIdx == 1) 
        {
            this.tierBaseMC.row1SelectorMC._visible = false;
            this.tierBaseMC.row2SelectorMC._visible = true;
            var __reg2 = this.row2ContainerMC._x + this.row2ContainerMC["itemBaseMC" + this.row2ItemIdx]._x;
            var __reg3 = this.row2ContainerMC._y + this.row2ContainerMC["itemBaseMC" + this.row2ItemIdx]._y;
            if (__reg2 >= this.tierBaseMC.row2MaskMC._x && __reg2 + this.row2ItemWidth <= this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width) 
            {
                this.tierBaseMC.row2SelectorMC._x = __reg2;
                this.tierBaseMC.row2SelectorMC._y = __reg3;
            }
            else if (__reg2 < this.tierBaseMC.row2MaskMC._x) 
            {
                this.tierBaseMC.row2SelectorMC._x = this.tierBaseMC.row2MaskMC._x;
                this.tierBaseMC.row2SelectorMC._y = __reg3;
            }
            else if (__reg2 + this.row2ItemWidth > this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width) 
            {
                this.tierBaseMC.row2SelectorMC._x = this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width - this.row2ItemWidth - this.row2ItemSpacing;
                this.tierBaseMC.row2SelectorMC._y = __reg3;
            }
            if (__reg2 + this.row2ItemWidth > this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width) 
            {
                this.row2ContainerMC._x = this.tierBaseMC.row2MaskMC._x + this.tierBaseMC.row2MaskMC._width - (this.row2ContainerMC["itemBaseMC" + this.row2ItemIdx]._x + this.row2ItemWidth + this.row2ItemSpacing);
            }
            else if (__reg2 < this.tierBaseMC.row2MaskMC._x) 
            {
                this.row2ContainerMC._x = this.tierBaseMC.row2MaskMC._x - this.row2ContainerMC["itemBaseMC" + this.row2ItemIdx]._x;
            }
            __reg2 = null;
            __reg3 = null;
        }
        this.adjustArrows();
    }

    function onKeyDown()
    {
        this.onTierEvent.notify("onDisplayMessage", "");
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.rowIdx == 0 && this.row2NumItems > 0) 
            {
                this.rowIdx = 1;
                this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                this.itemHighlight(this.currentItemIdx);
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.rowIdx == 1) 
            {
                this.rowIdx = 0;
                this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                this.itemHighlight(this.currentItemIdx);
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.rowIdx == 0) 
            {
                if (this.row1ItemIdx > 0) 
                {
                    --this.row1ItemIdx;
                    this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                    this.itemHighlight(this.currentItemIdx);
                }
            }
            else if (this.rowIdx == 1) 
            {
                if (this.row2ItemIdx > 0) 
                {
                    --this.row2ItemIdx;
                    this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.rowIdx == 0) 
            {
                if (this.row1ItemIdx < this.row1NumItems - 1) 
                {
                    ++this.row1ItemIdx;
                    this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                    this.itemHighlight(this.currentItemIdx);
                }
            }
            else if (this.rowIdx == 1) 
            {
                if (this.row2ItemIdx < this.tierItems.length - this.row1NumItems - 1) 
                {
                    ++this.row2ItemIdx;
                    this.currentItemIdx = this.rowIdx * this.row1NumItems + (this.rowIdx ? this.row2ItemIdx : this.row1ItemIdx);
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode) 
                {
                    com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Load_" + this.tierItems[this.currentItemIdx].itemName);
                }
                this.onEnterKey();
            }
            else 
            {
                this.onTierEvent.notify("onDisplayMessage", this.netErrorStr);
            }
        }
        super.onKeyDown();
    }

    function notifyViewToProceed(selectedItemId)
    {
        this.onTierEvent.notify("onEnterKey", this.tierItems[this.getItemIndex(selectedItemId)].itemLink, null, false, "", this.wasPopupEnabled);
        selectedItemId = null;
    }

}

//Sprite 716
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser
{

    function MultiRowTierXmlParser()
    {
        super();
    }

    static function parseTier(multiRowTier, tierNode)
    {
        var __reg4 = tierNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "row1") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseRow1Tag(multiRowTier, __reg1);
            }
            else if (__reg1.nodeName == "row2") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseRow2Tag(multiRowTier, __reg1);
            }
            else if (__reg1.nodeName == "area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseAreaTag(multiRowTier, __reg1);
            }
            else if (__reg1.nodeName == "max_items") 
            {
                multiRowTier.maxItems = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg4 = null;
        __reg1 = null;
    }

    static function parseTierItems(tierXml, items)
    {
        var __reg10 = mx.xpath.XPathAPI.selectNodeList(tierXml.firstChild, "/xml/items/item");
        var __reg3 = null;
        var __reg11 = __reg10.length;
        var __reg2 = 0;
        while (__reg2 < __reg11) 
        {
            __reg3 = __reg10[__reg2];
            var __reg1 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/item/type").firstChild.nodeValue;
            if (__reg1 == "liveWMV" || __reg1 == "liveRTMP") 
            {
                var __reg6 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseChannelItem(__reg6, __reg3);
                items[__reg2] = __reg6;
                __reg6 = null;
            }
            else if (__reg1 == "flv" || __reg1 == "wmv" || __reg1 == "youtube" || __reg1 == "dailymotion" || __reg1 == "youtubesinglevideo" || __reg1 == "dailymotionsinglevideo") 
            {
                var __reg5 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseContentItem(__reg5, __reg3);
                items[__reg2] = __reg5;
                __reg5 = null;
            }
            else if (__reg1 == "group") 
            {
                var __reg8 = new com.jadoo.as2.MyJadoo.GroupSubItem();
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseGroupSubItem(__reg8, __reg3);
                items[__reg2] = __reg8;
                __reg8 = null;
            }
            else if (__reg1 == "channel") 
            {
                var __reg9 = new com.jadoo.as2.MyJadoo.ChannelSubItem();
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseChannelSubItem(__reg9, __reg3);
                items[__reg2] = __reg9;
                __reg9 = null;
            }
            else if (__reg1 == "container" || __reg1 == "subscribe_channels" || __reg1 == "subscribe_groups") 
            {
                var __reg7 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridCategoryItem();
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseCategoryItem(__reg7, __reg3);
                items[__reg2] = __reg7;
                __reg7 = null;
            }
            ++__reg2;
        }
        __reg10 = null;
        __reg3 = null;
        items = null;
        tierXml = null;
    }

    static function parseRow1Tag(multiRowTier, row1Node)
    {
        var __reg4 = row1Node.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "starty") 
            {
                multiRowTier.row1StartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                multiRowTier.row1Height = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "num_items") 
            {
                multiRowTier.row1NumItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "visible_items") 
            {
                multiRowTier.row1VisibleItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_spacing") 
            {
                multiRowTier.row1ItemSpacing = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_width") 
            {
                multiRowTier.row1ItemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_height") 
            {
                multiRowTier.row1ItemHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "selector") 
            {
                multiRowTier.row1Selector = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        multiRowTier = null;
        row1Node = null;
    }

    static function parseRow2Tag(multiRowTier, row2Node)
    {
        var __reg4 = row2Node.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "starty") 
            {
                multiRowTier.row2StartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                multiRowTier.row2Height = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "num_items") 
            {
                multiRowTier.row2NumItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "visible_items") 
            {
                multiRowTier.row2VisibleItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_spacing") 
            {
                multiRowTier.row2ItemSpacing = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_width") 
            {
                multiRowTier.row2ItemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_height") 
            {
                multiRowTier.row2ItemHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "selector") 
            {
                multiRowTier.row2Selector = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "title") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.MultiRowTierXmlParser.parseRow2TitleTag(multiRowTier, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        multiRowTier = null;
        row2Node = null;
    }

    static function parseRow2TitleTag(multiRowTier, row2TitleNode)
    {
        var __reg4 = row2TitleNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "text") 
            {
                multiRowTier.row2Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "startx") 
            {
                multiRowTier.row2TitleX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                multiRowTier.row2TitleY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                multiRowTier.row2TitleWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                multiRowTier.row2TitleHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (multiRowTier.row2TitleTextFormat == null) 
                {
                    multiRowTier.row2TitleTextFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(multiRowTier.row2TitleTextFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        row2TitleNode = null;
        multiRowTier = null;
    }

    static function parseAreaTag(multiRowTier, areaNode)
    {
        var __reg4 = areaNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg1 = __reg4[__reg2];
            if (__reg1.nodeName == "startx") 
            {
                multiRowTier.areaStartX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                multiRowTier.areaStartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                multiRowTier.areaWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                multiRowTier.areaHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg4 = null;
        __reg1 = null;
        areaNode = null;
        multiRowTier = null;
    }

}

//Sprite 717
//  InitClip
dynamic class com.jadoo.as2.MyJadoo.ChannelSubItem extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var subscriptionLink = null;
    var creationDate = null;
    var views = null;
    var description = null;
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var nameText = null;
    var textFormat = null;
    var fn = null;
    var itemWidth = null;
    var itemHeight = null;
    var itemNameText = null;
    var textHeight: Number = 35;
    var itemImageMC = null;
    var imgLoaded: Boolean = false;
    var itemIdx = null;
    var onLoadImage = null;
    var itemImage;
    var itemName;

    function ChannelSubItem()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadItemImageError);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function destroy()
    {
        this.itemBaseMC._visible = false;
        this.itemBaseMC.itemDefBgMC._visible = false;
        this.itemBaseMC.itemNameTxt._visible = false;
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.unloadClip(this.itemImageMC);
            removeMovieClip(this.itemImageMC);
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        removeMovieClip(this.itemImageMC);
        this.itemImageMC = null;
        this.onLoadImage = null;
        this.itemName = null;
        this.subscriptionLink = null;
        this.creationDate = null;
        this.description = null;
        this.nameText = null;
        this.fn = null;
        this.itemBaseMC = null;
        super.destroy();
    }

    function create(itemBaseMC, itemWidth, itemHeight)
    {
        this.itemBaseMC = itemBaseMC;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        itemBaseMC.itemNameTxt._visible = true;
        itemBaseMC.itemNameTxt.htmlText = this.itemName;
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        itemBaseMC = null;
        itemWidth = null;
        itemHeight = null;
    }

    function createCategoryItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        if (itemBaseMC.itemNameBaseMC != undefined) 
        {
            removeMovieClip(itemBaseMC.itemNameBaseMC);
        }
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 0;
        __reg4._y = this.itemHeight;
        var __reg5 = __reg4.createEmptyMovieClip("itemNameMC", __reg4.getNextHighestDepth());
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "center";
        __reg3.bold = false;
        __reg3.size = 24;
        __reg3.color = 16777215;
        this.itemNameText.createTextField(__reg5, 0, 0, this.itemWidth, 0, "false");
        this.itemNameText.setTextFormat(__reg3);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setHeight(this.textHeight);
        this.itemNameText.setY((this.itemNameText.getHeight() - this.itemNameText.getHeight()) / 2);
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
        itemBaseMC = null;
        width = null;
        height = null;
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemBaseMC.itemImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        targetMC._width = this.itemBaseMC.itemDefBgMC._width;
        targetMC._height = this.itemBaseMC.itemDefBgMC._height;
        this.imgLoaded = true;
        this.onLoadImage(this.itemIdx, true);
        targetMC = null;
    }

    function onLoadItemImageError(targetMC, errorCode, httpStatus)
    {
        this.imgLoaded = false;
        this.onLoadImage(this.itemIdx, false);
        targetMC = null;
        errorCode = null;
        httpStatus = null;
    }

    function loadImage(itemIdx, onLoad)
    {
        this.onLoadImage = onLoad;
        this.itemIdx = itemIdx;
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG");
        onLoad = null;
        itemIdx = null;
    }

    function displayImage()
    {
        if (this.imgLoaded) 
        {
            this.itemImageMC._visible = true;
            this.itemBaseMC.itemNameTxt._visible = false;
            this.itemBaseMC.itemDefBgMC._visible = false;
        }
    }

    function isImageLoaded()
    {
        return this.imgLoaded;
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

    function itemHighlight()
    {
        this.itemNameText.enable(false, 1500);
    }

    function itemUnHighlight()
    {
        this.itemNameText.disable();
    }

}

//Sprite 718
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.GridCategoryItem extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var cache: Number = 1;
    var itemDescription = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var rotationItemImageLoader = null;
    var rotationItemImageLoaderListener = null;
    var parentMC = null;
    var itemBaseMC = null;
    var itemIdx = null;
    var onLoadImage = null;
    var imgLoaded: Boolean = false;
    var fn = null;
    var tweenStartTimerId: Number = -1;
    var itemWidth = null;
    var itemHeight = null;
    var announcements = null;
    var textFormat = null;
    var rotationInfoImageLoader = null;
    var rotationInfoImageLoaderListener = null;
    var infoAreaHeight: Number = 0;
    var infoAreaWidth: Number = 0;
    var infoImageWidth: Number = 100;
    var infoTweenRate: Number = 0.08;
    var textHeight: Number = 35;
    var itemInfoMC = null;
    var rotationTier: Boolean = false;
    var itemImageMC = null;
    var itemNameText = null;
    var titleText = null;
    var rotationItemTitle = null;
    var searchedItemPathText = null;
    var cardImageWidth = null;
    var cardImageHeight = null;
    var isCardItem: Boolean = false;
    var itemImage;
    var itemName;
    var itemPath;
    var itemType;

    function GridCategoryItem()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.rotationItemImageLoader = new MovieClipLoader();
        this.rotationItemImageLoaderListener = new Object();
        this.rotationInfoImageLoader = new MovieClipLoader();
        this.rotationInfoImageLoaderListener = new Object();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadItemImageError);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.textFormat = new TextFormat();
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.titleText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile), onGetRotationCachedImage: mx.utils.Delegate.create(this, this.onGetRotationCachedImage), onGetRotationInfoCachedImage: mx.utils.Delegate.create(this, this.onGetRotationInfoCachedImage)};
    }

    function destroy()
    {
        _global.clearTimeout(this.tweenStartTimerId);
        this.itemBaseMC._visible = false;
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.unloadClip(this.itemImageMC);
            removeMovieClip(this.itemImageMC);
            this.itemImageMC = null;
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.rotationItemImageLoader != null) 
        {
            this.rotationItemImageLoader.unloadClip(this.itemImageMC);
            removeMovieClip(this.itemImageMC);
            this.itemImageMC = null;
            this.rotationItemImageLoader.removeListener(this.rotationItemImageLoaderListener);
            delete this.rotationItemImageLoader;
            this.rotationItemImageLoader = null;
        }
        if (this.rotationInfoImageLoader != null) 
        {
            this.rotationInfoImageLoader.unloadClip(this.itemBaseMC.itemInfoMC.infoImageMC);
            removeMovieClip(this.itemBaseMC.itemInfoMC.infoImageMC);
            this.rotationInfoImageLoader.removeListener(this.rotationInfoImageLoaderListener);
            delete this.rotationInfoImageLoader;
            this.rotationInfoImageLoader = null;
        }
        if (this.rotationItemImageLoaderListener != null) 
        {
            delete this.rotationItemImageLoaderListener;
            this.rotationItemImageLoaderListener = null;
        }
        if (this.rotationInfoImageLoaderListener != null) 
        {
            delete this.rotationInfoImageLoaderListener;
            this.rotationInfoImageLoaderListener = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.itemBaseMC.itemNameBaseMC != undefined) 
        {
            removeMovieClip(this.itemBaseMC.itemNameBaseMC);
        }
        if (this.titleText != null) 
        {
            this.titleText.removeTextField();
            delete this.titleText;
            this.titleText = null;
        }
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        if (this.rotationItemTitle != null) 
        {
            this.rotationItemTitle.removeTextField();
            delete this.rotationItemTitle;
            this.rotationItemTitle = null;
        }
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        if (this.searchedItemPathText != null) 
        {
            this.searchedItemPathText.removeTextField();
            delete this.searchedItemPathText;
            this.searchedItemPathText = null;
        }
        this.itemNameText = null;
        this.onLoadImage = null;
        this.itemDescription = null;
        this.itemBaseMC = null;
        this.itemImageMC = null;
        this.fn = null;
        super.destroy();
    }

    function createIconItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        itemBaseMC.itemNameTxt._visible = true;
        itemBaseMC.itemNameTxt.htmlText = this.itemName;
        if (itemBaseMC.itemNameTxt.textHeight <= height) 
        {
            itemBaseMC.itemNameTxt._y = (height - itemBaseMC.itemNameTxt.textHeight) / 2;
        }
        else 
        {
            itemBaseMC.itemNameTxt._y = 0;
        }
        if (this.itemImageMC != undefined && this.itemImageMC != null) 
        {
            this.itemImageMC.removeMovieClip();
            this.itemImageMC = null;
        }
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        itemBaseMC = null;
    }

    function createCardItem(itemBaseMC, width, height, pageTitle)
    {
        this.itemBaseMC = itemBaseMC;
        this.isCardItem = true;
        this.cardImageWidth = 86;
        this.cardImageHeight = height - 12;
        var __reg5 = width - this.cardImageWidth - 20;
        var __reg6 = itemBaseMC.attachMovie("CardBaseMC", "cardImageBaseMC", itemBaseMC.getNextHighestDepth());
        __reg6._width = width;
        __reg6._height = height;
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        this.itemImageMC._x = width - this.cardImageWidth - 6;
        this.itemImageMC._y = 6;
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 6;
        __reg4._y = 6;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "left";
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 15790320;
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemNameText.createTextField(__reg4, 0, 0, __reg5, 0, "true");
        this.itemNameText.setTextFormat(__reg2);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setWidth(__reg5);
        if (pageTitle == "Search Results") 
        {
            __reg2.align = "right";
            __reg2.size = 24;
            this.searchedItemPathText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            this.searchedItemPathText.createTextField(itemBaseMC, 0, __reg4._y + this.itemNameText.getTextHeight(), __reg5, 0, "true");
            this.searchedItemPathText.setTextFormat(__reg2);
            this.searchedItemPathText.setHtmlText(this.itemPath);
            this.searchedItemPathText.setWidth(__reg5);
        }
        if (this.itemType == "youtube") 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        else if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        pageTitle = null;
        __reg2 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        itemBaseMC = null;
    }

    function createCategoryItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.bold = false;
        __reg2.size = 24;
        __reg2.color = 16777215;
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 0;
        __reg4._y = height;
        var __reg5 = __reg4.createEmptyMovieClip("itemNameMC", __reg4.getNextHighestDepth());
        this.itemNameText.createTextField(__reg5, 0, 0, width, this.textHeight, "false");
        this.itemNameText.setTextFormat(__reg2);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        __reg2 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function createRotationItem(parentMC, width, height, itemInfoMC, infoAreaWidth, infoAreaHeight)
    {
        var __reg6 = this.itemName;
        var __reg4 = new Array();
        var __reg11 = "\n";
        this.rotationItemTitle = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.rotationTier = true;
        this.parentMC = parentMC;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.bold = false;
        __reg2.size = 22;
        __reg2.color = 16777215;
        var __reg3 = parentMC.createEmptyMovieClip("itemBaseMC", parentMC.getNextHighestDepth());
        __reg3.attachMovie("rotItemTile", "tileMC", __reg3.getNextHighestDepth());
        __reg3.tileMC._width = width;
        __reg3.tileMC._height = height;
        var __reg8 = __reg3.createEmptyMovieClip("rotationItemNameMC", __reg3.getNextHighestDepth());
        this.rotationItemTitle.createTextField(__reg8, 0, 0, width, this.textHeight, "true");
        this.rotationItemTitle.setTextFormat(__reg2);
        __reg4 = __reg6.split(" ");
        if (__reg4.length > 1) 
        {
            __reg4[0] = __reg4[0] + __reg11;
            __reg6 = __reg4[0] + __reg4[1];
        }
        this.rotationItemTitle.setHtmlText(__reg6);
        this.rotationItemTitle.setY(__reg3._y - this.rotationItemTitle.getHeight());
        if (this.rotationItemTitle.getWidth() > width) 
        {
            this.rotationItemTitle.setX(0);
        }
        else 
        {
            this.rotationItemTitle.setX((width - this.rotationItemTitle.getWidth()) / 2);
        }
        var __reg5 = __reg3.createTextField("itemNameText", __reg3.getNextHighestDepth(), 7, 5, width - 15, 0);
        __reg2.font = "Arial";
        __reg2.align = "center";
        __reg2.bold = false;
        __reg2.size = 20;
        __reg2.color = 16777215;
        __reg5.setNewTextFormat(__reg2);
        __reg5.wordWrap = true;
        __reg5.autoSize = true;
        __reg5.htmlText = this.itemName;
        var __reg10 = __reg3.createEmptyMovieClip("imageMC", __reg3.getNextHighestDepth());
        this.rotationItemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadRotationItemImage);
        this.rotationItemImageLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadRotationItemImageError);
        this.rotationItemImageLoader.addListener(this.rotationItemImageLoaderListener);
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetRotationCachedImage, "IMG");
        this.displayRotationInfo(itemInfoMC, infoAreaWidth, infoAreaHeight);
        __reg6 = null;
        false;
        __reg4 = null;
        __reg8 = null;
        false;
        __reg2 = null;
        __reg3 = null;
        __reg10 = null;
        __reg5 = null;
        parentMC = null;
        itemInfoMC = null;
    }

    function displayRotationInfo(itemInfoMC, infoAreaWidth, infoAreaHeight)
    {
        this.itemInfoMC = itemInfoMC;
        this.infoAreaWidth = infoAreaWidth;
        this.infoAreaHeight = infoAreaHeight;
        itemInfoMC._visible = false;
        var __reg10 = itemInfoMC.createEmptyMovieClip("titleMC", itemInfoMC.getNextHighestDepth());
        __reg10._x = 15;
        __reg10._y = 2;
        this.setTxtFormat("Arial", "center", 30, true, 8278037);
        this.titleText.createTextField(__reg10, 0, 0, infoAreaWidth - 15, 0, "true");
        this.titleText.setTextFormat(this.textFormat);
        var __reg12 = itemInfoMC.createEmptyMovieClip("infoImageMC", itemInfoMC.getNextHighestDepth());
        __reg12._x = __reg10._x;
        __reg12._y = __reg10._y + 45;
        this.rotationInfoImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadRotationInfoImage);
        this.rotationInfoImageLoader.addListener(this.rotationInfoImageLoaderListener);
        com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetRotationInfoCachedImage, "IMG");
        var __reg7 = itemInfoMC.attachMovie("maskMC", "annAreaMaskMC", itemInfoMC.getNextHighestDepth());
        __reg7._x = __reg10._x + this.infoImageWidth + 20;
        __reg7._y = __reg10._y + 40;
        __reg7._width = infoAreaWidth - __reg7._x - 15;
        __reg7._height = infoAreaHeight - __reg7._y - 5;
        var __reg2 = itemInfoMC.createEmptyMovieClip("announcementAreaMC", itemInfoMC.getNextHighestDepth());
        __reg2._x = __reg7._x;
        __reg2._y = __reg7._y;
        __reg2.setMask(__reg7);
        if (this.announcements == null) 
        {
            this.setTxtFormat("Arial", "left", 24, false, 16777215);
            var __reg11 = __reg2.createTextField("descriptionText", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
            __reg11.setNewTextFormat(this.textFormat);
            __reg11._width = infoAreaWidth - __reg2._x - 15;
            __reg11.wordWrap = true;
            __reg11.autoSize = true;
            __reg11.htmlText = this.itemDescription;
            __reg11 = null;
        }
        else 
        {
            var __reg4 = 0;
            while (__reg4 < this.announcements.length) 
            {
                this.setTxtFormat("Arial", "left", 24, true, 9868950);
                var __reg5 = __reg2.createTextField("announcementDateText" + __reg4, __reg2.getNextHighestDepth(), 0, 0, 0, 0);
                __reg5.setNewTextFormat(this.textFormat);
                __reg5.autoSize = true;
                __reg5.htmlText = this.announcements[__reg4].date;
                this.setTxtFormat("Arial", "left", 24, false, 16777215);
                var __reg3 = __reg2.createTextField("announcementText" + __reg4, __reg2.getNextHighestDepth(), 0, 0, 0, 0);
                __reg3.setNewTextFormat(this.textFormat);
                __reg3._width = infoAreaWidth - __reg2._x - 15;
                __reg3.wordWrap = true;
                __reg3.autoSize = true;
                __reg3.htmlText = this.announcements[__reg4].text;
                __reg5 = null;
                __reg3 = null;
                ++__reg4;
            }
            var __reg6 = 0;
            __reg4 = 0;
            while (__reg4 < this.announcements.length) 
            {
                __reg2["announcementDateText" + __reg4]._y = __reg6;
                __reg6 = __reg6 + __reg2["announcementDateText" + __reg4]._height;
                __reg2["announcementText" + __reg4]._y = __reg6;
                __reg6 = __reg6 + __reg2["announcementText" + __reg4]._height;
                ++__reg4;
            }
        }
        itemInfoMC = null;
        __reg2 = null;
        __reg7 = null;
        __reg12 = null;
        __reg10 = null;
    }

    function onGetRotationCachedImage(filePath)
    {
        this.rotationItemImageLoader.loadClip(filePath, this.parentMC.itemBaseMC.imageMC);
    }

    function onLoadRotationItemImage(targetMC)
    {
        targetMC._width = this.parentMC.itemBaseMC.tileMC._width;
        targetMC._height = this.parentMC.itemBaseMC.tileMC._height;
        removeMovieClip(this.parentMC.itemBaseMC.itemNameText);
        removeMovieClip(this.parentMC.itemBaseMC.tileMC);
        removeMovieClip(this.parentMC.itemBaseMC.loadingMC);
        targetMC = null;
    }

    function onLoadRotationItemImageError(targetMC, errorCode, httpStatus)
    {
        removeMovieClip(targetMC);
        removeMovieClip(this.parentMC.itemBaseMC.loadingMC);
        var __reg2 = this.parentMC.itemBaseMC.itemNameText;
        __reg2._height = 30;
        __reg2 = null;
        targetMC = null;
    }

    function onGetRotationInfoCachedImage(filePath)
    {
        this.rotationInfoImageLoader.loadClip(filePath, this.itemInfoMC.infoImageMC);
    }

    function onLoadRotationInfoImage(targetMC)
    {
        var __reg4 = this.infoImageWidth / targetMC._width;
        var __reg3 = (this.infoAreaHeight - (this.itemInfoMC.titleMC._y + this.itemInfoMC.titleMC._height) - 12) / targetMC._height;
        if (__reg4 < __reg3) 
        {
            targetMC._width = targetMC._width * __reg4;
            targetMC._height = targetMC._height * __reg4;
        }
        else 
        {
            targetMC._width = targetMC._width * __reg3;
            targetMC._height = targetMC._height * __reg3;
        }
        targetMC._x = targetMC._x + (this.infoImageWidth - targetMC._width) / 2;
        targetMC = null;
    }

    function loadImage(itemIdx, onLoad)
    {
        this.onLoadImage = onLoad;
        this.itemIdx = itemIdx;
        if (this.itemType == "youtube") 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        else if (arguments[2] == "MultiRowTier") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_BG");
        }
        else if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        onLoad = null;
        itemIdx = null;
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        if (this.isCardItem) 
        {
            targetMC._width = this.cardImageWidth;
            targetMC._height = this.cardImageHeight;
        }
        else 
        {
            targetMC._width = this.itemWidth;
            targetMC._height = this.itemHeight;
            targetMC._visible = false;
            this.imgLoaded = true;
            this.displayImage();
        }
        targetMC = null;
    }

    function onLoadItemImageError(targetMC, errorCode, httpStatus)
    {
        this.imgLoaded = false;
        targetMC = null;
        errorCode = null;
        httpStatus = null;
    }

    function displayImage()
    {
        if (this.imgLoaded) 
        {
            this.itemImageMC._visible = true;
            this.itemBaseMC.itemDefBgMC._visible = false;
            this.itemBaseMC.itemNameTxt._visible = false;
        }
    }

    function isImageLoaded()
    {
        return this.imgLoaded;
    }

    function itemHighlight()
    {
        if (this.rotationTier) 
        {
            this.itemInfoMC._visible = true;
            this.titleText.setHtmlText(this.itemName);
            this.titleText.enable(false, 2000);
            this.rotationItemTitle.enable(false, 1500);
            var __reg2 = this.itemInfoMC.announcementAreaMC;
            var __reg3 = this.itemInfoMC.annAreaMaskMC;
            if (__reg2._height > __reg3._height) 
            {
                __reg2._y = __reg3._y + __reg3._height / 2;
                var __reg4 = this.infoTweenRate * (__reg2._y - __reg3._y + __reg2._height);
                com.caurina.transitions.Tweener.addTween(__reg2, {_y: __reg3._y - __reg2._height, time: __reg4, transition: "linear", onComplete: this.onCompleteRotationInfoTween, onCompleteScope: this});
            }
            __reg2 = null;
            __reg3 = null;
            return;
        }
        this.itemNameText.enable(false, 1500);
        if (this.isCardItem) 
        {
            this.searchedItemPathText.enable(false, 1500);
        }
    }

    function onCompleteRotationInfoTween()
    {
        var __reg2 = this.itemInfoMC.announcementAreaMC;
        var __reg3 = this.itemInfoMC.annAreaMaskMC;
        __reg2._y = __reg3._y + __reg3._height;
        var __reg4 = this.infoTweenRate * (__reg2._y - __reg3._y + __reg2._height);
        com.caurina.transitions.Tweener.addTween(__reg2, {_y: __reg3._y - __reg2._height, time: __reg4, transition: "linear", onComplete: this.onCompleteRotationInfoTween, onCompleteScope: this});
        __reg2 = null;
        __reg3 = null;
    }

    function itemUnHighlight()
    {
        if (this.rotationTier) 
        {
            this.titleText.disable();
            this.rotationItemTitle.disable();
            if (com.caurina.transitions.Tweener.isTweening(this.itemInfoMC.announcementAreaMC)) 
            {
                com.caurina.transitions.Tweener.removeTweens(this.itemInfoMC.announcementAreaMC);
            }
            this.itemInfoMC._visible = false;
            return;
        }
        this.itemNameText.disable();
        if (this.isCardItem) 
        {
            this.searchedItemPathText.disable();
        }
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
    }

}

//Sprite 719
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser extends com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser
{

    function GridTierXmlParser()
    {
        super();
    }

    static function parseTier(gridTier, gridTierNode)
    {
        var __reg4 = gridTierNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "title") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseTitleTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseAreaTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "item_container") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseItemContainerTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "item_properties") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseItemPropertiesTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "description_area") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseDescriptionAreaTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "info") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseInfoTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "listing_indx_text") 
            {
                com.jadoo.as2.JadooPlus.Parser.XmlParser.GridTierXmlParser.parseListingIdxTag(gridTier, __reg1);
            }
            else if (__reg1.nodeName == "playcontinuous") 
            {
                gridTier.playContinuous = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "max_items") 
            {
                gridTier.maxItems = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "content_type") 
            {
                gridTier.contentType = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        gridTierNode = null;
        gridTier = null;
    }

    static function parseTierItems(tierXml, items)
    {
        var __reg2 = arguments[2];
        var __reg13 = arguments[3];
        var __reg15 = undefined;
        if (__reg2 == "youtubeplaylist") 
        {
            __reg15 = com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubePlaylistParser.parseItems(tierXml, items, __reg13);
        }
        else if (__reg2 == "dailymotionplaylist") 
        {
            com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionPlaylistParser.parseItems(tierXml, items, __reg13);
        }
        else 
        {
            var __reg11 = null;
            var __reg4 = null;
            __reg11 = mx.xpath.XPathAPI.selectNodeList(tierXml.firstChild, "/xml/items/item");
            var __reg12 = __reg11.length;
            var __reg3 = 0;
            while (__reg3 < __reg12) 
            {
                __reg4 = __reg11[__reg3];
                __reg2 = mx.xpath.XPathAPI.selectSingleNode(__reg4, "/item/type").firstChild.nodeValue;
                if (__reg2 == "liveWMV" || __reg2 == "liveRTMP" || __reg2 == "livePlaylist") 
                {
                    var __reg7 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseChannelItem(__reg7, __reg4);
                    items[__reg3] = __reg7;
                    __reg7 = null;
                }
                else if (__reg2 == "flv" || __reg2 == "wmv" || __reg2 == "youtube" || __reg2 == "vodPlaylist" || __reg2 == "youtubesinglevideo" || __reg2 == "dailymotionsinglevideo") 
                {
                    var __reg6 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseContentItem(__reg6, __reg4);
                    items[__reg3] = __reg6;
                    __reg6 = null;
                }
                else if (__reg2 == "group") 
                {
                    var __reg9 = new com.jadoo.as2.MyJadoo.GroupSubItem();
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseGroupSubItem(__reg9, __reg4);
                    items[__reg3] = __reg9;
                    __reg9 = null;
                }
                else if (__reg2 == "channel") 
                {
                    var __reg10 = new com.jadoo.as2.MyJadoo.ChannelSubItem();
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseChannelSubItem(__reg10, __reg4);
                    items[__reg3] = __reg10;
                    __reg10 = null;
                }
                else if (__reg2 == "container" || __reg2 == "subscribe_channels" || __reg2 == "subscribe_groups" || __reg2 == "dailymotionplaylist" || __reg2 == "youtubeplaylist") 
                {
                    var __reg8 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridCategoryItem();
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseCategoryItem(__reg8, __reg4);
                    items[__reg3] = __reg8;
                    __reg8 = null;
                }
                ++__reg3;
            }
            __reg4 = null;
            __reg11 = null;
        }
        __reg13 = null;
        __reg2 = null;
        arguments = null;
        items = null;
        tierXml = null;
        return __reg15;
    }

    static function parseTitleTag(gridTier, titleNode)
    {
        var __reg4 = titleNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                gridTier.titleX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                gridTier.titleY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                gridTier.titleWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                gridTier.titleHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (gridTier.titleTxtFormat == null) 
                {
                    gridTier.titleTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(gridTier.titleTxtFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        titleNode = null;
        gridTier = null;
    }

    static function parseItemContainerTag(gridTier, itemContainerNode)
    {
        var __reg4 = itemContainerNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                gridTier.containerStartX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                gridTier.containerStartY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                gridTier.containerWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                gridTier.containerHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "rows") 
            {
                gridTier.rows = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "cols") 
            {
                gridTier.columns = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "item_selector") 
            {
                gridTier.selectorUrl = __reg1.firstChild.nodeValue;
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        gridTier = null;
        itemContainerNode = null;
    }

    static function parseItemPropertiesTag(gridTier, itemPropertiesNode)
    {
        var __reg3 = itemPropertiesNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "width") 
            {
                gridTier.itemWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                gridTier.itemHeight = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg3 = null;
        __reg1 = null;
        gridTier = null;
        itemPropertiesNode = null;
    }

    static function parseDescriptionAreaTag(gridTier, descriptionAreaNode)
    {
        var __reg4 = descriptionAreaNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "startx") 
            {
                gridTier.descriptionX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                gridTier.descriptionY = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "width") 
            {
                gridTier.descriptionWidth = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "height") 
            {
                gridTier.descriptionHeight = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "text_format") 
            {
                if (gridTier.descriptionTxtFormat == null) 
                {
                    gridTier.descriptionTxtFormat = new TextFormat();
                }
                com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(gridTier.descriptionTxtFormat, __reg1);
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        descriptionAreaNode = null;
        gridTier = null;
    }

    static function parseInfoTag(gridTier, infoNode)
    {
        var __reg4 = infoNode.childNodes;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "show_info") 
            {
                if (__reg1.firstChild.nodeValue == "true") 
                {
                    gridTier.showInfo = true;
                }
                else 
                {
                    gridTier.showInfo = false;
                }
            }
            else if (__reg1.nodeName == "info_title") 
            {
                if (__reg1.firstChild.nodeName == "text_format") 
                {
                    if (gridTier.infoTitleTxtFormat == null) 
                    {
                        gridTier.infoTitleTxtFormat = new TextFormat();
                    }
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(gridTier.infoTitleTxtFormat, __reg1.firstChild);
                }
            }
            else if (__reg1.nodeName == "info_text") 
            {
                if (__reg1.firstChild.nodeName == "text_format") 
                {
                    if (gridTier.infoTxtFormat == null) 
                    {
                        gridTier.infoTxtFormat = new TextFormat();
                    }
                    com.jadoo.as2.JadooPlus.Parser.XmlParser.XmlParser.parseTextFormat(gridTier.infoTxtFormat, __reg1.firstChild);
                }
            }
            ++__reg3;
        }
        __reg4 = null;
        __reg1 = null;
        infoNode = null;
        gridTier = null;
    }

    static function parseListingIdxTag(gridTier, listingIdxNode)
    {
        var __reg3 = listingIdxNode.childNodes;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "startx") 
            {
                gridTier.listingIdxX = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "starty") 
            {
                gridTier.listingIdxY = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        __reg3 = null;
        __reg1 = null;
        listingIdxNode = null;
        gridTier = null;
    }

}

//Sprite 720
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubePlaylistParser
{

    function YoutubePlaylistParser()
    {
    }

    static function parseItems(tierXml, items, requestedItems)
    {
        var __reg11 = tierXml.toString();
        __reg11 = unescape(__reg11);
        __reg11 = com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubePlaylistParser.replace(__reg11, "&quot;", "\"");
        var __reg13 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg11);
        var __reg7 = __reg13.items;
        var __reg8 = 0;
        for (var __reg12 in __reg7) 
        {
            var __reg4 = __reg7[__reg12];
            var __reg1 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
            for (var __reg9 in __reg4) 
            {
                if (__reg9 == "snippet") 
                {
                    var __reg2 = __reg4[__reg9];
                    for (var __reg6 in __reg2) 
                    {
                        if (__reg6 == "thumbnails") 
                        {
                            var __reg3 = __reg2[__reg6];
                            for (var __reg5 in __reg3) 
                            {
                                if (__reg5 == "default") 
                                {
                                    __reg1.itemImage = __reg3[__reg5].url;
                                }
                            }
                        }
                        else if (__reg6 == "title") 
                        {
                            __reg1.itemName = __reg2[__reg6];
                        }
                        else if (__reg6 == "resourceId") 
                        {
                            __reg1.itemId = __reg2[__reg6].videoId;
                        }
                        else if (__reg6 == "position") 
                        {
                            __reg1.itemPosition = Number(__reg2[__reg6]);
                        }
                    }
                    __reg2 = null;
                }
            }
            if (__reg1.itemId == null) 
            {
                __reg1.itemId = __reg4.contentDetails.videoId;
                if (__reg1.itemId == null) 
                {
                    __reg1.itemId = __reg4.id;
                }
            }
            __reg1.itemType = "youtube";
            items[__reg8] = __reg1;
            ++__reg8;
            __reg1 = null;
            __reg4 = null;
        }
        items.sortOn("itemPosition", Array.NUMERIC);
        tierXml = null;
        items = null;
        __reg7 = null;
        return __reg13.nextPageToken;
    }

    static function getVideoID(streamLink)
    {
        var __reg1 = undefined;
        var __reg2 = undefined;
        var __reg4 = undefined;
        var __reg3 = streamLink.split("&");
        __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg2 = __reg3[__reg1].indexOf("v=");
            if (__reg2 == -1) 
            {
                __reg2 = __reg3[__reg1].indexOf("v/");
            }
            if (__reg2 != -1) 
            {
                break;
            }
            ++__reg1;
        }
        if (__reg2 == -1) 
        {
            __reg4 = "INVALID_VIDEO_ID";
        }
        else 
        {
            __reg4 = __reg3[__reg1].slice(__reg2 + 2, __reg3[__reg1].length);
        }
        __reg1 = null;
        __reg2 = null;
        __reg3 = null;
        streamLink = null;
        return __reg4;
    }

    static function extractModifiedVideoLink(videoLink)
    {
        var __reg2 = videoLink.split("&");
        videoLink = __reg2[0];
        videoLink = com.jadoo.as2.JadooPlus.Parser.YoutubeParser.YoutubePlaylistParser.replace(videoLink, "watch?v=", "v/");
        __reg2 = null;
        return videoLink;
    }

    static function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

}

//Sprite 721
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionPlaylistParser
{

    function DailymotionPlaylistParser()
    {
    }

    static function parseItems(tierXml, items, requestedItems)
    {
        var __reg11 = tierXml.toString();
        __reg11 = unescape(__reg11);
        __reg11 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.DailymotionPlaylistParser.replace(__reg11, "&quot;", "\"");
        var __reg7 = com.jadoo.as2.JadooPlus.Parser.DailymotionParser.JSON.parse(__reg11);
        for (var __reg12 in __reg7) 
        {
            if (__reg12 == "list") 
            {
                var __reg4 = 0;
                var __reg3 = __reg7[__reg12];
                for (var __reg8 in __reg3) 
                {
                    var __reg2 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
                    var __reg1 = __reg3[__reg8];
                    for (var __reg6 in __reg1) 
                    {
                        if (__reg6 == "duration") 
                        {
                            __reg2.itemDuration = Number(__reg1[__reg6]);
                        }
                        else if (__reg6 == "views_total") 
                        {
                            __reg2.itemViews = Number(__reg1[__reg6]);
                        }
                        else if (__reg6 == "thumbnail_medium_url") 
                        {
                            __reg2.itemImage = __reg1[__reg6];
                        }
                        else if (__reg6 == "title") 
                        {
                            __reg2.itemName = __reg1[__reg6];
                        }
                        else if (__reg6 == "id") 
                        {
                            __reg2.itemId = __reg1[__reg6];
                        }
                        else if (__reg6 == "embed_url") 
                        {
                            __reg2.itemLink = __reg1[__reg6];
                        }
                    }
                    __reg2.itemType = "dailymotion";
                    items[__reg4] = __reg2;
                    ++__reg4;
                    __reg1 = null;
                }
                items.reverse();
                __reg4 = null;
                __reg3 = null;
            }
        }
        var __reg9 = items.length;
        if (requestedItems != null && __reg9 < requestedItems) 
        {
            var __reg10 = requestedItems - __reg9;
            __reg4 = 0;
            while (__reg4 < __reg10) 
            {
                __reg2 = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
                __reg2.itemId = null;
                __reg2.itemName = "Video Not Found";
                __reg2.itemViews = 0;
                __reg2.itemLink = null;
                __reg2.itemDuration = null;
                __reg2.itemImage = null;
                __reg2.itemType = "dailymotion";
                items[__reg9 + __reg4] = __reg2;
                __reg2 = null;
                ++__reg4;
            }
            __reg10 = null;
        }
        tierXml = null;
        items = null;
        __reg9 = null;
        requestedItems = null;
    }

    static function replace(s, from, to)
    {
        return s.toString().split(from).join(to);
    }

}

//Sprite 722
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.Decryption
{

    function Decryption()
    {
    }

    static function decryptIndirectLink(indirectLink)
    {
        var __reg10 = com.jadoo.as2.JadooPlus.Decryption.Base64.decode(indirectLink);
        var __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.encode(com.jadoo.as2.JadooPlus.Utils.Config.something + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.something);
        com.jadoo.as2.JadooPlus.Decryption.SHA1.calculate(__reg3);
        var __reg8 = com.jadoo.as2.JadooPlus.Decryption.SHA1.sha1DecodedString;
        var __reg6 = com.jadoo.as2.JadooPlus.Decryption.Decryption.removeNoise(__reg10, __reg8);
        var __reg9 = __reg6.slice(16, __reg6.length);
        var __reg5 = new Array();
        var __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg5[__reg1] = __reg3.charCodeAt(__reg1);
            ++__reg1;
        }
        var __reg7 = __reg6.slice(0, 16);
        var __reg4 = com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.decrypt(__reg5, __reg9, "cbc", __reg7);
        var __reg2 = "";
        __reg1 = 0;
        while (__reg1 < __reg4.length) 
        {
            __reg2 = __reg2 + String.fromCharCode(__reg4[__reg1]);
            ++__reg1;
        }
        com.jadoo.as2.JadooPlus.Decryption.Decryption.decryptedLink = __reg2;
    }

    static function removeNoise(base64decodeArray, sha1decodeString)
    {
        var __reg4 = new Array();
        var __reg5 = base64decodeArray.length;
        var __reg6 = sha1decodeString.length;
        var __reg3 = 0;
        var __reg2 = 0;
        while (__reg2 < __reg5) 
        {
            if (__reg3 >= __reg6) 
            {
                __reg3 = 0;
            }
            var __reg1 = base64decodeArray[__reg2] - sha1decodeString.charCodeAt(__reg3);
            if (__reg1 < 0) 
            {
                __reg1 = __reg1 + 256;
            }
            __reg4[__reg2] = __reg1;
            ++__reg2;
            ++__reg3;
        }
        return __reg4;
    }

}

//Sprite 723
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.Base64
{
    static var chrs: String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    function Base64()
    {
    }

    static function encode(bytes)
    {
        var __reg5 = bytes.length;
        var __reg6 = undefined;
        var __reg4 = undefined;
        var __reg3 = undefined;
        var __reg11 = undefined;
        var __reg10 = undefined;
        var __reg9 = undefined;
        var __reg8 = undefined;
        var __reg1 = 0;
        var __reg2 = new String("");
        while (__reg1 < __reg5) 
        {
            __reg6 = bytes[__reg1++];
            __reg4 = bytes[__reg1++];
            __reg3 = bytes[__reg1++];
            __reg11 = __reg6 >> 2;
            __reg10 = (__reg6 & 3) << 4 | __reg4 >> 4;
            __reg9 = (__reg4 & 15) << 2 | __reg3 >> 6;
            __reg8 = __reg3 & 63;
            __reg2 = __reg2 + (com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.charAt(__reg11) + com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.charAt(__reg10));
            if (__reg1 <= __reg5) 
            {
                __reg2 = __reg2 + com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.charAt(__reg9);
            }
            if (__reg1 <= __reg5) 
            {
                __reg2 = __reg2 + com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.charAt(__reg8);
            }
        }
        if (isNaN(__reg4)) 
        {
            __reg2 = __reg2 + "=";
        }
        if (isNaN(__reg3)) 
        {
            __reg2 = __reg2 + "=";
        }
        return __reg2;
    }

    static function decode(text)
    {
        var __reg11 = text.length;
        var __reg1 = 0;
        var __reg4 = [];
        var __reg9 = undefined;
        var __reg8 = undefined;
        var __reg7 = undefined;
        var __reg10 = undefined;
        var __reg6 = undefined;
        var __reg3 = undefined;
        var __reg5 = undefined;
        while (__reg1 < __reg11) 
        {
            __reg10 = com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.indexOf(text.charAt(__reg1++));
            __reg6 = com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.indexOf(text.charAt(__reg1++));
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.indexOf(text.charAt(__reg1++));
            __reg5 = com.jadoo.as2.JadooPlus.Decryption.Base64.chrs.indexOf(text.charAt(__reg1++));
            __reg9 = __reg10 << 2 | __reg6 >> 4;
            __reg8 = (__reg6 & 15) << 4 | __reg3 >> 2;
            __reg7 = (__reg3 & 3) << 6 | __reg5;
            __reg4.push(__reg9);
            if (__reg3 != 64) 
            {
                __reg4.push(__reg8);
            }
            if (__reg5 != 64) 
            {
                __reg4.push(__reg7);
            }
        }
        return __reg4;
    }

}

//Sprite 724
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.MD5
{
    static var _version: String = "1.0";
    static var _modDate: String = "22-02-2008";

    function MD5()
    {
        trace("MD5 is an static class and should not be instantiated");
    }

    static function encode($text)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.encodeMD5($text);
    }

    static function bitAND(a, b)
    {
        if (a < 0 && b < 0) 
        {
            var __reg3 = a & 1 & b & 1;
            var __reg4 = a >>> 1 & b >>> 1;
            return __reg4 << 1 | __reg3;
        }
        return a & b;
    }

    static function rhex(num)
    {
        var __reg2 = "0123456789abcdef";
        var __reg4 = "";
        var __reg1 = 0;
        while (__reg1 <= 3) 
        {
            __reg4 = __reg4 + (__reg2.charAt(com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(num >> __reg1 * 8 + 4, 15)) + __reg2.charAt(com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(num >> __reg1 * 8, 15)));
            ++__reg1;
        }
        return __reg4;
    }

    static function str2blks_MD5(str)
    {
        var __reg4 = (str.length + 8 >> 6) + 1;
        var __reg2 = new Array(__reg4 * 16);
        var __reg1 = 0;
        while (__reg1 < __reg4 * 16) 
        {
            __reg2[__reg1] = 0;
            ++__reg1;
        }
        __reg1 = 0;
        while (__reg1 < str.length) 
        {
            __reg2[__reg1 >> 2] = __reg2[__reg1 >> 2] | str.charCodeAt(__reg1) << __reg1 % 4 * 8;
            ++__reg1;
        }
        __reg2[__reg1 >> 2] = __reg2[__reg1 >> 2] | 128 << __reg1 % 4 * 8;
        __reg2[__reg4 * 16 - 2] = str.length * 8;
        return __reg2;
    }

    static function addme(x, y)
    {
        var __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(x, 65535) + com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(y, 65535);
        var __reg2 = (x >> 16) + (y >> 16) + (__reg1 >> 16);
        return __reg2 << 16 | com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(__reg1, 65535);
    }

    static function rol(num, cnt)
    {
        return num << cnt | num >>> 32 - cnt;
    }

    static function cmn(q, a, b, x, s, t)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.addme(com.jadoo.as2.JadooPlus.Decryption.MD5.rol(com.jadoo.as2.JadooPlus.Decryption.MD5.addme(com.jadoo.as2.JadooPlus.Decryption.MD5.addme(a, q), com.jadoo.as2.JadooPlus.Decryption.MD5.addme(x, t)), s), b);
    }

    static function ff(a, b, c, d, x, s, t)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.cmn(com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(b, c) | com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(b ^ 4294967295, d), a, b, x, s, t);
    }

    static function gg(a, b, c, d, x, s, t)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.cmn(com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(b, d) | com.jadoo.as2.JadooPlus.Decryption.MD5.bitAND(c, d ^ 4294967295), a, b, x, s, t);
    }

    static function hh(a, b, c, d, x, s, t)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.cmn(b ^ c ^ d, a, b, x, s, t);
    }

    static function ii(a, b, c, d, x, s, t)
    {
        return com.jadoo.as2.JadooPlus.Decryption.MD5.cmn(c ^ (b | d ^ 4294967295), a, b, x, s, t);
    }

    static function encodeMD5($text)
    {
        var __reg11 = $text;
        var __reg6 = com.jadoo.as2.JadooPlus.Decryption.MD5.str2blks_MD5(__reg11);
        var __reg4 = 1732584193;
        var __reg3 = -271733879;
        var __reg2 = -1732584194;
        var __reg1 = 271733878;
        var __reg5 = 0;
        while (__reg5 < __reg6.length) 
        {
            var __reg10 = __reg4;
            var __reg9 = __reg3;
            var __reg8 = __reg2;
            var __reg7 = __reg1;
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 0], 7, -680876936);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 1], 12, -389564586);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 2], 17, 606105819);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 3], 22, -1044525330);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 4], 7, -176418897);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 5], 12, 1200080426);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 6], 17, -1473231341);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 7], 22, -45705983);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 8], 7, 1770035416);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 9], 12, -1958414417);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 10], 17, -42063);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 11], 22, -1990404162);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 12], 7, 1804603682);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 13], 12, -40341101);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 14], 17, -1502002290);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ff(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 15], 22, 1236535329);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 1], 5, -165796510);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 6], 9, -1069501632);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 11], 14, 643717713);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 0], 20, -373897302);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 5], 5, -701558691);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 10], 9, 38016083);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 15], 14, -660478335);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 4], 20, -405537848);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 9], 5, 568446438);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 14], 9, -1019803690);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 3], 14, -187363961);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 8], 20, 1163531501);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 13], 5, -1444681467);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 2], 9, -51403784);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 7], 14, 1735328473);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.gg(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 12], 20, -1926607734);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 5], 4, -378558);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 8], 11, -2022574463);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 11], 16, 1839030562);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 14], 23, -35309556);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 1], 4, -1530992060);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 4], 11, 1272893353);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 7], 16, -155497632);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 10], 23, -1094730640);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 13], 4, 681279174);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 0], 11, -358537222);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 3], 16, -722521979);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 6], 23, 76029189);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 9], 4, -640364487);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 12], 11, -421815835);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 15], 16, 530742520);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.hh(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 2], 23, -995338651);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 0], 6, -198630844);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 7], 10, 1126891415);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 14], 15, -1416354905);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 5], 21, -57434055);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 12], 6, 1700485571);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 3], 10, -1894986606);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 10], 15, -1051523);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 1], 21, -2054922799);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 8], 6, 1873313359);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 15], 10, -30611744);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 6], 15, -1560198380);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 13], 21, 1309151649);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg4, __reg3, __reg2, __reg1, __reg6[__reg5 + 4], 6, -145523070);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg1, __reg4, __reg3, __reg2, __reg6[__reg5 + 11], 10, -1120210379);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg2, __reg1, __reg4, __reg3, __reg6[__reg5 + 2], 15, 718787259);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.ii(__reg3, __reg2, __reg1, __reg4, __reg6[__reg5 + 9], 21, -343485551);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.MD5.addme(__reg4, __reg10);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.MD5.addme(__reg3, __reg9);
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.MD5.addme(__reg2, __reg8);
            __reg1 = com.jadoo.as2.JadooPlus.Decryption.MD5.addme(__reg1, __reg7);
            __reg5 = __reg5 + 16;
        }
        return com.jadoo.as2.JadooPlus.Decryption.MD5.rhex(__reg4) + com.jadoo.as2.JadooPlus.Decryption.MD5.rhex(__reg3) + com.jadoo.as2.JadooPlus.Decryption.MD5.rhex(__reg2) + com.jadoo.as2.JadooPlus.Decryption.MD5.rhex(__reg1);
    }

}

//Sprite 725
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.SHA1
{
    static var hexcase: Number = 0;
    static var b64pad: String = "";
    static var sha1DecodedString: String = "";

    function SHA1()
    {
    }

    static function hex_sha1(s)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2hex(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(s)));
    }

    static function b64_sha1(s)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2b64(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(s)));
    }

    static function any_sha1(s, e)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2any(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(s)), e);
    }

    static function hex_hmac_sha1(k, d)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2hex(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_hmac_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(k), com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(d)));
    }

    static function b64_hmac_sha1(k, d)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2b64(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_hmac_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(k), com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(d)));
    }

    static function any_hmac_sha1(k, d, e)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2any(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr_hmac_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(k), com.jadoo.as2.JadooPlus.Decryption.SHA1.str2rstr_utf8(d)), e);
    }

    static function sha1_vm_test()
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.hex_sha1("abc").toLowerCase() == "a9993e364706816aba3e25717850c26c9cd0d89d";
    }

    static function calculate(s)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.hex_sha1(s).toLowerCase();
    }

    static function rstr_sha1(s)
    {
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.binb2rstr(com.jadoo.as2.JadooPlus.Decryption.SHA1.binb_sha1(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2binb(s), s.length * 8));
    }

    static function rstr_hmac_sha1(key, data)
    {
        var __reg2 = com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2binb(key);
        if (__reg2.length > 16) 
        {
            __reg2 = com.jadoo.as2.JadooPlus.Decryption.SHA1.binb_sha1(__reg2, key.length * 8);
        }
        var __reg3 = Array(16);
        var __reg4 = Array(16);
        var __reg1 = 0;
        while (__reg1 < 16) 
        {
            __reg3[__reg1] = __reg2[__reg1] ^ 909522486;
            __reg4[__reg1] = __reg2[__reg1] ^ 1549556828;
            ++__reg1;
        }
        var __reg5 = com.jadoo.as2.JadooPlus.Decryption.SHA1.binb_sha1(__reg3.concat(com.jadoo.as2.JadooPlus.Decryption.SHA1.rstr2binb(data)), 512 + data.length * 8);
        return com.jadoo.as2.JadooPlus.Decryption.SHA1.binb2rstr(com.jadoo.as2.JadooPlus.Decryption.SHA1.binb_sha1(__reg4.concat(__reg5), 672));
    }

    static function rstr2hex(input)
    {
        var __reg3 = com.jadoo.as2.JadooPlus.Decryption.SHA1.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var __reg5 = "";
        var __reg2 = undefined;
        var __reg1 = 0;
        while (__reg1 < input.length) 
        {
            __reg2 = input.charCodeAt(__reg1);
            __reg5 = __reg5 + (__reg3.charAt(__reg2 >>> 4 & 15) + __reg3.charAt(__reg2 & 15));
            ++__reg1;
        }
        com.jadoo.as2.JadooPlus.Decryption.SHA1.sha1DecodedString = __reg5;
        return __reg5;
    }

    static function rstr2b64(input)
    {
        var __reg7 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var __reg4 = "";
        var __reg6 = input.length;
        var __reg2 = 0;
        while (__reg2 < __reg6) 
        {
            var __reg5 = input.charCodeAt(__reg2) << 16 | (__reg2 + 1 >= __reg6 ? 0 : input.charCodeAt(__reg2 + 1) << 8) | (__reg2 + 2 >= __reg6 ? 0 : input.charCodeAt(__reg2 + 2));
            var __reg1 = 0;
            while (__reg1 < 4) 
            {
                if (__reg2 * 8 + __reg1 * 6 > input.length * 8) 
                {
                    __reg4 = __reg4 + com.jadoo.as2.JadooPlus.Decryption.SHA1.b64pad;
                }
                else 
                {
                    __reg4 = __reg4 + __reg7.charAt(__reg5 >>> 6 * (3 - __reg1) & 63);
                }
                ++__reg1;
            }
            __reg2 = __reg2 + 3;
        }
        return __reg4;
    }

    static function rstr2any(input, encoding)
    {
        var __reg8 = encoding.length;
        var __reg7 = new Array();
        var __reg1 = undefined;
        var __reg4 = undefined;
        var __reg2 = undefined;
        var __reg5 = undefined;
        var __reg3 = Array(Math.ceil(input.length / 2));
        __reg1 = 0;
        while (__reg1 < __reg3.length) 
        {
            __reg3[__reg1] = input.charCodeAt(__reg1 * 2) << 8 | input.charCodeAt(__reg1 * 2 + 1);
            ++__reg1;
        }
        while (__reg3.length > 0) 
        {
            __reg5 = new Array();
            __reg2 = 0;
            __reg1 = 0;
            while (__reg1 < __reg3.length) 
            {
                __reg2 = (__reg2 << 16) + __reg3[__reg1];
                __reg4 = Math.floor(__reg2 / __reg8);
                __reg2 = __reg2 - __reg4 * __reg8;
                if (__reg5.length > 0 || __reg4 > 0) 
                {
                    __reg5[__reg5.length] = __reg4;
                }
                ++__reg1;
            }
            __reg7[__reg7.length] = __reg2;
            __reg3 = __reg5;
        }
        var __reg6 = "";
        __reg1 = __reg7.length - 1;
        while (__reg1 >= 0) 
        {
            __reg6 = __reg6 + encoding.charAt(__reg7[__reg1]);
            --__reg1;
        }
        var __reg11 = Math.ceil(input.length * 8 / (Math.log(encoding.length) / 0.69314718056));
        __reg1 = __reg6.length;
        while (__reg1 < __reg11) 
        {
            __reg6 = encoding[0] + __reg6;
            ++__reg1;
        }
        return __reg6;
    }

    static function str2rstr_utf8(input)
    {
        var __reg3 = "";
        var __reg2 = -1;
        var __reg1 = undefined;
        var __reg4 = undefined;
        while (++__reg2 < input.length) 
        {
            __reg1 = input.charCodeAt(__reg2);
            __reg4 = __reg2 + 1 >= input.length ? 0 : input.charCodeAt(__reg2 + 1);
            if (55296 <= __reg1 && __reg1 <= 56319 && 56320 <= __reg4 && __reg4 <= 57343) 
            {
                __reg1 = 65536 + ((__reg1 & 1023) << 10) + (__reg4 & 1023);
                ++__reg2;
            }
            if (__reg1 <= 127) 
            {
                __reg3 = __reg3 + String.fromCharCode(__reg1);
            }
            else if (__reg1 <= 2047) 
            {
                __reg3 = __reg3 + String.fromCharCode(192 | __reg1 >>> 6 & 31, 128 | __reg1 & 63);
            }
            else if (__reg1 <= 65535) 
            {
                __reg3 = __reg3 + String.fromCharCode(224 | __reg1 >>> 12 & 15, 128 | __reg1 >>> 6 & 63, 128 | __reg1 & 63);
            }
            else if (__reg1 <= 2097151) 
            {
                __reg3 = __reg3 + String.fromCharCode(240 | __reg1 >>> 18 & 7, 128 | __reg1 >>> 12 & 63, 128 | __reg1 >>> 6 & 63, 128 | __reg1 & 63);
            }
        }
        return __reg3;
    }

    static function str2rstr_utf16le(input)
    {
        var __reg3 = "";
        var __reg1 = 0;
        while (__reg1 < input.length) 
        {
            __reg3 = __reg3 + String.fromCharCode(input.charCodeAt(__reg1) & 255, input.charCodeAt(__reg1) >>> 8 & 255);
            ++__reg1;
        }
        return __reg3;
    }

    static function str2rstr_utf16be(input)
    {
        var __reg3 = "";
        var __reg1 = 0;
        while (__reg1 < input.length) 
        {
            __reg3 = __reg3 + String.fromCharCode(input.charCodeAt(__reg1) >>> 8 & 255, input.charCodeAt(__reg1) & 255);
            ++__reg1;
        }
        return __reg3;
    }

    static function rstr2binb(input)
    {
        var __reg2 = Array(input.length >> 2);
        var __reg1 = 0;
        while (__reg1 < __reg2.length) 
        {
            __reg2[__reg1] = 0;
            ++__reg1;
        }
        __reg1 = 0;
        while (__reg1 < input.length * 8) 
        {
            __reg2[__reg1 >> 5] = __reg2[__reg1 >> 5] | (input.charCodeAt(__reg1 / 8) & 255) << 24 - __reg1 % 32;
            __reg1 = __reg1 + 8;
        }
        return __reg2;
    }

    static function binb2rstr(input)
    {
        var __reg3 = "";
        var __reg1 = 0;
        while (__reg1 < input.length * 32) 
        {
            __reg3 = __reg3 + String.fromCharCode(input[__reg1 >> 5] >>> 24 - __reg1 % 32 & 255);
            __reg1 = __reg1 + 8;
        }
        return __reg3;
    }

    static function binb_sha1(x, len)
    {
        x[len >> 5] = x[len >> 5] | 128 << 24 - len % 32;
        x[(len + 64 >> 9 << 4) + 15] = len;
        var __reg2 = Array(80);
        var __reg6 = 1732584193;
        var __reg5 = -271733879;
        var __reg4 = -1732584194;
        var __reg3 = 271733878;
        var __reg7 = -1009589776;
        var __reg9 = 0;
        while (__reg9 < x.length) 
        {
            var __reg15 = __reg6;
            var __reg14 = __reg5;
            var __reg13 = __reg4;
            var __reg12 = __reg3;
            var __reg11 = __reg7;
            var __reg1 = 0;
            while (__reg1 < 80) 
            {
                if (__reg1 < 16) 
                {
                    __reg2[__reg1] = x[__reg9 + __reg1];
                }
                else 
                {
                    __reg2[__reg1] = com.jadoo.as2.JadooPlus.Decryption.SHA1.bit_rol(__reg2[__reg1 - 3] ^ __reg2[__reg1 - 8] ^ __reg2[__reg1 - 14] ^ __reg2[__reg1 - 16], 1);
                }
                var __reg8 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(com.jadoo.as2.JadooPlus.Decryption.SHA1.bit_rol(__reg6, 5), com.jadoo.as2.JadooPlus.Decryption.SHA1.sha1_ft(__reg1, __reg5, __reg4, __reg3)), com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg7, __reg2[__reg1]), com.jadoo.as2.JadooPlus.Decryption.SHA1.sha1_kt(__reg1)));
                __reg7 = __reg3;
                __reg3 = __reg4;
                __reg4 = com.jadoo.as2.JadooPlus.Decryption.SHA1.bit_rol(__reg5, 30);
                __reg5 = __reg6;
                __reg6 = __reg8;
                ++__reg1;
            }
            __reg6 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg6, __reg15);
            __reg5 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg5, __reg14);
            __reg4 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg4, __reg13);
            __reg3 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg3, __reg12);
            __reg7 = com.jadoo.as2.JadooPlus.Decryption.SHA1.safe_add(__reg7, __reg11);
            __reg9 = __reg9 + 16;
        }
        return new Array(__reg6, __reg5, __reg4, __reg3, __reg7);
    }

    static function sha1_ft(t, b, c, d)
    {
        if (t < 20) 
        {
            return b & c | b ^ 4294967295 & d;
        }
        if (t < 40) 
        {
            return b ^ c ^ d;
        }
        if (t < 60) 
        {
            return b & c | b & d | c & d;
        }
        return b ^ c ^ d;
    }

    static function sha1_kt(t)
    {
        return t >= 20 ? (t >= 40 ? (t >= 60 ? -899497514 : -1894007588) : 1859775393) : 1518500249;
    }

    static function safe_add(x, y)
    {
        var __reg1 = (x & 65535) + (y & 65535);
        var __reg2 = (x >> 16) + (y >> 16) + (__reg1 >> 16);
        return __reg2 << 16 | __reg1 & 65535;
    }

    static function bit_rol(num, cnt)
    {
        return num << cnt | num >>> 32 - cnt;
    }

}

//Sprite 726
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES
{
    static var ERROR_KEY: String = "Invalid key size. Key size needs to be either 128, 192 or 256 bits.\n";
    static var ERROR_MODE: String = "Invalid mode of operation. Supported modes are ECB, CBC, CTR or NONE.\n";
    static var ERROR_BLOCK: String = "Invalid block size. Block size is fixed at 128 bits.\n";
    static var srtab = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11];
    static var sbox = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];

    function AES()
    {
    }

    static function encrypt(key, bytes, mode, iv)
    {
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.check(key, bytes);
        if (!mode) 
        {
            mode = "ecb";
        }
        var __reg1 = key.concat();
        var __reg2 = bytes.concat();
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.init();
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ek(__reg1);
        if ((__reg0 = mode.toLowerCase()) === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.ECB) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.ECB.encrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ie);
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.CBC) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CBC.encrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ie, iv.concat());
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.CTR) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CTR.encrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ie, iv.concat());
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.NONE) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ie(__reg1, __reg2);
        }
    }

    static function decrypt(key, bytes, mode, iv)
    {
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.check(key, bytes);
        if (!mode) 
        {
            mode = "ecb";
        }
        var __reg1 = key.concat();
        var __reg2 = bytes.concat();
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.init();
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ek(__reg1);
        if ((__reg0 = mode.toLowerCase()) === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.ECB) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.ECB.decrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.id);
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.CBC) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CBC.decrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.id, iv.concat());
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.CTR) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CTR.decrypt(__reg1, __reg2, 16, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ie, iv.concat());
        }
        else if (__reg0 === com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode.NONE) 
        {
            return com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.id(__reg1, __reg2);
        }
    }

    static function init()
    {
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isrtab = new Array(16);
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isbox = new Array(256);
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime = new Array(256);
        var __reg3 = 0;
        while (__reg3 < 256) 
        {
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isbox[com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg3]] = __reg3;
            ++__reg3;
        }
        var __reg2 = 0;
        while (__reg2 < 16) 
        {
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isrtab[com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.srtab[__reg2]] = __reg2;
            ++__reg2;
        }
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 128) 
            {
                return;
            }
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg1] = __reg1 << 1;
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[128 + __reg1] = __reg1 << 1 ^ 27;
            ++__reg1;
        }
    }

    static function ek(k)
    {
        var __reg4 = k.length;
        var __reg7 = undefined;
        var __reg6 = 1;
        if ((__reg0 = __reg4) === 16) 
        {
            __reg7 = 176;
        }
        else if (__reg0 === 24) 
        {
            __reg7 = 208;
        }
        else if (__reg0 === 32) 
        {
            __reg7 = 240;
        }
        var __reg3 = __reg4;
        for (;;) 
        {
            if (__reg3 >= __reg7) 
            {
                return;
            }
            var __reg1 = k.slice(__reg3 - 4, __reg3);
            if (__reg3 % __reg4 == 0) 
            {
                __reg1 = [com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[1]] ^ __reg6, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[2]], com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[3]], com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[0]]];
                if ((__reg6 = __reg6 << 1) >= 256) 
                {
                    __reg6 = __reg6 ^ 283;
                }
            }
            else if (__reg4 > 24 && __reg3 % __reg4 == 16) 
            {
                __reg1 = [com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[0]], com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[1]], com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[2]], com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox[__reg1[3]]];
            }
            var __reg2 = 0;
            while (__reg2 < 4) 
            {
                k[__reg3 + __reg2] = k[__reg3 + __reg2 - __reg4] ^ __reg1[__reg2];
                ++__reg2;
            }
            __reg3 = __reg3 + 4;
        }
    }

    static function ie(k, ob)
    {
        var __reg2 = ob.concat();
        var __reg1 = undefined;
        var __reg4 = k.length;
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg2, k.slice(0, 16));
        __reg1 = 16;
        while (__reg1 < __reg4 - 16) 
        {
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sb(__reg2, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox);
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sr(__reg2, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.srtab);
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.mc(__reg2);
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg2, k.slice(__reg1, __reg1 + 16));
            __reg1 = __reg1 + 16;
        }
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sb(__reg2, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sbox);
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sr(__reg2, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.srtab);
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg2, k.slice(__reg1, __reg1 + 16));
        return __reg2;
    }

    static function id(k, ob)
    {
        var __reg1 = ob.concat();
        var __reg2 = undefined;
        var __reg3 = k.length;
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg1, k.slice(__reg3 - 16, __reg3));
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sr(__reg1, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isrtab);
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sb(__reg1, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isbox);
        __reg2 = __reg3 - 32;
        while (__reg2 >= 16) 
        {
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg1, k.slice(__reg2, __reg2 + 16));
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.mci(__reg1);
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sr(__reg1, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isrtab);
            com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.sb(__reg1, com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.isbox);
            __reg2 = __reg2 - 16;
        }
        com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.ark(__reg1, k.slice(0, 16));
        return __reg1;
    }

    static function sb(s, b)
    {
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 16) 
            {
                return;
            }
            s[__reg1] = b[s[__reg1]];
            ++__reg1;
        }
    }

    static function ark(s, r)
    {
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 16) 
            {
                return;
            }
            s[__reg1] = s[__reg1] ^ r[__reg1];
            ++__reg1;
        }
    }

    static function sr(s, t)
    {
        var __reg2 = s.concat();
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 16) 
            {
                return;
            }
            s[__reg1] = __reg2[t[__reg1]];
            ++__reg1;
        }
    }

    static function mc(s)
    {
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 16) 
            {
                return;
            }
            var __reg7 = s[__reg1 + 0];
            var __reg6 = s[__reg1 + 1];
            var __reg5 = s[__reg1 + 2];
            var __reg4 = s[__reg1 + 3];
            var __reg3 = __reg7 ^ __reg6 ^ __reg5 ^ __reg4;
            s[__reg1 + 0] = s[__reg1 + 0] ^ __reg3 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg7 ^ __reg6];
            s[__reg1 + 1] = s[__reg1 + 1] ^ __reg3 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg6 ^ __reg5];
            s[__reg1 + 2] = s[__reg1 + 2] ^ __reg3 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg5 ^ __reg4];
            s[__reg1 + 3] = s[__reg1 + 3] ^ __reg3 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg4 ^ __reg7];
            __reg1 = __reg1 + 4;
        }
    }

    static function mci(s)
    {
        var __reg1 = 0;
        for (;;) 
        {
            if (__reg1 >= 16) 
            {
                return;
            }
            var __reg6 = s[__reg1 + 0];
            var __reg5 = s[__reg1 + 1];
            var __reg4 = s[__reg1 + 2];
            var __reg3 = s[__reg1 + 3];
            var __reg7 = __reg6 ^ __reg5 ^ __reg4 ^ __reg3;
            var __reg10 = com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg7];
            var __reg9 = com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg10 ^ __reg6 ^ __reg4]] ^ __reg7;
            var __reg8 = com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg10 ^ __reg5 ^ __reg3]] ^ __reg7;
            s[__reg1 + 0] = s[__reg1 + 0] ^ __reg9 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg6 ^ __reg5];
            s[__reg1 + 1] = s[__reg1 + 1] ^ __reg8 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg5 ^ __reg4];
            s[__reg1 + 2] = s[__reg1 + 2] ^ __reg9 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg4 ^ __reg3];
            s[__reg1 + 3] = s[__reg1 + 3] ^ __reg8 ^ com.jadoo.as2.JadooPlus.Decryption.ascrypt.AES.xtime[__reg3 ^ __reg6];
            __reg1 = __reg1 + 4;
        }
    }

    static function check(k, b)
    {
        var __reg1 = k.length;
        !(__reg1 != 16 && __reg1 != 24 && __reg1 != 32);
        if (b.length % 16 != 0) 
        {
        };
    }

}

//Sprite 727
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.ascrypt.common.OperationMode
{
    static var ECB: String = "ecb";
    static var CBC: String = "cbc";
    static var CTR: String = "ctr";
    static var NONE: String = "none";

    function OperationMode()
    {
    }

}

//Sprite 728
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.ECB
{

    function ECB()
    {
    }

    static function encrypt(key, bytes, size, encrypt)
    {
        return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.ECB.core(key, bytes, size, encrypt);
    }

    static function decrypt(key, bytes, size, decrypt)
    {
        return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.ECB.core(key, bytes, size, decrypt);
    }

    static function core(k, b, s, c)
    {
        var __reg2 = [];
        var __reg4 = b.length;
        var __reg1 = 0;
        while (__reg1 < __reg4) 
        {
            __reg2 = __reg2.concat(c(k, b.slice(__reg1, __reg1 + s)));
            __reg1 = __reg1 + s;
        }
        return __reg2;
    }

}

//Sprite 729
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CBC
{

    function CBC()
    {
    }

    static function encrypt(key, bytes, size, encrypt, iv)
    {
        var __reg4 = [];
        var __reg7 = bytes.length;
        var __reg2 = 0;
        while (__reg2 < __reg7) 
        {
            var __reg1 = 0;
            while (__reg1 < size) 
            {
                bytes[__reg2 + __reg1] = bytes[__reg2 + __reg1] ^ iv[__reg1];
                ++__reg1;
            }
            __reg4 = __reg4.concat(encrypt(key, bytes.slice(__reg2, __reg2 + size)));
            iv = __reg4.slice(__reg2, __reg2 + size);
            __reg2 = __reg2 + size;
        }
        return __reg4;
    }

    static function decrypt(key, bytes, size, decrypt, iv)
    {
        var __reg5 = undefined;
        var __reg4 = [];
        var __reg7 = bytes.length;
        var __reg2 = 0;
        while (__reg2 < __reg7) 
        {
            __reg5 = bytes.slice(__reg2, __reg2 + size);
            __reg4 = __reg4.concat(decrypt(key, __reg5));
            var __reg1 = 0;
            while (__reg1 < size) 
            {
                __reg4[__reg2 + __reg1] = __reg4[__reg2 + __reg1] ^ iv[__reg1];
                ++__reg1;
            }
            iv = __reg5.slice(0, size);
            __reg2 = __reg2 + size;
        }
        return __reg4;
    }

}

//Sprite 730
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CTR
{

    function CTR()
    {
    }

    static function encrypt(key, bytes, size, encrypt, iv)
    {
        return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CTR.core(key, bytes, size, encrypt, iv);
    }

    static function decrypt(key, bytes, size, encrypt, iv)
    {
        return com.jadoo.as2.JadooPlus.Decryption.ascrypt.utilities.CTR.core(key, bytes, size, encrypt, iv);
    }

    static function core(k, b, s, c, v)
    {
        var __reg8 = b.length;
        var __reg6 = [];
        var __reg4 = v.concat();
        var __reg3 = 0;
        while (__reg3 < __reg8) 
        {
            __reg6 = c(k, __reg4);
            var __reg2 = 0;
            while (__reg2 < s) 
            {
                b[__reg3 + __reg2] = b[__reg3 + __reg2] ^ __reg6[__reg2];
                ++__reg2;
            }
            var __reg1 = s - 1;
            while (__reg1 >= 0) 
            {
                ++__reg4[__reg1];
                if (__reg4[__reg1] != 0) 
                {
                    break;
                }
                --__reg1;
            }
            __reg3 = __reg3 + s;
        }
        return b;
    }

}

//Sprite 731
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem extends com.jadoo.as2.JadooPlus.Views.TierItems.ParentItem
{
    var itemDescription = null;
    var itemProgramListing = null;
    var itemIdx = null;
    var itemBaseMC = null;
    var itemImageLoader = null;
    var itemImageLoaderListener = null;
    var onLoadImage = null;
    var imgLoaded: Boolean = false;
    var fn = null;
    var tweenStartTimerId: Number = -1;
    var onTweenComplete = null;
    var itemWidth = null;
    var itemHeight = null;
    var itemScaleX: Number = 130;
    var itemScaleY: Number = 130;
    var textHeight: Number = 35;
    var itemImageMC = null;
    var itemNameText = null;
    var searchedItemPathText = null;
    var cardImageWidth = null;
    var cardImageHeight = null;
    var isCardItem: Boolean = false;
    var itemImage;
    var itemName;
    var itemPath;
    var itemType;

    function GridChannelItem()
    {
        super();
        this.itemImageLoader = new MovieClipLoader();
        this.itemImageLoaderListener = new Object();
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemImageLoaderListener.onLoadInit = mx.utils.Delegate.create(this, this.onLoadItemImage);
        this.itemImageLoaderListener.onLoadError = mx.utils.Delegate.create(this, this.onLoadItemImageError);
        this.itemImageLoader.addListener(this.itemImageLoaderListener);
        this.fn = {onGetCachedFile: mx.utils.Delegate.create(this, this.onGetCachedFile)};
    }

    function destroy()
    {
        this.itemBaseMC._visible = false;
        this.itemBaseMC.itemDefBgMC._visible = false;
        this.itemBaseMC.itemNameTxt._visible = false;
        if (this.itemImageLoader != null) 
        {
            this.itemImageLoader.unloadClip(this.itemImageMC);
            removeMovieClip(this.itemImageMC);
            this.itemImageLoader.removeListener(this.itemImageLoaderListener);
            delete this.itemImageLoader;
            this.itemImageLoader = null;
        }
        if (this.itemNameText != null) 
        {
            this.itemNameText.removeTextField();
            delete this.itemNameText;
            this.itemNameText = null;
        }
        if (this.itemImageLoaderListener != null) 
        {
            delete this.itemImageLoaderListener;
            this.itemImageLoaderListener = null;
        }
        if (this.searchedItemPathText != null) 
        {
            this.searchedItemPathText.removeTextField();
            delete this.searchedItemPathText;
            this.searchedItemPathText = null;
        }
        removeMovieClip(this.itemImageMC);
        this.itemImageMC = null;
        this.onLoadImage = null;
        this.itemProgramListing = null;
        this.itemDescription = null;
        this.itemBaseMC = null;
        this.fn = null;
        super.destroy();
    }

    function createIconItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        itemBaseMC.itemNameTxt._visible = true;
        itemBaseMC.itemNameTxt.htmlText = this.itemName;
        if (itemBaseMC.itemNameTxt.textHeight <= height) 
        {
            itemBaseMC.itemNameTxt._y = (height - itemBaseMC.itemNameTxt.textHeight) / 2;
        }
        else 
        {
            itemBaseMC.itemNameTxt._y = 0;
        }
        if (this.itemImageMC != undefined && this.itemImageMC != null) 
        {
            this.itemImageMC.removeMovieClip();
            this.itemImageMC = null;
        }
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        itemBaseMC = null;
    }

    function createCardItem(itemBaseMC, width, height, pageTitle)
    {
        this.itemBaseMC = itemBaseMC;
        this.isCardItem = true;
        this.cardImageWidth = 86;
        this.cardImageHeight = height - 12;
        var __reg5 = width - this.cardImageWidth - 20;
        var __reg6 = itemBaseMC.attachMovie("CardBaseMC", "cardImageBaseMC", itemBaseMC.getNextHighestDepth());
        __reg6._width = width;
        __reg6._height = height;
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        this.itemImageMC._x = width - this.cardImageWidth - 6;
        this.itemImageMC._y = 6;
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 6;
        __reg4._y = 6;
        var __reg2 = new TextFormat();
        __reg2.font = "Arial";
        __reg2.align = "left";
        __reg2.size = 28;
        __reg2.bold = false;
        __reg2.color = 15790320;
        this.itemNameText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.itemNameText.createTextField(__reg4, 0, 0, __reg5, 0, "true");
        this.itemNameText.setTextFormat(__reg2);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setWidth(__reg5);
        if (pageTitle == "Search Results") 
        {
            __reg2.align = "right";
            __reg2.size = 24;
            this.searchedItemPathText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
            this.searchedItemPathText.createTextField(itemBaseMC, 0, __reg4._y + this.itemNameText.getTextHeight(), __reg5, 0, "true");
            this.searchedItemPathText.setTextFormat(__reg2);
            this.searchedItemPathText.setHtmlText(this.itemPath);
            this.searchedItemPathText.setWidth(__reg5);
        }
        if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        pageTitle = null;
        __reg2 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        itemBaseMC = null;
    }

    function createCategoryItem(itemBaseMC, width, height)
    {
        this.itemBaseMC = itemBaseMC;
        this.itemWidth = width;
        this.itemHeight = height;
        itemBaseMC._visible = true;
        itemBaseMC.itemDefBgMC._visible = true;
        if (itemBaseMC.itemNameBaseMC != undefined) 
        {
            removeMovieClip(itemBaseMC.itemNameBaseMC);
        }
        var __reg4 = itemBaseMC.createEmptyMovieClip("itemNameBaseMC", itemBaseMC.getNextHighestDepth());
        __reg4._x = 0;
        __reg4._y = this.itemHeight;
        var __reg5 = __reg4.createEmptyMovieClip("itemNameMC", __reg4.getNextHighestDepth());
        var __reg3 = new TextFormat();
        __reg3.font = "Arial";
        __reg3.align = "center";
        __reg3.bold = false;
        __reg3.size = 24;
        __reg3.color = 16777215;
        this.itemNameText.createTextField(__reg5, 0, 0, this.itemWidth, 0, "false");
        this.itemNameText.setTextFormat(__reg3);
        this.itemNameText.setHtmlText(this.itemName);
        this.itemNameText.setHeight(this.textHeight);
        this.itemNameText.setY((this.itemNameText.getHeight() - this.itemNameText.getHeight()) / 2);
        this.itemImageMC = itemBaseMC.createEmptyMovieClip("itemImageMC", itemBaseMC.getNextHighestDepth());
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function loadImage(itemIdx, onLoad)
    {
        this.onLoadImage = onLoad;
        this.itemIdx = itemIdx;
        if (this.itemType == "liveRTMP" || this.itemType == "liveWMV" || this.itemType == "livePlaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_LIVE");
        }
        else if (this.itemType == "container" || this.itemType == "dailymotionplaylist" || this.itemType == "youtubeplaylist") 
        {
            com.jadoo.as2.JadooPlus.Utils.CacheManager.getCachedFile(this.itemImage, this.fn.onGetCachedFile, "IMG_VOD");
        }
        else 
        {
            this.itemImageLoader.loadClip(this.itemImage, this.itemImageMC);
        }
        onLoad = null;
        itemIdx = null;
    }

    function onGetCachedFile(filePath)
    {
        this.itemImageLoader.loadClip(filePath, this.itemImageMC);
        filePath = null;
    }

    function onLoadItemImage(targetMC)
    {
        if (this.isCardItem) 
        {
            targetMC._width = this.cardImageWidth;
            targetMC._height = this.cardImageHeight;
        }
        else 
        {
            targetMC._width = this.itemWidth;
            targetMC._height = this.itemHeight;
            targetMC._visible = false;
            this.imgLoaded = true;
            this.displayImage();
        }
        targetMC = null;
    }

    function onLoadItemImageError(targetMC, errorCode, httpStatus)
    {
        this.imgLoaded = false;
        targetMC = null;
        errorCode = null;
        httpStatus = null;
    }

    function displayImage()
    {
        if (this.imgLoaded) 
        {
            this.itemImageMC._visible = true;
            this.itemBaseMC.itemDefBgMC._visible = false;
            this.itemBaseMC.itemNameTxt._visible = false;
        }
    }

    function isImageLoaded()
    {
        return this.imgLoaded;
    }

    function itemHighlight()
    {
        this.itemNameText.enable(false, 1500);
        if (this.isCardItem) 
        {
            this.searchedItemPathText.enable(false, 1500);
        }
    }

    function itemUnHighlight()
    {
        this.itemNameText.disable();
        if (this.isCardItem) 
        {
            this.searchedItemPathText.disable();
        }
    }

}

//Sprite 732
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.AdService.AdService
{
    static var adXML = null;
    static var adLogXML = null;
    static var videoAdBaseURL = null;
    static var firstVideoAdFetchTime = null;
    static var pageAdBaseURL = null;
    static var adURL = null;
    static var videoAdType = null;
    static var videoAdDuration = null;
    static var videoAdFrequency = null;
    static var videoAdURL = null;
    static var videoAdLogURL = null;
    static var videoAdLoaded: Boolean = false;
    static var videoAdWidth = null;
    static var videoAdHeight = null;
    static var nextVideoAdFetchTime = null;
    static var nextPageAdFetchTime = null;
    static var isVideoAd: Boolean = false;
    static var pageAdURL = null;
    static var pageAdLogURL = null;
    static var pageAdDuration = null;
    static var xmlInvoker = null;
    static var index: Number = 0;
    static var maxIndex: Number = 5;
    static var onAdAvailable = null;
    static var pageAdChannelItem = null;
    static var pageAdContentItem = null;
    static var pageAdCategoryItem = null;
    static var itemType = null;

    function AdService()
    {
    }

    static function destroy()
    {
        clearInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId);
        if (com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.AdService.AdService, com.jadoo.as2.JadooPlus.AdService.AdService.onAdXmlResponse);
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker;
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker = null;
        }
        if (com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable;
            com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable = null;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.adXML = null;
        if (com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML;
            com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML = null;
        }
        if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem;
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem = null;
        }
        if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem;
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem = null;
        }
        if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem;
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem = null;
        }
    }

    static function initialize(videoAdLink, videoAdFetchTime, pageAdLink)
    {
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdBaseURL = videoAdLink;
        com.jadoo.as2.JadooPlus.AdService.AdService.firstVideoAdFetchTime = videoAdFetchTime;
        com.jadoo.as2.JadooPlus.AdService.AdService.pageAdBaseURL = pageAdLink;
    }

    static function startService(itemId, contentType, adType)
    {
        if (com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker != null) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.removeListener("onXmlResponse", com.jadoo.as2.JadooPlus.AdService.AdService, com.jadoo.as2.JadooPlus.AdService.AdService.onAdXmlResponse);
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.destroy();
            delete com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker;
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker = null;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.addListener("onXmlResponse", com.jadoo.as2.JadooPlus.AdService.AdService, com.jadoo.as2.JadooPlus.AdService.AdService.onAdXmlResponse);
        if (adType == "pageAd") 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.pageAdBaseURL;
            if (com.jadoo.as2.JadooPlus.AdService.AdService.adURL.charAt(com.jadoo.as2.JadooPlus.AdService.AdService.adURL.length - 1) != "/") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.adURL + "/";
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.adURL + itemId;
            com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd = false;
        }
        else if (adType == "videoAd") 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.videoAdBaseURL;
            if (com.jadoo.as2.JadooPlus.AdService.AdService.adURL.charAt(com.jadoo.as2.JadooPlus.AdService.AdService.adURL.length - 1) != "/") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.adURL + "/";
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.adURL = com.jadoo.as2.JadooPlus.AdService.AdService.adURL + itemId + "/" + contentType;
            com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd = true;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable = new com.BigRoom.Event();
    }

    static function stopService()
    {
        var __reg1 = 0;
        while (__reg1 < com.jadoo.as2.JadooPlus.AdService.AdService.maxIndex) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.deleteXMLObject(__reg1);
            ++__reg1;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.destroy();
        com.jadoo.as2.JadooPlus.AdService.AdService.adURL = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdType = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdDuration = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdFrequency = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdURL = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdLogURL = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdLoaded = false;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdWidth = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdHeight = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.nextVideoAdFetchTime = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.nextPageAdFetchTime = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd = false;
        com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.pageAdLogURL = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration = null;
    }

    static function getVideoAds()
    {
        if (com.jadoo.as2.JadooPlus.AdService.AdService.firstVideoAdFetchTime == null) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.firstVideoAdFetchTime = 5000;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId = setInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdFromServer, com.jadoo.as2.JadooPlus.AdService.AdService.firstVideoAdFetchTime);
    }

    static function getPageAds(nextAdFetchTime)
    {
        com.jadoo.as2.JadooPlus.AdService.AdService.nextPageAdFetchTime = nextAdFetchTime;
        com.jadoo.as2.JadooPlus.AdService.AdService.getAdFromServer();
        nextAdFetchTime = null;
    }

    static function getAdFromServer()
    {
        clearInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId);
        com.jadoo.as2.JadooPlus.AdService.AdService.loadAdXML(com.jadoo.as2.JadooPlus.AdService.AdService.adURL);
    }

    static function parseVideoAd()
    {
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdType = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/ad_type").firstChild.nodeValue;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdDuration = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/ad_duration").firstChild.nodeValue) * 1000;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdFrequency = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/ad_frequency").firstChild.nodeValue);
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdURL = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/ad_url").firstChild.nodeValue;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdLogURL = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/log").firstChild.nodeValue;
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdWidth = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/display_width").firstChild.nodeValue);
        com.jadoo.as2.JadooPlus.AdService.AdService.videoAdHeight = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/display_height").firstChild.nodeValue);
        com.jadoo.as2.JadooPlus.AdService.AdService.nextVideoAdFetchTime = int(mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad/next_ad").firstChild.nodeValue) * 1000;
        if (com.jadoo.as2.JadooPlus.AdService.AdService.videoAdURL != null) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.notify(com.jadoo.as2.JadooPlus.AdService.AdService.videoAdType, com.jadoo.as2.JadooPlus.AdService.AdService.videoAdURL, com.jadoo.as2.JadooPlus.AdService.AdService.videoAdDuration, com.jadoo.as2.JadooPlus.AdService.AdService.videoAdWidth, com.jadoo.as2.JadooPlus.AdService.AdService.videoAdHeight);
            return;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId = setInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdFromServer, 5000);
    }

    static function onAdLoadComplete()
    {
        if (com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.loadLogXML(com.jadoo.as2.JadooPlus.AdService.AdService.videoAdLogURL);
            return;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.loadLogXML(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdLogURL);
    }

    static function onAdLoadError()
    {
    }

    static function onAdDurationComplete()
    {
        if (com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId = setInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdFromServer, com.jadoo.as2.JadooPlus.AdService.AdService.nextVideoAdFetchTime);
            return;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.getAdTimerId = setInterval(com.jadoo.as2.JadooPlus.AdService.AdService.getAdFromServer, com.jadoo.as2.JadooPlus.AdService.AdService.nextPageAdFetchTime);
    }

    static function loadLogXML(logURL)
    {
        if (logURL.charAt(logURL.length - 1) != "/") 
        {
            logURL = logURL + "/";
        }
        logURL = logURL + (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode + "/" + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId());
        if (com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML != null) 
        {
            delete com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML;
            com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML = null;
        }
        com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML = new XML();
        com.jadoo.as2.JadooPlus.AdService.AdService.adLogXML.load(logURL);
    }

    static function parsePageAd()
    {
        var __reg3 = null;
        var __reg1 = null;
        __reg3 = mx.xpath.XPathAPI.selectSingleNode(com.jadoo.as2.JadooPlus.AdService.AdService.adXML.firstChild, "/xml/ads/ad").childNodes;
        var __reg4 = __reg3.length;
        var __reg2 = 0;
        while (__reg2 < __reg4) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "link") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "duration") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration = int(__reg1.firstChild.nodeValue) * 1000;
            }
            else if (__reg1.nodeName == "log") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdLogURL = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "item") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parseItemTag(__reg1);
            }
            ++__reg2;
        }
        if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL != null) 
        {
            if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "liveWMV" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "liveRTMP" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "livePlaylist") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.notify(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration, com.jadoo.as2.JadooPlus.AdService.AdService.itemType, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem);
            }
            else if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "flv" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "wmv" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "youtube" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "vodPlaylist") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.notify(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration, com.jadoo.as2.JadooPlus.AdService.AdService.itemType, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem);
            }
            else if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "container" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "dailymotionplaylist" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "youtubeplaylist") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.notify(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration, com.jadoo.as2.JadooPlus.AdService.AdService.itemType, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem);
            }
            else if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == null || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == undefined) 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.onAdAvailable.notify(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdURL, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdDuration, null, null);
            }
        }
        __reg1 = null;
        __reg3 = null;
        __reg4 = null;
    }

    static function parseItemTag(itemNode)
    {
        com.jadoo.as2.JadooPlus.AdService.AdService.itemType = mx.xpath.XPathAPI.selectSingleNode(itemNode, "/item/type").firstChild.nodeValue;
        if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "liveWMV" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "liveRTMP" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "livePlaylist") 
        {
            if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem != null) 
            {
                delete com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem;
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem = null;
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem = new com.jadoo.as2.JadooPlus.Views.TierItems.GridChannelItem();
            com.jadoo.as2.JadooPlus.AdService.AdService.parseChannelItem(com.jadoo.as2.JadooPlus.AdService.AdService.pageAdChannelItem, itemNode);
        }
        else if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "flv" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "wmv" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "youtube" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "vodPlaylist") 
        {
            if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem != null) 
            {
                delete com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem;
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem = null;
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem = new com.jadoo.as2.JadooPlus.Views.TierItems.GridContentItem();
            com.jadoo.as2.JadooPlus.AdService.AdService.parseContentItem(itemNode);
        }
        else if (com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "container" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "dailymotionplaylist" || com.jadoo.as2.JadooPlus.AdService.AdService.itemType == "youtubeplaylist") 
        {
            if (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem != null) 
            {
                delete (com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem);
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem = null;
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem = new com.jadoo.as2.JadooPlus.Views.TierItems.GridCategoryItem();
            com.jadoo.as2.JadooPlus.AdService.AdService.parseCategoryItem(itemNode);
        }
        itemNode = null;
    }

    static function parseChannelItem(channelItem, itemNode)
    {
        var __reg4 = itemNode.childNodes;
        var __reg5 = __reg4.length;
        var __reg1 = null;
        var __reg3 = 0;
        while (__reg3 < __reg5) 
        {
            __reg1 = __reg4[__reg3];
            if (__reg1.nodeName == "id") 
            {
                channelItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                channelItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                channelItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                channelItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                channelItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "gid") 
            {
                channelItem.groupId = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "protected") 
            {
                channelItem.itemProtected = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "restrict_link") 
            {
                channelItem.restrictLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sub_status") 
            {
                channelItem.subscriptionStatus = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "description") 
            {
                channelItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "response_link") 
            {
                channelItem.responseLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "program_listing") 
            {
                channelItem.itemProgramListing = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "program_guide") 
            {
                channelItem.itemProgramGuideLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "category_id") 
            {
                channelItem.categoryId = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parsePopupTag(__reg1, channelItem);
            }
            ++__reg3;
        }
        channelItem = null;
        channelItem = null;
        __reg4 = null;
        __reg1 = null;
    }

    static function parseCategoryItem(categoryNode)
    {
        var __reg3 = categoryNode.childNodes;
        var __reg4 = __reg3.length;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "id") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "item_image") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "description") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parsePopupTag(__reg1, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem);
            }
            else if (__reg1.nodeName == "announcements") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parseAnnouncementsTag(__reg1, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem);
            }
            else if (__reg1.nodeName == "cache") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdCategoryItem.cache = Number(__reg1.firstChild.nodeValue);
            }
            ++__reg2;
        }
        categoryNode = null;
        __reg3 = null;
        __reg1 = null;
    }

    static function parseContentItem(contentNode)
    {
        var __reg3 = contentNode.childNodes;
        var __reg4 = __reg3.length;
        var __reg1 = null;
        var __reg2 = 0;
        while (__reg2 < __reg4) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "id") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemId = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "name") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemName = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "type") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemType = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "link") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "channel_logo") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemImage = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "views") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemViews = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "episode_number") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.episode = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "part_number") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.part = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "protected") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemProtected = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "restrict_link") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.restrictLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "description") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemDescription = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "response_link") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.responseLink = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "duration") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemDuration = Number(__reg1.firstChild.nodeValue);
            }
            else if (__reg1.nodeName == "category") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemCategory = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "popup") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parsePopupTag(__reg1, com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem);
            }
            else if (__reg1.nodeName == "info") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parseItemInfo(__reg1);
            }
            ++__reg2;
        }
        contentNode = null;
        __reg3 = null;
        __reg1 = null;
    }

    static function parseItemInfo(itemInfoNode)
    {
        var __reg3 = itemInfoNode.childNodes;
        var __reg1 = null;
        com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo = new com.jadoo.as2.JadooPlus.Views.TierItems.ItemInfo();
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            __reg1 = __reg3[__reg2];
            if (__reg1.nodeName == "image") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.imageUrl = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "genre") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.genre = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "producer") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.producer = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "director") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.director = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "cast") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.cast = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo1_title") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo1Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo1") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo1 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo2_title") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo2Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo2") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo2 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo3_title") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo3Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo3") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo3 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo4_title") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo4Title = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "sinfo4") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.shortInfo4 = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "linfo_title") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.longInfoTitle = __reg1.firstChild.nodeValue;
            }
            else if (__reg1.nodeName == "linfo") 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.pageAdContentItem.itemInfo.longInfo = __reg1.firstChild.nodeValue;
            }
            ++__reg2;
        }
        __reg3 = null;
        __reg1 = null;
        itemInfoNode = null;
    }

    static function parseAnnouncementsTag(itemAnnouncementNode, item)
    {
        var __reg3 = mx.xpath.XPathAPI.selectNodeList(itemAnnouncementNode, "/announcements/announcement");
        if (__reg3.length > 0) 
        {
            var __reg2 = null;
            item.announcements = new Array();
            var __reg1 = 0;
            while (__reg1 < __reg3.length) 
            {
                __reg2 = __reg3[__reg1];
                item.announcements[__reg1] = {date: mx.xpath.XPathAPI.selectSingleNode(__reg2, "/announcement/ann_date").firstChild.nodeValue, text: mx.xpath.XPathAPI.selectSingleNode(__reg2, "/announcement/ann_text").firstChild.nodeValue};
                ++__reg1;
            }
            __reg2 = null;
        }
        __reg3 = null;
        item = null;
    }

    static function parsePopupTag(popupNode, item)
    {
        if (popupNode != null && popupNode != undefined) 
        {
            item.deletePopupButton();
            item.isItemPopUp = true;
            item.popUpType = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/type").firstChild.nodeValue;
            item.popUpMsg = mx.xpath.XPathAPI.selectSingleNode(popupNode, "/popup/message").firstChild.nodeValue;
            var __reg4 = mx.xpath.XPathAPI.selectNodeList(popupNode, "/popup/buttons/button");
            var __reg3 = null;
            var __reg1 = 0;
            while (__reg1 < __reg4.length) 
            {
                __reg3 = __reg4[__reg1];
                var __reg2 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/button/text").firstChild.nodeValue;
                item.addPopupButton(__reg2);
                __reg2 = null;
                ++__reg1;
            }
            __reg4 = null;
            __reg3 = null;
        }
        popupNode = null;
        item = null;
    }

    static function onAdXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg4 = arguments[1];
        var __reg3 = arguments[2];
        com.jadoo.as2.JadooPlus.AdService.AdService.loadXmlObject(__reg2);
        com.jadoo.as2.JadooPlus.AdService.AdService.onLoadAdXML(__reg2);
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    static function loadXmlObject(success)
    {
        if (success) 
        {
            com.jadoo.as2.JadooPlus.AdService.AdService.adXML = com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.getXmlObject();
        }
    }

    static function onLoadAdXML(success)
    {
        if (success) 
        {
            if (com.jadoo.as2.JadooPlus.AdService.AdService.isVideoAd) 
            {
                com.jadoo.as2.JadooPlus.AdService.AdService.parseVideoAd();
                return;
            }
            com.jadoo.as2.JadooPlus.AdService.AdService.parsePageAd();
        }
    }

    static function loadAdXML(url)
    {
        var __reg2 = undefined;
        if (url.charAt(url.length - 1) != "/") 
        {
            url = url + "/";
        }
        url = url + com.jadoo.as2.JadooPlus.UserInfo.UserProfile.countryCode;
        com.jadoo.as2.JadooPlus.AdService.AdService.index = com.jadoo.as2.JadooPlus.AdService.AdService.index % com.jadoo.as2.JadooPlus.AdService.AdService.maxIndex;
        __reg2 = (com.jadoo.as2.JadooPlus.AdService.AdService.index + 4) % com.jadoo.as2.JadooPlus.AdService.AdService.maxIndex;
        com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.deleteXMLObject(__reg2);
        com.jadoo.as2.JadooPlus.AdService.AdService.xmlInvoker.loadXML(url, com.jadoo.as2.JadooPlus.AdService.AdService.index, 60000, false, true, false);
        ++com.jadoo.as2.JadooPlus.AdService.AdService.index;
        __reg2 = null;
        url = null;
    }

}

//Sprite 733
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.Weather
{
    var xml = null;
    var userLocation = null;
    var updateTimerId: Number = -1;
    var WOEID: Number = -1;
    var weatherIconsUrl = null;
    var updateTime: Number = 600000;
    static var weatherAvailable: Boolean = false;
    static var condition = null;
    static var temperature: Number = 0;
    static var image = null;
    static var onWeatherUpdate = null;

    function Weather()
    {
    }

    function init(userLocation, weatherIconsUrl)
    {
        this.userLocation = userLocation;
        this.weatherIconsUrl = weatherIconsUrl;
        com.jadoo.as2.JadooPlus.Features.Weather.onWeatherUpdate = new com.BigRoom.Event();
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.xml.ignoreWhite = true;
        this.xml.onLoad = mx.utils.Delegate.create(this, this.onLoadWOEIDXml);
        this.xml.load("http://query.yahooapis.com/v1/public/yql?q=select * from geo.places where text=\"" + userLocation + "\"&format=xml");
    }

    function destroy()
    {
        clearInterval(this.updateTimerId);
        this.updateTimerId = -1;
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
    }

    static function addListener(eventName, obj, listener)
    {
        if (eventName == "onWeatherUpdate") 
        {
            com.jadoo.as2.JadooPlus.Features.Weather.onWeatherUpdate.addListener(obj, listener);
        }
        if (com.jadoo.as2.JadooPlus.Features.Weather.weatherAvailable) 
        {
            com.jadoo.as2.JadooPlus.Features.Weather.onWeatherUpdate.notify(com.jadoo.as2.JadooPlus.Features.Weather.condition, com.jadoo.as2.JadooPlus.Features.Weather.temperature, com.jadoo.as2.JadooPlus.Features.Weather.image);
        }
    }

    static function removeListener(eventName, obj, listener)
    {
        if (eventName == "onWeatherUpdate") 
        {
            com.jadoo.as2.JadooPlus.Features.Weather.onWeatherUpdate.removeListener(obj, listener);
        }
    }

    function onLoadWOEIDXml(success)
    {
        if (success) 
        {
            this.WOEID = Number(mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/query/results/place/woeid").firstChild.nodeValue);
            this.loadWeatherXml();
            return;
        }
    }

    function loadWeatherXml()
    {
        delete this.xml;
        this.xml = new XML();
        this.xml.ignoreWhite = true;
        this.xml.onLoad = mx.utils.Delegate.create(this, this.onLoadWeatherXml);
        this.xml.load("http://weather.yahooapis.com/forecastrss?w=" + this.WOEID);
    }

    function onLoadWeatherXml(success)
    {
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/rss/channel/item/yweather:condition");
            com.jadoo.as2.JadooPlus.Features.Weather.condition = __reg2.attributes.text;
            com.jadoo.as2.JadooPlus.Features.Weather.temperature = __reg2.attributes.temp;
            com.jadoo.as2.JadooPlus.Features.Weather.image = this.weatherIconsUrl + __reg2.attributes.code + ".png";
            com.jadoo.as2.JadooPlus.Features.Weather.weatherAvailable = true;
            com.jadoo.as2.JadooPlus.Features.Weather.onWeatherUpdate.notify(com.jadoo.as2.JadooPlus.Features.Weather.condition, com.jadoo.as2.JadooPlus.Features.Weather.temperature, com.jadoo.as2.JadooPlus.Features.Weather.image);
            if (this.updateTimerId == -1) 
            {
                this.updateTimerId = setInterval(this, "loadWeatherXml", this.updateTime);
            }
            __reg2 = null;
            return;
        }
    }

}

//Sprite 734
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.BoxRegistration
{
    var boxRegBaseMC = null;
    var txtBaseMC = null;
    var txtFormat = null;
    var estaricTxtFormat = null;
    var titleTxtFormat = null;
    var inputTxtFormat = null;
    var fieldSelectorMC = null;
    var keyListener = null;
    var fn = null;
    var cursorMC = null;
    var btnTextFormat = null;
    var popupTextFormat = null;
    var startBtnMC = null;
    var cancelBtnMC = null;
    var enableBtnMC = null;
    var txtFieldBaseMC = null;
    var submitBtnMC = null;
    var yesBtnMC = null;
    var noBtnMC = null;
    var enbBtnMC = null;
    var backBtnMC = null;
    var proceedBtnMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var parentMC = null;
    var maskBaseMC = null;
    var kBoardBaseMC = null;
    var boxIdTxtField = null;
    var registrationForm = null;
    var boxId = null;
    var logoURL = null;
    var registerURL = null;
    var formURL = null;
    var fieldURL = null;
    var xml = null;
    var boxIdXml = null;
    var txtFieldItems = null;
    var txtFieldErrors = null;
    var txtFieldPosX: Number = 120;
    var txtFieldPosY: Number = 150;
    var boxSpacingY: Number = 25;
    var fieldSpacingY: Number = 55;
    var txtFieldBoxX: Number = 258;
    var txtFieldBoxY: Number = 0;
    var txtFieldStartY: Number = 40;
    var currField: Number = 0;
    var numCols: Number = 2;
    var currBtn: Number = 0;
    var btnPosY: Number = 635;
    var lastFieldIdx: Number = 0;
    var btnWidth: Number = 145;
    var btnHeight: Number = 32;
    var buttonOffset: Number = 50;
    var currPopupBtn: Number = 1;
    var maskWidth: Number = 830;
    var maskHeight: Number = 446;
    var maxItems: Number = 6;
    var fieldStartIdx: Number = 0;
    var fieldTitleXPos: Number = 20;
    var emailErrorPopupEnabled: Boolean = false;
    var incompleteInfo: Boolean = false;
    var virtKeyBoard = null;
    var onRegistrationDone = null;
    var onRegistrationCancel = null;
    var xmlInvoker = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var firstNameFieldIdx;
    var lastNameFieldIdx;

    function BoxRegistration()
    {
        this.popupTextFormat = new TextFormat();
        this.popupTextFormat.font = "Arial";
        this.popupTextFormat.align = "center";
        this.popupTextFormat.size = 26;
        this.popupTextFormat.bold = false;
        this.popupTextFormat.color = 16777215;
        this.txtFormat = new TextFormat();
        this.txtFormat.font = "Arial";
        this.txtFormat.align = "left";
        this.txtFormat.size = 28;
        this.txtFormat.bold = false;
        this.txtFormat.color = 16777215;
        this.estaricTxtFormat = new TextFormat();
        this.estaricTxtFormat.font = "Arial";
        this.estaricTxtFormat.align = "left";
        this.estaricTxtFormat.size = 32;
        this.estaricTxtFormat.bold = false;
        this.estaricTxtFormat.color = 16777215;
        this.inputTxtFormat = new TextFormat();
        this.inputTxtFormat.font = "Arial";
        this.inputTxtFormat.align = "left";
        this.inputTxtFormat.size = 28;
        this.inputTxtFormat.bold = false;
        this.inputTxtFormat.color = 16777215;
        this.titleTxtFormat = new TextFormat();
        this.titleTxtFormat.font = "Arial";
        this.titleTxtFormat.align = "left";
        this.titleTxtFormat.size = 38;
        this.titleTxtFormat.bold = false;
        this.titleTxtFormat.color = 16777215;
        this.keyListener = new Object();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onPopupKeyDown: mx.utils.Delegate.create(this, this.onPopupKeyDown), onLoadRegXML: mx.utils.Delegate.create(this, this.onLoadRegXML), onScrollComplete: mx.utils.Delegate.create(this, this.onScrollComplete), onLoadLogoImage: mx.utils.Delegate.create(this, this.onLoadLogoImage)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.onRegistrationDone = new com.BigRoom.Event();
        this.onRegistrationCancel = new com.BigRoom.Event();
        this.xmlInvoker = new com.jadoo.as2.JadooPlus.Parser.XmlParser.JadooXml();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
    }

    function destroy()
    {
        this.removeLoadingMC();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        delete this.keyListener;
        this.keyListener = null;
        if (this.txtFieldItems != null) 
        {
            delete this.txtFieldItems;
            this.txtFieldItems = null;
        }
        if (this.txtFieldErrors != null) 
        {
            delete this.txtFieldErrors;
            this.txtFieldErrors = null;
        }
        if (this.txtFormat != null) 
        {
            delete this.txtFormat;
            this.txtFormat = null;
        }
        if (this.estaricTxtFormat != null) 
        {
            delete this.estaricTxtFormat;
            this.estaricTxtFormat = null;
        }
        if (this.titleTxtFormat != null) 
        {
            delete this.titleTxtFormat;
            this.titleTxtFormat = null;
        }
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        if (this.popupTextFormat != null) 
        {
            delete this.popupTextFormat;
            this.popupTextFormat = null;
        }
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        if (this.boxIdXml != null) 
        {
            delete this.boxIdXml;
            this.boxIdXml = null;
        }
        if (this.registrationForm != null) 
        {
            delete this.registrationForm;
            this.registrationForm = null;
        }
        if (this.xmlInvoker != null) 
        {
            this.xmlInvoker.removeListener("onXmlResponse", this, this.onTxtFieldsXmlResponse);
            this.xmlInvoker.destroy();
            delete this.xmlInvoker;
            this.xmlInvoker = null;
        }
        this.fn = null;
        delete this.onRegistrationDone;
        this.onRegistrationDone = null;
        delete this.onRegistrationCancel;
        this.onRegistrationCancel = null;
        removeMovieClip(this.boxRegBaseMC);
        removeMovieClip(this.maskBaseMC);
        if (this.kBoardBaseMC != null) 
        {
            removeMovieClip(this.kBoardBaseMC);
        }
        this.netStatus = null;
        this.netErrorStr = null;
    }

    function registerBox(parentMC)
    {
        this.parentMC = parentMC;
        this.registerURL = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getRegistrationURL();
        this.logoURL = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.getLogoURL();
        this.boxRegBaseMC = parentMC.createEmptyMovieClip("boxRegBaseMC", parentMC.getNextHighestDepth());
        this.maskBaseMC = parentMC.createEmptyMovieClip("maskBaseMC", parentMC.getNextHighestDepth());
        var __reg3 = this.maskBaseMC.attachMovie("maskMC", "layerToHideFormMC", this.maskBaseMC.getNextHighestDepth(), {_x: 0, _y: 105, _width: 1280, _height: 615});
        this.maskBaseMC._alpha = 0;
        this.displayLoadingMC();
        this.createMainUI();
        this.createMessageField();
        this.createFormURL();
    }

    function initRegistration()
    {
        this.createFieldURL();
        this.loadTxtFieldsXML();
    }

    function createFieldURL()
    {
        this.fieldURL = this.registerURL;
        if (this.fieldURL.charAt(this.fieldURL.length - 1) != "/") 
        {
            this.fieldURL = this.fieldURL + "/";
        }
        this.fieldURL = this.fieldURL + "fields";
    }

    function drawHeplText()
    {
        var __reg2 = this.boxRegBaseMC.attachMovie("seperator", "seperatorMC", this.boxRegBaseMC.getNextHighestDepth());
        __reg2._y = 150;
        __reg2._x = this.txtFieldBaseMC._x + this.txtFieldBaseMC._width + 50;
        __reg2._width = 420;
        __reg2._rotation = 90;
        var __reg3 = this.boxRegBaseMC.createTextField("helpCommentsTextField", this.boxRegBaseMC.getNextHighestDepth(), this.txtFieldBaseMC._x + this.txtFieldBaseMC._width + 100, 200, 200, 30);
        __reg3.autoSize = true;
        __reg3.wordWrap = true;
        this.txtFormat.color = 16777215;
        __reg3.setNewTextFormat(this.txtFormat);
        __reg2 = null;
        __reg3 = null;
    }

    function createMessageField()
    {
        var __reg2 = this.boxRegBaseMC.createTextField("messageField", this.boxRegBaseMC.getNextHighestDepth(), 0, this.btnPosY - 50, 200, 30);
        __reg2.autoSize = true;
        this.txtFormat.color = 16555008;
        __reg2.setNewTextFormat(this.txtFormat);
        this.txtFormat.color = 16750898;
        __reg2 = null;
    }

    function displayMessage(message)
    {
        this.boxRegBaseMC.messageField.htmlText = message;
        this.boxRegBaseMC.messageField._x = (1280 - this.boxRegBaseMC.messageField.textWidth) / 2;
    }

    function loadTxtFieldsXML()
    {
        this.xmlInvoker.addListener("onXmlResponse", this, this.onTxtFieldsXmlResponse);
        this.xmlInvoker.loadXML(this.fieldURL, 0, com.jadoo.as2.JadooPlus.Utils.Config.itemXmlTimeOutDuration, false, true, false);
    }

    function onTxtFieldsXmlResponse()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            this.xml = this.xmlInvoker.getXmlObject();
        }
        this.onTxtFieldXmlLoad(__reg3, __reg4);
        __reg3 = null;
        __reg4 = null;
    }

    function onTxtFieldXmlLoad()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            if (this.txtFieldItems != null) 
            {
                delete this.txtFieldItems;
                this.txtFieldItems = null;
            }
            this.txtFieldItems = new Array();
            this.parseTxtFieldItems();
            this.removeLoadingMC();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.drawTxtFields();
            this.createButtons();
        }
        else 
        {
            this.removeLoadingMC();
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.createButtons();
            this.displayBackBtn();
            if (__reg4) 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.REGISTRATION_FIELDS_XML_NOT_LOADED, "Box Registeration", "NA", "NA");
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.REGISTRATION_FIELDS_XML_NOT_LOADED, "Box Registeration", "NA", "NA");
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            }
        }
        __reg3 = null;
        __reg4 = null;
    }

    function createButtons()
    {
        var __reg2 = this.boxRegBaseMC.createEmptyMovieClip("txtFieldBtnBaseMC", this.boxRegBaseMC.getNextHighestDepth());
        this.submitBtnMC = __reg2.attachMovie("infoBtnDis", "submitBtnMC", __reg2.getNextHighestDepth());
        this.submitBtnMC._x = this.boxRegBaseMC._x + (this.boxRegBaseMC._width / 2 - (this.btnWidth + this.buttonOffset));
        this.submitBtnMC._y = this.btnPosY;
        this.cancelBtnMC = __reg2.attachMovie("infoBtnDis", "cancelBtnMC", __reg2.getNextHighestDepth());
        this.cancelBtnMC._x = this.boxRegBaseMC._x + this.boxRegBaseMC._width / 2 + this.buttonOffset;
        this.cancelBtnMC._y = this.btnPosY;
        this.backBtnMC = __reg2.attachMovie("infoBtnEnb", "backBtnMC", __reg2.getNextHighestDepth());
        this.backBtnMC._x = this.boxRegBaseMC._x + (this.boxRegBaseMC._width - this.btnWidth) / 2;
        this.backBtnMC._y = this.btnPosY;
        this.backBtnMC._visible = false;
        this.proceedBtnMC = __reg2.attachMovie("infoBtnEnb", "proceedBtnMC", __reg2.getNextHighestDepth());
        this.proceedBtnMC._x = this.boxRegBaseMC._x + (this.boxRegBaseMC._width - this.btnWidth) / 2;
        this.proceedBtnMC._y = this.btnPosY;
        this.proceedBtnMC._visible = false;
        this.enableBtnMC = __reg2.attachMovie("infoBtnEnb", "enableBtnMC", __reg2.getNextHighestDepth());
        this.enableBtnMC._x = this.cancelBtnMC._x;
        this.enableBtnMC._y = this.cancelBtnMC._y;
        if (this.btnTextFormat != null) 
        {
            delete this.btnTextFormat;
            this.btnTextFormat = null;
        }
        this.btnTextFormat = new TextFormat();
        this.btnTextFormat.font = "Arial";
        this.btnTextFormat.align = "center";
        this.btnTextFormat.size = 24;
        this.btnTextFormat.bold = true;
        var __reg8 = __reg2.createTextField("submitBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg8.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg8.setNewTextFormat(this.btnTextFormat);
        __reg8.htmlText = "Submit";
        __reg8._x = this.submitBtnMC._x + (this.submitBtnMC._width - __reg8._width) / 2;
        __reg8._y = this.submitBtnMC._y + (this.submitBtnMC._height - __reg8._height) / 2;
        var __reg6 = __reg2.createTextField("submitBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg6.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg6.setNewTextFormat(this.btnTextFormat);
        __reg6.htmlText = "Submit";
        __reg6._x = this.submitBtnMC._x + (this.submitBtnMC._width - __reg6._width) / 2;
        __reg6._y = this.submitBtnMC._y + (this.submitBtnMC._height - __reg6._height) / 2;
        __reg6._visible = false;
        var __reg7 = __reg2.createTextField("cancelBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg7.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg7.setNewTextFormat(this.btnTextFormat);
        __reg7.htmlText = "Cancel";
        __reg7._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg7._width) / 2;
        __reg7._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg7._height) / 2;
        var __reg3 = __reg2.createTextField("cancelBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg3.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg3.setNewTextFormat(this.btnTextFormat);
        __reg3.htmlText = "Cancel";
        __reg3._x = this.cancelBtnMC._x + (this.cancelBtnMC._width - __reg3._width) / 2;
        __reg3._y = this.cancelBtnMC._y + (this.cancelBtnMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        var __reg4 = __reg2.createTextField("backBtnText", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg4.setNewTextFormat(this.btnTextFormat);
        __reg4.htmlText = "Back";
        __reg4._x = this.backBtnMC._x + (this.backBtnMC._width - __reg4._width) / 2;
        __reg4._y = this.backBtnMC._y + (this.backBtnMC._height - __reg4._height) / 2;
        __reg4._visible = false;
        var __reg5 = __reg2.createTextField("proceedBtnText", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg5.setNewTextFormat(this.btnTextFormat);
        __reg5.htmlText = "Proceed";
        __reg5._x = this.proceedBtnMC._x + (this.proceedBtnMC._width - __reg5._width) / 2;
        __reg5._y = this.proceedBtnMC._y + (this.proceedBtnMC._height - __reg5._height) / 2;
        __reg5._visible = false;
        this.unHighlightAllBtn();
        __reg5 = null;
        __reg4 = null;
        __reg3 = null;
        __reg7 = null;
        __reg6 = null;
        __reg8 = null;
        __reg2 = null;
    }

    function unHighlightAllBtn()
    {
        this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextDis._visible = true;
        this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextEnb._visible = false;
        this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextDis._visible = true;
        this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextEnb._visible = false;
        this.enableBtnMC._visible = false;
    }

    function parseTxtFieldItems()
    {
        var __reg2 = null;
        var __reg8 = undefined;
        var __reg10 = undefined;
        var __reg6 = undefined;
        var __reg7 = undefined;
        var __reg11 = undefined;
        var __reg5 = undefined;
        var __reg9 = undefined;
        var __reg4 = mx.xpath.XPathAPI.selectNodeList(this.xml.firstChild, "/xml/form/fields/field");
        var __reg3 = 0;
        while (__reg3 < __reg4.length) 
        {
            __reg2 = __reg4[__reg3];
            __reg8 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/title").firstChild.nodeValue;
            __reg10 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/name").firstChild.nodeValue;
            __reg6 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/type").firstChild.nodeValue;
            __reg5 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/required").firstChild.nodeValue;
            __reg9 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/help_text").firstChild.nodeValue;
            if (__reg10 == "password" || __reg10 == "confirm_password") 
            {
                __reg7 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/min_length").firstChild.nodeValue;
            }
            else 
            {
                __reg11 = mx.xpath.XPathAPI.selectSingleNode(__reg2, "/field/max_length").firstChild.nodeValue;
            }
            this.txtFieldItems.push({fieldTitle: __reg8, fieldName: __reg10, fieldType: __reg6, fieldMinLength: __reg7, fieldMaxLength: __reg11, fieldRequired: __reg5, helpText: __reg9});
            ++__reg3;
        }
        __reg2 = null;
        __reg8 = null;
        __reg10 = null;
        __reg6 = null;
        __reg7 = null;
        __reg11 = null;
        __reg5 = null;
        __reg9 = null;
        __reg4 = null;
    }

    function drawTxtFields()
    {
        var __reg3 = 0;
        this.txtFieldBaseMC = this.boxRegBaseMC.createEmptyMovieClip("txtFieldBaseMC", this.boxRegBaseMC.getNextHighestDepth());
        var __reg4 = this.boxRegBaseMC.attachMovie("maskMC", "maskMC", this.boxRegBaseMC.getNextHighestDepth(), {_x: this.txtFieldPosX - 10, _y: this.txtFieldPosY - 10, _width: this.maskWidth, _height: this.maskHeight});
        this.txtFieldBaseMC.setMask(__reg4);
        this.txtFieldBaseMC._x = this.txtFieldPosX;
        this.txtFieldBaseMC._y = this.txtFieldPosY;
        var __reg2 = 0;
        while (__reg2 < this.txtFieldItems.length) 
        {
            if (this.txtFieldItems[__reg2].fieldType == "hidden") 
            {
                --__reg3;
            }
            else 
            {
                if (this.txtFieldItems[__reg2].fieldName == "first_name") 
                {
                    this.firstNameFieldIdx = __reg2;
                }
                else if (this.txtFieldItems[__reg2].fieldName == "last_name") 
                {
                    this.lastNameFieldIdx = __reg2;
                }
                if (this.txtFieldItems[__reg2].fieldRequired == "yes") 
                {
                    this.createTxtField(this.txtFieldItems[__reg2].fieldTitle, this.fieldTitleXPos, __reg3 * this.fieldSpacingY + this.txtFieldStartY, __reg3);
                    this.createEstaricTxtField("*", 0, __reg3 * this.fieldSpacingY + 40, __reg3);
                }
                else 
                {
                    this.createTxtField(this.txtFieldItems[__reg2].fieldTitle, this.fieldTitleXPos, __reg3 * this.fieldSpacingY + this.txtFieldStartY, __reg3);
                }
            }
            __reg2++;
            __reg3++;
        }
        this.displayRequiredFieldsMessage();
        this.drawHeplText();
        this.displayBoxID(this.fieldTitleXPos, __reg3 * this.fieldSpacingY + this.txtFieldStartY);
        this.fieldSelectorMC = this.txtFieldBaseMC.attachMovie("fieldSelectorMC", "fieldSelectorMC", this.txtFieldBaseMC.getNextHighestDepth());
        this.highlightField();
        this.displayArrows();
        __reg3 = null;
        __reg4 = null;
    }

    function displayRequiredFieldsMessage()
    {
        var __reg2 = this.txtFieldBaseMC.createTextField("requiredTxtField", this.txtFieldBaseMC.getNextHighestDepth(), 0, 0, 200, 30);
        __reg2.autoSize = "left";
        __reg2.setNewTextFormat(this.txtFormat);
        __reg2.htmlText = "Required Fields";
        __reg2._x = this.txtFieldBaseMC._width - __reg2.textWidth;
        var __reg3 = this.txtFieldBaseMC.createTextField("requiredEstaricTxtField", this.txtFieldBaseMC.getNextHighestDepth(), 0, 0, 200, 30);
        __reg3.autoSize = "left";
        __reg3.setNewTextFormat(this.estaricTxtFormat);
        __reg3.htmlText = "* ";
        __reg3._x = this.txtFieldBaseMC._width - __reg2.textWidth - 25;
        __reg2 = null;
        __reg3 = null;
    }

    function displayBoxID(labelStartX, labelStartY)
    {
        this.txtFormat.color = 16750898;
        var __reg3 = this.txtFieldBaseMC.createTextField("boxIdTitleTxtField", this.txtFieldBaseMC.getNextHighestDepth(), labelStartX, labelStartY, 200, 30);
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(this.txtFormat);
        __reg3.htmlText = "Box Id";
        var __reg2 = this.txtFieldBaseMC.attachMovie("txtFieldImgMC", "txtBoxIdMC", this.txtFieldBaseMC.getNextHighestDepth());
        __reg2._x = this.txtFieldBoxX;
        __reg2._y = __reg3._y + (__reg2._height - __reg3._height) / 2;
        this.boxIdTxtField = this.txtFieldBaseMC.createTextField("boxIdTxtField", this.txtFieldBaseMC.getNextHighestDepth(), __reg2._x + 5, __reg2._y + 2, __reg2._width - 10, __reg2._height);
        this.boxIdTxtField.autoSize = true;
        this.boxIdTxtField.setNewTextFormat(this.inputTxtFormat);
        if (this.boxId != null) 
        {
            this.splitBoxId();
            this.boxIdTxtField.htmlText = this.boxId;
        }
        __reg3 = null;
        __reg2 = null;
    }

    function splitBoxId()
    {
        var __reg4 = "";
        var __reg3 = new Array();
        __reg3 = this.boxId.split("");
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            if (__reg2 % 2 == 0 && __reg2 != 0) 
            {
                __reg4 = __reg4.concat(" ");
            }
            __reg3[__reg2] = __reg3[__reg2].toString();
            __reg4 = __reg4.concat(__reg3[__reg2]);
            ++__reg2;
        }
        this.boxId = __reg4;
        false;
        __reg3 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function createMainUI()
    {
        this.loadBackground();
        this.displayTitle();
        this.createArrows();
    }

    function displayTitle()
    {
        var __reg3 = this.boxRegBaseMC.createEmptyMovieClip("titleBaseMC", this.boxRegBaseMC.getNextHighestDepth());
        var __reg2 = __reg3.createTextField("titleTxtField", __reg3.getNextHighestDepth(), 90, 40, 200, 30);
        __reg2.autoSize = true;
        __reg2.setNewTextFormat(this.titleTxtFormat);
        __reg2.htmlText = "Registration";
        __reg3 = null;
        __reg2 = null;
    }

    function createArrows()
    {
        this.upArrowMC = this.boxRegBaseMC.attachMovie("upArrowMC", "upArrowMC", this.boxRegBaseMC.getNextHighestDepth(), {_x: this.txtFieldPosX + this.maskWidth + 20, _y: this.txtFieldPosY});
        this.upArrowMC._visible = false;
        this.downArrowMC = this.boxRegBaseMC.attachMovie("downArrowMC", "downArrowMC", this.boxRegBaseMC.getNextHighestDepth(), {_x: this.txtFieldPosX + this.maskWidth + 20, _y: this.txtFieldPosY + this.maskHeight});
        this.downArrowMC._visible = false;
    }

    function displayArrows()
    {
        if (this.fieldStartIdx + this.maxItems < this.lastFieldIdx) 
        {
            this.downArrowMC._visible = true;
        }
        else 
        {
            this.downArrowMC._visible = false;
        }
        if (this.fieldStartIdx >= this.maxItems) 
        {
            this.upArrowMC._visible = true;
            return;
        }
        this.upArrowMC._visible = false;
    }

    function loadBackground()
    {
        var __reg2 = this.boxRegBaseMC.createEmptyMovieClip("backgroundBaseMC", this.boxRegBaseMC.getNextHighestDepth());
        var __reg3 = __reg2.attachMovie("backgroundMC", "backGroundMC", __reg2.getNextHighestDepth(), {_x: 0, _y: 0, _width: 1280, _height: 720});
        __reg2 = null;
        __reg3 = null;
    }

    function loadLogo()
    {
        var __reg2 = new MovieClipLoader();
        var __reg3 = new Object();
        __reg3.onLoadInit = this.fn.onLoadLogoImage;
        __reg2.addListener(__reg3);
        var __reg4 = this.boxRegBaseMC.createEmptyMovieClip("logoImageBaseMC", this.boxRegBaseMC.getNextHighestDepth());
        __reg2.loadClip(this.logoURL, __reg4);
        false;
        false;
        __reg2 = null;
        __reg3 = null;
    }

    function onLoadLogoImage(targetMC)
    {
        targetMC._x = 1020;
        targetMC._y = 32;
        targetMC._width = 170;
        targetMC._height = 65;
    }

    function createEstaricTxtField(txtToDisplay, labelStartX, labelStartY, id)
    {
        var __reg2 = this.txtFieldBaseMC.createTextField("estaricTxtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), labelStartX, labelStartY, 200, 30);
        __reg2.autoSize = true;
        __reg2.setNewTextFormat(this.estaricTxtFormat);
        __reg2.htmlText = txtToDisplay;
        __reg2 = null;
    }

    function createTxtField(txtToDisplay, labelStartX, labelStartY, id)
    {
        var __reg3 = this.txtFieldBaseMC.createTextField("txtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), labelStartX, labelStartY, 200, 30);
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(this.txtFormat);
        __reg3.htmlText = txtToDisplay;
        var __reg2 = this.txtFieldBaseMC.attachMovie("txtFieldImgMC", "txtBoxMC" + id, this.txtFieldBaseMC.getNextHighestDepth());
        __reg2._x = this.txtFieldBoxX;
        __reg2._y = __reg3._y + (__reg2._height - __reg3._height) / 2;
        var __reg4 = this.txtFieldBaseMC.createTextField("inputTxtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), __reg2._x + 5, __reg2._y + 2, __reg2._width - 10, __reg2._height);
        __reg4.autoSize = true;
        __reg4.setNewTextFormat(this.inputTxtFormat);
        if (txtToDisplay == "Password" || txtToDisplay == "Confirm Password") 
        {
            __reg4.password = true;
        }
        var __reg6 = this.txtFieldBaseMC.createTextField("boxMsgTxtField" + id, this.txtFieldBaseMC.getNextHighestDepth(), __reg2._x + 5, __reg2._y + 2, __reg2._width - 10, __reg2._height);
        __reg6.setNewTextFormat(this.inputTxtFormat);
        this.lastFieldIdx = id;
        __reg3 = null;
        __reg2 = null;
        __reg4 = null;
        __reg6 = null;
    }

    function markFieldInvalid(fieldIdx)
    {
        var __reg3 = this.txtFieldBaseMC["txtBoxMC" + fieldIdx];
        var __reg4 = __reg3._x;
        var __reg5 = __reg3._y;
        if (this.txtFieldBaseMC["fieldInvalidMC" + fieldIdx] == null) 
        {
            var __reg2 = this.txtFieldBaseMC.attachMovie("fieldInvalidMC", "fieldInvalidMC" + fieldIdx, this.txtFieldBaseMC.getNextHighestDepth());
            __reg2._x = __reg4 - (__reg2._width - __reg3._width) / 2;
            __reg2._y = __reg5 - (__reg2._height - __reg3._height) / 2;
            __reg2 = null;
        }
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function highlightField()
    {
        if (this.txtFieldBaseMC["fieldInvalidMC" + this.currField]._visible) 
        {
            this.txtFieldBaseMC["fieldInvalidMC" + this.currField]._visible = false;
        }
        var __reg2 = this.txtFieldBaseMC["txtBoxMC" + this.currField];
        var __reg3 = __reg2._x;
        var __reg4 = __reg2._y;
        this.fieldSelectorMC._x = __reg3 - (this.fieldSelectorMC._width - __reg2._width) / 2;
        this.fieldSelectorMC._y = __reg4 - (this.fieldSelectorMC._height - __reg2._height) / 2;
        this.boxRegBaseMC.helpCommentsTextField.htmlText = this.txtFieldItems[this.currField].helpText;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function resetTxtFields()
    {
        this.txtFieldBaseMC["inputTxtField" + this.currField]._visible = true;
        this.txtFieldBaseMC["boxMsgTxtField" + this.currField]._visible = false;
    }

    function getInfoFromUser()
    {
        var __reg2 = 683;
        var __reg4 = 483;
        var __reg3 = this.txtFieldBaseMC["inputTxtField" + this.currField];
        this.kBoardBaseMC = this.parentMC.createEmptyMovieClip("kBoardBaseMC", this.parentMC.getNextHighestDepth());
        this.kBoardBaseMC._x = (1280 - __reg2) / 2;
        this.kBoardBaseMC._y = 150;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.virtKeyBoard != null) 
        {
            this.virtKeyBoard.destroy();
            delete this.virtKeyBoard;
            this.virtKeyBoard = null;
        }
        this.virtKeyBoard = new com.jadoo.as2.JadooPlus.Keyboard.VirtualKeyBoard();
        this.virtKeyBoard.onDoneBtnPressed.addListener(this, this.onDoneBtnPressed);
        this.virtKeyBoard.onCancelBtnPressed.addListener(this, this.onCancelBtnPressed);
        this.virtKeyBoard.onBackSpaceBtnPressed.addListener(this, this.onBackSpaceBtnPressed);
        this.resetTxtFields();
        this.virtKeyBoard.create(this.kBoardBaseMC, __reg2, __reg4, __reg3.password);
        this.maskBaseMC._alpha = 85;
        this.virtKeyBoard.display(this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText, this.txtFieldBaseMC["txtField" + this.currField].htmlText);
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
    }

    function onDoneBtnPressed(inputString)
    {
        if (this.currField == this.firstNameFieldIdx || this.currField == this.lastNameFieldIdx) 
        {
            var __reg3 = new Array();
            __reg3 = inputString.split(" ");
            inputString = "";
            var __reg2 = 0;
            while (__reg2 < __reg3.length) 
            {
                __reg3[__reg2] = __reg3[__reg2].charAt(0).toUpperCase() + __reg3[__reg2].slice(1);
                if (__reg2 != 0) 
                {
                    inputString = inputString + " ";
                }
                inputString = inputString + __reg3[__reg2];
                ++__reg2;
            }
            false;
            __reg3 = null;
        }
        this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText = inputString;
        this.virtKeyBoard.destroy();
        delete this.virtKeyBoard;
        this.virtKeyBoard = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        removeMovieClip(this.kBoardBaseMC);
        this.maskBaseMC._alpha = 0;
    }

    function onCancelBtnPressed(inputString)
    {
        this.txtFieldBaseMC["inputTxtField" + this.currField].htmlText = inputString;
        removeMovieClip(this.kBoardBaseMC);
        this.maskBaseMC._alpha = 0;
        this.virtKeyBoard.destroy();
        delete this.virtKeyBoard;
        this.virtKeyBoard = null;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function onBackSpaceBtnPressed(posInString)
    {
        var __reg2 = this.txtFieldBaseMC["inputTxtField" + this.currField];
        var __reg6 = this.txtFieldBaseMC["txtBoxMC" + this.currField];
        var __reg3 = this.txtFieldBaseMC.createTextField("tempTxtField", this.txtFieldBaseMC.getNextHighestDepth(), 0, 0, __reg6._width - 10, __reg6._height);
        __reg3._visible = false;
        __reg3.autoSize = true;
        this.inputTxtFormat.size = 22;
        __reg3.setNewTextFormat(this.inputTxtFormat);
        if (posInString > 0) 
        {
            var __reg9 = 0;
            var __reg7 = null;
            var __reg5 = null;
            var __reg4 = null;
            __reg4 = __reg7 = __reg2.text.slice(0, posInString - 1);
            if (posInString < __reg2.length) 
            {
                __reg5 = __reg2.text.substring(posInString, __reg2.length);
                __reg4 = __reg7.concat(__reg5);
            }
            __reg3.htmlText = __reg2.htmlText = __reg4;
            __reg9 = null;
            __reg7 = null;
            __reg5 = null;
            __reg4 = null;
        }
        __reg3.removeTextField();
        __reg2 = null;
        __reg6 = null;
    }

    function isStringValid(inputString, fieldIdx)
    {
        var __reg4 = true;
        var __reg7 = this.txtFieldItems[fieldIdx].fieldType;
        var __reg3 = this.txtFieldBaseMC["boxMsgTxtField" + fieldIdx];
        var __reg5 = this.txtFieldBaseMC["inputTxtField" + fieldIdx];
        if ((__reg0 = __reg7) === "text") 
        {
            if (this.txtFieldItems[fieldIdx].fieldRequired == "yes") 
            {
                if (this.checkStringForInt(inputString)) 
                {
                    __reg5._visible = false;
                    __reg3._visible = true;
                    __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.NUMBERS_ARE_NOT_ALLOWED;
                    this.markFieldInvalid(fieldIdx);
                    __reg4 = false;
                }
                else if (inputString.length > this.txtFieldItems[fieldIdx].fieldMaxLength) 
                {
                    __reg5._visible = false;
                    __reg3._visible = true;
                    __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.MAXIMUM_ALLOWED_CHARACTERS + this.txtFieldItems[fieldIdx].fieldMaxLength.toString();
                    this.markFieldInvalid(fieldIdx);
                    __reg4 = false;
                }
                else if (inputString.length < 2) 
                {
                    __reg5._visible = false;
                    __reg3._visible = true;
                    __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.MINIMUM_ALLOWED_CHARACTERS_2;
                    this.markFieldInvalid(fieldIdx);
                    __reg4 = false;
                }
            }
        }
        else if (__reg0 === "email") 
        {
            if (this.txtFieldItems[fieldIdx].fieldRequired == "yes") 
            {
                if (inputString.length == 0) 
                {
                    __reg5._visible = false;
                    __reg3._visible = true;
                    __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_EMAIL_ADDRESS;
                    this.markFieldInvalid(fieldIdx);
                    __reg4 = false;
                }
                else 
                {
                    var __reg9 = undefined;
                    var __reg8 = new com.jadoo.as2.JadooPlus.Utils.EmailValidator();
                    __reg9 = __reg8.validate(inputString);
                    if (!__reg9) 
                    {
                        __reg5._visible = false;
                        __reg3._visible = true;
                        __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.INVALID_EMAIL_ADDRESS;
                        this.markFieldInvalid(fieldIdx);
                        __reg4 = false;
                    }
                }
            }
        }
        else if (__reg0 === "password") 
        {
            if (this.txtFieldItems[fieldIdx].fieldRequired == "yes") 
            {
                if (inputString.length < this.txtFieldItems[fieldIdx].fieldMinLength || inputString.length > 12) 
                {
                    __reg5._visible = false;
                    __reg3._visible = true;
                    __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.LENGTH_5_TO_12_CHARACTERS;
                    this.markFieldInvalid(fieldIdx);
                    __reg4 = false;
                }
                else if (this.txtFieldItems[fieldIdx].fieldName == "confirm_password") 
                {
                    if (this.txtFieldBaseMC["inputTxtField" + fieldIdx].htmlText != this.txtFieldBaseMC["inputTxtField" + (fieldIdx - 1)].htmlText) 
                    {
                        __reg5._visible = false;
                        __reg3._visible = true;
                        __reg3.htmlText = com.jadoo.as2.JadooPlus.Utils.Messages.PASSWORD_SHOULD_BE_SAME;
                        this.markFieldInvalid(fieldIdx);
                        __reg4 = false;
                    }
                }
            }
        }
        if (__reg4 == true) 
        {
            if (this.txtFieldBaseMC["fieldInvalidMC" + fieldIdx] != null) 
            {
                removeMovieClip(this.txtFieldBaseMC["fieldInvalidMC" + fieldIdx]);
            }
        }
        __reg7 = null;
        __reg3 = null;
        __reg5 = null;
        return __reg4;
    }

    function checkStringForInt(inputStr)
    {
        var __reg4 = false;
        var __reg2 = 0;
        while (__reg2 < inputStr.length) 
        {
            if (this.isNumeric(inputStr.charAt(__reg2))) 
            {
                __reg4 = true;
                break;
            }
            ++__reg2;
        }
        return __reg4;
    }

    function isNumeric(num)
    {
        return !isNaN(parseInt(num));
    }

    function postInfoToServer(addToExisting)
    {
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        var __reg3 = undefined;
        this.registrationForm = new LoadVars();
        if (addToExisting) 
        {
            this.registrationForm.add_to_existing = "yes";
        }
        var __reg2 = 0;
        while (__reg2 < this.txtFieldItems.length) 
        {
            __reg3 = this.txtFieldItems[__reg2].fieldName;
            if (this.txtFieldItems[__reg2].fieldType != "hidden") 
            {
                this.registrationForm[__reg3] = this.txtFieldBaseMC["inputTxtField" + __reg2].htmlText;
            }
            ++__reg2;
        }
        this.registrationForm.sendAndLoad(this.formURL, this.xml, "POST");
        this.xml.onLoad = this.fn.onLoadRegXML;
    }

    function createFormURL()
    {
        this.formURL = this.registerURL;
        if (this.formURL.charAt(this.formURL.length - 1) != "/") 
        {
            this.formURL = this.formURL + "/";
        }
        this.boxId = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        this.formURL = this.formURL + this.boxId;
        this.initRegistration();
    }

    function onLoadRegXML(success)
    {
        this.removeLoadingMC();
        if (this.boxRegBaseMC.emailErrorPopup != null) 
        {
            removeMovieClip(this.boxRegBaseMC.emailErrorPopup);
            this.keyListener.onKeyDown = this.fn.onKeyDown;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (success) 
        {
            this.parseServerXML();
            return;
        }
        com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.REGISTRATION_POST_SERVER_XML_NOT_LOADED, "Box Registeration", "NA", "NA");
        this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
    }

    function parseServerXML()
    {
        var __reg5 = null;
        var __reg3 = undefined;
        var __reg4 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/xml/item/status").firstChild.nodeValue;
        var __reg2 = 0;
        while (__reg2 < this.txtFieldErrors.length) 
        {
            __reg3 = this.getFieldIdx(this.txtFieldErrors[__reg2].fieldName);
            if (this.txtFieldBaseMC["fieldInvalidMC" + __reg3] != null) 
            {
                removeMovieClip(this.txtFieldBaseMC["fieldInvalidMC" + __reg3]);
            }
            ++__reg2;
        }
        if (__reg4 == "success") 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Registration_Completed");
            }
            this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.BOX_REGISTERED_SUCCESSFULLY);
            this.displayProceedBtn();
        }
        else if (__reg4 == "fail") 
        {
            if (com.jadoo.as2.JadooPlus.UserInfo.UserProfile.isDebugMode && com.jadoo.as2.JadooPlus.UserInfo.UserProfile.debugLevel == com.jadoo.as2.JadooPlus.Utils.DebugLevels.DEBUG_LEVEL_VIEWXML) 
            {
                com.jadoo.as2.JadooPlus.Features.Debug.storeDebugData("Registration_Failed");
            }
            this.parseErrorXML();
            this.displayErrorInfo();
        }
        __reg5 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function parseErrorXML()
    {
        var __reg3 = null;
        var __reg6 = undefined;
        var __reg5 = undefined;
        var __reg4 = mx.xpath.XPathAPI.selectNodeList(this.xml.firstChild, "/xml/item/errors/error");
        if (this.txtFieldErrors != null) 
        {
            delete this.txtFieldErrors;
            this.txtFieldErrors = null;
        }
        this.txtFieldErrors = new Array();
        var __reg2 = 0;
        while (__reg2 < __reg4.length) 
        {
            __reg3 = __reg4[__reg2];
            __reg6 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/error/field").firstChild.nodeValue;
            __reg5 = mx.xpath.XPathAPI.selectSingleNode(__reg3, "/error/error").firstChild.nodeValue;
            this.txtFieldErrors.push({fieldName: __reg6, errorStr: __reg5});
            ++__reg2;
        }
        __reg3 = null;
        __reg6 = null;
        __reg5 = null;
        __reg4 = null;
    }

    function displayErrorInfo()
    {
        var __reg3 = undefined;
        var __reg4 = undefined;
        var __reg5 = undefined;
        var __reg2 = 0;
        while (__reg2 < this.txtFieldErrors.length) 
        {
            __reg3 = this.getFieldIdx(this.txtFieldErrors[__reg2].fieldName);
            if (__reg3 != -1) 
            {
                if (this.txtFieldErrors[__reg2].fieldName != "email") 
                {
                    this.txtFieldBaseMC["inputTxtField" + __reg3]._visible = false;
                    this.txtFieldBaseMC["boxMsgTxtField" + __reg3]._visible = true;
                    this.txtFieldBaseMC["boxMsgTxtField" + __reg3].htmlText = "Invalid information";
                }
                this.markFieldInvalid(__reg3);
            }
            if (this.txtFieldErrors[__reg2].fieldName == "box_id") 
            {
                __reg4 = "box_id";
                this.displayBoxIdError(__reg2);
                break;
            }
            else if (this.txtFieldErrors[__reg2].fieldName == "email") 
            {
                __reg5 = __reg2;
                __reg4 = "email";
            }
            ++__reg2;
        }
        if (__reg4 != "box_id" && __reg4 != "email") 
        {
            this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_INFORMATION);
        }
        else if (__reg4 == "email") 
        {
            this.displayEmailError(__reg5);
        }
        __reg3 = null;
        __reg5 = null;
        __reg4 = null;
    }

    function displayBoxIdError(errorIdx)
    {
        this.displayMessage(this.txtFieldErrors[errorIdx].errorStr);
    }

    function displayEmailError(errorIdx)
    {
        var __reg8 = this.boxRegBaseMC.createEmptyMovieClip("emailErrorPopup", this.boxRegBaseMC.getNextHighestDepth());
        var __reg2 = __reg8.attachMovie("popup", "errorPopupMC", __reg8.getNextHighestDepth());
        __reg2._x = this.txtFieldBaseMC._x + (this.txtFieldBaseMC._width - __reg2._width) / 2;
        __reg2._y = this.txtFieldBaseMC._y;
        var __reg7 = __reg2.createTextField("errorTxtField", __reg2.getNextHighestDepth(), 10, 10, __reg2._width - 20, __reg2._height - 30);
        __reg7.autoSize = true;
        __reg7.wordWrap = true;
        __reg7.setNewTextFormat(this.popupTextFormat);
        __reg7.htmlText = this.txtFieldErrors[errorIdx].errorStr;
        this.yesBtnMC = __reg2.attachMovie("infoBtnDis", "yesBtnMC", __reg2.getNextHighestDepth());
        this.yesBtnMC._x = __reg2._width / 2 - (this.btnWidth + 20);
        this.yesBtnMC._y = __reg2._height - this.btnHeight - 20;
        this.noBtnMC = __reg2.attachMovie("infoBtnDis", "noBtnMC", __reg2.getNextHighestDepth());
        this.noBtnMC._x = __reg2._width / 2 + 20;
        this.noBtnMC._y = __reg2._height - this.btnHeight - 20;
        this.enbBtnMC = __reg2.attachMovie("infoBtnEnb", "enbBtnMC", __reg2.getNextHighestDepth());
        this.enbBtnMC._x = this.noBtnMC._x;
        this.enbBtnMC._y = this.noBtnMC._y;
        var __reg6 = __reg2.createTextField("yesBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg6.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg6.setNewTextFormat(this.btnTextFormat);
        __reg6.htmlText = "Yes";
        __reg6._x = this.yesBtnMC._x + (this.yesBtnMC._width - __reg6._width) / 2;
        __reg6._y = this.yesBtnMC._y + (this.yesBtnMC._height - __reg6._height) / 2;
        var __reg4 = __reg2.createTextField("yesBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg4.setNewTextFormat(this.btnTextFormat);
        __reg4.htmlText = "Yes";
        __reg4._x = this.yesBtnMC._x + (this.yesBtnMC._width - __reg4._width) / 2;
        __reg4._y = this.yesBtnMC._y + (this.yesBtnMC._height - __reg4._height) / 2;
        __reg4._visible = false;
        var __reg5 = __reg2.createTextField("noBtnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        this.btnTextFormat.color = 0;
        __reg5.setNewTextFormat(this.btnTextFormat);
        __reg5.htmlText = "No";
        __reg5._x = this.noBtnMC._x + (this.noBtnMC._width - __reg5._width) / 2;
        __reg5._y = this.noBtnMC._y + (this.noBtnMC._height - __reg5._height) / 2;
        var __reg3 = __reg2.createTextField("noBtnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg3.autoSize = true;
        this.btnTextFormat.color = 3092271;
        __reg3.setNewTextFormat(this.btnTextFormat);
        __reg3.htmlText = "No";
        __reg3._x = this.noBtnMC._x + (this.noBtnMC._width - __reg3._width) / 2;
        __reg3._y = this.noBtnMC._y + (this.noBtnMC._height - __reg3._height) / 2;
        __reg3._visible = false;
        this.keyListener.onKeyDown = this.fn.onPopupKeyDown;
        this.emailErrorPopupEnabled = true;
        this.btnHighlight(this.noBtnMC);
        __reg8 = null;
        __reg2 = null;
        __reg7 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        __reg3 = null;
    }

    function getFieldIdx(fieldName)
    {
        var __reg3 = -1;
        var __reg2 = 0;
        while (__reg2 < this.txtFieldItems.length) 
        {
            if (this.txtFieldItems[__reg2].fieldName == fieldName) 
            {
                __reg3 = __reg2;
                break;
            }
            ++__reg2;
        }
        return __reg3;
    }

    function displayBackBtn()
    {
        this.currBtn = 2;
        this.btnHighlight(this.backBtnMC);
    }

    function displayProceedBtn()
    {
        this.currBtn = 3;
        this.btnHighlight(this.proceedBtnMC);
    }

    function btnHighlight(btnMC)
    {
        this.boxRegBaseMC.helpCommentsTextField.htmlText = "";
        if (this.currPopupBtn == 0) 
        {
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.yesBtnTextEnb._visible = true;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.yesBtnTextDis._visible = false;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.noBtnTextEnb._visible = false;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.noBtnTextDis._visible = true;
            this.enbBtnMC._x = this.yesBtnMC._x;
        }
        else if (this.currPopupBtn == 1) 
        {
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.yesBtnTextEnb._visible = false;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.yesBtnTextDis._visible = true;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.noBtnTextEnb._visible = true;
            this.boxRegBaseMC.emailErrorPopup.errorPopupMC.noBtnTextDis._visible = false;
            this.enbBtnMC._x = this.noBtnMC._x;
        }
        if (this.currBtn == 0) 
        {
            this.enableBtnMC._visible = true;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextDis._visible = true;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextEnb._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextEnb._visible = true;
            this.enableBtnMC._x = this.submitBtnMC._x;
        }
        else if (this.currBtn == 1) 
        {
            this.enableBtnMC._visible = true;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextEnb._visible = true;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextDis._visible = true;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextEnb._visible = false;
            this.enableBtnMC._x = this.cancelBtnMC._x;
        }
        else if (this.currBtn == 2) 
        {
            this.enableBtnMC._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextEnb._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextEnb._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.backBtnText._visible = true;
            this.submitBtnMC._visible = false;
            this.cancelBtnMC._visible = false;
            this.proceedBtnMC._visible = false;
            this.backBtnMC._visible = true;
        }
        else if (this.currBtn == 3) 
        {
            this.enableBtnMC._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.cancelBtnTextEnb._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextDis._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.submitBtnTextEnb._visible = false;
            this.boxRegBaseMC.txtFieldBtnBaseMC.proceedBtnText._visible = true;
            this.submitBtnMC._visible = false;
            this.cancelBtnMC._visible = false;
            this.backBtnMC._visible = false;
            this.proceedBtnMC._visible = true;
        }
        btnMC = null;
    }

    function btnHighlighted()
    {
        if (this.fieldSelectorMC._visible) 
        {
            return false;
        }
        return true;
    }

    function scrollForm(yPos, down)
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.txtFieldBaseMC.onTweenComplete = this.fn.onScrollComplete;
        this.txtFieldBaseMC.tween("_y", this.txtFieldBaseMC._y + yPos, 1, "linear");
        if (down) 
        {
            this.fieldStartIdx = this.fieldStartIdx + this.maxItems;
            this.displayArrows();
            return;
        }
        this.fieldStartIdx = this.fieldStartIdx - this.maxItems;
        this.displayArrows();
    }

    function onScrollComplete()
    {
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function onKeyDown()
    {
        this.displayMessage("");
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currBtn != 2 && this.currBtn != 3) 
            {
                if (this.btnHighlighted()) 
                {
                    if (this.currBtn == 0) 
                    {
                        this.currBtn = 1;
                        this.btnHighlight(this.cancelBtnMC);
                    }
                }
                else if (this.currField != this.lastFieldIdx) 
                {
                    ++this.currField;
                    this.highlightField();
                }
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currBtn != 2 && this.currBtn != 3) 
            {
                if (this.btnHighlighted()) 
                {
                    if (this.currBtn == 1) 
                    {
                        this.currBtn = 0;
                        this.btnHighlight(this.submitBtnMC);
                    }
                }
                else if (this.currField != 0) 
                {
                    --this.currField;
                    this.highlightField();
                }
            }
            return;
        }
        else if (__reg0 === 40) 
        {
            if (this.currBtn != 2 && this.currBtn != 3) 
            {
                if (this.currField <= this.lastFieldIdx) 
                {
                    if (this.incompleteInfo) 
                    {
                        this.txtFieldBaseMC["fieldInvalidMC" + this.currField]._visible = true;
                    }
                    ++this.currField;
                    if (this.currField <= this.lastFieldIdx) 
                    {
                        if (this.currField > this.fieldStartIdx + (this.maxItems - 1)) 
                        {
                            this.scrollForm(0 - this.maskHeight, true);
                        }
                        this.highlightField();
                    }
                    else 
                    {
                        this.fieldSelectorMC._visible = false;
                        --this.currField;
                        this.currBtn = 0;
                        this.btnHighlight(this.submitBtnMC);
                    }
                }
            }
            return;
        }
        else if (__reg0 === 38) 
        {
            if (this.currBtn != 2 && this.currBtn != 3) 
            {
                if (this.btnHighlighted()) 
                {
                    this.unHighlightAllBtn();
                    if (this.currBtn == 0 || this.currBtn == 1) 
                    {
                        this.highlightField();
                    }
                    this.fieldSelectorMC._visible = true;
                }
                else if (this.currField > 0) 
                {
                    if (this.incompleteInfo) 
                    {
                        this.txtFieldBaseMC["fieldInvalidMC" + this.currField]._visible = true;
                    }
                    --this.currField;
                    if (this.currField >= 0) 
                    {
                        if (this.currField < this.fieldStartIdx) 
                        {
                            this.scrollForm(this.maskHeight, false);
                        }
                        this.highlightField();
                    }
                    else 
                    {
                        ++this.currField;
                    }
                }
            }
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.btnHighlighted()) 
            {
                if (this.currBtn == 0) 
                {
                    if (this.netStatus == "Up") 
                    {
                        if (this.isRegFormValid()) 
                        {
                            this.incompleteInfo = false;
                            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                            this.displayLoadingMC();
                            this.postInfoToServer(false);
                        }
                        else 
                        {
                            this.incompleteInfo = true;
                            this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.ENTER_VALID_INFORMATION);
                        }
                    }
                    else 
                    {
                        this.displayMessage(this.netErrorStr);
                    }
                }
                else if (this.currBtn == 1 || this.currBtn == 2) 
                {
                    this.onRegistrationCancel.notify();
                }
                else if (this.currBtn == 3) 
                {
                    this.onRegistrationDone.notify();
                }
            }
            else 
            {
                this.getInfoFromUser();
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        return;
    }

    function onPopupKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currPopupBtn == 0) 
            {
                this.currPopupBtn = 1;
                this.btnHighlight(this.noBtnMC);
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currPopupBtn == 1) 
            {
                this.currPopupBtn = 0;
                this.btnHighlight(this.yesBtnMC);
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.currPopupBtn == 0) 
        {
            if (this.netStatus == "Up") 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.displayLoadingMC();
                this.postInfoToServer(true);
            }
            else 
            {
                this.displayMessage(this.netErrorStr);
            }
        }
        else if (this.currPopupBtn == 1) 
        {
            removeMovieClip(this.boxRegBaseMC.emailErrorPopup);
            this.keyListener.onKeyDown = this.fn.onKeyDown;
        }
        this.emailErrorPopupEnabled = false;
        return;
    }

    function isRegFormValid()
    {
        var __reg3 = true;
        var __reg2 = 0;
        while (__reg2 < this.txtFieldItems.length) 
        {
            if (this.txtFieldItems[__reg2].fieldType != "hidden") 
            {
                if (!this.isStringValid(this.txtFieldBaseMC["inputTxtField" + __reg2].htmlText, __reg2)) 
                {
                    __reg3 = false;
                }
            }
            ++__reg2;
        }
        return __reg3;
    }

    function displayLoadingMC()
    {
        var __reg2 = this.parentMC.attachMovie("loading", "loadingMC", this.parentMC.getNextHighestDepth(), {_x: 640, _y: 360, _width: 100, _height: 100});
        __reg2 = null;
    }

    function removeLoadingMC()
    {
        if (this.parentMC.loadingMC != null) 
        {
            removeMovieClip(this.parentMC.loadingMC);
        }
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

}

//Sprite 735
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Utils.EmailValidator extends String
{
    var ASCII_ALLOWED = [[39, 39], [43, 43], [45, 57], [61, 61], [63, 63], [65, 90], [94, 95], [97, 123], [125, 126]];
    var after_arr;
    var email_arr;
    var i;
    var j;
    var str_len;

    function EmailValidator()
    {
        super();
    }

    function validate(inputString)
    {
        if (inputString.length < 1) 
        {
            return false;
        }
        this.email_arr = inputString.split("@");
        if (this.email_arr.length != 2) 
        {
            return false;
        }
        if (this.isNumeric(this.email_arr[0].charAt(0)) || this.isStringEmpty(this.email_arr[0].charAt(0))) 
        {
            return false;
        }
        if (this.checkStringForInt(this.email_arr[1])) 
        {
            return false;
        }
        this.after_arr = this.email_arr[1].split(".");
        if (this.after_arr[this.after_arr.length - 1].length < 2 || this.after_arr[this.after_arr.length - 1].length > 4) 
        {
            return false;
        }
        if (!this.ValidateString(this.email_arr[0].toString()) || !this.ValidateString(this.email_arr[1].toString())) 
        {
            return false;
        }
        return true;
    }

    function ValidateString(_str)
    {
        this.str_len = _str.length;
        this.i = 0;
        while (this.i < this.str_len) 
        {
            if (!this.CheckUsedCharacter(_str.charCodeAt(this.i))) 
            {
                return false;
            }
            ++this.i;
        }
        return true;
    }

    function CheckUsedCharacter(_chr)
    {
        this.j = 0;
        while (this.j < this.ASCII_ALLOWED.length) 
        {
            if (_chr >= this.ASCII_ALLOWED[this.j][0] && _chr <= this.ASCII_ALLOWED[this.j][1]) 
            {
                return true;
            }
            ++this.j;
        }
        return false;
    }

    function checkStringForInt(inputStr)
    {
        var __reg4 = false;
        var __reg2 = 0;
        while (__reg2 < inputStr.length) 
        {
            if (this.isNumeric(inputStr.charAt(__reg2))) 
            {
                __reg4 = true;
                break;
            }
            ++__reg2;
        }
        return __reg4;
    }

    function isNumeric(num)
    {
        return !isNaN(parseInt(num));
    }

    function isStringEmpty(num)
    {
        return num == "" ? true : false;
    }

}

//Sprite 736
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Application.Disclaimer
{
    var parentMC = null;
    var disclaimerBaseMC = null;
    var disclaimerTxtMC = null;
    var disclaimerTxtMaskMC = null;
    var onDisclaimerEvent = null;
    var msgBox = null;
    var keyListener = null;
    var netStatus: String = "Up";
    var msgText = null;
    var currBtn: Number = 0;
    var textFormat = null;
    var btnIdx: Number = 0;
    var buttons = null;

    function Disclaimer()
    {
        this.onDisclaimerEvent = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = mx.utils.Delegate.create(this, this.onKeyDown);
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        this.keyListener.onKeyDown = null;
        delete this.keyListener;
        this.keyListener = null;
        if (this.disclaimerBaseMC != null) 
        {
            removeMovieClip(this.disclaimerBaseMC);
        }
        delete this.onDisclaimerEvent;
        this.onDisclaimerEvent = null;
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.buttons != null) 
        {
            delete this.buttons;
            this.buttons = null;
        }
        this.disclaimerTxtMC = null;
        this.disclaimerTxtMaskMC = null;
        this.disclaimerBaseMC = null;
        this.parentMC = null;
    }

    function addListener(obj, method)
    {
        this.onDisclaimerEvent.addListener(obj, method);
        obj = null;
        method = null;
    }

    function removeListener(obj, method)
    {
        this.onDisclaimerEvent.removeListener(obj, method);
        obj = null;
        method = null;
    }

    function onNetStatusUpdate(netStatus)
    {
        this.netStatus = netStatus;
        netStatus = null;
    }

    function displayDisclaimer(parentMC)
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.parentMC = parentMC;
        this.disclaimerBaseMC = parentMC.createEmptyMovieClip("disclaimerBaseMC", parentMC.getNextHighestDepth());
        var __reg9 = this.disclaimerBaseMC.attachMovie("backgroundMC", "disclaimerInfoBgMC", this.disclaimerBaseMC.getNextHighestDepth());
        this.setTxtFormat("Arial", "left", 40, false, 16777215);
        var __reg8 = this.disclaimerBaseMC.createTextField("titleTxt", this.disclaimerBaseMC.getNextHighestDepth(), 100, 40, 0, 0);
        __reg8.autoSize = true;
        __reg8.setNewTextFormat(this.textFormat);
        __reg8.htmlText = "Disclaimer";
        this.setTxtFormat("Arial", "left", 30, false, 16777215);
        var __reg2 = this.disclaimerBaseMC.attachMovie("maskMC", "disclaimerTxtBgMC", this.disclaimerBaseMC.getNextHighestDepth());
        __reg2._width = 980;
        __reg2._height = 375;
        __reg2._x = (1280 - __reg2._width) / 2;
        __reg2._y = (720 - __reg2._height) / 2;
        var __reg6 = this.disclaimerBaseMC.attachMovie("upArrowEnb", "upArrowMC", this.disclaimerBaseMC.getNextHighestDepth());
        __reg6._x = __reg2._x + __reg2._width - __reg6._width - 10;
        __reg6._y = __reg2._y + 10;
        __reg6._visible = false;
        var __reg7 = this.disclaimerBaseMC.attachMovie("downArrowEnb", "downArrowMC", this.disclaimerBaseMC.getNextHighestDepth());
        __reg7._x = __reg6._x;
        __reg7._y = __reg2._y + __reg2._height - __reg7._height - 10;
        __reg7._visible = false;
        var __reg4 = this.disclaimerBaseMC.createEmptyMovieClip("disclaimerTxtBaseMC", this.disclaimerBaseMC.getNextHighestDepth());
        __reg4._x = __reg2._x + 20;
        __reg4._y = __reg2._y + 20;
        this.disclaimerTxtMC = __reg4.createEmptyMovieClip("disclaimerTxtMC", __reg4.getNextHighestDepth());
        this.disclaimerTxtMaskMC = __reg4.attachMovie("maskMC", "disclaimerTxtMaskMC", __reg4.getNextHighestDepth());
        this.disclaimerTxtMaskMC._width = __reg2._width - 30;
        this.disclaimerTxtMaskMC._height = __reg2._height - 20;
        __reg4.setMask(this.disclaimerTxtMaskMC);
        this.setTxtFormat("Arial", "left", 30, false, 8750469);
        var __reg5 = this.disclaimerTxtMC.createTextField("changesTitleTxt", this.disclaimerTxtMC.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = true;
        __reg5.setNewTextFormat(this.textFormat);
        __reg5.htmlText = "Note: ";
        this.setTxtFormat("Arial", "left", 30, false, 16777215);
        var __reg3 = this.disclaimerTxtMC.createTextField("changesTxt", this.disclaimerTxtMC.getNextHighestDepth(), 0, __reg5._y + __reg5._height, this.disclaimerTxtMaskMC._width - 10, 0);
        __reg3.wordWrap = true;
        __reg3.autoSize = true;
        __reg3.setNewTextFormat(this.textFormat);
        __reg3.multiline = true;
        __reg3.html = true;
        __reg3.htmlText = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.disclaimerText;
        __reg3._height = __reg3.textHeight;
        this.setTxtFormat("Arial", "left", 30, false, 8750469);
        this.buttons = new Array();
        this.buttons.push("Accept");
        this.buttons.push("Decline");
        this.displayButtons();
        this.createMsgField();
        this.adjustArrows();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        __reg3 = null;
        __reg5 = null;
        __reg4 = null;
        __reg6 = null;
        __reg7 = null;
        __reg2 = null;
        __reg8 = null;
        this.textFormat = null;
        __reg9 = null;
    }

    function displayButtons()
    {
        var __reg8 = 50;
        var __reg5 = 0;
        while (__reg5 < this.buttons.length) 
        {
            var __reg2 = this.disclaimerBaseMC.createEmptyMovieClip("btnBaseMC" + __reg5, this.disclaimerBaseMC.getNextHighestDepth());
            var __reg6 = __reg2.attachMovie("infoBtnDis", "btnBgMC", __reg2.getNextHighestDepth());
            __reg2._x = 800;
            __reg2._x = __reg2._x + __reg5 * (__reg8 + __reg2._width);
            __reg2._y = this.disclaimerBaseMC.disclaimerTxtBgMC._y + this.disclaimerBaseMC.disclaimerTxtBgMC._height + 55;
            var __reg7 = __reg2.attachMovie("infoBtnEnb", "btnHighlightMC", __reg2.getNextHighestDepth());
            __reg7._visible = false;
            this.setTxtFormat("Arial", "center", 28, false, 0);
            var __reg4 = __reg2.createTextField("btnTextEnb", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
            __reg4.autoSize = true;
            __reg4.setNewTextFormat(this.textFormat);
            __reg4.htmlText = this.buttons[__reg5];
            __reg4._x = (__reg6._width - __reg4._width) / 2;
            __reg4._y = (__reg6._height - __reg4._height) / 2;
            this.setTxtFormat("Arial", "center", 28, false, 3092271);
            var __reg3 = __reg2.createTextField("btnTextDis", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
            __reg3.autoSize = true;
            __reg3.setNewTextFormat(this.textFormat);
            __reg3.htmlText = this.buttons[__reg5];
            __reg3._x = (__reg6._width - __reg3._width) / 2;
            __reg3._y = (__reg6._height - __reg3._height) / 2;
            __reg4 = null;
            __reg3 = null;
            __reg7 = null;
            __reg2 = null;
            __reg6 = null;
            ++__reg5;
        }
        this.btnHighlight(this.btnIdx);
    }

    function setTxtFormat(fontName, align, size, bold, color)
    {
        if (this.textFormat != null) 
        {
            delete this.textFormat;
            this.textFormat = null;
        }
        this.textFormat = new TextFormat();
        this.textFormat.font = fontName;
        this.textFormat.align = align;
        this.textFormat.size = size;
        this.textFormat.bold = bold;
        this.textFormat.color = color;
        fontName = null;
        align = null;
        size = null;
        bold = null;
        color = null;
    }

    function btnHighlight(btnIdx)
    {
        this.btnIdx = btnIdx;
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnHighlightMC._visible = true;
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnTextEnb._visible = true;
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnTextDis._visible = false;
    }

    function btnUnHighlight(btnIdx)
    {
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnHighlightMC._visible = false;
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnTextDis._visible = true;
        this.disclaimerBaseMC["btnBaseMC" + btnIdx].btnTextEnb._visible = false;
    }

    function moveTextUp()
    {
        if (this.disclaimerTxtMC._y < this.disclaimerTxtMaskMC._y) 
        {
            this.disclaimerTxtMC._y = this.disclaimerTxtMC._y + 40;
            if (this.disclaimerTxtMC._y > this.disclaimerTxtMaskMC._y) 
            {
                this.disclaimerTxtMC._y = this.disclaimerTxtMaskMC._y;
            }
            this.adjustArrows();
        }
    }

    function moveTextDown()
    {
        if (this.disclaimerTxtMC._y + this.disclaimerTxtMC._height > this.disclaimerTxtMaskMC._y + this.disclaimerTxtMaskMC._height) 
        {
            this.disclaimerTxtMC._y = this.disclaimerTxtMC._y - 40;
            if (this.disclaimerTxtMC._y + this.disclaimerTxtMC._height < this.disclaimerTxtMaskMC._y + this.disclaimerTxtMaskMC._height) 
            {
                this.disclaimerTxtMC._y = this.disclaimerTxtMaskMC._y + this.disclaimerTxtMaskMC._height - this.disclaimerTxtMC._height;
            }
            this.adjustArrows();
        }
    }

    function adjustArrows()
    {
        if (this.disclaimerTxtMC._y >= this.disclaimerTxtMaskMC._y) 
        {
            this.disclaimerBaseMC.upArrowMC._visible = false;
        }
        else 
        {
            this.disclaimerBaseMC.upArrowMC._visible = true;
        }
        if (int(this.disclaimerTxtMC._y + this.disclaimerTxtMC._height) <= int(this.disclaimerTxtMaskMC._y + this.disclaimerTxtMaskMC._height)) 
        {
            this.disclaimerBaseMC.downArrowMC._visible = false;
            return;
        }
        this.disclaimerBaseMC.downArrowMC._visible = true;
    }

    function createMsgField()
    {
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        var __reg2 = new TextFormat();
        __reg2.align = "left";
        __reg2.font = "Arial";
        __reg2.bold = false;
        __reg2.size = 28;
        __reg2.color = 15441692;
        var __reg3 = this.disclaimerBaseMC.createEmptyMovieClip("msgBaseMC", this.disclaimerBaseMC.getNextHighestDepth());
        this.msgText.createTextField(__reg3, 0, 0, 300, 40, "false");
        this.msgText.setTextFormat(__reg2);
        this.msgText.setY(this.disclaimerBaseMC["btnBaseMC" + this.btnIdx]._y);
        this.msgText.setX(this.disclaimerBaseMC.disclaimerTxtBgMC._x);
        this.msgText.setWidth(590);
    }

    function onKeyDown()
    {
        this.msgText.setHtmlText("");
        if ((__reg0 = Key.getCode()) === 38) 
        {
            this.moveTextUp();
            return;
        }
        else if (__reg0 === 40) 
        {
            this.moveTextDown();
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.btnIdx > 0) 
            {
                this.btnUnHighlight(this.btnIdx);
                this.btnHighlight(this.btnIdx - 1);
            }
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.btnIdx < this.buttons.length - 1) 
            {
                this.btnUnHighlight(this.btnIdx);
                this.btnHighlight(this.btnIdx + 1);
            }
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.netStatus == "Up") 
            {
                if (this.buttons[this.btnIdx] == "Accept") 
                {
                    var __reg3 = new XML();
                    var __reg2 = com.jadoo.as2.JadooPlus.UserInfo.UserProfile.disclaimerAckLink + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
                    trace("URL : " + __reg2);
                    __reg3.load(__reg2);
                    this.onDisclaimerEvent.notify("Accept");
                }
                else if (this.buttons[this.btnIdx] == "Decline") 
                {
                    this.onDisclaimerEvent.notify("Decline");
                }
            }
            else 
            {
                this.msgText.setHtmlText(com.jadoo.as2.JadooPlus.Utils.Messages.NETWORK_LINK_DOWN);
                this.msgText.enable(false, 2000);
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.onDisclaimerEvent.notify("Decline");
        return;
    }

}

//Sprite 737
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Features.NavHistory
{
    static var pages = null;

    function NavHistory()
    {
    }

    static function createHistory()
    {
        if (com.jadoo.as2.JadooPlus.Features.NavHistory.pages != null) 
        {
            delete com.jadoo.as2.JadooPlus.Features.NavHistory.pages;
        }
        com.jadoo.as2.JadooPlus.Features.NavHistory.pages = new Array();
    }

    static function deleteHistory()
    {
        delete com.jadoo.as2.JadooPlus.Features.NavHistory.pages;
        com.jadoo.as2.JadooPlus.Features.NavHistory.pages = null;
    }

    static function addPage(pageHistory)
    {
        com.jadoo.as2.JadooPlus.Features.NavHistory.pages.push(pageHistory);
    }

    static function getLastPage()
    {
        if (com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length == 0) 
        {
            return null;
        }
        return com.jadoo.as2.JadooPlus.Features.NavHistory.pages[com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length - 1];
    }

    static function deleteLastPage()
    {
        var __reg1 = null;
        if (com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length != 0) 
        {
            __reg1 = com.jadoo.as2.JadooPlus.Features.NavHistory.pages.pop();
        }
        false;
        __reg1 = null;
    }

    static function isEmpty()
    {
        if (com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length == 0) 
        {
            return true;
        }
        return false;
    }

    static function getHistoryPages()
    {
        return com.jadoo.as2.JadooPlus.Features.NavHistory.pages;
    }

    static function getPageCount()
    {
        return com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length;
    }

    static function getPageByIdx(idx)
    {
        var __reg1 = null;
        do 
        {
            __reg1 = com.jadoo.as2.JadooPlus.Features.NavHistory.pages.pop();
        }
        while (idx != com.jadoo.as2.JadooPlus.Features.NavHistory.pages.length);
        return __reg1;
    }

}

//Sprite 738
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierViews.ThreeTierView extends com.jadoo.as2.JadooPlus.Views.TierViews.ParentView
{
    var threeTierPage = null;
    var loadingViewMC = null;
    var historyObject = null;
    var previousPage: Boolean = false;
    var searching = null;
    var createSearchColorBtn;
    var disableSystemEventsListener;
    var disableView;
    var displayMessage;
    var enableSystemEventsListener;
    var enableView;
    var keyListener;
    var onAppRestart;
    var onEnterItem;
    var onPageBack;
    var pageAds;
    var parentMC;
    var removeAds;
    var removeLoadingClip;
    var showAdsOnPage;
    var showLoadingClip;
    var tier;
    var viewBaseMC;
    var viewMC;

    function ThreeTierView()
    {
        super();
        this.threeTierPage = new com.jadoo.as2.JadooPlus.Views.Page.ThreeTierPage();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseThreeTierPageInfo(this.threeTierPage);
    }

    function getTier1CurrentItemIdx()
    {
        return this.threeTierPage.tier1.getSelectedItemIdx();
    }

    function getTier1ItemsStartIdx()
    {
        return this.threeTierPage.tier1.getItemStartIdx();
    }

    function getTier2CurrentItemIdx()
    {
        return this.threeTierPage.tier2.getSelectedItemIdx();
    }

    function getTier2ItemsStartIdx()
    {
        return this.threeTierPage.tier2.getItemStartIdx();
    }

    function getTier3CurrentItemIdx()
    {
        return this.threeTierPage.tier3.getCurrentItemIdx();
    }

    function getTier3ItemsStartIdx()
    {
        return this.threeTierPage.tier3.getItemStartIdx();
    }

    function create(parentMC, viewBaseMC, pageUrl, historyObject, cache)
    {
        super.create(parentMC, viewBaseMC, pageUrl, this.threeTierPage, cache);
        this.historyObject = historyObject;
        if (historyObject != null) 
        {
            this.previousPage = true;
        }
        this.threeTierPage.tier1.addListener("onTierEvent", this, this.onTier1Event);
        this.threeTierPage.tier2.addListener("onTierEvent", this, this.onTier2Event);
        this.threeTierPage.tier3.addListener("onTierEvent", this, this.onTier3Event);
        if (historyObject.wasSearchEnabled) 
        {
            this.searching = new com.jadoo.as2.JadooPlus.Features.Search();
            this.searching.addListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.create(parentMC, this.threeTierPage.pageTitle, this.threeTierPage.searchHelpLink, this.threeTierPage.searchResultsLink, historyObject.searchString);
        }
        else 
        {
            if (this.threeTierPage.tier1.totalItems > 0) 
            {
                this.threeTierPage.tier1.create(parentMC, viewBaseMC, this.viewMC, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString(), this.threeTierPage.tier3.contentType, this.threeTierPage.searchHelpLink, this.threeTierPage.searchResultsLink);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.THREETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW_ON_PAGE);
            }
            if (this.threeTierPage.isAdView == true) 
            {
                this.showAdsOnPage(parentMC);
            }
        }
        parentMC = null;
        viewBaseMC = null;
        pageUrl = null;
        historyObject = null;
        cache = null;
    }

    function destroy()
    {
        this.threeTierPage.tier1.removeListener("onTierEvent", this, this.onTier1Event);
        this.threeTierPage.tier2.removeListener("onTierEvent", this, this.onTier2Event);
        this.threeTierPage.tier3.removeListener("onTierEvent", this, this.onTier3Event);
        this.historyObject = null;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.destroy();
        if (this.threeTierPage != null) 
        {
            this.threeTierPage.destroy();
            delete this.threeTierPage;
            this.threeTierPage = null;
        }
        if (this.searching != null) 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
        }
        if (this.viewBaseMC.loadingMC != undefined) 
        {
            removeMovieClip(this.viewBaseMC.loadingMC);
        }
        this.loadingViewMC = null;
        super.destroy();
    }

    function onTier1Event()
    {
        var __reg5 = arguments[0];
        if ((__reg0 = __reg5) === "onHighlightItem") 
        {
            this.threeTierPage.tier2.hideTier();
            if (this.previousPage) 
            {
                this.threeTierPage.tier1.disable();
                this.threeTierPage.tier2.setCurrentItemIdx(this.historyObject.tier2ItemStartIdx);
                this.threeTierPage.tier2.draw(this.historyObject.tier2ItemStartIdx, arguments[4], arguments[5], true, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString());
            }
            else 
            {
                if (this.threeTierPage.tier2.getCurrentItemItemsLink() != arguments[5]) 
                {
                    this.threeTierPage.tier2.setCurrentItemIdx(0);
                }
                this.threeTierPage.tier2.draw(0, arguments[4], arguments[5], false, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString());
            }
        }
        else if (__reg0 === "onPageChange") 
        {
            this.threeTierPage.tier2.terminateDisplay();
            this.threeTierPage.tier2.hideTier();
        }
        else if (__reg0 === "onReady") 
        {
            this.threeTierPage.tier2.create(this.parentMC, this.viewBaseMC, this.viewMC, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString(), null, this.threeTierPage.searchHelpLink, this.threeTierPage.searchResultsLink);
        }
        else if (__reg0 === "onDisplayItems") 
        {
            if (_global.currentApplication != "MyJadoo") 
            {
                this.createSearchColorBtn();
            }
            if (this.previousPage) 
            {
                this.threeTierPage.tier1.setCurrentItemIdx(this.historyObject.tier1ItemHighlightIdx);
                this.threeTierPage.tier1.selectItem(this.historyObject.tier1ItemHighlightIdx);
            }
            else 
            {
                this.threeTierPage.tier1.enable();
                this.threeTierPage.tier1.selectItem(0);
            }
        }
        else if (__reg0 === "onLooseFocus") 
        {
            if (this.threeTierPage.tier2.getItemsCount() > 0 && !this.threeTierPage.tier2.isHidden()) 
            {
                this.threeTierPage.tier1.disable();
                this.threeTierPage.tier2.enable();
                this.threeTierPage.tier1.updateListing(this.threeTierPage.tier1.getSelectedItemIdx());
            }
        }
        else if (__reg0 === "onDisplayMessage") 
        {
            var __reg4 = arguments[1];
            this.displayMessage(__reg4);
            __reg4 = null;
        }
        else if (__reg0 === "onReturnKey") 
        {
            this.tier = "Tier1";
            this.threeTierPage.tier1.disable();
            this.onPageBackCallback();
        }
        else if (__reg0 === "onEnableView") 
        {
            this.enableView();
        }
        else if (__reg0 === "onDisableView") 
        {
            this.disableView();
        }
        else if (__reg0 === "onStartPlayback") 
        {
            this.disableSystemEventsListener();
        }
        else if (__reg0 === "onStopPlayback") 
        {
            this.enableSystemEventsListener();
        }
        else if (__reg0 === "onPopup") 
        {
            this.threeTierPage.tier2.hideTier();
        }
        else if (__reg0 === "onSearchPressed") 
        {
            this.threeTierPage.tier1.disable();
            this.tier = "Tier1Search";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "onAppRestart") 
        {
            this.threeTierPage.tier1.disable();
            this.onAppRestart.notify();
        }
        else if (__reg0 === "onRemovePopup") 
        {
            this.previousPage = false;
        }
        else if (__reg0 === "onPageAdEnable") 
        {
            if (this.threeTierPage.isAdView == true && this.pageAds.adVisible == true) 
            {
                this.threeTierPage.tier1.onPageAdEnterKey(this.pageAds.getPageAdItem());
            }
        }
        __reg5 = null;
    }

    function onTier2Event()
    {
        var __reg5 = arguments[0];
        if ((__reg0 = __reg5) === "onHighlightItem") 
        {
            this.threeTierPage.tier3.hideTier();
            if (this.previousPage) 
            {
                this.threeTierPage.tier2.disable();
                this.threeTierPage.tier3.setCurrentItemIdx(this.historyObject.tier3ItemStartIdx);
                this.threeTierPage.tier3.draw(arguments[1], this.threeTierPage.tier1.getSelectedItemIdx(), arguments[2], this.historyObject.tier3ItemStartIdx, arguments[4], arguments[5], arguments[6], this.previousPage, null, arguments[7], arguments[8], null, arguments[9]);
            }
            else 
            {
                if (this.threeTierPage.tier3.getCurrentItemItemsLink() != arguments[5]) 
                {
                    this.threeTierPage.tier3.setCurrentItemIdx(0);
                }
                this.threeTierPage.tier3.draw(arguments[1], this.threeTierPage.tier1.getSelectedItemIdx(), arguments[2], 0, arguments[4], arguments[5], arguments[6], this.previousPage, null, arguments[7], arguments[8], null, arguments[9]);
            }
        }
        else if (__reg0 === "onPageChange") 
        {
            var __reg6 = arguments[1];
            this.threeTierPage.tier3.terminateDisplay();
            this.threeTierPage.tier3.hideTier();
            this.threeTierPage.tier1.setCurrentItemsStartIdx(__reg6);
        }
        else if (__reg0 === "onReady") 
        {
            this.threeTierPage.tier3.create(this.parentMC, this.viewBaseMC, this.viewMC, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString(), null, this.threeTierPage.searchHelpLink, this.threeTierPage.searchResultsLink);
        }
        else if (__reg0 === "onDisplayItems") 
        {
            this.threeTierPage.tier2.showTier();
            if (this.previousPage) 
            {
                if (this.threeTierPage.tier2.getItemsCount() > 0) 
                {
                    this.threeTierPage.tier2.setCurrentItemIdx(this.historyObject.tier2ItemHighlightIdx);
                    this.threeTierPage.tier2.itemHighlight(this.historyObject.tier2ItemHighlightIdx);
                    this.threeTierPage.tier2.selectItem(this.historyObject.tier2ItemHighlightIdx);
                }
                else 
                {
                    this.previousPage = false;
                    this.threeTierPage.tier1.enable();
                }
            }
        }
        else if (__reg0 === "onLooseFocus") 
        {
            if (arguments[1] == 0) 
            {
                this.threeTierPage.tier2.disable("Tier1");
                this.threeTierPage.tier3.hideTier();
                this.threeTierPage.tier1.enable();
                this.threeTierPage.tier2.updateListing(this.threeTierPage.tier2.getSelectedItemIdx());
            }
            else if (arguments[1] == 1 && this.threeTierPage.tier3.getItemsCount() > 0 && !this.threeTierPage.tier3.isHidden()) 
            {
                this.threeTierPage.tier2.disable(this.threeTierPage.tier3.tierType);
                this.threeTierPage.tier3.enable();
                this.threeTierPage.tier2.updateListing(this.threeTierPage.tier2.getSelectedItemIdx());
            }
        }
        else if (__reg0 === "onDisplayMessage") 
        {
            var __reg4 = arguments[1];
            this.displayMessage(__reg4);
            __reg4 = null;
        }
        else if (__reg0 === "onReturnKey") 
        {
            this.tier = "Tier2";
            this.threeTierPage.tier2.disable("Tier1", true);
            this.onPageBackCallback();
        }
        else if (__reg0 === "onEnableView") 
        {
            this.enableView();
        }
        else if (__reg0 === "onDisableView") 
        {
            this.disableView();
        }
        else if (__reg0 === "onStartPlayback") 
        {
            this.disableSystemEventsListener();
        }
        else if (__reg0 === "onStopPlayback") 
        {
            this.enableSystemEventsListener();
        }
        else if (__reg0 === "onPopup") 
        {
            this.threeTierPage.tier3.hideTier();
        }
        else if (__reg0 === "onErrorLoading") 
        {
            if (this.previousPage) 
            {
                this.previousPage = false;
            }
            this.threeTierPage.tier2.disable();
            this.threeTierPage.tier1.enable();
            this.threeTierPage.tier1.unSelectItem(this.threeTierPage.tier1.getSelectedItemIdx());
        }
        else if (__reg0 === "onSearchPressed") 
        {
            this.threeTierPage.tier2.disable();
            this.tier = "Tier2Search";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "colorButtonEvent") 
        {
            super.colorButtonEvent(arguments[1], arguments[2], arguments[3]);
        }
        else if (__reg0 === "onAppRestart") 
        {
            this.threeTierPage.tier2.disable("Tier1");
            this.onAppRestart.notify();
        }
        else if (__reg0 === "onRemovePopup") 
        {
            this.previousPage = false;
        }
        else if (__reg0 === "onPageAdEnable") 
        {
            if (this.threeTierPage.isAdView == true && this.pageAds.adVisible == true) 
            {
                this.threeTierPage.tier2.onPageAdEnterKey(this.pageAds.getPageAdItem());
            }
        }
        __reg5 = null;
    }

    function onTier3Event()
    {
        var __reg5 = arguments[0];
        if ((__reg0 = __reg5) === "onPageChange") 
        {
            var __reg6 = arguments[1];
            this.threeTierPage.tier2.setCurrentItemsStartIdx(__reg6);
        }
        else if (__reg0 === "onReady") 
        {
            if (this.previousPage) 
            {
                this.threeTierPage.tier1.setCurrentItemIdx(this.historyObject.tier1ItemStartIdx);
                this.threeTierPage.tier1.draw(true, this.historyObject.tier1ItemStartIdx);
            }
            else 
            {
                this.threeTierPage.tier1.setCurrentItemIdx(0);
                this.threeTierPage.tier1.draw(false, 0);
            }
        }
        else if (__reg0 === "onDisplayItems") 
        {
            if (this.threeTierPage.tier3.isHidden()) 
            {
                this.threeTierPage.tier3.showTier();
            }
            if (this.previousPage) 
            {
                this.previousPage = false;
                if (this.threeTierPage.tier3.getItemsCount() > 0) 
                {
                    this.threeTierPage.tier3.itemUnHighlight(this.threeTierPage.tier3.getCurrentItemIdx());
                    this.threeTierPage.tier3.setCurrentItemIdx(this.historyObject.tier3ItemHighlightIdx);
                    this.threeTierPage.tier3.enable();
                }
                else 
                {
                    this.threeTierPage.tier2.enable();
                }
            }
        }
        else if (__reg0 === "onLooseFocus") 
        {
            this.threeTierPage.tier3.disable();
            this.threeTierPage.tier2.enable();
        }
        else if (__reg0 === "onDisplayMessage") 
        {
            var __reg4 = arguments[1];
            this.displayMessage(__reg4);
            __reg4 = null;
        }
        else if (__reg0 === "onReturnKey") 
        {
            this.tier = "Tier3";
            this.threeTierPage.tier3.disable(true);
            this.onPageBackCallback();
        }
        else if (__reg0 === "onEnableView") 
        {
            this.enableView();
        }
        else if (__reg0 === "onDisableView") 
        {
            this.disableView();
        }
        else if (__reg0 === "onStartPlayback") 
        {
            this.disableSystemEventsListener();
        }
        else if (__reg0 === "onStopPlayback") 
        {
            this.enableSystemEventsListener();
        }
        else if (__reg0 === "onSearchPressed") 
        {
            this.threeTierPage.tier3.disable(true);
            this.tier = "Tier3Search";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "onEnterKey") 
        {
            this.threeTierPage.tier3.disable(true);
            this.tier = "Tier3";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "onErrorLoading") 
        {
            if (this.previousPage) 
            {
                this.previousPage = false;
            }
            this.threeTierPage.tier3.disable();
            this.threeTierPage.tier2.enable();
            this.threeTierPage.tier2.unSelectItem(this.threeTierPage.tier2.getSelectedItemIdx());
        }
        else if (__reg0 === "colorButtonEvent") 
        {
            super.colorButtonEvent(arguments[1], arguments[2], arguments[3]);
        }
        else if (__reg0 === "onAppRestart") 
        {
            this.threeTierPage.tier3.disable();
            this.onAppRestart.notify();
        }
        else if (__reg0 === "onPageAdEnable") 
        {
            if (this.threeTierPage.isAdView == true && this.pageAds.adVisible == true) 
            {
                this.threeTierPage.tier3.onPageAdEnterKey(this.pageAds.getPageAdItem());
            }
        }
        __reg5 = null;
    }

    function onSearchEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "onSearchPressed") 
        {
            this.showLoadingClip();
            this.threeTierPage.tier1.setSelectedItemIdx(this.historyObject.tier1ItemHighlightIdx);
            this.threeTierPage.tier1.setCurrentItemsStartIdx(this.historyObject.tier1ItemStartIdx);
            this.threeTierPage.tier2.setSelectedItemIdx(this.historyObject.tier2ItemHighlightIdx);
            this.threeTierPage.tier2.setCurrentItemsStartIdx(this.historyObject.tier2ItemStartIdx);
            this.threeTierPage.tier3.setCurrentItemIdx(this.historyObject.tier3ItemHighlightIdx);
            this.threeTierPage.tier3.setCurrentItemsStartIdx(this.historyObject.tier3ItemStartIdx);
            this.tier = "ViewSearch";
            this.onEnterItem.notify(arguments[1], 0, true, arguments[2], false);
        }
        else if (__reg0 === "onCancelPressed") 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
            if (this.threeTierPage.tier1.totalItems > 0) 
            {
                this.threeTierPage.tier1.create(this.parentMC, this.viewBaseMC, this.viewMC, this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString(), this.threeTierPage.tier3.contentType, this.threeTierPage.searchHelpLink, this.threeTierPage.searchResultsLink);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.THREETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.threeTierPage.pageTitle, this.threeTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW_ON_PAGE);
            }
            if (this.threeTierPage.isAdView == true) 
            {
                this.showAdsOnPage(this.parentMC);
            }
        }
        __reg3 = null;
    }

    function onPageBackCallback()
    {
        this.onPageBack.notify();
    }

    function hideView()
    {
        if (this.threeTierPage.isAdView == true) 
        {
            this.removeAds();
        }
        this.viewMC._alpha = 50;
    }

    function restoreView()
    {
        if (this.threeTierPage.isAdView == true) 
        {
            this.showAdsOnPage(this.parentMC);
        }
        this.viewMC._alpha = 100;
        if (this.tier == "ViewSearch") 
        {
            this.removeLoadingClip();
            this.displayMessage("");
            this.searching.searchResultsLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier1Search") 
        {
            this.displayMessage("");
            this.threeTierPage.tier1.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier2Search") 
        {
            this.displayMessage("");
            this.threeTierPage.tier2.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier3Search") 
        {
            this.displayMessage("");
            this.threeTierPage.tier3.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier1") 
        {
            this.threeTierPage.tier1.enable();
            return;
        }
        if (this.tier == "Tier2") 
        {
            this.threeTierPage.tier2.enable();
            return;
        }
        if (this.tier == "Tier3") 
        {
            this.threeTierPage.tier3.enable();
        }
    }

}

//Sprite 739
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierViews.TwoTierView extends com.jadoo.as2.JadooPlus.Views.TierViews.ParentView
{
    var twoTierPage = null;
    var loadingViewMC = null;
    var historyObject = null;
    var previousPage: Boolean = false;
    var searching = null;
    var createSearchColorBtn;
    var disableSystemEventsListener;
    var disableView;
    var displayMessage;
    var enableSystemEventsListener;
    var enableView;
    var keyListener;
    var onAppRestart;
    var onEnterItem;
    var onPageBack;
    var pageAds;
    var parentMC;
    var removeAds;
    var removeLoadingClip;
    var showAdsOnPage;
    var showLoadingClip;
    var tier;
    var viewBaseMC;
    var viewMC;

    function TwoTierView()
    {
        super();
        this.twoTierPage = new com.jadoo.as2.JadooPlus.Views.Page.TwoTierPage();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseTwoTierPageInfo(this.twoTierPage);
    }

    function getTier1CurrentItemIdx()
    {
        return this.twoTierPage.tier1.getSelectedItemIdx();
    }

    function getTier1ItemsStartIdx()
    {
        return this.twoTierPage.tier1.getItemStartIdx();
    }

    function getTier2CurrentItemIdx()
    {
        return this.twoTierPage.tier2.getCurrentItemIdx();
    }

    function getTier2ItemsStartIdx()
    {
        return this.twoTierPage.tier2.getItemStartIdx();
    }

    function create(parentMC, viewBaseMC, pageUrl, historyObject, cache)
    {
        super.create(parentMC, viewBaseMC, pageUrl, this.twoTierPage, cache);
        this.historyObject = historyObject;
        if (historyObject != null) 
        {
            this.previousPage = true;
        }
        this.twoTierPage.tier1.addListener("onTierEvent", this, this.onTier1Event);
        this.twoTierPage.tier2.addListener("onTierEvent", this, this.onTier2Event);
        if (historyObject.wasSearchEnabled) 
        {
            this.searching = new com.jadoo.as2.JadooPlus.Features.Search();
            this.searching.addListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.create(parentMC, this.twoTierPage.pageTitle, this.twoTierPage.searchHelpLink, this.twoTierPage.searchResultsLink, historyObject.searchString);
        }
        else 
        {
            if (this.twoTierPage.tier1.totalItems > 0) 
            {
                this.twoTierPage.tier1.create(parentMC, viewBaseMC, this.viewMC, this.twoTierPage.pageTitle, this.twoTierPage.pageId.toString(), this.twoTierPage.tier2.contentType, this.twoTierPage.searchHelpLink, this.twoTierPage.searchResultsLink);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TWOTIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.twoTierPage.pageTitle, this.twoTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
            }
            if (this.twoTierPage.isAdView == true) 
            {
                this.showAdsOnPage(parentMC);
            }
        }
        parentMC = null;
        viewBaseMC = null;
        pageUrl = null;
        historyObject = null;
        cache = null;
    }

    function destroy()
    {
        this.twoTierPage.tier1.removeListener("onTierEvent", this, this.onTier1Event);
        this.twoTierPage.tier2.removeListener("onTierEvent", this, this.onTier2Event);
        this.historyObject = null;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.destroy();
        if (this.twoTierPage != null) 
        {
            this.twoTierPage.destroy();
            delete this.twoTierPage;
            this.twoTierPage = null;
        }
        if (this.searching != null) 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
        }
        if (this.viewBaseMC.loadingMC != undefined) 
        {
            removeMovieClip(this.viewBaseMC.loadingMC);
        }
        this.loadingViewMC = null;
        super.destroy();
    }

    function onTier1Event()
    {
        var __reg5 = arguments[0];
        if ((__reg0 = __reg5) === "onHighlightItem") 
        {
            this.twoTierPage.tier2.hideTier();
            if (this.previousPage) 
            {
                this.twoTierPage.tier2.setCurrentItemIdx(this.historyObject.tier2ItemStartIdx);
                this.twoTierPage.tier2.draw(arguments[1], -1, arguments[2], this.historyObject.tier2ItemStartIdx, arguments[4], arguments[5], arguments[6], this.previousPage, arguments[7], arguments[8], arguments[9], arguments[10], arguments[12]);
            }
            else if (this.twoTierPage.tier1.isChannelBarActive()) 
            {
                this.twoTierPage.tier2.setCurrentItemIdx(this.twoTierPage.tier2.getCurrentItemStartIdx(arguments[11]));
                this.twoTierPage.tier2.draw(arguments[1], -1, arguments[2], this.twoTierPage.tier2.getItemStartIdx(), arguments[4], arguments[5], arguments[6], true, arguments[7], arguments[8], arguments[9], arguments[10], arguments[12]);
            }
            else 
            {
                if (this.twoTierPage.tier2.getCurrentItemItemsLink() != arguments[5]) 
                {
                    this.twoTierPage.tier2.setCurrentItemIdx(0);
                }
                this.twoTierPage.tier2.draw(arguments[1], -1, arguments[2], 0, arguments[4], arguments[5], arguments[6], this.previousPage, arguments[7], arguments[8], arguments[9], arguments[10], arguments[12]);
            }
        }
        else if (__reg0 === "onPageChange") 
        {
            this.twoTierPage.tier2.terminateDisplay();
            this.twoTierPage.tier2.hideTier();
        }
        else if (__reg0 === "onReady") 
        {
            this.twoTierPage.tier2.create(this.parentMC, this.viewBaseMC, this.viewMC, this.twoTierPage.pageTitle, this.twoTierPage.pageId.toString(), null, this.twoTierPage.searchHelpLink, this.twoTierPage.searchResultsLink);
        }
        else if (__reg0 === "onDisplayItems") 
        {
            if (_global.currentApplication != "MyJadoo") 
            {
                this.createSearchColorBtn();
            }
            if (this.previousPage) 
            {
                this.twoTierPage.tier1.setCurrentItemIdx(this.historyObject.tier1ItemHighlightIdx);
                this.twoTierPage.tier1.selectItem(this.historyObject.tier1ItemHighlightIdx);
            }
            else 
            {
                this.twoTierPage.tier1.enable();
                this.twoTierPage.tier1.selectItem(0);
            }
        }
        else if (__reg0 === "onLooseFocus") 
        {
            if ((this.twoTierPage.tier2.getItemsCount() > 0 && !this.twoTierPage.tier2.isHidden()) || this.twoTierPage.tier2.isChannelBarActive()) 
            {
                this.twoTierPage.tier1.disable();
                this.twoTierPage.tier2.enable();
            }
        }
        else if (__reg0 === "onDisplayMessage") 
        {
            var __reg4 = arguments[1];
            this.displayMessage(__reg4);
            __reg4 = null;
        }
        else if (__reg0 === "onReturnKey") 
        {
            this.tier = "Tier1";
            this.twoTierPage.tier1.disable();
            this.onPageBackCallback();
        }
        else if (__reg0 === "onEnableView") 
        {
            this.enableView();
        }
        else if (__reg0 === "onDisableView") 
        {
            this.disableView();
        }
        else if (__reg0 === "onStartPlayback") 
        {
            this.disableSystemEventsListener();
        }
        else if (__reg0 === "onStopPlayback") 
        {
            this.enableSystemEventsListener();
        }
        else if (__reg0 === "onPopup") 
        {
            this.twoTierPage.tier2.hideTier();
        }
        else if (__reg0 === "disableChannelBar") 
        {
            this.twoTierPage.tier2.disableChannelBar();
        }
        else if (__reg0 === "onSearchPressed") 
        {
            this.twoTierPage.tier1.disable();
            this.tier = "Tier1Search";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "onAppRestart") 
        {
            this.twoTierPage.tier1.disable();
            this.onAppRestart.notify();
        }
        else if (__reg0 === "onRemovePopup") 
        {
            this.previousPage = false;
        }
        else if (__reg0 === "onPageAdEnable") 
        {
            if (this.twoTierPage.isAdView == true && this.pageAds.adVisible == true) 
            {
                this.twoTierPage.tier1.onPageAdEnterKey(this.pageAds.getPageAdItem());
            }
        }
        else if (__reg0 === "onEnterKey") 
        {
            this.twoTierPage.tier1.disable();
            this.tier = "Tier1";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        __reg5 = null;
    }

    function onTier2Event()
    {
        var __reg5 = arguments[0];
        if ((__reg0 = __reg5) === "onPageChange") 
        {
            var __reg6 = arguments[1];
            this.twoTierPage.tier1.setCurrentItemsStartIdx(__reg6);
        }
        else if (__reg0 === "onReady") 
        {
            if (this.previousPage) 
            {
                this.twoTierPage.tier1.setCurrentItemIdx(this.historyObject.tier1ItemStartIdx);
                this.twoTierPage.tier1.draw(this.previousPage, this.historyObject.tier1ItemStartIdx);
            }
            else 
            {
                this.twoTierPage.tier1.draw(this.previousPage, 0);
            }
        }
        else if (__reg0 === "onDisplayItems") 
        {
            this.twoTierPage.tier2.showTier();
            if (this.previousPage) 
            {
                this.previousPage = false;
                if (this.twoTierPage.tier2.getItemsCount() > 0) 
                {
                    this.twoTierPage.tier2.itemUnHighlight(this.twoTierPage.tier2.getCurrentItemIdx());
                    this.twoTierPage.tier2.setCurrentItemIdx(this.historyObject.tier2ItemHighlightIdx);
                    this.twoTierPage.tier1.disable();
                    this.twoTierPage.tier2.enable();
                }
                else 
                {
                    this.twoTierPage.tier1.enable();
                }
            }
        }
        else if (__reg0 === "onLooseFocus") 
        {
            this.twoTierPage.tier2.disable();
            this.twoTierPage.tier1.enable();
        }
        else if (__reg0 === "onDisplayMessage") 
        {
            var __reg4 = arguments[1];
            this.displayMessage(__reg4);
            __reg4 = null;
        }
        else if (__reg0 === "onReturnKey") 
        {
            this.tier = "Tier2";
            this.twoTierPage.tier2.disable(true);
            this.onPageBackCallback();
        }
        else if (__reg0 === "onEnableView") 
        {
            this.enableView();
        }
        else if (__reg0 === "onDisableView") 
        {
            this.disableView();
        }
        else if (__reg0 === "onStartPlayback") 
        {
            this.disableSystemEventsListener();
        }
        else if (__reg0 === "onStopPlayback") 
        {
            this.enableSystemEventsListener();
        }
        else if (__reg0 === "disableChannelBar") 
        {
            this.twoTierPage.tier1.disableChannelBar();
        }
        else if (__reg0 === "onErrorLoading") 
        {
            this.previousPage = false;
            this.twoTierPage.tier2.disable();
            this.twoTierPage.tier1.enable();
            this.twoTierPage.tier1.unSelectItem(this.twoTierPage.tier1.getSelectedItemIdx());
        }
        else if (__reg0 === "onSearchPressed") 
        {
            this.twoTierPage.tier2.disable(true);
            this.tier = "Tier2Search";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "onEnterKey") 
        {
            this.twoTierPage.tier2.disable(true);
            this.tier = "Tier2";
            this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        }
        else if (__reg0 === "colorButtonEvent") 
        {
            super.colorButtonEvent(arguments[1], arguments[2], arguments[3]);
        }
        else if (__reg0 === "ChangeCategory") 
        {
            this.twoTierPage.tier2.disable();
            this.twoTierPage.tier1.channelBarCategoryChange(arguments[1], arguments[2]);
        }
        else if (__reg0 === "onAppRestart") 
        {
            this.twoTierPage.tier2.disable();
            this.onAppRestart.notify();
        }
        else if (__reg0 === "onPageAdEnable") 
        {
            if (this.twoTierPage.isAdView == true && this.pageAds.adVisible == true) 
            {
                this.twoTierPage.tier2.onPageAdEnterKey(this.pageAds.getPageAdItem());
            }
        }
        __reg5 = null;
    }

    function onSearchEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "onSearchPressed") 
        {
            this.showLoadingClip();
            this.twoTierPage.tier1.setSelectedItemIdx(this.historyObject.tier1ItemHighlightIdx);
            this.twoTierPage.tier1.setCurrentItemsStartIdx(this.historyObject.tier1ItemStartIdx);
            this.twoTierPage.tier2.setCurrentItemIdx(this.historyObject.tier2ItemHighlightIdx);
            this.twoTierPage.tier2.setCurrentItemsStartIdx(this.historyObject.tier2ItemStartIdx);
            this.tier = "ViewSearch";
            this.onEnterItem.notify(arguments[1], 0, true, arguments[2], false);
        }
        else if (__reg0 === "onCancelPressed") 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
            if (this.twoTierPage.tier1.totalItems > 0) 
            {
                this.twoTierPage.tier1.create(this.parentMC, this.viewBaseMC, this.viewMC, this.twoTierPage.pageTitle, this.twoTierPage.pageId.toString(), this.twoTierPage.tier2.contentType, this.twoTierPage.searchHelpLink, this.twoTierPage.searchResultsLink);
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.TWOTIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.twoTierPage.pageTitle, this.twoTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW);
            }
            if (this.twoTierPage.isAdView == true) 
            {
                this.showAdsOnPage(this.parentMC);
            }
        }
        __reg3 = null;
    }

    function onPageBackCallback()
    {
        this.onPageBack.notify();
    }

    function hideView()
    {
        if (this.twoTierPage.isAdView == true) 
        {
            this.removeAds();
        }
        this.viewMC._alpha = 50;
    }

    function restoreView(currentStatus, popupData)
    {
        if (this.twoTierPage.isAdView == true) 
        {
            this.showAdsOnPage(this.parentMC);
        }
        this.viewMC._alpha = 100;
        if (this.tier == "ViewSearch") 
        {
            this.removeLoadingClip();
            this.displayMessage("");
            this.searching.searchResultsLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
        }
        else if (this.tier == "Tier1Search") 
        {
            this.displayMessage("");
            this.twoTierPage.tier1.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
        }
        else if (this.tier == "Tier2Search") 
        {
            this.displayMessage("");
            this.twoTierPage.tier2.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
        }
        else if (this.tier == "Tier1") 
        {
            this.twoTierPage.tier1.enable();
        }
        else if (this.tier == "Tier2") 
        {
            if (currentStatus == "hidden" || currentStatus == "geofiltered") 
            {
                this.twoTierPage.tier2.enable();
                this.twoTierPage.tier2.deleteFavoriteMsgBox();
            }
            else if (currentStatus == "popup") 
            {
                this.twoTierPage.tier2.enable();
                this.twoTierPage.tier2.setPopup(popupData);
            }
            else 
            {
                this.twoTierPage.tier2.enable();
            }
        }
        currentStatus = null;
        popupData = null;
    }

}

//Sprite 740
//  InitClip
dynamic class com.jadoo.as2.JadooPlus.Views.TierViews.OneTierView extends com.jadoo.as2.JadooPlus.Views.TierViews.ParentView
{
    var singleTierPage = null;
    var loadingViewMC = null;
    var historyObject = null;
    var previousPage: Boolean = false;
    var searching = null;
    var createSearchColorBtn;
    var disableSystemEventsListener;
    var disableView;
    var displayMessage;
    var enableSystemEventsListener;
    var enableView;
    var keyListener;
    var onAppRestart;
    var onEnterItem;
    var onPageBack;
    var pageAds;
    var parentMC;
    var removeAds;
    var removeLoadingClip;
    var showAdsOnPage;
    var showLoadingClip;
    var tier;
    var viewBaseMC;
    var viewMC;

    function OneTierView()
    {
        super();
        this.singleTierPage = new com.jadoo.as2.JadooPlus.Views.Page.SingleTierPage();
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.parseSingleTierPageInfo(this.singleTierPage);
    }

    function getCurrentItemIdx()
    {
        return this.singleTierPage.tier1.getCurrentItemIdx();
    }

    function getItemStartIdx()
    {
        return this.singleTierPage.tier1.getItemStartIdx();
    }

    function create(parentMC, viewBaseMC, pageUrl, historyObject, cache)
    {
        super.create(parentMC, viewBaseMC, pageUrl, this.singleTierPage, cache);
        this.historyObject = historyObject;
        if (historyObject != null) 
        {
            this.previousPage = true;
        }
        this.singleTierPage.tier1.addListener("onTierEvent", this, this.onTier1Event);
        if (historyObject.wasSearchEnabled) 
        {
            this.searching = new com.jadoo.as2.JadooPlus.Features.Search();
            this.searching.addListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.create(parentMC, this.singleTierPage.pageTitle, this.singleTierPage.searchHelpLink, this.singleTierPage.searchResultsLink, historyObject.searchString);
        }
        else 
        {
            if (this.singleTierPage.totalItems > 0 || (this.singleTierPage.type == "dailymotionplaylist" || this.singleTierPage.type == "youtubeplaylist")) 
            {
                this.singleTierPage.tier1.create(parentMC, viewBaseMC, this.viewMC, this.singleTierPage.pageTitle, this.singleTierPage.pageId.toString(), this.singleTierPage.tier1.contentType, this.singleTierPage.searchHelpLink, this.singleTierPage.searchResultsLink);
                this.singleTierPage.tier1.hideTier();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ONETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.singleTierPage.pageTitle, this.singleTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW_ON_PAGE);
            }
            if (this.singleTierPage.isAdView == true) 
            {
                this.showAdsOnPage(parentMC);
            }
        }
        parentMC = null;
        viewBaseMC = null;
        pageUrl = null;
        historyObject = null;
        cache = null;
    }

    function destroy()
    {
        this.singleTierPage.tier1.removeListener("onTierEvent", this, this.onTier1Event);
        this.historyObject = null;
        com.jadoo.as2.JadooPlus.Parser.XmlParser.TierXmlParser.destroy();
        if (this.singleTierPage != null) 
        {
            this.singleTierPage.destroy();
            delete this.singleTierPage;
            this.singleTierPage = null;
        }
        if (this.searching != null) 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
        }
        if (this.viewBaseMC.loadingMC != undefined) 
        {
            removeMovieClip(this.viewBaseMC.loadingMC);
        }
        this.loadingViewMC = null;
        super.destroy();
    }

    function onTier1Event()
    {
        var __reg6 = arguments[0];
        var __reg7 = arguments[1];
        if ((__reg0 = __reg6) !== "onHighlightItem") 
        {
            if (__reg0 !== "onPageChange") 
            {
                if (__reg0 === "onReady") 
                {
                    if (this.previousPage) 
                    {
                        this.singleTierPage.tier1.setCurrentItemIdx(this.historyObject.itemStartIdx);
                        this.singleTierPage.tier1.draw(this.singleTierPage.pageTitle, -1, -1, this.historyObject.itemStartIdx, this.singleTierPage.totalItems, this.singleTierPage.itemsLink, this.singleTierPage.tier1.playContinuous, this.previousPage, null, this.singleTierPage.playlistId, this.singleTierPage.type, null, this.singleTierPage.vodResponseLink);
                    }
                    else 
                    {
                        this.singleTierPage.tier1.setCurrentItemIdx(0);
                        this.singleTierPage.tier1.draw(this.singleTierPage.pageTitle, -1, -1, this.singleTierPage.tier1.itemsStartIdx, this.singleTierPage.totalItems, this.singleTierPage.itemsLink, this.singleTierPage.tier1.playContinuous, this.previousPage, null, this.singleTierPage.playlistId, this.singleTierPage.type, null, this.singleTierPage.vodResponseLink);
                    }
                }
                else if (__reg0 === "onDisplayItems") 
                {
                    this.singleTierPage.tier1.showTier();
                    if (__reg7 != "zeroItems") 
                    {
                        if (_global.currentApplication != "MyJadoo") 
                        {
                            this.createSearchColorBtn();
                        }
                        if (this.previousPage) 
                        {
                            this.singleTierPage.tier1.itemUnHighlight(this.singleTierPage.tier1.getCurrentItemIdx());
                            this.singleTierPage.tier1.setCurrentItemIdx(this.historyObject.itemHighlightIdx);
                            this.singleTierPage.tier1.itemHighlight(this.historyObject.itemHighlightIdx);
                        }
                        this.previousPage = false;
                        this.singleTierPage.tier1.enable();
                    }
                }
                else if (__reg0 !== "onLooseFocus") 
                {
                    if (__reg0 === "onDisplayMessage") 
                    {
                        var __reg5 = arguments[1];
                        this.displayMessage(__reg5);
                        __reg5 = null;
                    }
                    else if (__reg0 === "onReturnKey") 
                    {
                        this.tier = "Tier1";
                        this.singleTierPage.tier1.disable(true);
                        this.onPageBackCallback();
                    }
                    else if (__reg0 === "onSearchPressed") 
                    {
                        this.tier = "Tier1Search";
                        this.singleTierPage.tier1.disable(true);
                        this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                    }
                    else if (__reg0 === "onEnterKey") 
                    {
                        this.tier = "Tier1";
                        this.singleTierPage.tier1.disable(true);
                        this.onEnterItem.notify(arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                    }
                    else if (__reg0 === "onEnableView") 
                    {
                        this.enableView();
                    }
                    else if (__reg0 === "onDisableView") 
                    {
                        this.disableView();
                    }
                    else if (__reg0 === "colorButtonEvent") 
                    {
                        super.colorButtonEvent(arguments[1], arguments[2], arguments[3]);
                    }
                    else if (__reg0 === "onStartPlayback") 
                    {
                        this.disableSystemEventsListener();
                    }
                    else if (__reg0 === "onErrorLoading") 
                    {
                        this.singleTierPage.tier1.enable();
                        this.previousPage = false;
                    }
                    else if (__reg0 === "onStopPlayback") 
                    {
                        this.enableSystemEventsListener();
                    }
                    else if (__reg0 === "onAppRestart") 
                    {
                        this.singleTierPage.tier1.disable();
                        this.onAppRestart.notify();
                    }
                    else if (__reg0 === "onPageAdEnable") 
                    {
                        if (this.singleTierPage.isAdView == true && this.pageAds.adVisible == true) 
                        {
                            this.singleTierPage.tier1.onPageAdEnterKey(this.pageAds.getPageAdItem());
                        }
                    }
                }
            }
        }
        __reg6 = null;
        __reg7 = null;
    }

    function onSearchEvent()
    {
        var __reg3 = arguments[0];
        if ((__reg0 = __reg3) === "onSearchPressed") 
        {
            this.showLoadingClip();
            this.singleTierPage.tier1.setCurrentItemIdx(this.historyObject.itemHighlightIdx);
            this.singleTierPage.tier1.setCurrentItemsStartIdx(this.historyObject.itemStartIdx);
            this.tier = "ViewSearch";
            this.onEnterItem.notify(arguments[1], 0, true, arguments[2], false);
        }
        else if (__reg0 === "onCancelPressed") 
        {
            this.searching.removeListener("onSearchEvent", this, this.onSearchEvent);
            this.searching.destroy();
            delete this.searching;
            this.searching = null;
            if (this.singleTierPage.totalItems > 0 || (this.singleTierPage.type == "dailymotionplaylist" || this.singleTierPage.type == "youtubeplaylist")) 
            {
                this.singleTierPage.tier1.create(this.parentMC, this.viewBaseMC, this.viewMC, this.singleTierPage.pageTitle, this.singleTierPage.pageId.toString(), this.singleTierPage.tier1.contentType, this.singleTierPage.searchHelpLink, this.singleTierPage.searchResultsLink);
                this.singleTierPage.tier1.hideTier();
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.ErrorCodes.sendToServer(com.jadoo.as2.JadooPlus.Utils.ErrorCodes.ONETIER_PAGE_TOTAL_ITEMS_EQUAL_TO_ZERO, "Page", this.singleTierPage.pageTitle, this.singleTierPage.pageId.toString());
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.NO_CONTENT_TO_SHOW_ON_PAGE);
            }
            if (this.singleTierPage.isAdView == true) 
            {
                this.showAdsOnPage(this.parentMC);
            }
        }
        __reg3 = null;
    }

    function onPageBackCallback()
    {
        this.onPageBack.notify();
    }

    function hideView()
    {
        if (this.singleTierPage.isAdView == true) 
        {
            this.removeAds();
        }
        this.viewMC._alpha = 50;
    }

    function restoreView()
    {
        this.viewMC._alpha = 100;
        if (this.tier == "ViewSearch") 
        {
            this.removeLoadingClip();
            this.displayMessage("");
            this.searching.searchResultsLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier1Search") 
        {
            this.displayMessage("");
            this.singleTierPage.tier1.searchLoadingError(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_CONNECT_TO_SERVER_CHECK_CONNECTION);
            return;
        }
        if (this.tier == "Tier1") 
        {
            if (this.singleTierPage.isAdView == true) 
            {
                this.showAdsOnPage(this.parentMC);
            }
            this.singleTierPage.tier1.enable();
        }
    }

}

//Sprite 741
//  InitClip
dynamic class com.diagnostics.as2.MainPage
{
    var parentMC = null;
    var itemContainerMC = null;
    var itemBorderMC = null;
    var mainContainerMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var loadingMC = null;
    var pagesDetail = null;
    var msgText = null;
    var pageIdx: Number = 1;
    var currentItemIdx: Number = 0;
    var indexY: Number = 0;
    var totalPages: Number = 1;
    var currentRow: Number = 1;
    var posX: Number = 0;
    var posY: Number = 0;
    var messageWidth: Number = 0;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var fn = null;
    var pageConfiguration = null;
    var txtFrmt = null;
    var productInfo = null;
    var userInfo = null;
    var speedTest = null;
    var diagnosticTest = null;
    var pingTracer = null;
    var msgBox = null;
    var pingTraceBox = null;
    var wifiMsgBox = null;
    var buttons = null;
    var onExitApp = null;
    var backgroundMC;
    var baseMC;
    var itemLogoMC;
    var keyListener;
    var mainMC;
    var maskHeight;
    var maskMC;

    function MainPage()
    {
    }

    function create(parentMC)
    {
        this.parentMC = parentMC;
        this.keyListener = new Object();
        this.fn = {onUtilsInit: mx.utils.Delegate.create(this, this.onUtilsInit), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onClearCache: mx.utils.Delegate.create(this, this.onClearCache), onInitializeXmlLoad: mx.utils.Delegate.create(this, this.onInitializeXmlLoad)};
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.totalPages = Math.ceil(this.pageConfiguration.getTotalItems() / (this.pageConfiguration.containerNumCols * this.pageConfiguration.containerNumRows));
        this.maskHeight = this.pageConfiguration.containerHeight;
        this.baseMC = parentMC.createEmptyMovieClip("baseMC", parentMC.getNextHighestDepth());
        this.onUtilsInit();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.init();
        com.jadoo.as2.JadooPlus.Utils.XmlSocketEvents.addListener("SystemEvent", this, this.onXmlSocketSystemEvent);
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.onExitApp = new com.BigRoom.Event();
        parentMC = null;
    }

    function onXmlSocketSystemEvent(eventStr)
    {
        if (this.wifiMsgBox != null) 
        {
            this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.wifiMsgBox.destroy();
            delete this.wifiMsgBox;
            this.wifiMsgBox = null;
        }
        if ((__reg0 = eventStr) === "System.WirelessUsbInserted") 
        {
            var __reg2 = this.parentMC.createEmptyMovieClip("wifiMsgBoxBaseMC", this.parentMC.getNextHighestDepth());
            var __reg3 = "Wireless USB Network Adapter detected. Do you want to start the setup wizard ?";
            this.wifiMsgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
            this.wifiMsgBox.addListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
            this.buttons = new Array("Yes", "No");
            this.wifiMsgBox.create(__reg2, "Wireless Setup", __reg3, true, this.buttons);
            __reg2 = null;
            __reg3 = null;
        }
        else 
        {
            __reg0 === "System.WirelessUsbRemoved";
        }
        eventStr = null;
    }

    function onWifiMsgBoxBtnPress(btnPressed)
    {
        this.wifiMsgBox.removeListener("onButtonPress", this, this.onWifiMsgBoxBtnPress);
        this.wifiMsgBox.destroy();
        delete this.wifiMsgBox;
        this.wifiMsgBox = null;
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
        if (btnPressed == "Yes") 
        {
            var __reg3 = new XML();
            __reg3.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + com.jadoo.as2.JadooPlus.Utils.Config.WIFI_SETUP_PATH);
        }
        btnPressed = null;
    }

    function displayMessage(message)
    {
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        this.msgText = new com.jadoo.as2.JadooPlus.TextField.TweenTextField();
        this.msgText.createTextField(this.mainMC, this.pageConfiguration.containerBgX, this.pageConfiguration.containerBgY + this.mainContainerMC._height + 10, this.messageWidth, 40, "false");
        this.setTxtFormat("Arial", 30, 16555008, "left");
        this.msgText.setTextFormat(this.txtFrmt);
        this.msgText.setHtmlText(message);
        this.msgText.enable(false, 1000);
    }

    function onUtilsInit()
    {
        this.loadBackground();
        if (this.backgroundMC != null) 
        {
            this.attachScrollArrows();
            this.loadTitleTxt();
            this.loadItems();
            this.loadMask();
        }
        this.pagesInfo();
        this.setScrollArrows();
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        if (this.msgText != null) 
        {
            this.msgText.removeTextField();
            delete this.msgText;
            this.msgText = null;
        }
        if (this.onExitApp != null) 
        {
            delete this.onExitApp;
            this.onExitApp = null;
        }
        if (this.productInfo != null) 
        {
            delete this.productInfo;
            this.productInfo = null;
        }
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        if (this.keyListener != null) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.pingTracer != null) 
        {
            delete this.pingTracer;
            this.pingTracer = null;
        }
        com.diagnostics.as2.DiagnosticsXMLParser.destroy();
        this.netStatus = null;
        this.netErrorStr = null;
        this.posX = null;
        this.posY = null;
        this.pageIdx = null;
        this.currentItemIdx = null;
        this.indexY = null;
        this.maskHeight = null;
        this.totalPages = null;
        this.currentRow = null;
        this.parentMC = null;
        this.baseMC.removeMovieClip();
    }

    function loadBackground()
    {
        this.backgroundMC = this.baseMC.attachMovie("backgroundMC", "backgroundMC", this.baseMC.getNextHighestDepth());
        this.mainMC = this.backgroundMC.createEmptyMovieClip("mainMC", this.backgroundMC.getNextHighestDepth());
        this.mainContainerMC = this.mainMC.attachMovie("settingsPageContainer", "mainContainerMC", this.mainMC.getNextHighestDepth());
        this.mainContainerMC._x = this.pageConfiguration.containerBgX;
        this.mainContainerMC._y = this.pageConfiguration.containerBgY;
        this.messageWidth = this.mainContainerMC._width;
        this.pagesDetail = this.mainMC.createTextField("pagesDetail", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.88, this.pageConfiguration.backgroundHeight * 0.9, undefined, undefined);
        this.pagesDetail.autoSize = "right";
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.backgroundMC.attachMovie("loading", "loadingMC", this.backgroundMC.getNextHighestDepth(), {_x: this.pageConfiguration.backgroundWidth / 2, _y: this.pageConfiguration.backgroundHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function attachScrollArrows()
    {
        this.upArrowMC = this.mainMC.attachMovie("arrowUP", "upArrowMC", this.mainMC.getNextHighestDepth());
        this.upArrowMC._x = this.pageConfiguration.backgroundWidth * 0.82;
        this.upArrowMC._y = this.pageConfiguration.backgroundHeight * 0.3;
        this.upArrowMC._visible = false;
        this.downArrowMC = this.mainMC.attachMovie("arrowDown", "downArrowMC", this.mainMC.getNextHighestDepth());
        this.downArrowMC._x = this.pageConfiguration.backgroundWidth * 0.82;
        this.downArrowMC._y = this.pageConfiguration.backgroundHeight * 0.78;
        this.downArrowMC._visible = false;
    }

    function pagesInfo()
    {
        if (this.totalPages == 1) 
        {
            this.pagesDetail._visible = false;
        }
        this.setTxtFormat("Arial", 22, 16777215, "right");
        this.pagesDetail.setNewTextFormat(this.txtFrmt);
        this.pagesDetail.text = "Page " + this.pageIdx + " of " + this.totalPages;
    }

    function setTxtFormat(font, size, color, alignment)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
    }

    function loadTitleTxt()
    {
        var __reg2 = this.mainMC.createTextField("titleTxtField", this.mainMC.getNextHighestDepth(), this.pageConfiguration.titleX, this.pageConfiguration.titleY, undefined, undefined);
        __reg2.autoSize = true;
        __reg2.text = this.pageConfiguration.pageTitle;
        this.setTxtFormat("Arial", 50, 16777215, "left");
        __reg2.setTextFormat(this.txtFrmt);
        __reg2 = null;
    }

    function loadItems()
    {
        var __reg5 = 0;
        var __reg7 = 0;
        this.itemContainerMC = this.mainContainerMC.createEmptyMovieClip("itemContainerMC", this.mainContainerMC.getNextHighestDepth());
        this.itemContainerMC._x = this.pageConfiguration.itemContainerX;
        this.itemContainerMC._y = this.pageConfiguration.itemContainerY;
        this.posX = this.pageConfiguration.containerWidth / this.pageConfiguration.containerNumCols;
        this.posY = this.pageConfiguration.containerHeight / this.pageConfiguration.containerNumRows;
        var __reg4 = 0;
        while (__reg4 < this.pageConfiguration.getTotalItems()) 
        {
            var __reg3 = this.itemContainerMC.createEmptyMovieClip("itemMC" + __reg4, this.itemContainerMC.getNextHighestDepth());
            if (__reg5 == this.pageConfiguration.containerNumCols) 
            {
                ++__reg7;
                __reg5 = 0;
            }
            __reg3._x = __reg5 * this.posX;
            __reg3._y = __reg7 * this.posY;
            var __reg6 = undefined;
            __reg6 = this.pageConfiguration.getItemName(__reg4);
            this.itemLogoMC = __reg3.attachMovie(__reg6 + "Logo", "itemLogoMC_" + __reg4, __reg3.getNextHighestDepth());
            ++__reg5;
            var __reg2 = __reg3.createTextField("itemTitleTextField", __reg3.getNextHighestDepth(), 0, 0, 0, 0);
            __reg2.autoSize = true;
            __reg2._y = this.pageConfiguration.containerLogoHeight;
            this.setTxtFormat("Arial", 26, 9145227, "center");
            __reg2.htmlText = this.pageConfiguration.getItemName(__reg4);
            __reg2.setTextFormat(this.txtFrmt);
            __reg2._x = (this.pageConfiguration.containerLogoWidth - __reg2._width) / 2;
            __reg2 = null;
            ++__reg4;
        }
        this.itemHighlight(this.currentItemIdx);
        __reg3 = null;
        __reg6 = null;
        __reg4 = null;
        __reg5 = null;
        __reg7 = null;
    }

    function itemHighlight(itemIdx)
    {
        if (this.itemBorderMC == null) 
        {
            this.itemBorderMC = this.itemContainerMC.attachMovie("settingSelectorMC", "itemBorderMC", this.itemContainerMC.getNextHighestDepth());
        }
        this.itemContainerMC.itemBorderMC._x = itemIdx % this.pageConfiguration.containerNumCols * this.posX;
        this.itemContainerMC.itemBorderMC._y = this.indexY * this.posY;
    }

    function itemUnHighlight(itemIdx)
    {
        this.itemContainerMC["itemTitleMC" + itemIdx].itemtextField._visible = true;
    }

    function loadMask()
    {
        this.maskMC = this.itemContainerMC.attachMovie("background", "maskMC", this.itemContainerMC.getNextHighestDepth());
        this.maskMC._x = 0;
        this.maskMC._y = 0;
        this.maskMC._height = this.maskHeight;
        this.maskMC._width = this.pageConfiguration.backgroundWidth;
        this.itemContainerMC.setMask(this.maskMC);
    }

    function setScrollArrows()
    {
        this.downArrowMC._visible = true;
        this.upArrowMC._visible = true;
        if (this.totalPages == 1) 
        {
            this.downArrowMC._visible = false;
        }
        if (this.pageIdx == 1) 
        {
            this.upArrowMC._visible = false;
        }
        if (this.pageIdx == this.totalPages) 
        {
            this.downArrowMC._visible = false;
        }
    }

    function pageChange(currentItemId)
    {
        if (this.itemBorderMC != null) 
        {
            this.itemBorderMC.removeMovieClip();
        }
        this.itemBorderMC = this.itemContainerMC.attachMovie("itemSelectorMC", "itemBorderMC", this.itemContainerMC.getNextHighestDepth());
        this.itemBorderMC._x = currentItemId % this.pageConfiguration.containerNumCols * this.posX;
        this.itemBorderMC._y = this.indexY * this.posY;
    }

    function onKeyDown()
    {
        this.displayMessage("");
        if ((__reg0 = Key.getCode()) === 37) 
        {
            if (this.currentItemIdx > 0) 
            {
                if (this.currentItemIdx % this.pageConfiguration.containerNumCols == 0) 
                {
                    if ((this.currentRow - 1) % this.pageConfiguration.containerNumRows == 0) 
                    {
                        --this.pageIdx;
                        this.maskMC._y = this.maskMC._y - this.maskHeight;
                        this.itemContainerMC._y = (0 - this.posY * this.pageConfiguration.containerNumRows) * (this.pageIdx - 1) + this.pageConfiguration.itemContainerY;
                        this.itemUnHighlight(this.currentItemIdx);
                        --this.currentItemIdx;
                        --this.currentRow;
                        --this.indexY;
                        this.pageChange(this.currentItemIdx);
                    }
                    else 
                    {
                        this.itemUnHighlight(this.currentItemIdx);
                        --this.indexY;
                        --this.currentRow;
                        --this.currentItemIdx;
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemUnHighlight(this.currentItemIdx);
                    --this.currentItemIdx;
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 39) 
        {
            if (this.currentItemIdx < this.pageConfiguration.getTotalItems() - 1) 
            {
                if (this.currentItemIdx % this.pageConfiguration.containerNumCols == this.pageConfiguration.containerNumCols - 1) 
                {
                    if (this.currentRow % this.pageConfiguration.containerNumRows == 0 && this.currentItemIdx < this.pageConfiguration.getTotalItems()) 
                    {
                        this.maskMC._y = this.maskMC._y + this.maskHeight;
                        this.itemContainerMC._y = (0 - this.posY * this.pageConfiguration.containerNumRows) * this.pageIdx + this.pageConfiguration.itemContainerY;
                        ++this.pageIdx;
                        this.itemUnHighlight(this.currentItemIdx);
                        ++this.currentItemIdx;
                        ++this.currentRow;
                        ++this.indexY;
                        this.pageChange(this.currentItemIdx);
                    }
                    else 
                    {
                        this.itemUnHighlight(this.currentItemIdx);
                        ++this.indexY;
                        ++this.currentRow;
                        ++this.currentItemIdx;
                        this.itemHighlight(this.currentItemIdx);
                    }
                }
                else 
                {
                    this.itemUnHighlight(this.currentItemIdx);
                    ++this.currentItemIdx;
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 38) 
        {
            --this.currentRow;
            if (this.currentRow < 1) 
            {
                ++this.currentRow;
            }
            else if (this.currentRow % this.pageConfiguration.containerNumRows == 0) 
            {
                --this.pageIdx;
                this.maskMC._y = this.maskMC._y - this.maskHeight;
                this.itemContainerMC._y = (0 - this.posY * this.pageConfiguration.containerNumRows) * (this.pageIdx - 1) + this.pageConfiguration.itemContainerY;
                this.itemUnHighlight(this.currentItemIdx);
                this.currentItemIdx = this.currentItemIdx - this.pageConfiguration.containerNumCols;
                --this.indexY;
                this.pageChange(this.currentItemIdx);
            }
            else 
            {
                this.itemUnHighlight(this.currentItemIdx);
                --this.indexY;
                this.currentItemIdx = this.currentItemIdx - this.pageConfiguration.containerNumCols;
                this.itemHighlight(this.currentItemIdx);
            }
        }
        else if (__reg0 === 40) 
        {
            if (this.currentRow != Math.ceil(this.pageConfiguration.getTotalItems() / this.pageConfiguration.containerNumCols)) 
            {
                if (this.currentItemIdx + this.pageConfiguration.containerNumCols >= this.pageConfiguration.getTotalItems()) 
                {
                    if (this.currentRow % this.pageConfiguration.containerNumRows == 0 && this.currentItemIdx < this.pageConfiguration.getTotalItems()) 
                    {
                        this.maskMC._y = this.maskMC._y + this.maskHeight;
                        this.itemContainerMC._y = (0 - this.posY * this.pageConfiguration.containerNumRows) * this.pageIdx + this.pageConfiguration.itemContainerY;
                        ++this.pageIdx;
                        if (this.currentItemIdx + this.pageConfiguration.containerNumCols >= this.pageConfiguration.getTotalItems()) 
                        {
                            this.itemUnHighlight(this.currentItemIdx);
                            ++this.currentItemIdx;
                            ++this.currentRow;
                            ++this.indexY;
                            this.pageChange(this.currentItemIdx);
                        }
                    }
                }
                else if (this.currentRow % this.pageConfiguration.containerNumRows == 0 && this.currentItemIdx < this.pageConfiguration.getTotalItems()) 
                {
                    this.maskMC._y = this.maskMC._y + this.maskHeight;
                    this.itemContainerMC._y = (0 - this.posY * this.pageConfiguration.containerNumRows) * this.pageIdx + this.pageConfiguration.itemContainerY;
                    ++this.pageIdx;
                    this.itemUnHighlight(this.currentItemIdx);
                    this.currentItemIdx = this.currentItemIdx + this.pageConfiguration.containerNumCols;
                    ++this.currentRow;
                    ++this.indexY;
                    this.pageChange(this.currentItemIdx);
                }
                else 
                {
                    this.itemUnHighlight(this.currentItemIdx);
                    ++this.currentRow;
                    ++this.indexY;
                    this.currentItemIdx = this.currentItemIdx + this.pageConfiguration.containerNumCols;
                    this.itemHighlight(this.currentItemIdx);
                }
            }
        }
        else if (__reg0 === 13) 
        {
            var __reg2 = this.pageConfiguration.getItemName(this.currentItemIdx);
            this.itemUnHighlight(this.currentItemIdx);
            if ((__reg0 = __reg2) === "Product Info") 
            {
                if (this.productInfo != null) 
                {
                    delete this.productInfo;
                    this.productInfo = null;
                }
                this.productInfo = new com.diagnostics.as2.ProductInfo();
                this.mainMC._visible = false;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.productInfo.create(this.backgroundMC);
                this.productInfo.onPageBack.addListener(this, this.PageBack);
                this.itemUnHighlight(this.currentItemIdx);
            }
            else if (__reg0 === "User Info") 
            {
                if (this.userInfo != null) 
                {
                    delete this.userInfo;
                    this.userInfo = null;
                }
                this.userInfo = new com.diagnostics.as2.UserInfo();
                this.mainMC._visible = false;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                this.userInfo.create(this.backgroundMC);
                this.userInfo.onPageBack.addListener(this, this.PageBack);
                this.itemUnHighlight(this.currentItemIdx);
            }
            else if (__reg0 === "Connectivity") 
            {
                if (this.diagnosticTest != null) 
                {
                    delete this.diagnosticTest;
                    this.diagnosticTest = null;
                }
                this.diagnosticTest = new com.diagnostics.as2.DiagnosticApplication();
                this.mainMC._visible = false;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                var __reg5 = "standalone";
                System.security.allowDomain("*");
                this.diagnosticTest.startApp(this.backgroundMC, __reg2);
                this.diagnosticTest.onPageBack.addListener(this, this.PageBack);
                this.itemUnHighlight(this.currentItemIdx);
            }
            else if (__reg0 === "Speed Test") 
            {
                if (this.speedTest != null) 
                {
                    delete this.speedTest;
                    this.speedTest = null;
                }
                this.speedTest = new com.diagnostics.as2.DiagnosticApplication();
                this.mainMC._visible = false;
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                __reg5 = "standalone";
                System.security.allowDomain("*");
                this.speedTest.startApp(this.backgroundMC, __reg2);
                this.speedTest.onPageBack.addListener(this, this.PageBack);
                this.itemUnHighlight(this.currentItemIdx);
            }
            else if (__reg0 === "Clear Cache") 
            {
                var __reg4 = "Clearing the cache will slow down the application initially. Are you sure you want to clear the cache ?";
                var __reg3 = this.mainMC.createEmptyMovieClip("msgBoxMC", this.mainMC.getNextHighestDepth());
                if (this.msgBox != null) 
                {
                    this.msgBox.removeListener("onButtonPress", this, this.onClearCacheEvent);
                    this.msgBox.destroy();
                    delete this.msgBox;
                    this.msgBox = null;
                }
                this.msgBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
                this.buttons = new Array("Yes", "No");
                this.msgBox.create(__reg3, "Clear Cache", __reg4, true, this.buttons);
                this.msgBox.addListener("onButtonPress", this, this.onClearCacheEvent);
                __reg4 = null;
                __reg3 = null;
            }
            else if (__reg0 === "Network Diagnostics") 
            {
                if (this.netStatus == "Up") 
                {
                    this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.RETRIEVING);
                    com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
                    com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onInitializeXmlLoad);
                }
                else 
                {
                    this.itemHighlight();
                    this.displayMessage(this.netErrorStr);
                }
            }
            __reg2 = null;
        }
        else if (__reg0 === Key.BACK) 
        {
            this.onExitApp.notify();
        }
        this.pagesInfo();
        this.setScrollArrows();
    }

    function displayMessageBox(msgString)
    {
        var __reg2 = this.mainMC.createEmptyMovieClip("pingTraceBoxMC", this.mainMC.getNextHighestDepth());
        if (this.pingTraceBox != null) 
        {
            this.pingTraceBox.removeListener("onButtonPress", this, this.onButtonPress);
            this.pingTraceBox.destroy();
            delete this.pingTraceBox;
            this.pingTraceBox = null;
        }
        this.pingTraceBox = new com.jadoo.as2.JadooPlus.Utils.MessageBox();
        if (this.buttons != null) 
        {
            delete this.buttons;
            this.buttons = null;
        }
        this.buttons = new Array("OK");
        this.pingTraceBox.create(__reg2, "", msgString, true, this.buttons);
        this.pingTraceBox.addListener("onButtonPress", this, this.onButtonPress);
        msgString = null;
        __reg2 = null;
    }

    function onButtonPress()
    {
        this.pingTraceBox.removeListener("onButtonPress", this, this.onButtonPress);
        this.pingTraceBox.destroy();
        delete this.pingTraceBox;
        this.pingTraceBox = null;
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
    }

    function onInitializeXmlLoad()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parsePingTraceUrl();
            this.displayMessage("");
            if (com.diagnostics.as2.DiagnosticsXMLParser.pingTraceEnabled == true) 
            {
                this.mainMC._visible = false;
                if (this.pingTracer != null) 
                {
                    delete this.pingTracer;
                    this.pingTracer = null;
                }
                this.pingTracer = new com.diagnostics.as2.NetworkTracePing();
                this.pingTracer.onPageBack.addListener(this, this.PageBack);
                this.pingTracer.create(this.backgroundMC, this.pageConfiguration.getItemName(this.currentItemIdx));
            }
            else 
            {
                com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
                this.displayMessageBox("If you are facing any issues in TV service, please contact JadooTv support.");
            }
        }
        else 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemHighlight();
            if (__reg4) 
            {
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER_CHECK_CONNECTION);
            }
            else 
            {
                this.displayMessage(com.jadoo.as2.JadooPlus.Utils.Messages.UNABLE_TO_RETRIEVE_INFO_FROM_SERVER);
            }
        }
        __reg4 = null;
        __reg3 = null;
    }

    function onClearCacheEvent(btnPressed)
    {
        this.msgBox.removeListener("onButtonPress", this, this.onClearCacheEvent);
        this.msgBox.destroy();
        delete this.msgBox;
        this.msgBox = null;
        var __reg2 = 0;
        while (__reg2 < this.buttons.length) 
        {
            this.buttons[__reg2] = null;
            ++__reg2;
        }
        delete this.buttons;
        this.buttons = null;
        if (btnPressed == "Yes") 
        {
            this.displayLoadingMC();
            com.jadoo.as2.JadooPlus.Utils.CacheManager.clearBoxCache(this.fn.onClearCache);
        }
        btnPressed = null;
    }

    function onClearCache()
    {
        this.removeLoadingMC();
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function PageBack(item)
    {
        if ((__reg0 = item) === "Product Info") 
        {
            this.productInfo.destroy();
            this.mainMC._visible = true;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemHighlight(this.currentItemIdx);
            return;
        }
        else if (__reg0 === "User Info") 
        {
            this.userInfo.destroy();
            this.mainMC._visible = true;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemHighlight(this.currentItemIdx);
            return;
        }
        else if (__reg0 === "Connectivity") 
        {
            this.diagnosticTest.destroy();
            this.mainMC._visible = true;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemHighlight(this.currentItemIdx);
            return;
        }
        else if (__reg0 === "Speed Test") 
        {
            this.speedTest.destroy();
            this.mainMC._visible = true;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
            this.itemHighlight(this.currentItemIdx);
            return;
        }
        else if (__reg0 !== "Network Diagnostics") 
        {
            return;
        }
        this.pingTracer.destroy();
        this.mainMC._visible = true;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.itemHighlight(this.currentItemIdx);
        return;
    }

}

//Sprite 742
//  InitClip
dynamic class com.diagnostics.as2.Configuration
{
    var pageTitle: String = "Diagnostics";
    var titleX: Number = 100;
    var titleY: Number = 40;
    var itemsinRow = null;
    var containerNumCols: Number = 3;
    var containerNumRows: Number = 2;
    var containerBgX: Number = 158;
    var containerBgY: Number = 170;
    var itemContainerX: Number = 80;
    var itemContainerY: Number = 60;
    var jadooLogoX: Number = 1026;
    var jadooLogoY: Number = 35;
    var containerWidth: Number = 810;
    var containerHeight: Number = 391;
    var containerLogoWidth: Number = 190;
    var containerLogoHeight: Number = 110;
    var backgroundHeight: Number = 720;
    var backgroundWidth: Number = 1280;
    var DiagnosticsPageLineSpacing: Number = 60;
    var buttonOffset: Number = 50;
    var speedTestBarX: Number = 38;
    var speedTestBarY: Number = 39.5;
    var speedTestBaseX: Number = 275;
    var speedTestBaseY: Number = 300;
    var diagnosticsBaseX: Number = 275;
    var diagnosticsBaseY: Number = 150;
    var itemName = ["Product Info", "Connectivity", "Speed Test", "User Info", "Clear Cache", "Network Diagnostics"];

    function Configuration()
    {
    }

    function getItemName(index)
    {
        return this.itemName[index];
    }

    function getTotalItems()
    {
        return this.itemName.length;
    }

}

//Sprite 743
//  InitClip
dynamic class com.diagnostics.as2.ProductInfo
{
    var ipAddressXmlPath = com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/setting?arg0=get_ip_setting";
    var firmwareVersionXmlPath = com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_firmware_version";
    var boxId = null;
    var fn = null;
    var pageConfiguration = null;
    var onPageBack = null;
    var darkStripMC = null;
    var lightStripMC = null;
    var baseMC = null;
    var mainMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var maskMC = null;
    var loadingMC = null;
    var pagesDetail = null;
    var txtFrmt = null;
    var macAddr = null;
    var identifier = null;
    var itemCounter: Number = 0;
    var totalPages: Number = 1;
    var pageId: Number = 1;
    var itemsOnPage: Number = 12;
    var textContainerHeight: Number = 42;
    var btnPosY: Number = 0;
    var currentFocus: Number = 1;
    var messageText = null;
    var errorMessage: String = "Unable to retrieve";
    var stripHeight = null;
    var firstTxtFieldHrzntlPos;
    var keyListener;
    var maskHeight;

    function ProductInfo()
    {
    }

    function create(backgroundMC)
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onIPAddressLoaded: mx.utils.Delegate.create(this, this.getIPAddress), onFirmwarVersionLoaded: mx.utils.Delegate.create(this, this.getFirmwareVersion), onProductInfoLoaded: mx.utils.Delegate.create(this, this.getServerInfo)};
        this.onPageBack = new com.BigRoom.Event();
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.baseMC = backgroundMC.createEmptyMovieClip("baseMC", backgroundMC.getNextHighestDepth());
        this.setTitleTxtField();
        this.loadBackground();
        this.maskHeight = this.itemsOnPage * this.textContainerHeight;
        this.firstTxtFieldHrzntlPos = this.pageConfiguration.backgroundHeight * 0.15;
        this.createTxtField("LAN IP");
        this.createTxtField("Subnet Mask");
        this.createTxtField("Default Gateway");
        this.createTxtField("Primary DNS");
        this.createTxtField("Secondary DNS");
        this.createTxtField("Box ID");
        this.createTxtField("Firmware Version");
        this.createTxtField("JP Application Version");
        this.createTxtField("MJ Application Version");
        this.createTxtField("Server Name / Version");
        this.createTxtField("Registered");
        this.createTxtField("Box Status");
        this.loadMask();
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(this.ipAddressXmlPath, "boxXml", this.fn.onIPAddressLoaded);
        this.displayLoadingMC();
        this.pagesInfo();
        this.setScrollArrows();
        this.btnPosY = this.calculateBtnPositionY(this.pageId);
        this.displayBtn(this.btnPosY);
        this.btnHighlight();
    }

    function setTxtFormat(font, size, color, alignment, bold)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        this.txtFrmt.bold = bold;
    }

    function loadBackground()
    {
        this.mainMC = this.baseMC.createEmptyMovieClip("mainMC", this.baseMC.getNextHighestDepth());
        this.upArrowMC = this.baseMC.attachMovie("arrowUP", "upArrowMC", this.baseMC.getNextHighestDepth());
        this.upArrowMC._x = this.pageConfiguration.backgroundWidth * 0.94;
        this.upArrowMC._y = this.pageConfiguration.backgroundHeight * 0.3;
        this.upArrowMC._visible = false;
        this.downArrowMC = this.baseMC.attachMovie("arrowDown", "downArrowMC", this.baseMC.getNextHighestDepth());
        this.downArrowMC._x = this.pageConfiguration.backgroundWidth * 0.94;
        this.downArrowMC._y = this.pageConfiguration.backgroundHeight * 0.84;
        this.pagesDetail = this.baseMC.createTextField("pageInfo", this.baseMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.9, this.pageConfiguration.backgroundHeight * 0.9, undefined, undefined);
        this.pagesDetail.autoSize = "right";
    }

    function setTitleTxtField()
    {
        this.baseMC.createTextField("heading", this.baseMC.getNextHighestDepth(), this.pageConfiguration.titleX, this.pageConfiguration.titleY, undefined, undefined);
        this.baseMC.heading.autoSize = true;
        this.baseMC.heading.text = "Product Info ";
        this.setTxtFormat("Arial", 50, 16777215, "left", false);
        this.baseMC.heading.setTextFormat(this.txtFrmt);
    }

    function loadMask()
    {
        this.maskMC = this.mainMC.attachMovie("background", "maskMC", this.mainMC.getNextHighestDepth());
        this.maskMC._x = 0;
        this.maskMC._y = this.firstTxtFieldHrzntlPos;
        this.maskMC._height = this.maskHeight;
        this.maskMC._width = this.pageConfiguration.backgroundWidth;
        this.mainMC.setMask(this.maskMC);
    }

    function boxStatusMessage()
    {
        this.messageText = this.baseMC.createTextField("messageText", this.baseMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth / 2, this.firstTxtFieldHrzntlPos + this.itemCounter * (this.maskHeight / this.itemsOnPage), 100, 40);
        this.messageText.autoSize = "center";
        this.messageText.htmlText = com.diagnostics.as2.DiagnosticsXMLParser.statusMessage;
        this.setTxtFormat("Arial", 26, 16555008, "center", true);
        this.messageText.setTextFormat(this.txtFrmt);
    }

    function createTxtField(identifier)
    {
        var __reg2 = null;
        if (this.itemCounter % 2 == 0) 
        {
            __reg2 = this.mainMC.attachMovie("productInfoBarLight", "stripMC", this.mainMC.getNextHighestDepth());
            __reg2._y = this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter;
            __reg2._x = (this.pageConfiguration.backgroundWidth - __reg2._width) / 2;
        }
        else 
        {
            __reg2 = this.mainMC.attachMovie("productInfoBarDark", "stripMC", this.mainMC.getNextHighestDepth());
            __reg2._y = this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter;
            __reg2._x = (this.pageConfiguration.backgroundWidth - __reg2._width) / 2;
        }
        this.stripHeight = __reg2._height;
        var __reg3 = this.mainMC.createTextField(identifier + "LabelTxtField", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.45, 0, 0, 0);
        __reg3.autoSize = "right";
        __reg3.text = identifier;
        __reg3._y = __reg2._y + (this.stripHeight - __reg3._height) / 4;
        var __reg5 = this.mainMC.createTextField(identifier + "ValueTxtField", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.55, 0, 0, 0);
        __reg5._y = __reg3._y;
        this.mainMC.createTextField(identifier + "colon", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.49, this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter, 0, 0);
        this.mainMC[identifier + "colon"].autoSize = "left";
        this.mainMC[identifier + "colon"].text = ":";
        this.setTxtFormat("Arial", 26, 16777215, "center", false);
        this.mainMC[identifier + "colon"].setTextFormat(this.txtFrmt);
        __reg3.setTextFormat(this.txtFrmt);
        ++this.itemCounter;
        if (this.itemCounter != 1) 
        {
            if (this.itemCounter % this.itemsOnPage == 1) 
            {
                ++this.totalPages;
            }
        }
        __reg3 = null;
        __reg2 = null;
    }

    function setValueTxtField(Value, identifier, state)
    {
        if (state == "error") 
        {
            this.setTxtFormat("Arial", 26, 16555008, "left", false);
        }
        else 
        {
            this.setTxtFormat("Arial", 26, 16777011, "left", false);
        }
        this.mainMC[identifier + "ValueTxtField"].autoSize = true;
        this.mainMC[identifier + "ValueTxtField"].htmlText = Value;
        this.mainMC[identifier + "ValueTxtField"].setTextFormat(this.txtFrmt);
    }

    function getIPAddress()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        this.removeLoadingMC();
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseIPAddress();
            this.identifier = "LAN IP";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ipAddress, this.identifier, "normal");
            this.identifier = "Subnet Mask";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.subnetMask, this.identifier, "normal");
            this.identifier = "Default Gateway";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway, this.identifier, "normal");
            this.identifier = "Primary DNS";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS, this.identifier, "normal");
            this.identifier = "Secondary DNS";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS, this.identifier, "normal");
        }
        else 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.ipAddress = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.subnetMask = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS = this.errorMessage;
            if (__reg4) 
            {
                this.identifier = "LAN IP";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ipAddress, this.identifier, "error");
                this.identifier = "Subnet Mask";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.subnetMask, this.identifier, "error");
                this.identifier = "Default Gateway";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway, this.identifier, "error");
                this.identifier = "Primary DNS";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS, this.identifier, "error");
                this.identifier = "Secondary DNS";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS, this.identifier, "error");
            }
            else 
            {
                this.identifier = "LAN IP";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ipAddress, this.identifier, "error");
                this.identifier = "Subnet Mask";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.subnetMask, this.identifier, "error");
                this.identifier = "Default Gateway";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway, this.identifier, "error");
                this.identifier = "Primary DNS";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS, this.identifier, "error");
                this.identifier = "Secondary DNS";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS, this.identifier, "error");
            }
        }
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(this.firmwareVersionXmlPath, "boxXml", this.fn.onFirmwarVersionLoaded);
        __reg3 = null;
        __reg4 = null;
    }

    function getFirmwareVersion()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseFirmwareVersion();
            this.identifier = "Firmware Version";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion, this.identifier, "normal");
        }
        else 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion = this.errorMessage;
            if (__reg4) 
            {
                this.identifier = "Firmware Version";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion, this.identifier, "error");
            }
            else 
            {
                this.identifier = "Firmware Version";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion, this.identifier, "error");
            }
        }
        this.getBoxID();
        __reg3 = null;
        __reg4 = null;
    }

    function getBoxID()
    {
        var __reg4 = "";
        var __reg3 = undefined;
        __reg3 = new Array();
        this.macAddr = this.boxId = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        __reg3 = this.boxId.split("");
        var __reg2 = 0;
        while (__reg2 < __reg3.length) 
        {
            if (__reg2 % 4 == 0 && __reg2 != 0) 
            {
                __reg4 = __reg4.concat("-");
            }
            __reg3[__reg2] = __reg3[__reg2].toString();
            __reg4 = __reg4.concat(__reg3[__reg2]);
            ++__reg2;
        }
        this.boxId = __reg4;
        this.identifier = "Box ID";
        this.setValueTxtField(this.boxId, this.identifier);
        this.getAppVersion();
        this.identifier = null;
        __reg2 = null;
        false;
        __reg3 = null;
        __reg4 = null;
    }

    function getAppVersion()
    {
        var __reg2 = null;
        var __reg3 = null;
        __reg2 = com.jadoo.as2.JadooPlus.Utils.Config.appVersion;
        __reg3 = com.jadoo.as2.JadooPlus.Utils.Config.myJadooAppVersion;
        this.identifier = "JP Application Version";
        this.setValueTxtField(__reg2, this.identifier);
        this.identifier = "MJ Application Version";
        this.setValueTxtField(__reg3, this.identifier);
        this.identifier = null;
        this.loadServerInfo();
    }

    function loadServerInfo()
    {
        this.displayLoadingMC();
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onProductInfoLoaded);
    }

    function getServerInfo()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        this.removeLoadingMC();
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseProductInfo();
            this.identifier = "Server Name / Version";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.serverName + " / " + com.diagnostics.as2.DiagnosticsXMLParser.serverVersion, this.identifier, "normal");
            this.identifier = null;
            this.identifier = "Registered";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.regStatus, this.identifier, "normal");
            this.identifier = null;
            this.identifier = "Box Status";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.boxStatus, this.identifier, "normal");
        }
        else 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.serverName = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.regStatus = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.boxStatus = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.serverVersion = this.errorMessage;
            if (__reg4) 
            {
                this.identifier = "Server Name / Version";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.serverName, this.identifier, "error");
                this.identifier = null;
                this.identifier = "Registered";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.regStatus, this.identifier, "error");
                this.identifier = null;
                this.identifier = "Box Status";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.boxStatus, this.identifier, "error");
            }
            else 
            {
                this.identifier = "Server Name / Version";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.serverName, this.identifier, "error");
                this.identifier = null;
                this.identifier = "Registered";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.regStatus, this.identifier, "error");
                this.identifier = null;
                this.identifier = "Box Status";
                this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.boxStatus, this.identifier, "error");
            }
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        if (com.diagnostics.as2.DiagnosticsXMLParser.boxStatus == "disabled") 
        {
            this.boxStatusMessage();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function setScrollArrows()
    {
        this.downArrowMC._visible = true;
        this.upArrowMC._visible = true;
        if (this.totalPages == 1) 
        {
            this.downArrowMC._visible = false;
        }
        if (this.pageId == 1) 
        {
            this.upArrowMC._visible = false;
        }
        if (this.pageId == this.totalPages) 
        {
            this.downArrowMC._visible = false;
        }
    }

    function pagesInfo()
    {
        if (this.totalPages == 1) 
        {
            this.pagesDetail._visible = false;
        }
        this.setTxtFormat("Arial", 22, 16777215, "right", false);
        this.pagesDetail.setNewTextFormat(this.txtFrmt);
        this.pagesDetail.text = "Page " + this.pageId + " of " + this.totalPages;
    }

    function displayBtn(posY)
    {
        var __reg2 = this.baseMC.createEmptyMovieClip("buttonMC", this.baseMC.getNextHighestDepth());
        this.setTxtFormat("Arial", 24, 0, "center", true);
        var __reg4 = __reg2.attachMovie("infoBtnDis", "startBtnMC", __reg2.getNextHighestDepth());
        var __reg3 = __reg2.attachMovie("infoBtnDis", "cancelBtnMC", __reg2.getNextHighestDepth());
        var __reg9 = __reg2.attachMovie("infoBtnEnb", "btnHlMC", __reg2.getNextHighestDepth());
        __reg4._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x - (__reg4._width + this.pageConfiguration.buttonOffset);
        __reg4._y = posY;
        __reg3._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x + this.pageConfiguration.buttonOffset;
        __reg3._y = posY;
        __reg9._x = __reg3._x;
        __reg9._y = __reg3._y;
        var __reg8 = __reg2.createTextField("startBtnTextEnb", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg8.setNewTextFormat(this.txtFrmt);
        __reg8.htmlText = "Refresh";
        var __reg7 = __reg2.createTextField("cancelBtnTextEnb", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg7.setNewTextFormat(this.txtFrmt);
        __reg7.htmlText = "Back";
        this.setTxtFormat("Arial", 24, 3092271, "center", true);
        var __reg6 = __reg2.createTextField("startBtnTextDis", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg6.setNewTextFormat(this.txtFrmt);
        __reg6.htmlText = "Refresh";
        __reg6._visible = false;
        var __reg5 = __reg2.createTextField("cancelBtnTextDis", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.htmlText = "Back";
        __reg5._visible = false;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
        __reg8 = null;
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
    }

    function calculateBtnPositionY(pageNumber)
    {
        var __reg2 = undefined;
        var __reg3 = undefined;
        if (pageNumber * this.itemsOnPage > this.itemCounter) 
        {
            __reg2 = this.itemCounter - (this.pageId - 1) * this.itemsOnPage;
        }
        else 
        {
            __reg2 = this.itemsOnPage;
        }
        __reg3 = (__reg2 + 2) * this.textContainerHeight + (this.firstTxtFieldHrzntlPos - this.pageConfiguration.titleY);
        __reg2 = null;
        return __reg3;
    }

    function btnHighlight()
    {
        if (this.currentFocus == 0) 
        {
            this.baseMC.buttonMC.startBtnTextDis._visible = false;
            this.baseMC.buttonMC.startBtnTextEnb._visible = true;
            this.baseMC.buttonMC.cancelBtnTextDis._visible = true;
            this.baseMC.buttonMC.cancelBtnTextEnb._visible = false;
            this.baseMC.buttonMC.btnHlMC._x = this.baseMC.buttonMC.startBtnMC._x;
            return;
        }
        if (this.currentFocus == 1) 
        {
            this.baseMC.buttonMC.cancelBtnTextDis._visible = false;
            this.baseMC.buttonMC.cancelBtnTextEnb._visible = true;
            this.baseMC.buttonMC.startBtnTextDis._visible = true;
            this.baseMC.buttonMC.startBtnTextEnb._visible = false;
            this.baseMC.buttonMC.btnHlMC._x = this.baseMC.buttonMC.cancelBtnMC._x;
        }
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.baseMC.attachMovie("loading", "loadingMC", this.baseMC.getNextHighestDepth(), {_x: this.pageConfiguration.backgroundWidth / 2, _y: this.pageConfiguration.backgroundHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.pageId != this.totalPages && this.itemCounter > this.itemsOnPage) 
            {
                ++this.pageId;
                this.maskMC._y = this.maskMC._y + this.maskHeight;
                this.mainMC._y = (0 - this.maskHeight) * (this.pageId - 1);
                removeMovieClip(this.baseMC.buttonMC);
                this.btnPosY = this.calculateBtnPositionY(this.pageId);
                this.displayBtn(this.btnPosY);
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.pageId != 1) 
            {
                --this.pageId;
                this.mainMC._y = (0 - this.maskHeight) * (this.pageId - 1);
                this.maskMC._y = this.maskMC._y - this.maskHeight;
                removeMovieClip(this.baseMC.buttonMC);
                this.btnPosY = this.calculateBtnPositionY(this.pageId);
                this.displayBtn(this.btnPosY);
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentFocus == 1) 
            {
                this.currentFocus = 0;
            }
            this.btnHighlight();
        }
        else if (__reg0 === 39) 
        {
            if (this.currentFocus == 0) 
            {
                this.currentFocus = 1;
            }
            this.btnHighlight();
        }
        else if (__reg0 === 13) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            if (this.currentFocus == 0) 
            {
                this.clearFields();
                com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(this.ipAddressXmlPath, "boxXml", this.fn.onIPAddressLoaded);
            }
            else if (this.currentFocus == 1) 
            {
                this.onPageBack.notify("Product Info");
            }
        }
        else if (__reg0 === Key.BACK) 
        {
            this.onPageBack.notify("Product Info");
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        this.pagesInfo();
        this.setScrollArrows();
    }

    function clearFields()
    {
        this.mainMC["LAN IPValueTxtField"].text = "";
        this.mainMC["Subnet MaskValueTxtField"].text = "";
        this.mainMC["Default GatewayValueTxtField"].text = "";
        this.mainMC["Primary DNSValueTxtField"].text = "";
        this.mainMC["Secondary DNSValueTxtField"].text = "";
        this.mainMC["Box IDValueTxtField"].text = "";
        this.mainMC["Firmware VersionValueTxtField"].text = "";
        this.mainMC["JP Application VersionValueTxtField"].text = "";
        this.mainMC["MJ Application VersionValueTxtField"].text = "";
        this.mainMC["Server Name / VersionValueTxtField"].text = "";
        this.mainMC.RegisteredValueTxtField.text = "";
        this.mainMC["Box StatusValueTxtField"].text = "";
        this.messageText.htmlText = "";
    }

    function destroy()
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.keyListener != null) 
        {
            this.keyListener.onKeyDown = null;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        this.fn = null;
        this.firstTxtFieldHrzntlPos = null;
        this.itemCounter = null;
        this.totalPages = null;
        this.pageId = null;
        this.maskHeight = null;
        this.itemsOnPage = null;
        this.macAddr = null;
        com.diagnostics.as2.DiagnosticsXMLParser.destroy();
        this.baseMC.removeMovieClip();
    }

}

//Sprite 744
//  InitClip
dynamic class com.diagnostics.as2.DiagnosticsXMLParser
{
    static var ipAddress = null;
    static var subnetMask = null;
    static var defaultGateway = null;
    static var primaryDNS = null;
    static var secondaryDNS = null;
    static var firmwareVersion = null;
    static var boxID = null;
    static var serverName = null;
    static var serverVersion = null;
    static var regStatus = null;
    static var ownerEmailId = null;
    static var countryName = null;
    static var countryCode = null;
    static var baseUrl = null;
    static var speedTestInitialUrl = null;
    static var speedTestUrl = null;
    static var boxStatus = null;
    static var statusMessage = null;
    static var lanReturnStatus = null;
    static var lanConnectionStatus = null;
    static var internetReturnStatus = null;
    static var internetConnectionStatus = null;
    static var pingTraceEnabled: Boolean = false;
    static var cdnServersUrl = null;
    static var backendServersUrl = null;
    static var xmlInvoker = null;
    static var onLoadXml = null;

    function DiagnosticsXMLParser()
    {
    }

    static function loadDiagnosticsXML(url, xmlType, onLoad)
    {
        if (com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker != null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.destroy();
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.xmlResponse.removeListener(com.diagnostics.as2.DiagnosticsXMLParser, com.diagnostics.as2.DiagnosticsXMLParser.onXmlResponse);
            delete com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker;
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker = null;
        }
        com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker = new com.diagnostics.as2.JadooXml();
        com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.xmlResponse.addListener(com.diagnostics.as2.DiagnosticsXMLParser, com.diagnostics.as2.DiagnosticsXMLParser.onXmlResponse);
        com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.loadXML(url, xmlType);
        com.diagnostics.as2.DiagnosticsXMLParser.onLoadXml = onLoad;
    }

    static function onXmlResponse()
    {
        var __reg2 = arguments[0];
        var __reg3 = arguments[1];
        if (__reg2) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.xmlObj = com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.getXmlObject();
        }
        com.diagnostics.as2.DiagnosticsXMLParser.onLoadXml(__reg2, __reg3);
        __reg2 = null;
        __reg3 = null;
    }

    static function parseIPAddress()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.ipAddress = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/ipAddress").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.subnetMask = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/subnetMask").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/gateway").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/primaryDns").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/secondaryDns").firstChild.nodeValue;
        if (com.diagnostics.as2.DiagnosticsXMLParser.ipAddress == undefined || com.diagnostics.as2.DiagnosticsXMLParser.ipAddress == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.ipAddress = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.subnetMask == undefined || com.diagnostics.as2.DiagnosticsXMLParser.subnetMask == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.subnetMask = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway == undefined || com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.defaultGateway = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS == undefined || com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.primaryDNS = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS == undefined || com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.secondaryDNS = "-";
        }
    }

    static function parseFirmwareVersion()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/firmwareVersion").firstChild.nodeValue;
        if (com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion == undefined || com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion == null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.firmwareVersion = "-";
        }
    }

    static function parseProductInfo()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.serverName = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/server_name").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.serverVersion = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/server_version").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.regStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/registeration/box_registered").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.boxStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/registeration/box_status").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.statusMessage = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/registeration/box_message").firstChild.nodeValue;
        if (com.diagnostics.as2.DiagnosticsXMLParser.serverName == undefined || com.diagnostics.as2.DiagnosticsXMLParser.serverName == "Not Available" || com.diagnostics.as2.DiagnosticsXMLParser.boxStatus == "disabled") 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.serverName = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.serverVersion == undefined || com.diagnostics.as2.DiagnosticsXMLParser.serverVersion == "Not Available" || com.diagnostics.as2.DiagnosticsXMLParser.boxStatus == "disabled") 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.serverVersion = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.regStatus == undefined || com.diagnostics.as2.DiagnosticsXMLParser.regStatus == "Not Available") 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.regStatus = "-";
        }
    }

    static function parseUserInfo()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/registeration/registeration_email").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.countryName = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/countryName").firstChild.nodeValue;
        if (com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId == undefined || com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId == "Not Available") 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId = "-";
        }
        if (com.diagnostics.as2.DiagnosticsXMLParser.countryName == undefined || com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId == "Not Available") 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.countryName = "-";
        }
    }

    static function paresSpeedTestInitialLink()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.speedTestInitialUrl = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/speed_test_url").firstChild.nodeValue;
    }

    static function parseSpeedTestUrl()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.speedTestUrl = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/speedtest/url").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.speedTestUrl = com.diagnostics.as2.DiagnosticsXMLParser.speedTestUrl + "?q=";
    }

    static function parseLanStatus()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.lanReturnStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.lanConnectionStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/linkup").firstChild.nodeValue;
    }

    static function parseInternetStatus()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.internetReturnStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/returnValue").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.internetConnectionStatus = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/theDavidBox/response/connection").firstChild.nodeValue;
    }

    static function parseServerUrl()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.baseUrl = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/baseurl").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.baseUrl = com.diagnostics.as2.DiagnosticsXMLParser.baseUrl + "/0";
        com.diagnostics.as2.DiagnosticsXMLParser.countryCode = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/countryCode").firstChild.nodeValue;
    }

    static function parsePingTraceUrl()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.cdnServersUrl = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/ping_trace/streaming").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.backendServersUrl = mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/ping_trace/server").firstChild.nodeValue;
        com.diagnostics.as2.DiagnosticsXMLParser.pingTraceEnabled = Boolean(Number(mx.xpath.XPathAPI.selectSingleNode(com.diagnostics.as2.DiagnosticsXMLParser.xmlObj.firstChild, "/xml/box_data/data/ping_trace/enabled").firstChild.nodeValue));
    }

    static function destroy()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.onLoadXml = null;
        com.diagnostics.as2.DiagnosticsXMLParser.xmlObj = null;
        if (com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker != null) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.destroy();
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker.xmlResponse.removeListener(com.diagnostics.as2.DiagnosticsXMLParser, com.diagnostics.as2.DiagnosticsXMLParser.onXmlResponse);
            delete com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker;
            com.diagnostics.as2.DiagnosticsXMLParser.xmlInvoker = null;
        }
    }

}

//Sprite 745
//  InitClip
dynamic class com.diagnostics.as2.JadooXml
{
    var xmlTimeOutId: Number = -1;
    var xmlResponse = null;
    var xmlUrl = null;
    var fn;
    var timeOut;
    var xmlObj;

    function JadooXml()
    {
        this.xmlResponse = new com.BigRoom.Event();
        this.fn = {onXmlLoad: mx.utils.Delegate.create(this, this.onXmlLoad)};
    }

    function loadXML(url, xmlType)
    {
        if (xmlType == "serverXml") 
        {
            if (url.charAt(url.length - 1) != "/") 
            {
                url = url + "/";
            }
            url = url + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
            this.xmlUrl = url;
        }
        if (this.xmlObj != null) 
        {
            delete this.xmlObj;
            this.xmlObj = null;
        }
        this.xmlObj = new XML();
        this.xmlObj.ignoreWhite = true;
        this.xmlObj.load(url);
        this.xmlTimeOutId = setInterval(this, "xmlTimeOut", com.jadoo.as2.JadooPlus.Utils.Config.diagnosticsXmlTimeOutDuration);
        this.xmlObj.onLoad = this.fn.onXmlLoad;
    }

    function onXmlLoad(success)
    {
        this.clearXmlTimeOutInverval();
        this.timeOut = false;
        this.xmlResponse.notify(success, this.timeOut);
    }

    function clearXmlTimeOutInverval()
    {
        clearInterval(this.xmlTimeOutId);
        this.xmlTimeOutId = -1;
    }

    function xmlTimeOut()
    {
        this.clearXmlTimeOutInverval();
        this.xmlObj.onData = null;
        this.timeOut = true;
        this.xmlResponse.notify(false, this.timeOut);
    }

    function getXmlObject()
    {
        return this.xmlObj;
    }

    function destroy()
    {
        this.fn = null;
        this.timeOut = null;
        if (this.xmlObj != null) 
        {
            delete this.xmlObj;
            this.xmlObj = null;
        }
        if (this.xmlResponse != null) 
        {
            delete this.xmlResponse;
            this.xmlResponse = null;
        }
        if (this.xmlTimeOutId != null) 
        {
            clearInterval(this.xmlTimeOutId);
            this.xmlTimeOutId = -1;
        }
    }

}

//Sprite 746
//  InitClip
dynamic class com.diagnostics.as2.UserInfo
{
    var fn = null;
    var identifier = null;
    var boxId = null;
    var pageConfiguration = null;
    var onPageBack = null;
    var keyListener = new Object();
    var darkStripMC = null;
    var lightStripMC = null;
    var baseMC = null;
    var mainMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var maskMC = null;
    var loadingMC = null;
    var pagesDetail = null;
    var errorMessage: String = "Unable to retrieve";
    var stripHeight = null;
    var txtFrmt = null;
    var itemCounter: Number = 0;
    var totalPages: Number = 1;
    var pageId: Number = 1;
    var itemsOnPage: Number = 11;
    var textContainerHeight: Number = 42;
    var btnPosY: Number = 0;
    var currentFocus: Number = 1;
    var firstTxtFieldHrzntlPos;
    var maskHeight;

    function UserInfo()
    {
    }

    function create(backgroundMC)
    {
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onUserInfoLoaded: mx.utils.Delegate.create(this, this.getUserInfo)};
        this.onPageBack = new com.BigRoom.Event();
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.baseMC = backgroundMC.createEmptyMovieClip("baseMC", backgroundMC.getNextHighestDepth());
        this.setTitleTxtField();
        this.boxId = com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        this.loadBackground();
        this.maskHeight = this.itemsOnPage * this.textContainerHeight;
        this.firstTxtFieldHrzntlPos = this.pageConfiguration.backgroundHeight * 0.18;
        this.createTxtField("Owner\'s Email ID");
        this.createTxtField("Country");
        this.loadMask();
        this.displayLoadingMC();
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onUserInfoLoaded);
        this.pagesInfo();
        this.setScrollArrows();
        this.btnPosY = this.calculateBtnPositionY(this.pageId);
        this.displayBtn(this.btnPosY);
        this.btnHighlight();
    }

    function setTxtFormat(font, size, color, alignment, bold)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        this.txtFrmt.bold = bold;
    }

    function loadBackground()
    {
        this.mainMC = this.baseMC.createEmptyMovieClip("mainMC", this.baseMC.getNextHighestDepth());
        this.upArrowMC = this.mainMC.attachMovie("arrowUP", "upArrowMC", this.mainMC.getNextHighestDepth());
        this.upArrowMC._x = this.pageConfiguration.backgroundWidth * 0.94;
        this.upArrowMC._y = this.pageConfiguration.backgroundHeight * 0.82;
        this.upArrowMC._visible = false;
        this.downArrowMC = this.mainMC.attachMovie("arrowDown", "downArrowMC", this.mainMC.getNextHighestDepth());
        this.downArrowMC._x = this.pageConfiguration.backgroundWidth * 0.94;
        this.downArrowMC._y = this.pageConfiguration.backgroundHeight * 0.82;
        this.pagesDetail = this.mainMC.createTextField("pageInfo", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.9, this.pageConfiguration.backgroundHeight * 0.9, undefined, undefined);
        this.pagesDetail.autoSize = "right";
    }

    function setTitleTxtField()
    {
        this.baseMC.createTextField("heading", this.baseMC.getNextHighestDepth(), this.pageConfiguration.titleX, this.pageConfiguration.titleY, undefined, undefined);
        this.baseMC.heading.autoSize = true;
        this.baseMC.heading.text = "User Info ";
        this.setTxtFormat("Arial", 50, 16777215, "left", false);
        this.baseMC.heading.setTextFormat(this.txtFrmt);
    }

    function loadMask()
    {
        this.maskMC = this.mainMC.attachMovie("background", "maskMC", this.mainMC.getNextHighestDepth());
        this.maskMC._x = 0;
        this.maskMC._y = this.firstTxtFieldHrzntlPos;
        this.maskMC._height = this.maskHeight;
        this.maskMC._width = this.pageConfiguration.backgroundWidth;
        this.mainMC.setMask(this.maskMC);
    }

    function createTxtField(identifier)
    {
        var __reg2 = null;
        if (this.itemCounter % 2 == 0) 
        {
            __reg2 = this.mainMC.attachMovie("productInfoBarLight", "stripMC", this.mainMC.getNextHighestDepth());
            __reg2._y = this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter;
            __reg2._x = (this.pageConfiguration.backgroundWidth - __reg2._width) / 2;
        }
        else 
        {
            __reg2 = this.mainMC.attachMovie("productInfoBarDark", "stripMC", this.mainMC.getNextHighestDepth());
            __reg2._y = this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter;
            __reg2._x = (this.pageConfiguration.backgroundWidth - __reg2._width) / 2;
        }
        this.stripHeight = __reg2._height;
        var __reg3 = this.mainMC.createTextField(identifier + "LabelTxtField", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.45, 0, 0, 0);
        __reg3.autoSize = "right";
        __reg3.text = identifier;
        __reg3._y = __reg2._y + (this.stripHeight - __reg3._height) / 4;
        var __reg5 = this.mainMC.createTextField(identifier + "ValueTxtField", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.55, 0, 0, 0);
        __reg5._y = __reg3._y;
        this.mainMC.createTextField(identifier + "colon", this.mainMC.getNextHighestDepth(), this.pageConfiguration.backgroundWidth * 0.49, this.firstTxtFieldHrzntlPos + this.maskHeight / this.itemsOnPage * this.itemCounter, undefined, undefined);
        this.mainMC[identifier + "colon"].autoSize = "left";
        this.mainMC[identifier + "colon"].text = ":";
        this.setTxtFormat("Arial", 26, 16777215, "center", false);
        __reg3.setTextFormat(this.txtFrmt);
        this.mainMC[identifier + "colon"].setTextFormat(this.txtFrmt);
        ++this.itemCounter;
        if (this.itemCounter != 1) 
        {
            if (this.itemCounter % this.itemsOnPage == 1) 
            {
                ++this.totalPages;
            }
        }
        __reg3 = null;
        __reg2 = null;
    }

    function setValueTxtField(Value, identifier, state)
    {
        if (state == "error") 
        {
            this.setTxtFormat("Arial", 26, 16555008, "left", false);
        }
        else 
        {
            this.setTxtFormat("Arial", 26, 16777011, "left", false);
        }
        this.mainMC[identifier + "ValueTxtField"].autoSize = "left";
        this.mainMC[identifier + "ValueTxtField"].text = Value;
        this.mainMC[identifier + "ValueTxtField"].setTextFormat(this.txtFrmt);
    }

    function getUserInfo()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        this.removeLoadingMC();
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseUserInfo();
            this.identifier = "Owner\'s Email ID";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId, this.identifier, "normal");
            this.identifier = null;
            this.identifier = "Country";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.countryName, this.identifier, "normal");
            this.identifier = null;
        }
        else if (__reg4) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.countryName = this.errorMessage;
            this.identifier = "Owner\'s Email ID";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId, this.identifier, "error");
            this.identifier = null;
            this.identifier = "Country";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.countryName, this.identifier, "error");
            this.identifier = null;
        }
        else 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId = this.errorMessage;
            com.diagnostics.as2.DiagnosticsXMLParser.countryName = this.errorMessage;
            this.identifier = "Owner\'s Email ID";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.ownerEmailId, this.identifier, "error");
            this.identifier = null;
            this.identifier = "Country";
            this.setValueTxtField(com.diagnostics.as2.DiagnosticsXMLParser.countryName, this.identifier, "error");
            this.identifier = null;
        }
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        __reg3 = null;
        __reg4 = null;
    }

    function setScrollArrows()
    {
        this.downArrowMC._visible = true;
        this.upArrowMC._visible = true;
        if (this.totalPages == 1) 
        {
            this.downArrowMC._visible = false;
        }
        if (this.pageId == 1) 
        {
            this.upArrowMC._visible = false;
        }
        if (this.pageId == this.totalPages) 
        {
            this.downArrowMC._visible = false;
        }
    }

    function pagesInfo()
    {
        if (this.totalPages == 1) 
        {
            this.pagesDetail._visible = false;
        }
        this.setTxtFormat("Arial", 22, 16777215, "right", false);
        this.pagesDetail.setNewTextFormat(this.txtFrmt);
        this.pagesDetail.text = "Page " + this.pageId + " of " + this.totalPages;
    }

    function displayBtn(posY)
    {
        var __reg2 = this.baseMC.createEmptyMovieClip("buttonMC", this.baseMC.getNextHighestDepth());
        this.setTxtFormat("Arial", 24, 0, "center", true);
        var __reg4 = __reg2.attachMovie("infoBtnDis", "startBtnMC", __reg2.getNextHighestDepth());
        var __reg3 = __reg2.attachMovie("infoBtnDis", "cancelBtnMC", __reg2.getNextHighestDepth());
        var __reg9 = __reg2.attachMovie("infoBtnEnb", "btnHlMC", __reg2.getNextHighestDepth());
        __reg4._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x - (__reg4._width + this.pageConfiguration.buttonOffset);
        __reg4._y = posY;
        __reg3._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x + this.pageConfiguration.buttonOffset;
        __reg3._y = posY;
        __reg9._x = __reg3._x;
        __reg9._y = __reg3._y;
        var __reg8 = __reg2.createTextField("startBtnText", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg8.setNewTextFormat(this.txtFrmt);
        __reg8.htmlText = "Refresh";
        var __reg7 = __reg2.createTextField("cancelBtnText", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg7.setNewTextFormat(this.txtFrmt);
        __reg7.htmlText = "Back";
        this.setTxtFormat("Arial", 24, 3092271, "center", true);
        var __reg6 = __reg2.createTextField("startBtnTextDis", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg6.setNewTextFormat(this.txtFrmt);
        __reg6.htmlText = "Refresh";
        __reg6._visible = false;
        var __reg5 = __reg2.createTextField("cancelBtnTextDis", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.htmlText = "Back";
        __reg5._visible = false;
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
        __reg8 = null;
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
    }

    function calculateBtnPositionY(pageNumber)
    {
        var __reg2 = undefined;
        var __reg3 = undefined;
        if (pageNumber * this.itemsOnPage > this.itemCounter) 
        {
            __reg2 = this.itemCounter - (pageNumber - 1) * this.itemsOnPage;
        }
        else 
        {
            __reg2 = this.itemsOnPage;
        }
        __reg3 = (__reg2 + 2) * this.textContainerHeight + (this.firstTxtFieldHrzntlPos - this.pageConfiguration.titleY);
        __reg2 = null;
        return __reg3;
    }

    function btnHighlight()
    {
        if (this.currentFocus == 0) 
        {
            this.baseMC.buttonMC.startBtnTextDis._visible = false;
            this.baseMC.buttonMC.startBtnTextEnb._visible = true;
            this.baseMC.buttonMC.cancelBtnTextDis._visible = true;
            this.baseMC.buttonMC.btnHlMC._x = this.baseMC.buttonMC.startBtnMC._x;
            return;
        }
        if (this.currentFocus == 1) 
        {
            this.baseMC.buttonMC.cancelBtnTextDis._visible = false;
            this.baseMC.buttonMC.cancelBtnTextEnb._visible = true;
            this.baseMC.buttonMC.startBtnTextDis._visible = true;
            this.baseMC.buttonMC.btnHlMC._x = this.baseMC.buttonMC.cancelBtnMC._x;
        }
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.baseMC.attachMovie("loading", "loadingMC", this.baseMC.getNextHighestDepth(), {_x: this.pageConfiguration.backgroundWidth / 2, _y: this.pageConfiguration.backgroundHeight / 2});
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 40) 
        {
            if (this.pageId != this.totalPages && this.itemCounter > this.itemsOnPage) 
            {
                ++this.pageId;
                this.maskMC._y = this.maskMC._y + this.maskHeight;
                this.mainMC._y = (0 - this.maskHeight) * (this.pageId - 1);
                removeMovieClip(this.baseMC.buttonMC);
                this.btnPosY = this.calculateBtnPositionY(this.pageId);
                this.displayBtn(this.btnPosY);
            }
        }
        else if (__reg0 === 38) 
        {
            if (this.pageId != 1) 
            {
                --this.pageId;
                this.mainMC._y = (0 - this.maskHeight) * (this.pageId - 1);
                this.maskMC._y = this.maskMC._y - this.maskHeight;
                removeMovieClip(this.baseMC.buttonMC);
                this.btnPosY = this.calculateBtnPositionY(this.pageId);
                this.displayBtn(this.btnPosY);
            }
        }
        else if (__reg0 === 37) 
        {
            if (this.currentFocus == 1) 
            {
                this.currentFocus = 0;
            }
            this.btnHighlight();
        }
        else if (__reg0 === 39) 
        {
            if (this.currentFocus == 0) 
            {
                this.currentFocus = 1;
            }
            this.btnHighlight();
        }
        else if (__reg0 === 13) 
        {
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            if (this.currentFocus == 0) 
            {
                this.clearFields();
                this.displayLoadingMC();
                com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onUserInfoLoaded);
            }
            else if (this.currentFocus == 1) 
            {
                this.onPageBack.notify("User Info");
            }
        }
        else if (__reg0 === Key.BACK) 
        {
            this.onPageBack.notify("User Info");
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        }
        this.pagesInfo();
        this.setScrollArrows();
    }

    function clearFields()
    {
        this.mainMC["Owner\'s Email IDValueTxtField"].text = "";
        this.mainMC.CountryValueTxtField.text = "";
    }

    function destroy()
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.keyListener != null) 
        {
            this.keyListener.onKeyDown = null;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        this.fn = null;
        this.firstTxtFieldHrzntlPos = null;
        this.itemCounter = null;
        this.totalPages = null;
        this.pageId = null;
        this.maskHeight = null;
        this.itemsOnPage = null;
        com.diagnostics.as2.DiagnosticsXMLParser.destroy();
        this.baseMC.removeMovieClip();
    }

}

//Sprite 747
//  InitClip
dynamic class com.diagnostics.as2.DiagnosticApplication
{
    var speedTest = null;
    var speedTestBaseMC = null;
    var diagnostics = null;
    var diagnosticBaseMC = null;
    var messageTxt = null;
    var txtFrmt = null;
    var parentBaseMC = null;
    var buttonMC = null;
    var onPageBack = null;
    var fn = null;
    var keyListener = null;
    var pageConfiguration = null;
    var currSTestFocus: Number = 1;
    var startBtnTextEnb = null;
    var cancelBtnTextEnb = null;
    var sTestBarWidth: Number = 731;
    var selectedFunction;

    function DiagnosticApplication()
    {
        this.keyListener = new Object();
        this.onPageBack = new com.BigRoom.Event();
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
    }

    function destroy()
    {
        if (this.keyListener != null) 
        {
            this.keyListener.onKeyDown = null;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.diagnostics != null) 
        {
            this.diagnostics.destroy();
            delete this.diagnostics;
            this.diagnostics = null;
            if (this.diagnosticBaseMC != null) 
            {
                removeMovieClip(this.diagnosticBaseMC);
            }
        }
        if (this.speedTest != null) 
        {
            this.speedTest.destroy();
            delete this.speedTest;
            this.speedTest = null;
            if (this.speedTestBaseMC != null) 
            {
                removeMovieClip(this.speedTestBaseMC);
            }
        }
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        this.fn = null;
        this.sTestBarWidth = null;
        this.currSTestFocus = null;
        removeMovieClip(this.parentBaseMC);
        this.diagnostics.onDiagnosticPageBack.removeListener(this, this.diagnosticPageback);
        this.speedTest.onError.removeListener(this, this.onErrorSpeedTest);
        this.speedTest.onTestComplete.removeListener(this, this.onTestComplete);
    }

    function setTxtFormat(font, size, color, alignment, bold)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        this.txtFrmt.bold = bold;
    }

    function startApp(parentMC, selectedItem)
    {
        this.parentBaseMC = parentMC.createEmptyMovieClip("parentBaseMC", parentMC.getNextHighestDepth(), {_x: 0, _y: 0});
        this.selectedFunction = selectedItem;
        this.displayTitle(selectedItem);
        this.messageTxt = this.parentBaseMC.createTextField("bitRateTxt", this.parentBaseMC.getNextHighestDepth(), 0, 620, 200, 30);
        this.messageTxt.autoSize = true;
        this.setTxtFormat("Arial", 22, 16777215, "center", false);
        this.messageTxt.setNewTextFormat(this.txtFrmt);
        if ((__reg0 = selectedItem) === "Connectivity") 
        {
            this.startDiagnostics();
            return;
        }
        else if (__reg0 !== "Speed Test") 
        {
            return;
        }
        this.startSpeedTest();
        return;
    }

    function startDiagnostics()
    {
        this.diagnosticBaseMC = this.parentBaseMC.createEmptyMovieClip("diagnosticBaseMC", this.parentBaseMC.getNextHighestDepth());
        this.diagnosticBaseMC._x = this.pageConfiguration.diagnosticsBaseX;
        this.diagnosticBaseMC._y = this.pageConfiguration.diagnosticsBaseY;
        this.diagnostics = new com.diagnostics.as2.Diagnostics();
        this.diagnostics.onDiagnosticPageBack.addListener(this, this.diagnosticPageback);
        this.diagnostics.runDiagnostics(this.diagnosticBaseMC);
    }

    function startSpeedTest()
    {
        this.speedTestBaseMC = this.parentBaseMC.createEmptyMovieClip("speedTestBaseMC", this.parentBaseMC.getNextHighestDepth());
        this.speedTestBaseMC._x = this.pageConfiguration.speedTestBaseX;
        this.speedTestBaseMC._y = this.pageConfiguration.speedTestBaseY;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        this.speedTest = new com.diagnostics.as2.SpeedTest();
        this.speedTest.onError.addListener(this, this.onErrorSpeedTest);
        this.speedTest.onTestComplete.addListener(this, this.onTestComplete);
        this.currSTestFocus = null;
        this.displayButtons();
        this.speedTest.create(this.speedTestBaseMC);
    }

    function diagnosticPageback()
    {
        this.onPageBack.notify("Connectivity");
    }

    function onErrorSpeedTest(error)
    {
        if ((__reg0 = error) === "incomplete") 
        {
            this.displayMessage("Speed Test Failed : Try Again");
            return;
        }
        else if (__reg0 !== "noConnection") 
        {
            return;
        }
        this.displayMessage("Unable to connect to Server");
        return;
    }

    function onTestComplete()
    {
        this.buttonMC._visible = true;
        if (this.cancelBtnTextEnb != null) 
        {
            this.currSTestFocus = 0;
            this.btnHighlight();
        }
    }

    function displayMessage(message)
    {
        if (this.messageTxt._visible == false) 
        {
            this.messageTxt._visible = true;
        }
        this.setTxtFormat("Arial", 30, 16555008, "center", false);
        this.messageTxt.setNewTextFormat(this.txtFrmt);
        this.messageTxt.htmlText = message;
        this.messageTxt._x = (this.pageConfiguration.backgroundWidth - this.messageTxt.textWidth) / 2;
        this.messageTxt._y = this.pageConfiguration.backgroundHeight * 0.9;
    }

    function displayTitle(selectedItem)
    {
        var __reg2 = this.parentBaseMC.createTextField("titleTxt", this.parentBaseMC.getNextHighestDepth(), this.pageConfiguration.titleX, this.pageConfiguration.titleY, undefined, undefined);
        __reg2.autoSize = true;
        this.setTxtFormat("Arial", 50, 16777215, "left", false);
        __reg2.setNewTextFormat(this.txtFrmt);
        __reg2.htmlText = selectedItem;
        __reg2 = null;
    }

    function displayButtons()
    {
        this.buttonMC = this.speedTestBaseMC.createEmptyMovieClip("buttonMC", this.speedTestBaseMC.getNextHighestDepth());
        var __reg3 = this.buttonMC.attachMovie("infoBtnDis", "startBtnMC", this.buttonMC.getNextHighestDepth());
        var __reg2 = this.buttonMC.attachMovie("infoBtnDis", "cancelBtnMC", this.buttonMC.getNextHighestDepth());
        var __reg6 = this.buttonMC.attachMovie("infoBtnEnb", "btnHlMC", this.buttonMC.getNextHighestDepth());
        __reg3._x = this.sTestBarWidth / 2 - (__reg3._width + this.pageConfiguration.buttonOffset);
        __reg3._y = 250;
        __reg2._x = this.sTestBarWidth / 2 + this.pageConfiguration.buttonOffset;
        __reg2._y = 250;
        __reg6._x = __reg2._x;
        __reg6._y = __reg2._y;
        this.setTxtFormat("Arial", 24, 0, "center", true);
        this.startBtnTextEnb = this.buttonMC.createTextField("startBtnTextEnb", this.buttonMC.getNextHighestDepth(), __reg3._x + __reg3._width / 2, __reg3._y + __reg3._height / 12, 0, 0);
        this.startBtnTextEnb.autoSize = "center";
        this.startBtnTextEnb.setNewTextFormat(this.txtFrmt);
        this.startBtnTextEnb.htmlText = "Restart";
        this.startBtnTextEnb._x = __reg3._x + (__reg3._width - this.startBtnTextEnb._width) / 2;
        this.startBtnTextEnb._y = __reg3._y + (__reg3._height - this.startBtnTextEnb._height) / 2;
        this.cancelBtnTextEnb = this.buttonMC.createTextField("cancelBtnTextEnb", this.buttonMC.getNextHighestDepth(), __reg2._x + __reg2._width / 2, __reg2._y + __reg2._height / 12, 0, 0);
        this.cancelBtnTextEnb.autoSize = "center";
        this.cancelBtnTextEnb.setNewTextFormat(this.txtFrmt);
        this.cancelBtnTextEnb.htmlText = "Back";
        this.cancelBtnTextEnb._x = __reg2._x + (__reg2._width - this.cancelBtnTextEnb._width) / 2;
        this.cancelBtnTextEnb._y = __reg2._y + (__reg2._height - this.cancelBtnTextEnb._height) / 2;
        this.setTxtFormat("Arial", 24, 3092271, "center", true);
        var __reg5 = this.buttonMC.createTextField("startBtnTextDis", this.buttonMC.getNextHighestDepth(), this.startBtnTextEnb._x, this.startBtnTextEnb._y, 0, 0);
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.autoSize = "center";
        __reg5.htmlText = "Restart";
        __reg5._visible = false;
        __reg5._x = this.startBtnTextEnb._x;
        __reg5._y = __reg3._y + (__reg3._height - __reg5._height) / 2;
        var __reg4 = this.buttonMC.createTextField("cancelBtnTextDis", this.buttonMC.getNextHighestDepth(), this.cancelBtnTextEnb._x, this.cancelBtnTextEnb._y, 0, 0);
        __reg4.setNewTextFormat(this.txtFrmt);
        __reg4.autoSize = "center";
        __reg4.htmlText = "Back";
        __reg4._visible = false;
        __reg4._x = __reg2._x + (__reg2._width - __reg4._width) / 2;
        __reg4._y = __reg2._y + (__reg2._height - __reg4._height) / 2;
        this.buttonMC._visible = false;
        __reg3 = null;
        __reg2 = null;
        __reg5 = null;
        __reg4 = null;
    }

    function btnHighlight()
    {
        if (this.currSTestFocus == 0) 
        {
            this.speedTestBaseMC.buttonMC.startBtnTextDis._visible = false;
            this.startBtnTextEnb._visible = true;
            this.speedTestBaseMC.buttonMC.cancelBtnTextDis._visible = true;
            this.cancelBtnTextEnb._visible = false;
            this.speedTestBaseMC.buttonMC.btnHlMC._x = this.speedTestBaseMC.buttonMC.startBtnMC._x;
            return;
        }
        if (this.currSTestFocus == 1) 
        {
            this.speedTestBaseMC.buttonMC.cancelBtnTextDis._visible = false;
            this.cancelBtnTextEnb._visible = true;
            this.speedTestBaseMC.buttonMC.startBtnTextDis._visible = true;
            this.startBtnTextEnb._visible = false;
            this.speedTestBaseMC.buttonMC.btnHlMC._x = this.speedTestBaseMC.buttonMC.cancelBtnMC._x;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currSTestFocus == 0) 
            {
                this.currSTestFocus = 1;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currSTestFocus == 1) 
            {
                this.currSTestFocus = 0;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.currSTestFocus == 0) 
            {
                this.cancelBtnTextEnb.htmlText = "Back";
                this.messageTxt._visible = false;
                this.speedTest.destroy();
                if (this.speedTest != null) 
                {
                    delete this.speedTest;
                    this.speedTest = null;
                }
                this.speedTest = new com.diagnostics.as2.SpeedTest();
                this.speedTest.create(this.speedTestBaseMC);
                this.speedTest.onTestComplete.addListener(this, this.onTestComplete);
                this.speedTest.onError.addListener(this, this.onErrorSpeedTest);
                this.currSTestFocus = -1;
                this.buttonMC._visible = false;
            }
            else if (this.currSTestFocus == 1) 
            {
                this.onPageBack.notify(this.selectedFunction);
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.onPageBack.notify(this.selectedFunction);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        return;
    }

}

//Sprite 748
//  InitClip
dynamic class com.diagnostics.as2.SpeedTest
{
    var fn = null;
    var imageLoader = null;
    var onError = null;
    var onTestComplete = null;
    var pageConfiguration = null;
    var loadStartTime: Number = 0;
    var bitRateTxtXPos: Number = 0;
    var prevBytesLoaded: Number = 0;
    var maxSpeed: Number = 0;
    var minimumSpeed: Number = 0;
    var totalDwnldTime: Number = 0;
    var dwnldStartTime: Number = 0;
    var txtFieldWidht: Number = 200;
    var txtFieldHeight: Number = 30;
    var speedTestFileLink = null;
    var initialSpeed: Boolean = true;
    var baseMC = null;
    var sTestBaseMC = null;
    var barImageMC = null;
    var barMaskMC = null;
    var txtFrmt = null;
    var bitRateTxt = null;
    var pecentLoadedTxt = null;
    var loadingMC = null;
    var imageLoadListener;
    var totalBytes;

    function SpeedTest()
    {
        this.imageLoader = new MovieClipLoader();
        this.imageLoadListener = new Object();
        this.fn = {onInitialXmlLoaded: mx.utils.Delegate.create(this, this.getSpeedTestXmlLink), onSpeedTestUrlLoaded: mx.utils.Delegate.create(this, this.onSpeedTestUrlLoaded), onImageLoadStart: mx.utils.Delegate.create(this, this.onImageLoadStart), onImageLoadProgress: mx.utils.Delegate.create(this, this.onImageLoadProgress), onImageLoadInit: mx.utils.Delegate.create(this, this.onImageLoadInit), onImageLoadError: mx.utils.Delegate.create(this, this.onImageLoadError), onGetInternetStatus: mx.utils.Delegate.create(this, this.onGetInternetStatus)};
        this.onError = new com.BigRoom.Event();
        this.onTestComplete = new com.BigRoom.Event();
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
    }

    function destroy()
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.imageLoader != null) 
        {
            this.imageLoader.removeListener(this.imageLoadListener);
            delete this.imageLoadListener;
            this.imageLoadListener = null;
            delete this.imageLoader;
            this.imageLoader = null;
        }
        if (this.onError != null) 
        {
            delete this.onError;
            this.onError = null;
        }
        if (this.onTestComplete != null) 
        {
            delete this.onTestComplete;
            this.onTestComplete = null;
        }
        this.fn = null;
        this.loadStartTime = null;
        this.bitRateTxtXPos = null;
        this.prevBytesLoaded = null;
        this.maxSpeed = null;
        this.minimumSpeed = null;
        this.totalDwnldTime = null;
        this.dwnldStartTime = null;
        this.totalBytes = null;
        com.diagnostics.as2.DiagnosticsXMLParser.destroy();
        removeMovieClip(this.baseMC);
    }

    function setTxtFormat(font, size, color, alignment)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
    }

    function create(speedTestBaseMC)
    {
        this.baseMC = speedTestBaseMC.createEmptyMovieClip("baseMC", speedTestBaseMC.getNextHighestDepth());
        this.sTestBaseMC = this.baseMC.createEmptyMovieClip("sTestBaseMC", this.baseMC.getNextHighestDepth());
        this.imageLoadListener.onLoadStart = this.fn.onImageLoadStart;
        this.imageLoadListener.onLoadProgress = this.fn.onImageLoadProgress;
        this.imageLoadListener.onLoadInit = this.fn.onImageLoadInit;
        this.imageLoadListener.onLoadError = this.fn.onImageLoadError;
        this.createElementsOnBg();
        this.loadingMC = this.baseMC.attachMovie("loading", "loadingMC", this.baseMC.getNextHighestDepth());
        this.loadingMC._x = (this.pageConfiguration.backgroundWidth - this.pageConfiguration.speedTestBaseX * 2) / 2;
        this.getInternetStatus();
        this.imageLoader.addListener(this.imageLoadListener);
    }

    function getInternetStatus()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_connection_status", "boxXml", this.fn.onGetInternetStatus);
    }

    function onGetInternetStatus()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseInternetStatus();
            if (com.diagnostics.as2.DiagnosticsXMLParser.internetReturnStatus == "0") 
            {
                if (com.diagnostics.as2.DiagnosticsXMLParser.internetConnectionStatus == "on") 
                {
                    this.startSpeedTest();
                }
                else 
                {
                    removeMovieClip(this.loadingMC);
                    this.onError.notify("noConnection");
                    this.onTestComplete.notify();
                }
            }
            else 
            {
                removeMovieClip(this.loadingMC);
                this.onError.notify("noConnection");
                this.onTestComplete.notify();
            }
        }
        else 
        {
            removeMovieClip(this.loadingMC);
            this.onError.notify("noConnection");
            this.onTestComplete.notify();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function startSpeedTest()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onInitialXmlLoaded);
    }

    function getSpeedTestXmlLink()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.paresSpeedTestInitialLink();
            com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.diagnostics.as2.DiagnosticsXMLParser.speedTestInitialUrl, "serverXml", this.fn.onSpeedTestUrlLoaded);
        }
        else 
        {
            removeMovieClip(this.loadingMC);
            this.onError.notify("noConnection");
            this.onTestComplete.notify();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function onSpeedTestUrlLoaded()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseSpeedTestUrl();
            this.initSpeedTest();
            this.startTest();
        }
        else 
        {
            removeMovieClip(this.loadingMC);
            this.onError.notify("noConnection");
            this.onTestComplete.notify();
        }
        __reg3 = null;
        __reg4 = null;
    }

    function createElementsOnBg()
    {
        this.createProgressBar();
    }

    function startTest()
    {
        var __reg2 = this.sTestBaseMC.createEmptyMovieClip("imageBaseMC", this.sTestBaseMC.getNextHighestDepth());
        var __reg3 = __reg2.createEmptyMovieClip("imageMC", __reg2.getNextHighestDepth());
        var __reg4 = com.diagnostics.as2.DiagnosticsXMLParser.speedTestUrl + getTimer();
        this.sTestBaseMC._alpha = 50;
        this.imageLoader.loadClip(__reg4, __reg3);
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
    }

    function onImageLoadStart()
    {
        this.dwnldStartTime = getTimer();
        this.loadStartTime = getTimer();
    }

    function onImageLoadProgress(target, bytesLoaded, bytesTotal)
    {
        var __reg2 = getTimer();
        var __reg4 = (__reg2 - this.loadStartTime) / 1000;
        var __reg3 = undefined;
        var __reg5 = (__reg2 - this.dwnldStartTime) / 1000;
        this.dwnldStartTime = __reg2;
        this.totalDwnldTime = this.totalDwnldTime + __reg5;
        this.totalBytes = bytesTotal;
        if (this.loadingMC != null) 
        {
            this.sTestBaseMC._alpha = 100;
            removeMovieClip(this.loadingMC);
            if (this.barImageMC._visible == false) 
            {
                this.barImageMC._visible = true;
            }
        }
        if (__reg4 >= 1) 
        {
            __reg3 = bytesLoaded - this.prevBytesLoaded;
            this.prevBytesLoaded = this.prevBytesLoaded + __reg3;
            this.loadStartTime = getTimer();
            this.calculateBitRate(__reg4, __reg3);
        }
        var __reg6 = int(bytesLoaded / bytesTotal * 100);
        this.tweenProgressBar(__reg6);
        __reg2 = null;
        __reg4 = null;
        __reg6 = null;
        __reg5 = null;
        __reg3 = null;
    }

    function onImageLoadInit(target_mc)
    {
        target_mc._visible = false;
        var __reg2 = this.imageLoader.getProgress(target_mc);
        if (__reg2.bytesLoaded < __reg2.bytesTotal) 
        {
            this.initSpeedTest();
            this.onError.notify("incomplete");
            this.onTestComplete.notify();
            return;
        }
        if (__reg2.bytesLoaded == __reg2.bytesTotal) 
        {
            this.pecentLoadedTxt.autoSize = "center";
            this.setTxtFormat("Arial", 30, 16777011, "center");
            this.pecentLoadedTxt.setNewTextFormat(this.txtFrmt);
            this.pecentLoadedTxt.htmlText = "Test completed";
            this.speedTestDetails();
            this.onTestComplete.notify();
        }
    }

    function onImageLoadError(target_mc, errorCode, httpStatus)
    {
        this.sTestBaseMC._alpha = 100;
        removeMovieClip(this.loadingMC);
        this.initSpeedTest();
        this.onError.notify("noConnection");
        this.onTestComplete.notify();
    }

    function calculateBitRate(timeDiffInSec, bytesLoaded)
    {
        var __reg4 = bytesLoaded * 8;
        var __reg2 = 0;
        var __reg3 = undefined;
        __reg2 = __reg4 / timeDiffInSec;
        if (this.initialSpeed) 
        {
            this.initialSpeed = false;
            this.minimumSpeed = __reg2;
        }
        if (__reg2 < this.minimumSpeed) 
        {
            this.minimumSpeed = __reg2;
        }
        if (__reg2 > this.maxSpeed) 
        {
            this.maxSpeed = __reg2;
        }
        if (__reg2 / 1024 / 1024 >= 1) 
        {
            __reg3 = "Mbps";
            this.displayBitRate(__reg2 / 1024 / 1024, __reg3, this.bitRateTxt);
        }
        else if (__reg2 / 1024 >= 1) 
        {
            __reg3 = "Kbps";
            this.displayBitRate(__reg2 / 1024, __reg3, this.bitRateTxt);
        }
        else 
        {
            __reg3 = "bps";
            this.displayBitRate(__reg2, __reg3, this.bitRateTxt);
        }
        __reg4 = null;
        __reg2 = null;
        __reg3 = null;
    }

    function displayBitRate(bitRate, bitRateString, TxtField)
    {
        var __reg1 = bitRate.toString();
        var __reg2 = __reg1.indexOf(".");
        if (__reg2 != -1) 
        {
            if (__reg2 + 3 <= __reg1.length) 
            {
                __reg1 = __reg1.substring(0, __reg2 + 3);
            }
            else if (__reg2 + 2 <= __reg1.length) 
            {
                __reg1 = __reg1.substring(0, __reg2 + 2);
            }
            else 
            {
                __reg1 = __reg1.substring(0, __reg2 + 1);
            }
        }
        TxtField.htmlText = __reg1 + " " + bitRateString;
        __reg1 = null;
        __reg2 = null;
    }

    function tweenProgressBar(percentBytesLoaded)
    {
        this.pecentLoadedTxt.autoSize = "left";
        this.pecentLoadedTxt.htmlText = percentBytesLoaded.toString() + " %";
        this.barMaskMC._width = percentBytesLoaded * (this.barImageMC._width / 100);
        if (percentBytesLoaded == 100) 
        {
            this.barMaskMC._width = this.barMaskMC._width + 5;
        }
    }

    function initSpeedTest()
    {
        this.sTestBaseMC.progressBarMC.bitRateMC.maxSpeedValue._visible = false;
        this.sTestBaseMC.progressBarMC.bitRateMC.avgSpeedValue._visible = false;
        this.sTestBaseMC.progressBarMC.bitRateMC.maxSpeedLabel._visible = false;
        this.sTestBaseMC.progressBarMC.bitRateMC.avgSpeedLabel._visible = false;
        this.barMaskMC._width = 0;
        if (this.barImageMC._visible == true) 
        {
            this.barImageMC._visible = false;
        }
        this.prevBytesLoaded = 0;
        if (this.sTestBaseMC.imageBaseMC != null) 
        {
            removeMovieClip(this.sTestBaseMC.imageBaseMC);
        }
        this.pecentLoadedTxt.autoSize = "left";
        this.pecentLoadedTxt.htmlText = " ";
        this.displayBitRate(0, "bps", this.bitRateTxt);
    }

    function createProgressBar()
    {
        var __reg4 = this.sTestBaseMC.createEmptyMovieClip("progressBarMC", this.sTestBaseMC.getNextHighestDepth());
        var __reg6 = __reg4.createEmptyMovieClip("barMC", __reg4.getNextHighestDepth());
        var __reg2 = __reg6.attachMovie("progressBarBackground", "barBackgroundMC", __reg6.getNextHighestDepth());
        this.barImageMC = __reg2.attachMovie("progressBar", "barImageMC", __reg2.getNextHighestDepth());
        this.barImageMC._x = this.pageConfiguration.speedTestBarX;
        this.barImageMC._y = this.pageConfiguration.speedTestBarY;
        this.barMaskMC = __reg2.attachMovie("maskMC", "barMaskMC", __reg2.getNextHighestDepth(), {_x: this.barImageMC._x, _y: this.barImageMC._y, _width: 0, _height: this.barImageMC._height});
        this.barImageMC.setMask(this.barMaskMC);
        this.barImageMC._visible = false;
        var __reg3 = __reg4.createEmptyMovieClip("bitRateMC", __reg4.getNextHighestDepth());
        this.bitRateTxtXPos = __reg4._width - this.txtFieldWidht - this.pageConfiguration.speedTestBarX;
        this.bitRateTxt = __reg3.createTextField("bitRateTxt", __reg3.getNextHighestDepth(), this.bitRateTxtXPos, __reg2._y + __reg2._height, this.txtFieldWidht, this.txtFieldHeight);
        this.bitRateTxt.autoSize = "right";
        this.setTxtFormat("Arial", 30, 16777215, "left");
        this.bitRateTxt.setNewTextFormat(this.txtFrmt);
        this.bitRateTxt.htmlText = "0 bps";
        var __reg5 = __reg3.createTextField("downloadSpeedTxt", __reg3.getNextHighestDepth(), this.barImageMC._x, this.bitRateTxt._y, this.txtFieldWidht, this.txtFieldHeight);
        __reg5.autoSize = true;
        this.setTxtFormat("Arial", 30, 16777215, "left");
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.htmlText = "Downlink Speed";
        this.pecentLoadedTxt = __reg3.createTextField("pecentLoadedTxt", __reg3.getNextHighestDepth(), this.barImageMC._width / 2, this.barImageMC._y - __reg2._height / 2, this.txtFieldWidht, this.txtFieldHeight);
        this.pecentLoadedTxt.autoSize = true;
        this.setTxtFormat("Arial", 30, 16777215, "center");
        this.pecentLoadedTxt.setNewTextFormat(this.txtFrmt);
        this.pecentLoadedTxt.htmlText = " ";
        __reg4 = null;
        __reg6 = null;
        __reg2 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function speedTestDetails()
    {
        var __reg2 = null;
        var __reg5 = "bps";
        var __reg7 = "bps";
        var __reg9 = "bps";
        this.setTxtFormat("Arial", 30, 16777215, "center");
        var __reg3 = this.sTestBaseMC.progressBarMC.bitRateMC.createTextField("avgSpeedLabel", this.sTestBaseMC.progressBarMC.bitRateMC.getNextHighestDepth(), this.barImageMC._x, this.bitRateTxt._y + this.bitRateTxt._height, this.txtFieldWidht, this.txtFieldHeight);
        __reg3.autoSize = "left";
        __reg3.setNewTextFormat(this.txtFrmt);
        __reg3.htmlText = "Average Speed";
        var __reg4 = this.sTestBaseMC.progressBarMC.bitRateMC.createTextField("maxSpeedLabel", this.sTestBaseMC.progressBarMC.bitRateMC.getNextHighestDepth(), this.barImageMC._x, this.bitRateTxt._y + __reg3._height + this.bitRateTxt._height, this.txtFieldWidht, this.txtFieldHeight);
        __reg4.autoSize = "left";
        __reg4.setNewTextFormat(this.txtFrmt);
        __reg4.htmlText = "Maximum Speed";
        var __reg6 = this.sTestBaseMC.progressBarMC.bitRateMC.createTextField("avgSpeedValue", this.sTestBaseMC.progressBarMC.bitRateMC.getNextHighestDepth(), this.bitRateTxtXPos, __reg3._y, this.txtFieldWidht, this.txtFieldHeight);
        __reg6.autoSize = "right";
        this.setTxtFormat("Arial", 30, 16777215, "lfet");
        __reg6.setNewTextFormat(this.txtFrmt);
        var __reg8 = this.sTestBaseMC.progressBarMC.bitRateMC.createTextField("maxSpeedValue", this.sTestBaseMC.progressBarMC.bitRateMC.getNextHighestDepth(), this.bitRateTxtXPos, __reg4._y, this.txtFieldWidht, this.txtFieldHeight);
        __reg8.autoSize = "right";
        this.setTxtFormat("Arial", 30, 16777215, "left");
        __reg8.setNewTextFormat(this.txtFrmt);
        __reg2 = this.totalBytes * 8 / this.totalDwnldTime;
        if (this.maxSpeed / 1024 / 1024 >= 1) 
        {
            this.maxSpeed = this.maxSpeed / 1024 / 1024;
            __reg5 = "Mbps";
        }
        else if (this.maxSpeed / 1024 >= 1) 
        {
            this.maxSpeed = this.maxSpeed / 1024;
            __reg5 = "Kbps";
        }
        if (__reg2 / 1024 / 1024 >= 1) 
        {
            __reg2 = __reg2 / 1024 / 1024;
            __reg7 = "Mbps";
        }
        else if (__reg2 / 1024 >= 1) 
        {
            __reg2 = __reg2 / 1024;
            __reg7 = "Kbps";
        }
        if (this.minimumSpeed / 1024 / 1024 >= 1) 
        {
            this.minimumSpeed = this.minimumSpeed / 1024 / 1024;
            __reg9 = "Mbps";
        }
        else if (this.minimumSpeed / 1024 >= 1) 
        {
            this.minimumSpeed = this.minimumSpeed / 1024;
            __reg9 = "Kbps";
        }
        this.sTestBaseMC.progressBarMC.bitRateMC.downloadSpeedTxt.htmlText = "Minimum Speed";
        this.displayBitRate(__reg2, __reg7, __reg6);
        this.displayBitRate(this.maxSpeed, __reg5, __reg8);
        this.displayBitRate(this.minimumSpeed, __reg9, this.bitRateTxt);
        __reg2 = null;
        __reg5 = null;
        __reg7 = null;
        __reg8 = null;
        __reg6 = null;
        __reg4 = null;
        __reg3 = null;
    }

}

//Sprite 749
//  InitClip
dynamic class com.diagnostics.as2.Diagnostics
{
    var txtStartX: Number = 150;
    var txtStartY: Number = 0;
    var speedTest = null;
    var keyListener = null;
    var fn = null;
    var xmlObj = null;
    var pageConfiguration = null;
    var loadingCircleX: Number = 600;
    var currFocus: Number = 0;
    var diagnosticBaseMC = null;
    var txtBaseMC = null;
    var txtFrmt = null;
    var loadingMC = null;
    var testPassMC = null;
    var testFailMC = null;
    var cancelBtnText = null;
    var baseMC = null;
    var onDiagnosticPageBack = null;
    var currFunction;

    function Diagnostics()
    {
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.fn = {onLanStatusloaded: mx.utils.Delegate.create(this, this.lanStatus), onInternetStatusloaded: mx.utils.Delegate.create(this, this.internetStatus), onMainServerUrlLoaded: mx.utils.Delegate.create(this, this.loadBaseUrl), onBaseUrlLoaded: mx.utils.Delegate.create(this, this.serverStatus), onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown)};
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        this.onDiagnosticPageBack = new com.BigRoom.Event();
        this.currFocus = -1;
    }

    function destroy()
    {
        if (this.xmlObj != null) 
        {
            delete this.xmlObj;
            this.xmlObj = null;
        }
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.onDiagnosticPageBack != null) 
        {
            delete this.onDiagnosticPageBack;
            this.onDiagnosticPageBack = null;
        }
        if (this.keyListener != null) 
        {
            this.keyListener.onKeyDown = null;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        this.fn = null;
        this.txtStartX = null;
        this.txtStartY = null;
        this.loadingCircleX = null;
        this.currFocus = null;
        this.currFunction = null;
        this.baseMC = null;
        com.diagnostics.as2.DiagnosticsXMLParser.destroy();
        removeMovieClip(this.diagnosticBaseMC);
    }

    function setTxtFormat(font, size, color, alignment, bold)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        this.txtFrmt.bold = bold;
    }

    function initDiagnostics()
    {
        this.currFocus = -1;
        if (this.diagnosticBaseMC != null) 
        {
            removeMovieClip(this.diagnosticBaseMC);
        }
    }

    function runDiagnostics(diagnosticsBackgroundMC)
    {
        this.baseMC = diagnosticsBackgroundMC;
        this.runTests();
    }

    function runTests()
    {
        this.diagnosticBaseMC = this.baseMC.createEmptyMovieClip("baseMC", this.baseMC.getNextHighestDepth());
        this.txtBaseMC = this.diagnosticBaseMC.createEmptyMovieClip("txtBaseMC", this.diagnosticBaseMC.getNextHighestDepth());
        this.displayText("Connecting to Home Network", this.txtStartX, this.txtStartY, "HOME");
        this.displayLoading(this.txtStartX, this.txtStartY);
        this.getLanStatus();
    }

    function displayText(txtToDisplay, txtStartX, txtStartY, id)
    {
        var __reg2 = this.txtBaseMC.createTextField("txtField" + id, this.txtBaseMC.getNextHighestDepth(), txtStartX, txtStartY, 200, 30);
        this.setTxtFormat("Arial", 30, 16777215, "center", false);
        if (id == "ERROR") 
        {
            this.setTxtFormat("Arial", 30, 16777011, "center", false);
        }
        __reg2.autoSize = true;
        __reg2.setNewTextFormat(this.txtFrmt);
        __reg2.htmlText = txtToDisplay;
        __reg2 = null;
    }

    function displayLoading(txtStartX, txtStartY)
    {
        this.loadingMC = this.diagnosticBaseMC.attachMovie("loading", "loadingMC", this.diagnosticBaseMC.getNextHighestDepth(), {_width: 50, _height: 50});
        this.loadingMC._x = this.loadingCircleX;
        this.loadingMC._y = txtStartY + this.loadingMC._height / 2 - 10;
        this.testPassMC = this.diagnosticBaseMC.attachMovie("testSuccess", "testPassMC", this.diagnosticBaseMC.getNextHighestDepth(), {_width: 40, _height: 35});
        this.testFailMC = this.diagnosticBaseMC.attachMovie("testFailure", "testFailMC", this.diagnosticBaseMC.getNextHighestDepth(), {_width: 35, _height: 35});
        this.testFailMC._visible = this.testPassMC._visible = false;
        this.testFailMC._x = this.testPassMC._x = this.loadingMC._x - this.testPassMC._width / 2;
        this.testFailMC._y = this.testPassMC._y = this.loadingMC._y - this.testPassMC._height / 2 + 5;
    }

    function getLanStatus()
    {
        this.currFunction = "HOME";
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_linkup_status", "boxXml", this.fn.onLanStatusloaded);
    }

    function lanStatus()
    {
        var __reg3 = arguments[0];
        var __reg5 = arguments[1];
        var __reg4 = this.txtBaseMC["txtField" + this.currFunction];
        removeMovieClip(this.loadingMC);
        __reg4.htmlText = "Connection to Home Network";
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseLanStatus();
            if (com.diagnostics.as2.DiagnosticsXMLParser.lanReturnStatus == "0") 
            {
                if (com.diagnostics.as2.DiagnosticsXMLParser.lanConnectionStatus == "on") 
                {
                    this.testPassMC._visible = true;
                    this.displayText("Connecting to Internet", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing, "NET");
                    this.displayLoading(this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing);
                    this.getInternetStatus();
                }
                else 
                {
                    this.testFailMC._visible = true;
                    this.displayText("Check your LAN Connection", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing, "ERROR");
                    this.currFocus = 0;
                    this.displayButton(this.txtStartX + this.pageConfiguration.DiagnosticsPageLineSpacing);
                }
            }
            else 
            {
                this.testFailMC._visible = true;
                this.displayText("Check your LAN Connection", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing, "ERROR");
                this.currFocus = 0;
                this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 3);
            }
        }
        else 
        {
            this.testFailMC._visible = true;
            this.displayText("Check your LAN Connection", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2, "ERROR");
            this.currFocus = 0;
            this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 3);
        }
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function getInternetStatus()
    {
        this.currFunction = "NET";
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + "/system?arg0=get_connection_status", "boxXml", this.fn.onInternetStatusloaded);
    }

    function internetStatus()
    {
        var __reg3 = arguments[0];
        var __reg5 = arguments[1];
        var __reg4 = this.txtBaseMC["txtField" + this.currFunction];
        removeMovieClip(this.loadingMC);
        __reg4.htmlText = "Connection to Internet";
        if (__reg3) 
        {
            com.diagnostics.as2.DiagnosticsXMLParser.parseInternetStatus();
            if (com.diagnostics.as2.DiagnosticsXMLParser.internetReturnStatus == "0") 
            {
                if (com.diagnostics.as2.DiagnosticsXMLParser.internetConnectionStatus == "on") 
                {
                    this.testPassMC._visible = true;
                    this.displayText("Connecting to Server", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2, "SERVER");
                    this.displayLoading(this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2);
                    this.getServerStatus();
                }
                else 
                {
                    this.testFailMC._visible = true;
                    this.displayText("Check your Internet Connectivity", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2, "ERROR");
                    this.currFocus = 0;
                    this.displayButton(this.txtStartX + this.pageConfiguration.DiagnosticsPageLineSpacing);
                }
            }
            else 
            {
                this.testFailMC._visible = true;
                this.displayText("Check your Internet Connectivity", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2, "ERROR");
                this.currFocus = 0;
                this.displayButton(this.txtStartX + this.pageConfiguration.DiagnosticsPageLineSpacing);
            }
        }
        else 
        {
            this.testFailMC._visible = true;
            this.displayText("Check your Internet Connectivity", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 2, "ERROR");
            this.currFocus = 0;
            this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 4);
        }
        __reg4 = null;
        __reg3 = null;
        __reg5 = null;
    }

    function getServerStatus()
    {
        com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(com.jadoo.as2.JadooPlus.Utils.Config.getInitializeURL(), "serverXml", this.fn.onMainServerUrlLoaded);
    }

    function loadBaseUrl()
    {
        var __reg4 = arguments[0];
        var __reg5 = arguments[1];
        var __reg3 = undefined;
        this.txtBaseMC.txtFieldSERVER.htmlText = "Connection to Server";
        if (__reg4) 
        {
            this.currFunction = "SERVER";
            com.diagnostics.as2.DiagnosticsXMLParser.parseServerUrl();
            __reg3 = com.diagnostics.as2.DiagnosticsXMLParser.baseUrl;
            if (__reg3.charAt(__reg3.length - 1) != "/") 
            {
                __reg3 = __reg3 + "/";
            }
            __reg3 = __reg3 + com.diagnostics.as2.DiagnosticsXMLParser.countryCode;
            com.diagnostics.as2.DiagnosticsXMLParser.loadDiagnosticsXML(__reg3, "serverXml", this.fn.onBaseUrlLoaded);
        }
        else 
        {
            removeMovieClip(this.loadingMC);
            this.testFailMC._visible = true;
            this.displayText("Unable to Connect to Server : Try Again", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 4, "ERROR");
            this.currFocus = 0;
            this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 5);
        }
        __reg3 = null;
        __reg4 = null;
        __reg5 = null;
    }

    function serverStatus()
    {
        var __reg3 = arguments[0];
        var __reg4 = arguments[1];
        removeMovieClip(this.loadingMC);
        this.txtBaseMC.txtFieldSERVER.htmlText = "Connection to Server";
        if (__reg3) 
        {
            this.testPassMC._visible = true;
            this.startSpeedTest();
        }
        else 
        {
            this.testFailMC._visible = true;
            this.displayText("Unable to Connect to Server : Try Again", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 4, "ERROR");
            this.currFocus = 0;
            this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 5);
        }
        __reg3 = null;
        __reg4 = null;
    }

    function startSpeedTest()
    {
        var __reg2 = this.diagnosticBaseMC.createEmptyMovieClip("speedTestBaseMC", this.diagnosticBaseMC.getNextHighestDepth());
        __reg2._x = 0;
        __reg2._y = Math.ceil(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 3.5);
        if (this.speedTest != null) 
        {
            delete this.speedTest;
            this.speedTest = null;
        }
        this.speedTest = new com.diagnostics.as2.SpeedTest();
        this.speedTest.onError.addListener(this, this.onErrorSpeedTest);
        this.speedTest.onTestComplete.addListener(this, this.onTestComplete);
        this.speedTest.create(__reg2);
        __reg2 = null;
    }

    function onErrorSpeedTest()
    {
        this.currFocus = 0;
        this.speedTest.destroy();
        if (this.speedTest != null) 
        {
            delete this.speedTest;
            this.speedTest = null;
        }
        this.displayText("Speed test failed: Download error", this.txtStartX, this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 4, "ERROR");
        this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 5);
    }

    function onTestComplete()
    {
        if (this.speedTest != null) 
        {
            delete this.speedTest;
            this.speedTest = null;
        }
        this.currFocus = 0;
        this.displayButton(this.txtStartY + this.pageConfiguration.DiagnosticsPageLineSpacing * 8);
    }

    function displayButton(posY)
    {
        var __reg2 = this.diagnosticBaseMC.createEmptyMovieClip("buttonMC", this.diagnosticBaseMC.getNextHighestDepth());
        this.setTxtFormat("Arial", 24, 0, "center", true);
        var __reg4 = __reg2.attachMovie("infoBtnDis", "startBtnMC", __reg2.getNextHighestDepth());
        var __reg3 = __reg2.attachMovie("infoBtnDis", "cancelBtnMC", __reg2.getNextHighestDepth());
        var __reg9 = __reg2.attachMovie("infoBtnEnb", "btnHlMC", __reg2.getNextHighestDepth());
        __reg4._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x - (__reg4._width + this.pageConfiguration.buttonOffset);
        __reg4._y = posY;
        __reg3._x = this.pageConfiguration.backgroundWidth / 2 - this.baseMC._x + this.pageConfiguration.buttonOffset;
        __reg3._y = posY;
        __reg9._x = __reg3._x;
        __reg9._y = __reg3._y;
        var __reg8 = __reg2.createTextField("startBtnTextEnb", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg8.setNewTextFormat(this.txtFrmt);
        __reg8.htmlText = "Restart";
        var __reg7 = __reg2.createTextField("cancelBtnTextEnb", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg7.setNewTextFormat(this.txtFrmt);
        __reg7.htmlText = "Back";
        this.setTxtFormat("Arial", 24, 3092271, "center", true);
        var __reg6 = __reg2.createTextField("startBtnTextDis", __reg2.getNextHighestDepth(), __reg4._x, __reg4._y + 5, __reg4._width, __reg4._height);
        __reg6.setNewTextFormat(this.txtFrmt);
        __reg6.htmlText = "Restart";
        __reg6._visible = false;
        var __reg5 = __reg2.createTextField("cancelBtnTextDis", __reg2.getNextHighestDepth(), __reg3._x, __reg3._y + 5, __reg3._width, __reg3._height);
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.htmlText = "Back";
        __reg5._visible = false;
        this.btnHighlight();
        __reg2 = null;
        __reg4 = null;
        __reg3 = null;
        __reg8 = null;
        __reg7 = null;
        __reg6 = null;
        __reg5 = null;
    }

    function btnHighlight()
    {
        if (this.currFocus == 0) 
        {
            this.diagnosticBaseMC.buttonMC.startBtnTextDis._visible = false;
            this.diagnosticBaseMC.buttonMC.startBtnTextEnb._visible = true;
            this.diagnosticBaseMC.buttonMC.cancelBtnTextDis._visible = true;
            this.diagnosticBaseMC.buttonMC.cancelBtnTextEnb._visible = false;
            this.diagnosticBaseMC.buttonMC.btnHlMC._x = this.diagnosticBaseMC.buttonMC.startBtnMC._x;
            return;
        }
        if (this.currFocus == 1) 
        {
            this.diagnosticBaseMC.buttonMC.cancelBtnTextDis._visible = false;
            this.diagnosticBaseMC.buttonMC.cancelBtnTextEnb._visible = true;
            this.diagnosticBaseMC.buttonMC.startBtnTextDis._visible = true;
            this.diagnosticBaseMC.buttonMC.startBtnTextEnb._visible = false;
            this.diagnosticBaseMC.buttonMC.btnHlMC._x = this.diagnosticBaseMC.buttonMC.cancelBtnMC._x;
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === 39) 
        {
            if (this.currFocus == 0) 
            {
                this.currFocus = 1;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currFocus == 1) 
            {
                this.currFocus = 0;
            }
            this.btnHighlight();
            return;
        }
        else if (__reg0 === 13) 
        {
            if (this.currFocus == 0) 
            {
                this.initDiagnostics();
                this.runTests();
            }
            else if (this.currFocus == 1) 
            {
                this.onDiagnosticPageBack.notify();
                com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            }
            return;
        }
        else if (__reg0 !== Key.BACK) 
        {
            return;
        }
        this.onDiagnosticPageBack.notify("Connectivity");
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        return;
    }

}

//Sprite 750
//  InitClip
dynamic class com.diagnostics.as2.NetworkTracePing
{
    var xml = null;
    var pingXml = null;
    var traceXml = null;
    var postXml = null;
    var tracePingResult = null;
    var keyListener = null;
    var fn = null;
    var percentLoadedTxt = null;
    var messageText = null;
    var pageConfiguration = null;
    var txtFrmt = null;
    var onPageBack = null;
    var baseMC = null;
    var loadingMC = null;
    var progressBarBaseMC = null;
    var barImageMC = null;
    var barMaskMC = null;
    var btnParentBaseMC = null;
    var progTextBaseMC = null;
    var statusBoxMC = null;
    var upArrowMC = null;
    var downArrowMC = null;
    var progBaseMC = null;
    var linksArray = null;
    var pingLink1: String = "/system?arg0=get_connection_status&arg1=ping&arg2=";
    var pingLink2: String = "&arg3=c6&arg4=w2";
    var traceLink1: String = "/system?arg0=get_connection_status&arg1=traceroute&arg2=";
    var traceLink2: String = "&arg3=m30&arg4=t1&arg5=d&arg6=w2";
    var postingLink = null;
    var netStatus: String = "Up";
    var netErrorStr = null;
    var currentIdx: Number = 0;
    var txtFieldWidth: Number = 200;
    var txtFieldHeight: Number = 30;
    var speedTestBaseX: Number = 275;
    var speedTestBaseY: Number = 225;
    var currentBtnIdx: Number = 0;
    var totalCalls: Number = 0;
    var textOffsetX: Number = 10;
    var textOffsetY: Number = 10;
    var textHeight: Number = 32;
    var imageWidth: Number = 30;
    var imageHeight: Number = 30;
    var textIdx: Number = 0;
    var progressReportY: Number = 0;
    var xmlTimeOutId: Number = -1;
    var selectedFunction;

    function NetworkTracePing()
    {
        this.pageConfiguration = new com.diagnostics.as2.Configuration();
        this.fn = {onKeyDown: mx.utils.Delegate.create(this, this.onKeyDown), onLoadXml: mx.utils.Delegate.create(this, this.onLoadXml), onLoadPingXml: mx.utils.Delegate.create(this, this.onLoadPingXml), onLoadTraceXml: mx.utils.Delegate.create(this, this.onLoadTraceXml), onLoadPostXml: mx.utils.Delegate.create(this, this.onLoadPostXml)};
        this.onPageBack = new com.BigRoom.Event();
        this.keyListener = new Object();
        this.keyListener.onKeyDown = this.fn.onKeyDown;
    }

    function destroy()
    {
        com.jadoo.as2.JadooPlus.Utils.NetStatus.removeListener("onStatusUpdate", this, this.onNetStatusUpdate);
        this.clearLinksArray();
        if (this.pageConfiguration != null) 
        {
            delete this.pageConfiguration;
            this.pageConfiguration = null;
        }
        if (this.onPageBack != null) 
        {
            delete this.onPageBack;
            this.onPageBack = null;
        }
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        if (this.messageText != null) 
        {
            delete this.messageText;
            this.messageText = null;
        }
        if (this.percentLoadedTxt != null) 
        {
            delete this.percentLoadedTxt;
            this.percentLoadedTxt = null;
        }
        if (this.fn != null) 
        {
            delete this.fn;
            this.fn = null;
        }
        if (this.keyListener != null) 
        {
            delete this.keyListener;
            this.keyListener = null;
        }
        if (this.xml != null) 
        {
            delete this.xml;
            this.xml = null;
        }
        if (this.pingXml != null) 
        {
            delete this.pingXml;
            this.pingXml = null;
        }
        if (this.pingXml != null) 
        {
            delete this.pingXml;
            this.pingXml = null;
        }
        if (this.postXml != null) 
        {
            delete this.postXml;
            this.postXml = null;
        }
        if (this.tracePingResult != null) 
        {
            delete this.tracePingResult;
            this.tracePingResult = null;
        }
        this.netStatus = null;
        this.netErrorStr = null;
        this.selectedFunction = null;
        this.pingLink1 = null;
        this.pingLink2 = null;
        this.traceLink1 = null;
        this.traceLink2 = null;
        this.postingLink = null;
        removeMovieClip(this.baseMC);
        this.baseMC = null;
        this.loadingMC = null;
        this.progressBarBaseMC = null;
        this.barImageMC = null;
        this.barMaskMC = null;
        this.btnParentBaseMC = null;
        this.progTextBaseMC = null;
        this.statusBoxMC = null;
        this.upArrowMC = null;
        this.downArrowMC = null;
    }

    function create(parentMC, selectedItem)
    {
        this.selectedFunction = selectedItem;
        this.baseMC = parentMC.createEmptyMovieClip("baseMC", parentMC.getNextHighestDepth());
        this.progressBarBaseMC = this.baseMC.createEmptyMovieClip("progressBarBaseMC", this.baseMC.getNextHighestDepth());
        this.btnParentBaseMC = this.baseMC.createEmptyMovieClip("btnParentBaseMC", this.baseMC.getNextHighestDepth());
        this.displayTitle(selectedItem);
        this.createProgressBar();
        this.displayButtons();
        com.jadoo.as2.JadooPlus.Utils.NetStatus.addListener("onStatusUpdate", this, this.onNetStatusUpdate);
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        selectedItem = null;
        parentMC = null;
    }

    function createProgressBar()
    {
        var __reg3 = this.progressBarBaseMC.createEmptyMovieClip("progressBarMC", this.progressBarBaseMC.getNextHighestDepth());
        __reg3._x = this.speedTestBaseX;
        __reg3._y = this.speedTestBaseY;
        var __reg5 = __reg3.createEmptyMovieClip("barMC", __reg3.getNextHighestDepth());
        var __reg2 = __reg5.attachMovie("progressBarBackground", "barBackgroundMC", __reg5.getNextHighestDepth());
        this.barImageMC = __reg2.attachMovie("progressBar", "barImageMC", __reg2.getNextHighestDepth());
        this.barImageMC._x = this.pageConfiguration.speedTestBarX;
        this.barImageMC._y = this.pageConfiguration.speedTestBarY;
        this.barMaskMC = __reg2.attachMovie("maskMC", "barMaskMC", __reg2.getNextHighestDepth(), {_x: this.barImageMC._x, _y: this.barImageMC._y, _width: 0, _height: this.barImageMC._height});
        this.barImageMC.setMask(this.barMaskMC);
        this.barImageMC._visible = false;
        this.statusBoxMC = __reg3.attachMovie("NDStatusBox", "statusBoxMC", __reg3.getNextHighestDepth());
        this.statusBoxMC.alpha = 50;
        this.statusBoxMC._x = (__reg2._width - this.statusBoxMC._width) / 2;
        this.statusBoxMC._y = __reg2._y + __reg2._height;
        this.upArrowMC = this.statusBoxMC.attachMovie("upArrowMC", "upArrowMC", this.statusBoxMC.getNextHighestDepth());
        this.upArrowMC._x = this.statusBoxMC._width - this.upArrowMC._width - 10;
        this.upArrowMC._y = 10;
        this.downArrowMC = this.statusBoxMC.attachMovie("downArrowMC", "downArrowMC", this.statusBoxMC.getNextHighestDepth());
        this.downArrowMC._x = this.upArrowMC._x;
        this.downArrowMC._y = this.statusBoxMC._height - this.upArrowMC._height - 10;
        this.upArrowMC._visible = false;
        this.downArrowMC._visible = false;
        var __reg4 = __reg3.createEmptyMovieClip("progressStatusBaseMC", __reg3.getNextHighestDepth());
        this.percentLoadedTxt = __reg4.createTextField("percentLoadedTxt", __reg4.getNextHighestDepth(), this.barImageMC._width / 2, this.barImageMC._y - __reg2._height / 2, this.txtFieldWidth, this.txtFieldHeight);
        this.percentLoadedTxt.autoSize = true;
        this.setTxtFormat("Arial", 30, 16777215, "center");
        this.percentLoadedTxt.setNewTextFormat(this.txtFrmt);
        this.percentLoadedTxt.htmlText = "";
        this.messageText = __reg4.createTextField("messageText", __reg4.getNextHighestDepth(), 0, this.statusBoxMC._y + this.statusBoxMC._height + 30, __reg2._width, this.txtFieldHeight);
        this.messageText.autoSize = true;
        this.setTxtFormat("Arial", 26, 16555008, "center");
        this.messageText.wordWrap = true;
        this.messageText.setNewTextFormat(this.txtFrmt);
        this.messageText.htmlText = "Press Enter for diagnosing CDN";
        __reg3 = null;
        __reg5 = null;
        __reg2 = null;
        __reg4 = null;
    }

    function setTxtFormat(font, size, color, alignment)
    {
        if (this.txtFrmt != null) 
        {
            delete this.txtFrmt;
            this.txtFrmt = null;
        }
        this.txtFrmt = new TextFormat();
        this.txtFrmt.color = color;
        this.txtFrmt.font = font;
        this.txtFrmt.size = size;
        this.txtFrmt.align = alignment;
        font = null;
        size = null;
        color = null;
        alignment = null;
    }

    function displayTitle(selectedItem)
    {
        var __reg2 = this.baseMC.createTextField("titleTxt", this.baseMC.getNextHighestDepth(), this.pageConfiguration.titleX, this.pageConfiguration.titleY, undefined, undefined);
        __reg2.autoSize = true;
        this.setTxtFormat("Arial", 50, 16777215, "left", false);
        __reg2.setNewTextFormat(this.txtFrmt);
        __reg2.htmlText = selectedItem;
        __reg2 = null;
        selectedItem = null;
    }

    function displayButtons()
    {
        var __reg2 = this.btnParentBaseMC.createEmptyMovieClip("buttonsBaseMC", this.btnParentBaseMC.getNextHighestDepth());
        __reg2._y = this.speedTestBaseY + this.progressBarBaseMC.progressBarMC.progressStatusBaseMC.messageText._y + this.progressBarBaseMC.progressBarMC.progressStatusBaseMC.messageText._height + 10;
        __reg2._x = this.speedTestBaseX;
        var __reg3 = __reg2.attachMovie("infoBtnDis", "streamingBtnMC", __reg2.getNextHighestDepth());
        var __reg4 = __reg2.attachMovie("infoBtnDis", "backendBtnMC", __reg2.getNextHighestDepth());
        var __reg8 = __reg2.attachMovie("infoBtnDis", "backBtnMC", __reg2.getNextHighestDepth());
        var __reg9 = __reg2.attachMovie("infoBtnEnb", "highlightBtnMC", __reg2.getNextHighestDepth());
        this.setTxtFormat("Arial", 24, 0, "center", true);
        var __reg5 = __reg2.createTextField("streamingTxt", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg5.autoSize = "center";
        __reg5.setNewTextFormat(this.txtFrmt);
        __reg5.htmlText = "CDN";
        __reg5._x = __reg3._x + (__reg3._width - __reg5._width) / 2;
        __reg5._y = __reg3._y + (__reg3._height - __reg5._height) / 2;
        var __reg6 = __reg2.createTextField("backend", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg6.autoSize = "center";
        __reg6.setNewTextFormat(this.txtFrmt);
        __reg6.htmlText = "BackEnd";
        var __reg7 = __reg2.createTextField("backTxt", __reg2.getNextHighestDepth(), 0, 0, 0, 0);
        __reg7.autoSize = "center";
        __reg7.setNewTextFormat(this.txtFrmt);
        __reg7.htmlText = "Back";
        __reg4._x = __reg3._x + __reg3._width + this.pageConfiguration.buttonOffset;
        __reg8._x = __reg4._x + __reg4._width + this.pageConfiguration.buttonOffset;
        __reg9._x = __reg3._x;
        __reg9._width = __reg3._width;
        __reg6._x = __reg4._x + (__reg4._width - __reg6._width) / 2;
        __reg6._y = __reg4._y + (__reg4._height - __reg6._height) / 2;
        __reg7._x = __reg8._x + (__reg8._width - __reg7._width) / 2;
        __reg7._y = __reg8._y + (__reg8._height - __reg7._height) / 2;
        __reg2._x = (this.progressBarBaseMC.progressBarMC.barMC.barBackgroundMC._width - (__reg8._x + __reg8._width)) / 2 + __reg2._x;
        __reg2 = null;
        __reg3 = null;
        __reg4 = null;
        __reg8 = null;
        __reg9 = null;
        __reg5 = null;
        __reg6 = null;
        __reg7 = null;
    }

    function highlightbtn()
    {
        if (this.currentBtnIdx == 0) 
        {
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._x = this.btnParentBaseMC.buttonsBaseMC.streamingBtnMC._x;
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._width = this.btnParentBaseMC.buttonsBaseMC.streamingBtnMC._width;
            this.messageText.htmlText = "Press Enter for diagnosing CDN Server";
            return;
        }
        if (this.currentBtnIdx == 1) 
        {
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._x = this.btnParentBaseMC.buttonsBaseMC.backendBtnMC._x;
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._width = this.btnParentBaseMC.buttonsBaseMC.backendBtnMC._width;
            this.messageText.htmlText = "Press Enter for diagnosing Backend Server";
            return;
        }
        if (this.currentBtnIdx == 2) 
        {
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._x = this.btnParentBaseMC.buttonsBaseMC.backBtnMC._x;
            this.btnParentBaseMC.buttonsBaseMC.highlightBtnMC._width = this.btnParentBaseMC.buttonsBaseMC.backBtnMC._width;
            this.messageText.htmlText = "";
        }
    }

    function onKeyDown()
    {
        if ((__reg0 = Key.getCode()) === Key.BACK) 
        {
            this.onPageBack.notify(this.selectedFunction);
            com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
            return;
        }
        else if (__reg0 === 38) 
        {
            this.moveUp();
            return;
        }
        else if (__reg0 === 40) 
        {
            this.moveDown();
            return;
        }
        else if (__reg0 === 39) 
        {
            if (this.currentBtnIdx < 2) 
            {
                ++this.currentBtnIdx;
                this.highlightbtn();
            }
            return;
        }
        else if (__reg0 === 37) 
        {
            if (this.currentBtnIdx > 0) 
            {
                --this.currentBtnIdx;
                this.highlightbtn();
            }
            return;
        }
        else if (__reg0 !== 13) 
        {
            return;
        }
        if (this.netStatus == "Up") 
        {
            this.onEnterKey();
        }
        else if (this.currentBtnIdx == 2) 
        {
            this.onEnterKey();
        }
        else 
        {
            this.messageText.htmlText = this.netErrorStr;
        }
        return;
    }

    function displayLoadingMC()
    {
        if (this.loadingMC == null) 
        {
            this.loadingMC = this.baseMC.attachMovie("loading", "loadingMC", this.baseMC.getNextHighestDepth());
            this.loadingMC._x = 640;
            this.loadingMC._y = 360;
        }
    }

    function removeLoadingMC()
    {
        if (this.loadingMC != null) 
        {
            removeMovieClip(this.loadingMC);
            this.loadingMC = null;
        }
    }

    function onEnterKey()
    {
        com.jadoo.as2.JadooPlus.Utils.KeyManager.removeKeyListener(this.keyListener);
        if (this.currentBtnIdx == 0) 
        {
            this.displayLoadingMC();
            this.initializeProgress();
            this.loadXml(com.diagnostics.as2.DiagnosticsXMLParser.cdnServersUrl);
            return;
        }
        if (this.currentBtnIdx == 1) 
        {
            this.displayLoadingMC();
            this.initializeProgress();
            this.loadXml(com.diagnostics.as2.DiagnosticsXMLParser.backendServersUrl);
            return;
        }
        if (this.currentBtnIdx == 2) 
        {
            this.onPageBack.notify(this.selectedFunction);
        }
    }

    function initializeProgress()
    {
        if (this.progBaseMC != null) 
        {
            removeMovieClip(this.progBaseMC);
            this.progBaseMC = null;
        }
        if (this.tracePingResult != null) 
        {
            delete this.tracePingResult;
            this.tracePingResult = null;
        }
        this.tracePingResult = new LoadVars();
        this.clearLinksArray();
        this.currentIdx = 0;
        this.textIdx = 0;
        this.barMaskMC._width = 0;
        this.percentLoadedTxt.htmlText = "";
        this.messageText.htmlText = "";
        this.upArrowMC._visible = false;
        this.downArrowMC._visible = false;
        this.progBaseMC = this.progressBarBaseMC.progressBarMC.createEmptyMovieClip("progBaseMC", this.progressBarBaseMC.progressBarMC.getNextHighestDepth());
        this.progBaseMC._x = this.statusBoxMC._x;
        this.progBaseMC._y = this.statusBoxMC._y;
        var __reg2 = this.progBaseMC.attachMovie("MaskMC", "progressTextMaskMC", this.progBaseMC.getNextHighestDepth());
        __reg2._y = 5;
        __reg2._width = this.statusBoxMC._width;
        __reg2._height = this.statusBoxMC._height - 25;
        this.progTextBaseMC = this.progBaseMC.createEmptyMovieClip("progTextBaseMC", this.progBaseMC.getNextHighestDepth());
        this.progBaseMC.setMask(__reg2);
        __reg2 = null;
    }

    function clearLinksArray()
    {
        if (this.linksArray != null) 
        {
            var __reg2 = 0;
            while (__reg2 < this.linksArray.length) 
            {
                delete this.linksArray[__reg2];
                this.linksArray[__reg2] = null;
                ++__reg2;
            }
            delete this.linksArray;
            this.linksArray = null;
        }
    }

    function onNetStatusUpdate(netStatus, netErrorStr)
    {
        this.netStatus = netStatus;
        this.netErrorStr = netErrorStr;
        netStatus = null;
        netErrorStr = null;
    }

    function loadXml(link)
    {
        if (this.xml != null) 
        {
            this.xml.onData = null;
            this.xml.onLoad = null;
            delete this.xml;
            this.xml = null;
        }
        this.xml = new XML();
        this.xml.onLoad = this.fn.onLoadXml;
        this.xml.ignoreWhite = true;
        this.xml.load(link);
        this.xmlTimeOutId = setInterval(this, "xmlTimeOut", com.jadoo.as2.JadooPlus.Utils.Config.diagnosticsXmlTimeOutDuration);
        link = null;
    }

    function onLoadXml(success)
    {
        this.clearXmlTimeOutInverval();
        if (success) 
        {
            this.linksArray = new Array();
            this.postingLink = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/xml/post_url").firstChild.nodeValue;
            var __reg6 = mx.xpath.XPathAPI.selectSingleNode(this.xml.firstChild, "/xml/items").childNodes;
            var __reg4 = null;
            var __reg5 = 0;
            while (__reg5 < __reg6.length) 
            {
                __reg4 = new Object();
                var __reg3 = __reg6[__reg5].childNodes;
                var __reg2 = 0;
                while (__reg2 < __reg3.length) 
                {
                    if (__reg3[__reg2].nodeName == "id") 
                    {
                        __reg4.id = Number(__reg3[__reg2].firstChild.nodeValue);
                    }
                    else if (__reg3[__reg2].nodeName == "link") 
                    {
                        __reg4.link = __reg3[__reg2].firstChild.nodeValue;
                    }
                    ++__reg2;
                }
                this.linksArray[__reg5] = __reg4;
                __reg2 = null;
                __reg3 = null;
                ++__reg5;
            }
            this.totalCalls = this.linksArray.length + 1;
            this.removeLoadingMC();
            this.checkLinksArray();
            __reg6 = null;
            __reg4 = null;
            __reg5 = null;
        }
        else 
        {
            this.removeLoadingMC();
            this.messageText.htmlText = "Process failed. Please try again.";
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        success = null;
    }

    function xmlTimeOut()
    {
        this.clearXmlTimeOutInverval();
        this.removeLoadingMC();
        this.xml.onData = null;
        this.xml.onLoad = null;
        delete this.xml;
        this.xml = null;
        this.messageText.htmlText = "Process failed. Please try again.";
        com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
    }

    function clearXmlTimeOutInverval()
    {
        clearInterval(this.xmlTimeOutId);
        this.xmlTimeOutId = -1;
    }

    function checkLinksArray()
    {
        this.tweenProgressBar();
        if (this.currentIdx < this.linksArray.length) 
        {
            this.tracePingResult["link" + this.linksArray[this.currentIdx].id] = this.linksArray[this.currentIdx].link;
            this.pingCurrentLink();
            return;
        }
        this.postResults();
    }

    function tweenProgressBar()
    {
        var __reg2 = int(this.currentIdx / this.totalCalls * 100);
        this.percentLoadedTxt.autoSize = "left";
        this.percentLoadedTxt.text = __reg2.toString() + "%";
        if (this.barImageMC._visible == false) 
        {
            this.barImageMC._visible = true;
        }
        this.barMaskMC._width = __reg2 * (this.barImageMC._width / 100);
        if (__reg2 == 100) 
        {
            this.barMaskMC._width = this.barMaskMC._width + 5;
            com.jadoo.as2.JadooPlus.Utils.KeyManager.addKeyListener(this.keyListener);
        }
        __reg2 = null;
    }

    function updateProgressReport(pingTrace)
    {
        var __reg5 = this.progTextBaseMC.createEmptyMovieClip("infoTextBaseMC" + this.textIdx, this.progTextBaseMC.getNextHighestDepth());
        var __reg2 = __reg5.createTextField("infoText", __reg5.getNextHighestDepth(), 0, 0, 0, 0);
        __reg2._x = this.textOffsetX;
        __reg2._y = this.textIdx * this.textHeight + this.textOffsetY;
        __reg2._width = this.statusBoxMC._width - 100;
        __reg2.autoSize = true;
        this.setTxtFormat("Arial", 24, 16777215, "center", true);
        __reg2.setNewTextFormat(this.txtFrmt);
        var __reg4 = __reg5.createTextField("statusText", __reg5.getNextHighestDepth(), 0, 0, 0, 0);
        __reg4._x = this.statusBoxMC._width - 150;
        __reg4._y = __reg2._y;
        __reg4.autoSize = true;
        this.setTxtFormat("Arial", 24, 16555008, "center", true);
        __reg4.setNewTextFormat(this.txtFrmt);
        var __reg3 = __reg5.attachMovie("loading", "loadingMC", __reg5.getNextHighestDepth());
        __reg3._width = this.imageWidth;
        __reg3._height = this.imageHeight;
        __reg3._y = __reg4._y + __reg3._height / 2;
        __reg3._x = __reg4._x + __reg3._width / 2;
        if (pingTrace == "ping") 
        {
            __reg2.htmlText = "Ping to Server " + int(this.currentIdx + 1).toString();
        }
        else if (pingTrace == "trace") 
        {
            __reg2.htmlText = "Trace to Server " + int(this.currentIdx + 1).toString();
        }
        else if (this.currentIdx == this.linksArray.length) 
        {
            __reg2.htmlText = "Posting data to server";
        }
        else if (this.currentIdx > this.linksArray.length) 
        {
            this.setTxtFormat("Arial", 24, 16555008, "center", true);
            __reg2.setNewTextFormat(this.txtFrmt);
            __reg2.htmlText = pingTrace;
            __reg3._visible = false;
        }
        if (__reg2._y + this.textHeight + this.textOffsetY > this.statusBoxMC._height - 10) 
        {
            this.progTextBaseMC._y = this.progTextBaseMC._y - this.textHeight;
            this.progressReportY = this.progTextBaseMC._y;
            this.upArrowMC._visible = true;
        }
        pingTrace = null;
        __reg3 = null;
        __reg4 = null;
        __reg2 = null;
        __reg5 = null;
    }

    function pingCurrentLink()
    {
        if (this.textIdx != 0) 
        {
            ++this.textIdx;
        }
        this.updateProgressReport("ping");
        if (this.pingXml != null) 
        {
            this.pingXml.onData = null;
            this.pingXml.onLoad = null;
            delete this.pingXml;
            this.pingXml = null;
        }
        this.pingXml = new XML();
        this.pingXml.onLoad = this.fn.onLoadPingXml;
        this.pingXml.ignoreWhite = true;
        this.pingXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + this.pingLink1 + this.linksArray[this.currentIdx].link + this.pingLink2);
    }

    function onLoadPingXml(success)
    {
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.pingXml.firstChild, "/theDavidBox/response/result").firstChild.nodeValue;
            this.tracePingResult["ping" + this.linksArray[this.currentIdx].id] = __reg2;
            removeMovieClip(this.progTextBaseMC["infoTextBaseMC" + this.textIdx].loadingMC);
            if (__reg2 == undefined) 
            {
                this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Failed";
            }
            else 
            {
                this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Done";
            }
            __reg2 = null;
        }
        else 
        {
            removeMovieClip(this.progTextBaseMC["infoTextBaseMC" + this.textIdx].loadingMC);
            this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Failed";
        }
        this.traceRtCurrentLink();
        success = null;
    }

    function traceRtCurrentLink()
    {
        ++this.textIdx;
        this.updateProgressReport("trace");
        if (this.traceXml != null) 
        {
            this.traceXml.onData = null;
            this.traceXml.onLoad = null;
            delete this.traceXml;
            this.traceXml = null;
        }
        this.traceXml = new XML();
        this.traceXml.onLoad = this.fn.onLoadTraceXml;
        this.traceXml.ignoreWhite = true;
        this.traceXml.load(com.jadoo.as2.JadooPlus.Utils.Config.localHostAddress + this.traceLink1 + this.linksArray[this.currentIdx].link + this.traceLink2);
    }

    function onLoadTraceXml(success)
    {
        if (success) 
        {
            var __reg2 = mx.xpath.XPathAPI.selectSingleNode(this.traceXml.firstChild, "/theDavidBox/response/result").firstChild.nodeValue;
            this.tracePingResult["trace" + this.linksArray[this.currentIdx].id] = __reg2;
            removeMovieClip(this.progTextBaseMC["infoTextBaseMC" + this.textIdx].loadingMC);
            if (__reg2 == undefined) 
            {
                this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Failed";
            }
            else 
            {
                this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Done";
            }
            __reg2 = null;
        }
        else 
        {
            removeMovieClip(this.progTextBaseMC["infoTextBaseMC" + this.textIdx].loadingMC);
            this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Failed";
        }
        ++this.currentIdx;
        this.checkLinksArray();
        success = null;
    }

    function postResults()
    {
        ++this.textIdx;
        this.updateProgressReport("");
        if (this.postingLink.charAt(this.postingLink.length - 1) != "/") 
        {
            this.postingLink = this.postingLink + "/";
        }
        this.postingLink = this.postingLink + com.jadoo.as2.JadooPlus.Utils.Utils.getBoxId();
        if (this.postXml != null) 
        {
            this.postXml.onData = null;
            this.postXml.onLoad = null;
            delete this.postXml;
            this.postXml = null;
        }
        this.postXml = new XML();
        this.postXml.onLoad = this.fn.onLoadPostXml;
        this.tracePingResult.sendAndLoad(this.postingLink, this.postXml, "POST");
    }

    function onLoadPostXml(success)
    {
        removeMovieClip(this.progTextBaseMC["infoTextBaseMC" + this.textIdx].loadingMC);
        if (success) 
        {
            this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Done";
            ++this.currentIdx;
            ++this.textIdx;
            this.updateProgressReport("Successfully Data Posted");
        }
        else 
        {
            this.progTextBaseMC["infoTextBaseMC" + this.textIdx].statusText.htmlText = "Failed";
            ++this.currentIdx;
            ++this.textIdx;
            this.updateProgressReport("Process Failed");
        }
        this.tweenProgressBar();
    }

    function moveDown()
    {
        if (this.progTextBaseMC._y > this.progressReportY) 
        {
            this.progTextBaseMC._y = this.progTextBaseMC._y - this.textHeight;
        }
        if (this.progTextBaseMC._y < 0) 
        {
            this.upArrowMC._visible = true;
        }
        if (this.progTextBaseMC._y <= this.progressReportY) 
        {
            this.progTextBaseMC._y = this.progressReportY;
            this.downArrowMC._visible = false;
        }
    }

    function moveUp()
    {
        if (this.progTextBaseMC._y < 0) 
        {
            this.progTextBaseMC._y = this.progTextBaseMC._y + this.textHeight;
        }
        if (this.progTextBaseMC._y > this.progressReportY) 
        {
            this.downArrowMC._visible = true;
        }
        if (this.progTextBaseMC._y >= 0) 
        {
            this.progTextBaseMC._y = 0;
            this.upArrowMC._visible = false;
        }
    }

}

